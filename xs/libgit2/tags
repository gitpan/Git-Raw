!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABS_PATH_MARKER	tests/core/path.c	328;"	d	file:
ABS_PATH_MARKER	tests/core/path.c	330;"	d	file:
AC_VERSION_KHASH_H	src/khash.h	113;"	d
ADDED_IN_MASTER_INDEX_ENTRY	tests/merge/trees/automerge.c	24;"	d	file:
ADDED_IN_MASTER_INDEX_ENTRY	tests/merge/workdir/simple.c	28;"	d	file:
ALL_CRLF_TEXT_AS_CRLF	tests/filter/crlf.h	15;"	d
ALL_CRLF_TEXT_AS_LF	tests/filter/crlf.h	20;"	d
ALL_CRLF_TEXT_RAW	tests/filter/crlf.h	10;"	d
ALL_LF_TEXT_AS_CRLF	tests/filter/crlf.h	16;"	d
ALL_LF_TEXT_AS_LF	tests/filter/crlf.h	21;"	d
ALL_LF_TEXT_RAW	tests/filter/crlf.h	11;"	d
ALTERNATE_MALFORMED_FOLDER1	tests/repo/discover.c	21;"	d	file:
ALTERNATE_MALFORMED_FOLDER2	tests/repo/discover.c	22;"	d	file:
ALTERNATE_MALFORMED_FOLDER3	tests/repo/discover.c	23;"	d	file:
ALTERNATE_NOT_FOUND_FOLDER	tests/repo/discover.c	24;"	d	file:
ANCHOR	deps/regex/regex_internal.h	/^  ANCHOR = EPSILON_BIT | 4,$/;"	e	enum:__anon182
ANOTHER_POEM	tests/stress/diff.c	15;"	d	file:
APPS	examples/Makefile	/^APPS = general showindex diff rev-list cat-file status log rev-parse init blame$/;"	m
ARGS_INFO_INIT	examples/common.h	47;"	d
ARRAY_SIZE	deps/http-parser/http_parser.c	41;"	d	file:
ARRAY_SIZE	src/util.h	13;"	d
ASSEMBLA_REPO_URL	tests/online/clone.c	14;"	d	file:
AUTOMERGEABLE_ANCESTOR_OID	tests/checkout/conflict.c	15;"	d	file:
AUTOMERGEABLE_INDEX_ENTRY	tests/merge/trees/automerge.c	26;"	d	file:
AUTOMERGEABLE_INDEX_ENTRY	tests/merge/workdir/simple.c	31;"	d	file:
AUTOMERGEABLE_MERGED_FILE	tests/checkout/conflict.c	38;"	d	file:
AUTOMERGEABLE_MERGED_FILE	tests/merge/trees/automerge.c	57;"	d	file:
AUTOMERGEABLE_MERGED_FILE	tests/merge/trees/commits.c	11;"	d	file:
AUTOMERGEABLE_MERGED_FILE	tests/merge/workdir/dirty.c	11;"	d	file:
AUTOMERGEABLE_MERGED_FILE	tests/merge/workdir/simple.c	74;"	d	file:
AUTOMERGEABLE_MERGED_FILE_CRLF	tests/merge/trees/automerge.c	68;"	d	file:
AUTOMERGEABLE_MERGED_FILE_CRLF	tests/merge/workdir/simple.c	85;"	d	file:
AUTOMERGEABLE_OURS_OID	tests/checkout/conflict.c	16;"	d	file:
AUTOMERGEABLE_REUC_ENTRY	tests/merge/trees/automerge.c	36;"	d	file:
AUTOMERGEABLE_REUC_ENTRY	tests/merge/workdir/simple.c	53;"	d	file:
AUTOMERGEABLE_THEIRS_OID	tests/checkout/conflict.c	17;"	d	file:
Assert	deps/zlib/zutil.h	249;"	d
Assert	deps/zlib/zutil.h	256;"	d
BACK_SLASH	deps/regex/regex_internal.h	/^  BACK_SLASH$/;"	e	enum:__anon182
BAD	deps/zlib/inflate.h	/^    BAD,        \/* got a data error -- remain here until reset *\/$/;"	e	enum:__anon198
BARE_REPO	tests/object/blob/write.c	10;"	d	file:
BARE_REPOSITORY	tests/repo/init.c	/^	BARE_REPOSITORY = 1$/;"	e	enum:repo_mode	file:
BASE	deps/zlib/adler32.c	14;"	d	file:
BASEDIR	tests/core/mkdir.c	64;"	d	file:
BB_REPO_URL	tests/online/clone.c	11;"	d	file:
BB_REPO_URL_WITH_PASS	tests/online/clone.c	12;"	d	file:
BB_REPO_URL_WITH_WRONG_PASS	tests/online/clone.c	13;"	d	file:
BE	deps/regex/regex_internal.h	131;"	d
BE	deps/regex/regex_internal.h	133;"	d
BIG_STRING_PART	tests/core/zstream.c	69;"	d	file:
BIN_TREE_STORAGE_SIZE	deps/regex/regex_internal.h	504;"	d
BITFLIPPED_AND_REVERSED_DATA_LEN	tests/filter/custom.c	40;"	d	file:
BITFLIP_FILTER_PRIORITY	tests/filter/custom.c	12;"	d	file:
BITS	deps/zlib/inflate.c	485;"	d	file:
BITSET_WORDS	deps/regex/regex_internal.h	186;"	d
BITSET_WORD_BITS	deps/regex/regex_internal.h	184;"	d
BITSET_WORD_MAX	deps/regex/regex_internal.h	181;"	d
BIT_AT	deps/http-parser/http_parser.c	45;"	d	file:
BL_CODES	deps/zlib/deflate.h	42;"	d
BRACKET_NAME_BUF_SIZE	deps/regex/regcomp.c	2586;"	d	file:
BRANCH_RENAME_OURS	tests/merge/trees/renames.c	13;"	d	file:
BRANCH_RENAME_OURS	tests/merge/workdir/renames.c	14;"	d	file:
BRANCH_RENAME_THEIRS	tests/merge/trees/renames.c	14;"	d	file:
BRANCH_RENAME_THEIRS	tests/merge/workdir/renames.c	15;"	d	file:
BUFERR_MEM	src/filebuf.c	/^	BUFERR_MEM$/;"	e	enum:buferr_t	file:
BUFERR_OK	src/filebuf.c	/^	BUFERR_OK = 0,$/;"	e	enum:buferr_t	file:
BUFERR_WRITE	src/filebuf.c	/^	BUFERR_WRITE,$/;"	e	enum:buferr_t	file:
BUFERR_ZLIB	src/filebuf.c	/^	BUFERR_ZLIB,$/;"	e	enum:buferr_t	file:
BUFFER_SIZE	src/blob.c	269;"	d	file:
BUF_FIRST	deps/regex/regex_internal.h	/^  BUF_FIRST = PREV_BEGBUF_CONSTRAINT,$/;"	e	enum:__anon180
BUF_LAST	deps/regex/regex_internal.h	/^  BUF_LAST = NEXT_ENDBUF_CONSTRAINT,$/;"	e	enum:__anon180
BUILDFIXED	deps/zlib/inflate.c	90;"	d	file:
BUILD_CHARCLASS_LOOP	deps/regex/regcomp.c	3529;"	d	file:
BUSY_STATE	deps/zlib/deflate.h	56;"	d
BYFOUR	deps/zlib/crc32.c	37;"	d	file:
BYFOUR	deps/zlib/crc32.c	47;"	d	file:
BYTEBITS	deps/zlib/inflate.c	496;"	d	file:
Buf_size	deps/zlib/trees.c	77;"	d	file:
Byte	deps/zlib/zconf.h	/^typedef unsigned char  Byte;  \/* 8 bits *\/$/;"	t
Bytef	deps/zlib/zconf.h	/^typedef Byte  FAR Bytef;$/;"	t
C	examples/blame.c	/^	int C;$/;"	m	struct:opts	file:
CACHED_POST_BODY_BUF_SIZE	src/transports/winhttp.c	32;"	d	file:
CALLBACK_DATA	deps/http-parser/http_parser.c	104;"	d	file:
CALLBACK_DATA_	deps/http-parser/http_parser.c	84;"	d	file:
CALLBACK_DATA_NOADVANCE	deps/http-parser/http_parser.c	108;"	d	file:
CALLBACK_NOTIFY	deps/http-parser/http_parser.c	78;"	d	file:
CALLBACK_NOTIFY_	deps/http-parser/http_parser.c	61;"	d	file:
CALLBACK_NOTIFY_NOADVANCE	deps/http-parser/http_parser.c	81;"	d	file:
CANCEL_VALUE	tests/attr/repo.c	132;"	d	file:
CANCEL_VALUE	tests/core/path.c	357;"	d	file:
CASESELECT	src/util.h	93;"	d
CC	examples/Makefile	/^CC = gcc$/;"	m
CC	examples/network/Makefile	/^CC = gcc$/;"	m
CFLAGS	examples/Makefile	/^CFLAGS = -g -I..\/include -I..\/src -Wall -Wextra -Wmissing-prototypes -Wno-missing-field-initializers$/;"	m
CHANGED_IN_BRANCH_FILE	tests/merge/workdir/dirty.c	22;"	d	file:
CHANGED_IN_BRANCH_INDEX_ENTRY	tests/merge/trees/automerge.c	28;"	d	file:
CHANGED_IN_BRANCH_INDEX_ENTRY	tests/merge/workdir/simple.c	34;"	d	file:
CHANGED_IN_MASTER_INDEX_ENTRY	tests/merge/trees/automerge.c	30;"	d	file:
CHANGED_IN_MASTER_INDEX_ENTRY	tests/merge/workdir/simple.c	37;"	d	file:
CHARACTER	deps/regex/regex_internal.h	/^  CHARACTER = 1,$/;"	e	enum:__anon182
CHAR_CLASS	deps/regex/regex_internal.h	/^  CHAR_CLASS$/;"	e	enum:__anon191
CHECK	deps/zlib/inflate.h	/^    CHECK,      \/* i: waiting for 32-bit check value *\/$/;"	e	enum:__anon198
CHECKOUT_ACTION_IF	src/checkout.c	190;"	d	file:
CHECKOUT_ACTION__CONFLICT	src/checkout.c	/^	CHECKOUT_ACTION__CONFLICT = 8,$/;"	e	enum:__anon120	file:
CHECKOUT_ACTION__DEFER_REMOVE	src/checkout.c	/^	CHECKOUT_ACTION__DEFER_REMOVE = 32,$/;"	e	enum:__anon120	file:
CHECKOUT_ACTION__MAX	src/checkout.c	/^	CHECKOUT_ACTION__MAX = 16,$/;"	e	enum:__anon120	file:
CHECKOUT_ACTION__NONE	src/checkout.c	/^	CHECKOUT_ACTION__NONE = 0,$/;"	e	enum:__anon120	file:
CHECKOUT_ACTION__REMOVE	src/checkout.c	/^	CHECKOUT_ACTION__REMOVE = 1,$/;"	e	enum:__anon120	file:
CHECKOUT_ACTION__REMOVE_AND_UPDATE	src/checkout.c	/^	CHECKOUT_ACTION__REMOVE_AND_UPDATE =$/;"	e	enum:__anon120	file:
CHECKOUT_ACTION__UPDATE_BLOB	src/checkout.c	/^	CHECKOUT_ACTION__UPDATE_BLOB = 2,$/;"	e	enum:__anon120	file:
CHECKOUT_ACTION__UPDATE_CONFLICT	src/checkout.c	/^	CHECKOUT_ACTION__UPDATE_CONFLICT = 16,$/;"	e	enum:__anon120	file:
CHECKOUT_ACTION__UPDATE_SUBMODULE	src/checkout.c	/^	CHECKOUT_ACTION__UPDATE_SUBMODULE = 4,$/;"	e	enum:__anon120	file:
CHUNKED	deps/http-parser/http_parser.c	125;"	d	file:
CHUNK_SIZE	src/transports/http.c	30;"	d	file:
CLEAR_FOR_CORE_FILEMODE	tests/repo/init.c	370;"	d	file:
CLEAR_HASH	deps/zlib/deflate.c	193;"	d	file:
CLOSE	deps/http-parser/http_parser.c	127;"	d	file:
CL_COMMIT_EMAIL	tests/clar_libgit2.c	347;"	d	file:
CL_COMMIT_MSG	tests/clar_libgit2.c	348;"	d	file:
CL_COMMIT_NAME	tests/clar_libgit2.c	346;"	d	file:
CMP	src/xdiff/xhistogram.c	104;"	d	file:
CMP_ENV	src/xdiff/xhistogram.c	101;"	d	file:
CNG	src/hash/hash_win32.h	/^	CNG$/;"	e	enum:hash_win32_prov_type
CNT	src/xdiff/xhistogram.c	87;"	d	file:
CODELENS	deps/zlib/inflate.h	/^        CODELENS,   \/* i: waiting for length\/lit and distance code lengths *\/$/;"	e	enum:__anon198
CODES	deps/zlib/inftrees.h	/^    CODES,$/;"	e	enum:__anon201
COLL_ELEM_LEN_MAX	deps/regex/regex_internal.h	143;"	d
COLL_SYM	deps/regex/regex_internal.h	/^  COLL_SYM,$/;"	e	enum:__anon191
COMMENT	deps/zlib/inflate.h	/^    COMMENT,    \/* i: waiting for end of comment (gzip) *\/$/;"	e	enum:__anon198
COMMENT_STATE	deps/zlib/deflate.h	54;"	d
COMMIT_ALLOC	src/commit_list.h	18;"	d
COMPLEX_BRACKET	deps/regex/regex_internal.h	/^  COMPLEX_BRACKET = 6,$/;"	e	enum:__anon182
COMPRESS_BUFLEN	src/pack-objects.c	65;"	d	file:
CONCAT	deps/regex/regex_internal.h	/^  CONCAT = 16,$/;"	e	enum:__anon182
CONFLICTING_ANCESTOR_OID	tests/checkout/conflict.c	11;"	d	file:
CONFLICTING_DIFF3_FILE	tests/checkout/conflict.c	31;"	d	file:
CONFLICTING_DIFF3_FILE	tests/merge/workdir/simple.c	103;"	d	file:
CONFLICTING_MERGE_FILE	tests/merge/workdir/simple.c	96;"	d	file:
CONFLICTING_OURS_FILE	tests/checkout/conflict.c	27;"	d	file:
CONFLICTING_OURS_OID	tests/checkout/conflict.c	12;"	d	file:
CONFLICTING_REUC_ENTRY	tests/merge/trees/automerge.c	41;"	d	file:
CONFLICTING_REUC_ENTRY	tests/merge/workdir/simple.c	58;"	d	file:
CONFLICTING_THEIRS_FILE	tests/checkout/conflict.c	29;"	d	file:
CONFLICTING_THEIRS_OID	tests/checkout/conflict.c	13;"	d	file:
CONFLICTING_UNION_FILE	tests/merge/workdir/simple.c	112;"	d	file:
CONFLICTS_ONE_ANCESTOR_OID	tests/index/conflicts.c	11;"	d	file:
CONFLICTS_ONE_OUR_OID	tests/index/conflicts.c	12;"	d	file:
CONFLICTS_ONE_THEIR_OID	tests/index/conflicts.c	13;"	d	file:
CONFLICTS_TWO_ANCESTOR_OID	tests/index/conflicts.c	15;"	d	file:
CONFLICTS_TWO_OUR_OID	tests/index/conflicts.c	16;"	d	file:
CONFLICTS_TWO_THEIR_OID	tests/index/conflicts.c	17;"	d	file:
CONNECTION	deps/http-parser/http_parser.c	121;"	d	file:
CONTENT	tests/attr/repo.c	266;"	d	file:
CONTENT_LENGTH	deps/http-parser/http_parser.c	122;"	d	file:
CONTEXT_BEGBUF	deps/regex/regex_internal.h	516;"	d
CONTEXT_ENDBUF	deps/regex/regex_internal.h	517;"	d
CONTEXT_NEWLINE	deps/regex/regex_internal.h	515;"	d
CONTEXT_WORD	deps/regex/regex_internal.h	514;"	d
COPY	deps/zlib/inflate.h	/^        COPY,       \/* i\/o: waiting for input or output to copy stored block *\/$/;"	e	enum:__anon198
COPY_	deps/zlib/inflate.h	/^        COPY_,      \/* i\/o: same as COPY below, but only first time in *\/$/;"	e	enum:__anon198
CR	deps/http-parser/http_parser.c	356;"	d	file:
CRC2	deps/zlib/inflate.c	420;"	d	file:
CRC4	deps/zlib/inflate.c	427;"	d	file:
CRLF_NUM_TEST_OBJECTS	tests/object/blob/filter.c	8;"	d	file:
CRYPTOAPI	src/hash/hash_win32.h	/^	CRYPTOAPI,$/;"	e	enum:hash_win32_prov_type
CVAR_LIST_APPEND	src/config_file.c	49;"	d	file:
CVAR_LIST_EMPTY	src/config_file.c	47;"	d	file:
CVAR_LIST_FOREACH	src/config_file.c	66;"	d	file:
CVAR_LIST_FOREACH_SAFE	src/config_file.c	74;"	d	file:
CVAR_LIST_HEAD	src/config_file.c	41;"	d	file:
CVAR_LIST_NEXT	src/config_file.c	45;"	d	file:
CVAR_LIST_REMOVE_AFTER	src/config_file.c	62;"	d	file:
CVAR_LIST_REMOVE_HEAD	src/config_file.c	58;"	d	file:
CVAR_LIST_TAIL	src/config_file.c	43;"	d	file:
CallbacksTemplate	tests/generate.py	/^    class CallbacksTemplate(Template):$/;"	c	class:Module
Code	deps/zlib/deflate.h	74;"	d
DATE_ISO8601	src/date.c	/^	DATE_ISO8601,$/;"	e	enum:__anon104	file:
DATE_LOCAL	src/date.c	/^	DATE_LOCAL,$/;"	e	enum:__anon104	file:
DATE_NORMAL	src/date.c	/^	DATE_NORMAL = 0,$/;"	e	enum:__anon104	file:
DATE_RAW	src/date.c	/^	DATE_RAW$/;"	e	enum:__anon104	file:
DATE_RELATIVE	src/date.c	/^	DATE_RELATIVE,$/;"	e	enum:__anon104	file:
DATE_RFC2822	src/date.c	/^	DATE_RFC2822,$/;"	e	enum:__anon104	file:
DATE_SHORT	src/date.c	/^	DATE_SHORT,$/;"	e	enum:__anon104	file:
DEFAULT_BREAK_REWRITE_THRESHOLD	src/diff_tform.c	267;"	d	file:
DEFAULT_CONFLICT_MARKER_SIZE	src/xdiff/xdiff.h	126;"	d
DEFAULT_MAPPED_LIMIT	src/mwindow.c	20;"	d	file:
DEFAULT_NESTING_LEVEL	src/refdb_fs.c	30;"	d	file:
DEFAULT_NESTING_LEVEL	src/refs.c	28;"	d	file:
DEFAULT_RENAME_LIMIT	src/diff_tform.c	268;"	d	file:
DEFAULT_THRESHOLD	src/diff_tform.c	266;"	d	file:
DEFAULT_TREE_SIZE	src/tree.c	17;"	d	file:
DEFAULT_WINDOW_SIZE	src/mwindow.c	15;"	d	file:
DEFLATE_H	deps/zlib/deflate.h	14;"	d
DEF_MEM_LEVEL	deps/zlib/zutil.h	60;"	d
DEF_MEM_LEVEL	deps/zlib/zutil.h	62;"	d
DEF_WBITS	deps/zlib/zutil.h	55;"	d
DF_SIDE1_BRANCH	tests/merge/trees/modeconflict.c	13;"	d	file:
DF_SIDE2_BRANCH	tests/merge/trees/modeconflict.c	14;"	d	file:
DICT	deps/zlib/inflate.h	/^    DICT,       \/* waiting for inflateSetDictionary() call *\/$/;"	e	enum:__anon198
DICTID	deps/zlib/inflate.h	/^    DICTID,     \/* i: waiting for dictionary check value *\/$/;"	e	enum:__anon198
DIFF_DRIVER_AUTO	src/diff_driver.c	/^	DIFF_DRIVER_AUTO = 0,$/;"	e	enum:__anon39	file:
DIFF_DRIVER_BINARY	src/diff_driver.c	/^	DIFF_DRIVER_BINARY = 1,$/;"	e	enum:__anon39	file:
DIFF_DRIVER_PATTERNLIST	src/diff_driver.c	/^	DIFF_DRIVER_PATTERNLIST = 3,$/;"	e	enum:__anon39	file:
DIFF_DRIVER_TEXT	src/diff_driver.c	/^	DIFF_DRIVER_TEXT = 2,$/;"	e	enum:__anon39	file:
DIFF_FLAGS_KNOWN_BINARY	src/diff.h	33;"	d
DIFF_FLAGS_NOT_BINARY	src/diff.h	34;"	d
DIFF_FLAG_ISNT_SET	src/diff.c	19;"	d	file:
DIFF_FLAG_IS_SET	src/diff.c	18;"	d	file:
DIFF_FLAG_SET	src/diff.c	20;"	d	file:
DIFF_FROM_ITERATORS	src/diff.c	1118;"	d	file:
DIFF_MAX_FILESIZE	src/diff_file.c	16;"	d	file:
DIFF_NEW_PREFIX_DEFAULT	src/diff.h	22;"	d
DIFF_OLD_PREFIX_DEFAULT	src/diff.h	21;"	d
DIFF_OPTS	tests/diff/tree.c	91;"	d	file:
DIR	src/win32/dir.h	34;"	d
DISCOVER_FOLDER	tests/repo/discover.c	8;"	d	file:
DIST	deps/zlib/inflate.h	/^            DIST,       \/* i: waiting for distance code *\/$/;"	e	enum:__anon198
DISTEXT	deps/zlib/inflate.h	/^            DISTEXT,    \/* i: waiting for distance extra bits *\/$/;"	e	enum:__anon198
DISTS	deps/zlib/inftrees.h	/^    DISTS$/;"	e	enum:__anon201
DIST_CODE_LEN	deps/zlib/trees.c	86;"	d	file:
DO1	deps/zlib/adler32.c	18;"	d	file:
DO1	deps/zlib/crc32.c	217;"	d	file:
DO16	deps/zlib/adler32.c	22;"	d	file:
DO2	deps/zlib/adler32.c	19;"	d	file:
DO4	deps/zlib/adler32.c	20;"	d	file:
DO8	deps/zlib/adler32.c	21;"	d	file:
DO8	deps/zlib/crc32.c	218;"	d	file:
DOBIG32	deps/zlib/crc32.c	301;"	d	file:
DOBIG4	deps/zlib/crc32.c	298;"	d	file:
DOLIT32	deps/zlib/crc32.c	261;"	d	file:
DOLIT4	deps/zlib/crc32.c	258;"	d	file:
DONE	deps/zlib/inflate.h	/^    DONE,       \/* finished check, done -- remain here until reset *\/$/;"	e	enum:__anon198
DOT_GIT	src/repository.h	25;"	d
DO_LOCAL_TEST	tests/fetchhead/nonetwork.c	8;"	d	file:
DROPBITS	deps/zlib/inflate.c	489;"	d	file:
DYNAMIC_CRC_TABLE	deps/zlib/crc32.c	25;"	d	file:
DYN_TREES	deps/zlib/zutil.h	68;"	d
D_CODES	deps/zlib/deflate.h	39;"	d
Dad	deps/zlib/deflate.h	75;"	d
DeclarationTemplate	tests/generate.py	/^    class DeclarationTemplate(Template):$/;"	c	class:Module
EAFNOSUPPORT	src/win32/posix.h	19;"	d
ELEM_AT	deps/http-parser/http_parser.c	51;"	d	file:
ELSEWHERE	tests/object/blob/write.c	11;"	d	file:
EMPTY_TREE	tests/stash/save.c	341;"	d	file:
END_BLOCK	deps/zlib/trees.c	50;"	d	file:
END_OF_RE	deps/regex/regex_internal.h	/^  END_OF_RE = 2,$/;"	e	enum:__anon182
ENOUGH	deps/zlib/inftrees.h	51;"	d
ENOUGH_DISTS	deps/zlib/inftrees.h	50;"	d
ENOUGH_LENS	deps/zlib/inftrees.h	49;"	d
ENSURE_BUF_OK	src/filebuf.c	20;"	d	file:
ENSURE_SIZE	src/buffer.c	19;"	d	file:
EOS	src/fnmatch.c	19;"	d	file:
EPSILON_BIT	deps/regex/regex_internal.h	250;"	d
EQUAL	deps/zlib/deflate.c	151;"	d	file:
EQUIV_CLASS	deps/regex/regex_internal.h	/^  EQUIV_CLASS,$/;"	e	enum:__anon191
ERROR_MSG	src/reset.c	18;"	d	file:
ERR_MSG	deps/zlib/zutil.h	46;"	d
ERR_RETURN	deps/zlib/zutil.h	48;"	d
EXLEN	deps/zlib/inflate.h	/^    EXLEN,      \/* i: waiting for extra length (gzip) *\/$/;"	e	enum:__anon198
EXPECTATIONS_COUNT	tests/notes/notes.c	52;"	d	file:
EXPECTED_HEADER	tests/diff/patch.c	19;"	d	file:
EXPECTED_HUNK	tests/diff/patch.c	25;"	d	file:
EXPECT_FALSE	tests/attr/attr_expect.h	/^	EXPECT_FALSE,$/;"	e	enum:attr_expect_t
EXPECT_STATUS_ADM	tests/diff/tree.c	125;"	d	file:
EXPECT_STRING	tests/attr/attr_expect.h	/^	EXPECT_STRING$/;"	e	enum:attr_expect_t
EXPECT_TRUE	tests/attr/attr_expect.h	/^	EXPECT_TRUE,$/;"	e	enum:attr_expect_t
EXPECT_UNDEFINED	tests/attr/attr_expect.h	/^	EXPECT_UNDEFINED,$/;"	e	enum:attr_expect_t
EXTRA	deps/zlib/inflate.h	/^    EXTRA,      \/* i: waiting for extra bytes (gzip) *\/$/;"	e	enum:__anon198
EXTRA_STATE	deps/zlib/deflate.h	52;"	d
F	examples/blame.c	/^	int F;$/;"	m	struct:opts	file:
FAR	deps/zlib/zconf.h	33;"	d
FETCH_HEAD_EXPLICIT_DATA	tests/fetchhead/fetchhead_data.h	29;"	d
FETCH_HEAD_NO_MERGE_DATA	tests/fetchhead/fetchhead_data.h	19;"	d
FETCH_HEAD_WILDCARD_DATA	tests/fetchhead/fetchhead_data.h	10;"	d
FETCH_HEAD_WILDCARD_DATA_LOCAL	tests/fetchhead/fetchhead_data.h	2;"	d
FIELD	src/transports/http.c	/^	FIELD,$/;"	e	enum:last_cb	file:
FILE_CONTENTS_CRLF	tests/index/crlf.c	9;"	d	file:
FILE_CONTENTS_LF	tests/index/crlf.c	8;"	d	file:
FILE_OID_CRLF	tests/index/crlf.c	12;"	d	file:
FILE_OID_LF	tests/index/crlf.c	11;"	d	file:
FILE_WITHOUT_BRACKET	tests/status/worktree_init.c	133;"	d	file:
FILE_WITH_BRACKET	tests/status/worktree_init.c	132;"	d	file:
FILE_WITH_SPACE	tests/status/worktree_init.c	213;"	d	file:
FINISH_STATE	deps/zlib/deflate.h	57;"	d
FLAGS	deps/zlib/inflate.h	/^    FLAGS,      \/* i: waiting for method and flags (gzip) *\/$/;"	e	enum:__anon198
FLAG_SET	src/diff_tform.c	1126;"	d	file:
FLAG_SET	src/diff_tform.c	547;"	d	file:
FLUSH_BLOCK	deps/zlib/deflate.c	1448;"	d	file:
FLUSH_BLOCK_ONLY	deps/zlib/deflate.c	1436;"	d	file:
FNM_CASEFOLD	src/fnmatch.h	20;"	d
FNM_FILE_NAME	src/fnmatch.h	23;"	d
FNM_IGNORECASE	src/fnmatch.h	22;"	d
FNM_LEADING_DIR	src/fnmatch.h	19;"	d
FNM_NOESCAPE	src/fnmatch.h	16;"	d
FNM_NOMATCH	src/fnmatch.h	12;"	d
FNM_NORES	src/fnmatch.h	14;"	d
FNM_NOSYS	src/fnmatch.h	13;"	d
FNM_PATHNAME	src/fnmatch.h	17;"	d
FNM_PERIOD	src/fnmatch.h	18;"	d
FORCE_DIFFABLE	src/diff_driver.c	54;"	d	file:
FORMAT_DEFAULT	examples/status.c	/^	FORMAT_DEFAULT   = 0,$/;"	e	enum:__anon1	file:
FORMAT_LONG	examples/status.c	/^	FORMAT_LONG      = 1,$/;"	e	enum:__anon1	file:
FORMAT_PORCELAIN	examples/status.c	/^	FORMAT_PORCELAIN = 3,$/;"	e	enum:__anon1	file:
FORMAT_SHORT	examples/status.c	/^	FORMAT_SHORT     = 2,$/;"	e	enum:__anon1	file:
FREE_AND_NULL	tests/network/urlparse.c	15;"	d	file:
FS_MAX_DEPTH	src/iterator.c	904;"	d	file:
FUTILS_MAX_DEPTH	src/fileops.c	409;"	d	file:
F_CHUNKED	deps/http-parser/http_parser.h	/^  { F_CHUNKED               = 1 << 0$/;"	e	enum:flags
F_CONNECTION_CLOSE	deps/http-parser/http_parser.h	/^  , F_CONNECTION_CLOSE      = 1 << 2$/;"	e	enum:flags
F_CONNECTION_KEEP_ALIVE	deps/http-parser/http_parser.h	/^  , F_CONNECTION_KEEP_ALIVE = 1 << 1$/;"	e	enum:flags
F_OK	src/win32/msvc-compat.h	13;"	d
F_OPEN	deps/zlib/zutil.h	100;"	d
F_OPEN	deps/zlib/zutil.h	175;"	d
F_SKIPBODY	deps/http-parser/http_parser.h	/^  , F_SKIPBODY              = 1 << 5$/;"	e	enum:flags
F_TRAILING	deps/http-parser/http_parser.h	/^  , F_TRAILING              = 1 << 3$/;"	e	enum:flags
F_UPGRADE	deps/http-parser/http_parser.h	/^  , F_UPGRADE               = 1 << 4$/;"	e	enum:flags
Freq	deps/zlib/deflate.h	73;"	d
GAWK	deps/regex/config.h	4;"	d
GET_ALL_ERRORS	src/config.c	/^	GET_ALL_ERRORS = 0,$/;"	e	enum:__anon95	file:
GET_NO_ERRORS	src/config.c	/^	GET_NO_ERRORS  = 2$/;"	e	enum:__anon95	file:
GET_NO_MISSING	src/config.c	/^	GET_NO_MISSING = 1,$/;"	e	enum:__anon95	file:
GF2_DIM	deps/zlib/crc32.c	341;"	d	file:
GITATTR	tests/attr/repo.c	271;"	d	file:
GITATTR	tests/object/blob/fromchunks.c	84;"	d	file:
GITERR_CALLBACK	include/git2/errors.h	/^	GITERR_CALLBACK,$/;"	e	enum:__anon227
GITERR_CHECKOUT	include/git2/errors.h	/^	GITERR_CHECKOUT,$/;"	e	enum:__anon227
GITERR_CHECK_ALLOC	src/common.h	66;"	d
GITERR_CHECK_ARRAY	src/array.h	39;"	d
GITERR_CHECK_ERROR	src/common.h	71;"	d
GITERR_CHECK_VERSION	src/common.h	159;"	d
GITERR_CONFIG	include/git2/errors.h	/^	GITERR_CONFIG,$/;"	e	enum:__anon227
GITERR_FETCHHEAD	include/git2/errors.h	/^	GITERR_FETCHHEAD,$/;"	e	enum:__anon227
GITERR_FILTER	include/git2/errors.h	/^	GITERR_FILTER,$/;"	e	enum:__anon227
GITERR_INDEX	include/git2/errors.h	/^	GITERR_INDEX,$/;"	e	enum:__anon227
GITERR_INDEXER	include/git2/errors.h	/^	GITERR_INDEXER,$/;"	e	enum:__anon227
GITERR_INVALID	include/git2/errors.h	/^	GITERR_INVALID,$/;"	e	enum:__anon227
GITERR_MERGE	include/git2/errors.h	/^	GITERR_MERGE,$/;"	e	enum:__anon227
GITERR_NET	include/git2/errors.h	/^	GITERR_NET,$/;"	e	enum:__anon227
GITERR_NOMEMORY	include/git2/errors.h	/^	GITERR_NOMEMORY,$/;"	e	enum:__anon227
GITERR_NONE	include/git2/errors.h	/^	GITERR_NONE = 0,$/;"	e	enum:__anon227
GITERR_OBJECT	include/git2/errors.h	/^	GITERR_OBJECT,$/;"	e	enum:__anon227
GITERR_ODB	include/git2/errors.h	/^	GITERR_ODB,$/;"	e	enum:__anon227
GITERR_OS	include/git2/errors.h	/^	GITERR_OS,$/;"	e	enum:__anon227
GITERR_REFERENCE	include/git2/errors.h	/^	GITERR_REFERENCE,$/;"	e	enum:__anon227
GITERR_REGEX	include/git2/errors.h	/^	GITERR_REGEX,$/;"	e	enum:__anon227
GITERR_REPOSITORY	include/git2/errors.h	/^	GITERR_REPOSITORY,$/;"	e	enum:__anon227
GITERR_REVERT	include/git2/errors.h	/^	GITERR_REVERT,$/;"	e	enum:__anon227
GITERR_SSH	include/git2/errors.h	/^	GITERR_SSH,$/;"	e	enum:__anon227
GITERR_SSL	include/git2/errors.h	/^	GITERR_SSL,$/;"	e	enum:__anon227
GITERR_STASH	include/git2/errors.h	/^	GITERR_STASH,$/;"	e	enum:__anon227
GITERR_SUBMODULE	include/git2/errors.h	/^	GITERR_SUBMODULE,$/;"	e	enum:__anon227
GITERR_TAG	include/git2/errors.h	/^	GITERR_TAG,$/;"	e	enum:__anon227
GITERR_THREAD	include/git2/errors.h	/^	GITERR_THREAD,$/;"	e	enum:__anon227
GITERR_TREE	include/git2/errors.h	/^	GITERR_TREE,$/;"	e	enum:__anon227
GITERR_ZLIB	include/git2/errors.h	/^	GITERR_ZLIB,$/;"	e	enum:__anon227
GITNO_CONNECT_SSL	src/netops.h	/^	GITNO_CONNECT_SSL = 1,$/;"	e	enum:__anon42
GITNO_CONNECT_SSL_NO_CHECK_CERT	src/netops.h	/^	GITNO_CONNECT_SSL_NO_CHECK_CERT = 2,$/;"	e	enum:__anon42
GIT_ABBREV_DEFAULT	src/repository.h	/^	GIT_ABBREV_DEFAULT = 7,$/;"	e	enum:__anon53
GIT_ACK_COMMON	src/transports/smart.h	/^	GIT_ACK_COMMON,$/;"	e	enum:git_ack_status
GIT_ACK_CONTINUE	src/transports/smart.h	/^	GIT_ACK_CONTINUE,$/;"	e	enum:git_ack_status
GIT_ACK_NONE	src/transports/smart.h	/^	GIT_ACK_NONE,$/;"	e	enum:git_ack_status
GIT_ACK_READY	src/transports/smart.h	/^	GIT_ACK_READY$/;"	e	enum:git_ack_status
GIT_ALTERNATES_FILE	src/odb.c	22;"	d	file:
GIT_ALTERNATES_MAX_DEPTH	src/odb.c	28;"	d	file:
GIT_ARRAY_INIT	src/array.h	28;"	d
GIT_ATTR_CHECK_FILE_THEN_INDEX	include/git2/attr.h	114;"	d
GIT_ATTR_CHECK_INDEX_ONLY	include/git2/attr.h	116;"	d
GIT_ATTR_CHECK_INDEX_THEN_FILE	include/git2/attr.h	115;"	d
GIT_ATTR_CHECK_NO_SYSTEM	include/git2/attr.h	125;"	d
GIT_ATTR_CONFIG	src/attr.h	12;"	d
GIT_ATTR_FALSE	include/git2/attr.h	47;"	d
GIT_ATTR_FALSE_T	include/git2/attr.h	/^	GIT_ATTR_FALSE_T,$/;"	e	enum:__anon215
GIT_ATTR_FILE	src/attr_file.h	17;"	d
GIT_ATTR_FILE_FROM_FILE	src/attr_file.h	/^	GIT_ATTR_FILE_FROM_FILE = 0,$/;"	e	enum:__anon136
GIT_ATTR_FILE_FROM_INDEX	src/attr_file.h	/^	GIT_ATTR_FILE_FROM_INDEX = 1$/;"	e	enum:__anon136
GIT_ATTR_FILE_INREPO	src/attr_file.h	18;"	d
GIT_ATTR_FILE_SYSTEM	src/attr_file.h	19;"	d
GIT_ATTR_FILE_XDG	src/attr_file.h	20;"	d
GIT_ATTR_FNMATCH_ALLOWMACRO	src/attr_file.h	32;"	d
GIT_ATTR_FNMATCH_ALLOWNEG	src/attr_file.h	31;"	d
GIT_ATTR_FNMATCH_ALLOWSPACE	src/attr_file.h	28;"	d
GIT_ATTR_FNMATCH_DIRECTORY	src/attr_file.h	23;"	d
GIT_ATTR_FNMATCH_FULLPATH	src/attr_file.h	24;"	d
GIT_ATTR_FNMATCH_HASWILD	src/attr_file.h	27;"	d
GIT_ATTR_FNMATCH_ICASE	src/attr_file.h	29;"	d
GIT_ATTR_FNMATCH_IGNORE	src/attr_file.h	26;"	d
GIT_ATTR_FNMATCH_MACRO	src/attr_file.h	25;"	d
GIT_ATTR_FNMATCH_MATCH_ALL	src/attr_file.h	30;"	d
GIT_ATTR_FNMATCH_NEGATIVE	src/attr_file.h	22;"	d
GIT_ATTR_FNMATCH__INCOMING	src/attr_file.h	34;"	d
GIT_ATTR_HAS_VALUE	include/git2/attr.h	77;"	d
GIT_ATTR_TRUE	include/git2/attr.h	33;"	d
GIT_ATTR_TRUE_T	include/git2/attr.h	/^	GIT_ATTR_TRUE_T,$/;"	e	enum:__anon215
GIT_ATTR_UNSPECIFIED	include/git2/attr.h	65;"	d
GIT_ATTR_UNSPECIFIED_T	include/git2/attr.h	/^	GIT_ATTR_UNSPECIFIED_T = 0,$/;"	e	enum:__anon215
GIT_ATTR_VALUE_T	include/git2/attr.h	/^	GIT_ATTR_VALUE_T,$/;"	e	enum:__anon215
GIT_AUTO_CRLF_DEFAULT	src/repository.h	/^	GIT_AUTO_CRLF_DEFAULT = GIT_AUTO_CRLF_FALSE,$/;"	e	enum:__anon53
GIT_AUTO_CRLF_FALSE	src/repository.h	/^	GIT_AUTO_CRLF_FALSE = 0,$/;"	e	enum:__anon53
GIT_AUTO_CRLF_INPUT	src/repository.h	/^	GIT_AUTO_CRLF_INPUT = 2,$/;"	e	enum:__anon53
GIT_AUTO_CRLF_TRUE	src/repository.h	/^	GIT_AUTO_CRLF_TRUE = 1,$/;"	e	enum:__anon53
GIT_BARE_DIR_MODE	src/repository.h	28;"	d
GIT_BEGIN_DECL	include/git2/common.h	20;"	d
GIT_BEGIN_DECL	include/git2/common.h	24;"	d
GIT_BISECT_LOG_FILE	src/refs.h	39;"	d
GIT_BITVEC_MASK	src/bitvec.h	41;"	d
GIT_BITVEC_WORD	src/bitvec.h	42;"	d
GIT_BLAME_FIRST_PARENT	include/git2/blame.h	/^	GIT_BLAME_FIRST_PARENT = (1<<4),$/;"	e	enum:__anon232
GIT_BLAME_NORMAL	include/git2/blame.h	/^	GIT_BLAME_NORMAL = 0,$/;"	e	enum:__anon232
GIT_BLAME_OPTIONS_INIT	include/git2/blame.h	83;"	d
GIT_BLAME_OPTIONS_VERSION	include/git2/blame.h	82;"	d
GIT_BLAME_TRACK_COPIES_ANY_COMMIT_COPIES	include/git2/blame.h	/^	GIT_BLAME_TRACK_COPIES_ANY_COMMIT_COPIES = (1<<3),$/;"	e	enum:__anon232
GIT_BLAME_TRACK_COPIES_SAME_COMMIT_COPIES	include/git2/blame.h	/^	GIT_BLAME_TRACK_COPIES_SAME_COMMIT_COPIES = (1<<2),$/;"	e	enum:__anon232
GIT_BLAME_TRACK_COPIES_SAME_COMMIT_MOVES	include/git2/blame.h	/^	GIT_BLAME_TRACK_COPIES_SAME_COMMIT_MOVES = (1<<1),$/;"	e	enum:__anon232
GIT_BLAME_TRACK_COPIES_SAME_FILE	include/git2/blame.h	/^	GIT_BLAME_TRACK_COPIES_SAME_FILE = (1<<0),$/;"	e	enum:__anon232
GIT_BOM_NONE	src/buf_text.h	/^	GIT_BOM_NONE = 0,$/;"	e	enum:__anon138
GIT_BOM_UTF16_BE	src/buf_text.h	/^	GIT_BOM_UTF16_BE = 3,$/;"	e	enum:__anon138
GIT_BOM_UTF16_LE	src/buf_text.h	/^	GIT_BOM_UTF16_LE = 2,$/;"	e	enum:__anon138
GIT_BOM_UTF32_BE	src/buf_text.h	/^	GIT_BOM_UTF32_BE = 5$/;"	e	enum:__anon138
GIT_BOM_UTF32_LE	src/buf_text.h	/^	GIT_BOM_UTF32_LE = 4,$/;"	e	enum:__anon138
GIT_BOM_UTF8	src/buf_text.h	/^	GIT_BOM_UTF8 = 1,$/;"	e	enum:__anon138
GIT_BRANCH_LOCAL	include/git2/types.h	/^	GIT_BRANCH_LOCAL = 1,$/;"	e	enum:__anon237
GIT_BRANCH_MASTER	src/repository.c	32;"	d	file:
GIT_BRANCH_REMOTE	include/git2/types.h	/^	GIT_BRANCH_REMOTE = 2,$/;"	e	enum:__anon237
GIT_BUF_INIT	src/buffer.h	24;"	d
GIT_BUF_INIT_CONST	include/git2/buffer.h	60;"	d
GIT_CACHE_STORE_ANY	src/cache.h	/^	GIT_CACHE_STORE_ANY = 0,$/;"	e	enum:__anon89
GIT_CACHE_STORE_PARSED	src/cache.h	/^	GIT_CACHE_STORE_PARSED = 2$/;"	e	enum:__anon89
GIT_CACHE_STORE_RAW	src/cache.h	/^	GIT_CACHE_STORE_RAW = 1,$/;"	e	enum:__anon89
GIT_CAP_DELETE_REFS	src/transports/smart.h	23;"	d
GIT_CAP_INCLUDE_TAG	src/transports/smart.h	22;"	d
GIT_CAP_MULTI_ACK	src/transports/smart.h	18;"	d
GIT_CAP_MULTI_ACK_DETAILED	src/transports/smart.h	19;"	d
GIT_CAP_OFS_DELTA	src/transports/smart.h	17;"	d
GIT_CAP_REPORT_STATUS	src/transports/smart.h	24;"	d
GIT_CAP_SIDE_BAND	src/transports/smart.h	20;"	d
GIT_CAP_SIDE_BAND_64K	src/transports/smart.h	21;"	d
GIT_CAP_THIN_PACK	src/transports/smart.h	25;"	d
GIT_CHECKOUT_ALLOW_CONFLICTS	include/git2/checkout.h	/^	GIT_CHECKOUT_ALLOW_CONFLICTS = (1u << 4),$/;"	e	enum:__anon223
GIT_CHECKOUT_CONFLICT_STYLE_DIFF3	include/git2/checkout.h	/^	GIT_CHECKOUT_CONFLICT_STYLE_DIFF3 = (1u << 21),$/;"	e	enum:__anon223
GIT_CHECKOUT_CONFLICT_STYLE_MERGE	include/git2/checkout.h	/^	GIT_CHECKOUT_CONFLICT_STYLE_MERGE = (1u << 20),$/;"	e	enum:__anon223
GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH	include/git2/checkout.h	/^	GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH = (1u << 13),$/;"	e	enum:__anon223
GIT_CHECKOUT_DONT_OVERWRITE_IGNORED	include/git2/checkout.h	/^	GIT_CHECKOUT_DONT_OVERWRITE_IGNORED = (1u << 19),$/;"	e	enum:__anon223
GIT_CHECKOUT_DONT_UPDATE_INDEX	include/git2/checkout.h	/^	GIT_CHECKOUT_DONT_UPDATE_INDEX = (1u << 8),$/;"	e	enum:__anon223
GIT_CHECKOUT_FORCE	include/git2/checkout.h	/^	GIT_CHECKOUT_FORCE = (1u << 2),$/;"	e	enum:__anon223
GIT_CHECKOUT_NONE	include/git2/checkout.h	/^	GIT_CHECKOUT_NONE = 0, \/** default is a dry run, no actual updates *\/$/;"	e	enum:__anon223
GIT_CHECKOUT_NOTIFY_ALL	include/git2/checkout.h	/^	GIT_CHECKOUT_NOTIFY_ALL       = 0x0FFFFu$/;"	e	enum:__anon224
GIT_CHECKOUT_NOTIFY_CONFLICT	include/git2/checkout.h	/^	GIT_CHECKOUT_NOTIFY_CONFLICT  = (1u << 0),$/;"	e	enum:__anon224
GIT_CHECKOUT_NOTIFY_DIRTY	include/git2/checkout.h	/^	GIT_CHECKOUT_NOTIFY_DIRTY     = (1u << 1),$/;"	e	enum:__anon224
GIT_CHECKOUT_NOTIFY_IGNORED	include/git2/checkout.h	/^	GIT_CHECKOUT_NOTIFY_IGNORED   = (1u << 4),$/;"	e	enum:__anon224
GIT_CHECKOUT_NOTIFY_NONE	include/git2/checkout.h	/^	GIT_CHECKOUT_NOTIFY_NONE      = 0,$/;"	e	enum:__anon224
GIT_CHECKOUT_NOTIFY_UNTRACKED	include/git2/checkout.h	/^	GIT_CHECKOUT_NOTIFY_UNTRACKED = (1u << 3),$/;"	e	enum:__anon224
GIT_CHECKOUT_NOTIFY_UPDATED	include/git2/checkout.h	/^	GIT_CHECKOUT_NOTIFY_UPDATED   = (1u << 2),$/;"	e	enum:__anon224
GIT_CHECKOUT_NO_REFRESH	include/git2/checkout.h	/^	GIT_CHECKOUT_NO_REFRESH = (1u << 9),$/;"	e	enum:__anon223
GIT_CHECKOUT_OPTS_INIT	include/git2/checkout.h	267;"	d
GIT_CHECKOUT_OPTS_VERSION	include/git2/checkout.h	266;"	d
GIT_CHECKOUT_REMOVE_IGNORED	include/git2/checkout.h	/^	GIT_CHECKOUT_REMOVE_IGNORED = (1u << 6),$/;"	e	enum:__anon223
GIT_CHECKOUT_REMOVE_UNTRACKED	include/git2/checkout.h	/^	GIT_CHECKOUT_REMOVE_UNTRACKED = (1u << 5),$/;"	e	enum:__anon223
GIT_CHECKOUT_SAFE	include/git2/checkout.h	/^	GIT_CHECKOUT_SAFE = (1u << 0),$/;"	e	enum:__anon223
GIT_CHECKOUT_SAFE_CREATE	include/git2/checkout.h	/^	GIT_CHECKOUT_SAFE_CREATE = (1u << 1),$/;"	e	enum:__anon223
GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES	include/git2/checkout.h	/^	GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES = (1u << 18),$/;"	e	enum:__anon223
GIT_CHECKOUT_SKIP_UNMERGED	include/git2/checkout.h	/^	GIT_CHECKOUT_SKIP_UNMERGED = (1u << 10),$/;"	e	enum:__anon223
GIT_CHECKOUT_UPDATE_ONLY	include/git2/checkout.h	/^	GIT_CHECKOUT_UPDATE_ONLY = (1u << 7),$/;"	e	enum:__anon223
GIT_CHECKOUT_UPDATE_SUBMODULES	include/git2/checkout.h	/^	GIT_CHECKOUT_UPDATE_SUBMODULES = (1u << 16),$/;"	e	enum:__anon223
GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED	include/git2/checkout.h	/^	GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED = (1u << 17),$/;"	e	enum:__anon223
GIT_CHECKOUT_USE_OURS	include/git2/checkout.h	/^	GIT_CHECKOUT_USE_OURS = (1u << 11),$/;"	e	enum:__anon223
GIT_CHECKOUT_USE_THEIRS	include/git2/checkout.h	/^	GIT_CHECKOUT_USE_THEIRS = (1u << 12),$/;"	e	enum:__anon223
GIT_CHECKOUT__NOTIFY_CONFLICT_TREE	src/checkout.h	13;"	d
GIT_CHERRY_PICK_HEAD_FILE	src/refs.h	38;"	d
GIT_CLONE_OPTIONS_INIT	include/git2/clone.h	66;"	d
GIT_CLONE_OPTIONS_VERSION	include/git2/clone.h	65;"	d
GIT_COMMIT_GETTER	src/commit.c	357;"	d	file:
GIT_CONFIG_BACKEND_INIT	include/git2/sys/config.h	70;"	d
GIT_CONFIG_BACKEND_VERSION	include/git2/sys/config.h	69;"	d
GIT_CONFIG_FILENAME_GLOBAL	src/config.h	16;"	d
GIT_CONFIG_FILENAME_INREPO	src/config.h	19;"	d
GIT_CONFIG_FILENAME_SYSTEM	src/config.h	15;"	d
GIT_CONFIG_FILENAME_XDG	src/config.h	17;"	d
GIT_CONFIG_FILE_MODE	src/config.h	20;"	d
GIT_CONFIG_HIGHEST_LEVEL	include/git2/config.h	/^	GIT_CONFIG_HIGHEST_LEVEL = -1,$/;"	e	enum:__anon217
GIT_CONFIG_LEVEL_APP	include/git2/config.h	/^	GIT_CONFIG_LEVEL_APP = 5,$/;"	e	enum:__anon217
GIT_CONFIG_LEVEL_GLOBAL	include/git2/config.h	/^	GIT_CONFIG_LEVEL_GLOBAL = 3,$/;"	e	enum:__anon217
GIT_CONFIG_LEVEL_LOCAL	include/git2/config.h	/^	GIT_CONFIG_LEVEL_LOCAL = 4,$/;"	e	enum:__anon217
GIT_CONFIG_LEVEL_SYSTEM	include/git2/config.h	/^	GIT_CONFIG_LEVEL_SYSTEM = 1,$/;"	e	enum:__anon217
GIT_CONFIG_LEVEL_XDG	include/git2/config.h	/^	GIT_CONFIG_LEVEL_XDG = 2,$/;"	e	enum:__anon217
GIT_CPDIR_CHMOD_DIRS	src/fileops.h	/^	GIT_CPDIR_CHMOD_DIRS        = (1u << 4),$/;"	e	enum:__anon46
GIT_CPDIR_COPY_DOTFILES	src/fileops.h	/^	GIT_CPDIR_COPY_DOTFILES     = (1u << 2),$/;"	e	enum:__anon46
GIT_CPDIR_COPY_SYMLINKS	src/fileops.h	/^	GIT_CPDIR_COPY_SYMLINKS     = (1u << 1),$/;"	e	enum:__anon46
GIT_CPDIR_CREATE_EMPTY_DIRS	src/fileops.h	/^	GIT_CPDIR_CREATE_EMPTY_DIRS = (1u << 0),$/;"	e	enum:__anon46
GIT_CPDIR_OVERWRITE	src/fileops.h	/^	GIT_CPDIR_OVERWRITE         = (1u << 3),$/;"	e	enum:__anon46
GIT_CPDIR_SIMPLE_TO_MODE	src/fileops.h	/^	GIT_CPDIR_SIMPLE_TO_MODE    = (1u << 5),$/;"	e	enum:__anon46
GIT_CPDIR__MKDIR_DONE_FOR_TO_ROOT	src/fileops.c	647;"	d	file:
GIT_CREDTYPE_DEFAULT	include/git2/transport.h	/^	GIT_CREDTYPE_DEFAULT = (1u << 3),$/;"	e	enum:__anon242
GIT_CREDTYPE_SSH_CUSTOM	include/git2/transport.h	/^	GIT_CREDTYPE_SSH_CUSTOM = (1u << 2),$/;"	e	enum:__anon242
GIT_CREDTYPE_SSH_KEY	include/git2/transport.h	/^	GIT_CREDTYPE_SSH_KEY = (1u << 1),$/;"	e	enum:__anon242
GIT_CREDTYPE_USERPASS_PLAINTEXT	include/git2/transport.h	/^	GIT_CREDTYPE_USERPASS_PLAINTEXT = (1u << 0),$/;"	e	enum:__anon242
GIT_CRLF_AUTO	src/filter.h	/^	GIT_CRLF_AUTO,$/;"	e	enum:__anon109
GIT_CRLF_BINARY	src/filter.h	/^	GIT_CRLF_BINARY = 0,$/;"	e	enum:__anon109
GIT_CRLF_CRLF	src/filter.h	/^	GIT_CRLF_CRLF,$/;"	e	enum:__anon109
GIT_CRLF_GUESS	src/filter.h	/^	GIT_CRLF_GUESS = -1,$/;"	e	enum:__anon109
GIT_CRLF_INPUT	src/filter.h	/^	GIT_CRLF_INPUT,$/;"	e	enum:__anon109
GIT_CRLF_TEXT	src/filter.h	/^	GIT_CRLF_TEXT,$/;"	e	enum:__anon109
GIT_CVAR_ABBREV	src/repository.h	/^	GIT_CVAR_ABBREV,        \/* core.abbrev *\/$/;"	e	enum:__anon52
GIT_CVAR_AUTO_CRLF	src/repository.h	/^	GIT_CVAR_AUTO_CRLF = 0, \/* core.autocrlf *\/$/;"	e	enum:__anon52
GIT_CVAR_CACHE_MAX	src/repository.h	/^	GIT_CVAR_CACHE_MAX$/;"	e	enum:__anon52
GIT_CVAR_EOL	src/repository.h	/^	GIT_CVAR_EOL,           \/* core.eol *\/$/;"	e	enum:__anon52
GIT_CVAR_FALSE	include/git2/config.h	/^	GIT_CVAR_FALSE = 0,$/;"	e	enum:__anon219
GIT_CVAR_FILEMODE	src/repository.h	/^	GIT_CVAR_FILEMODE,      \/* core.filemode *\/$/;"	e	enum:__anon52
GIT_CVAR_IGNORECASE	src/repository.h	/^	GIT_CVAR_IGNORECASE,    \/* core.ignorecase *\/$/;"	e	enum:__anon52
GIT_CVAR_IGNORESTAT	src/repository.h	/^	GIT_CVAR_IGNORESTAT,    \/* core.ignorestat *\/$/;"	e	enum:__anon52
GIT_CVAR_INT32	include/git2/config.h	/^	GIT_CVAR_INT32,$/;"	e	enum:__anon219
GIT_CVAR_NOT_CACHED	src/repository.h	/^	GIT_CVAR_NOT_CACHED = -1,$/;"	e	enum:__anon53
GIT_CVAR_PRECOMPOSE	src/repository.h	/^	GIT_CVAR_PRECOMPOSE,    \/* core.precomposeunicode *\/$/;"	e	enum:__anon52
GIT_CVAR_STRING	include/git2/config.h	/^	GIT_CVAR_STRING$/;"	e	enum:__anon219
GIT_CVAR_SYMLINKS	src/repository.h	/^	GIT_CVAR_SYMLINKS,      \/* core.symlinks *\/$/;"	e	enum:__anon52
GIT_CVAR_TRUE	include/git2/config.h	/^	GIT_CVAR_TRUE = 1,$/;"	e	enum:__anon219
GIT_CVAR_TRUSTCTIME	src/repository.h	/^	GIT_CVAR_TRUSTCTIME,    \/* core.trustctime *\/$/;"	e	enum:__anon52
GIT_DEFAULT_PORT	include/git2/net.h	22;"	d
GIT_DELTA_ADDED	include/git2/diff.h	/^	GIT_DELTA_ADDED = 1,	  \/** entry does not exist in old version *\/$/;"	e	enum:__anon265
GIT_DELTA_COPIED	include/git2/diff.h	/^	GIT_DELTA_COPIED = 5,     \/** entry was copied from another old entry *\/$/;"	e	enum:__anon265
GIT_DELTA_DELETED	include/git2/diff.h	/^	GIT_DELTA_DELETED = 2,	  \/** entry does not exist in new version *\/$/;"	e	enum:__anon265
GIT_DELTA_IGNORED	include/git2/diff.h	/^	GIT_DELTA_IGNORED = 6,    \/** entry is ignored item in workdir *\/$/;"	e	enum:__anon265
GIT_DELTA_MODIFIED	include/git2/diff.h	/^	GIT_DELTA_MODIFIED = 3,   \/** entry content changed between old and new *\/$/;"	e	enum:__anon265
GIT_DELTA_RENAMED	include/git2/diff.h	/^	GIT_DELTA_RENAMED = 4,    \/** entry was renamed between old and new *\/$/;"	e	enum:__anon265
GIT_DELTA_SIZE_MIN	src/delta.h	93;"	d
GIT_DELTA_TYPECHANGE	include/git2/diff.h	/^	GIT_DELTA_TYPECHANGE = 8, \/** type of entry changed between old and new *\/$/;"	e	enum:__anon265
GIT_DELTA_UNMODIFIED	include/git2/diff.h	/^	GIT_DELTA_UNMODIFIED = 0, \/** no changes *\/$/;"	e	enum:__anon265
GIT_DELTA_UNTRACKED	include/git2/diff.h	/^	GIT_DELTA_UNTRACKED = 7,  \/** entry is untracked item in workdir *\/$/;"	e	enum:__anon265
GIT_DESC_CONTENT	src/repo_template.h	36;"	d
GIT_DESC_FILE	src/repo_template.h	34;"	d
GIT_DESC_MODE	src/repo_template.h	35;"	d
GIT_DIFFCAPS_HAS_SYMLINKS	src/diff.h	/^	GIT_DIFFCAPS_HAS_SYMLINKS     = (1 << 0), \/* symlinks on platform? *\/$/;"	e	enum:__anon177
GIT_DIFFCAPS_IGNORE_STAT	src/diff.h	/^	GIT_DIFFCAPS_IGNORE_STAT      = (1 << 1), \/* use stat? *\/$/;"	e	enum:__anon177
GIT_DIFFCAPS_TRUST_CTIME	src/diff.h	/^	GIT_DIFFCAPS_TRUST_CTIME      = (1 << 3), \/* use st_ctime? *\/$/;"	e	enum:__anon177
GIT_DIFFCAPS_TRUST_MODE_BITS	src/diff.h	/^	GIT_DIFFCAPS_TRUST_MODE_BITS  = (1 << 2), \/* use st_mode? *\/$/;"	e	enum:__anon177
GIT_DIFFCAPS_TRUST_NANOSECS	src/diff.h	/^	GIT_DIFFCAPS_TRUST_NANOSECS   = (1 << 5), \/* use stat time nanoseconds *\/$/;"	e	enum:__anon177
GIT_DIFFCAPS_USE_DEV	src/diff.h	/^	GIT_DIFFCAPS_USE_DEV          = (1 << 4), \/* use st_dev? *\/$/;"	e	enum:__anon177
GIT_DIFF_BREAK_REWRITES	include/git2/diff.h	/^	GIT_DIFF_BREAK_REWRITES = (1u << 5),$/;"	e	enum:__anon270
GIT_DIFF_BREAK_REWRITES_FOR_RENAMES_ONLY	include/git2/diff.h	/^	GIT_DIFF_BREAK_REWRITES_FOR_RENAMES_ONLY  = (1u << 15),$/;"	e	enum:__anon270
GIT_DIFF_DISABLE_PATHSPEC_MATCH	include/git2/diff.h	/^	GIT_DIFF_DISABLE_PATHSPEC_MATCH = (1u << 12),$/;"	e	enum:__anon263
GIT_DIFF_ENABLE_FAST_UNTRACKED_DIRS	include/git2/diff.h	/^	GIT_DIFF_ENABLE_FAST_UNTRACKED_DIRS = (1u << 14),$/;"	e	enum:__anon263
GIT_DIFF_FILE_CONTENT_SRC__BLOB	src/diff_file.h	41;"	d
GIT_DIFF_FILE_CONTENT_SRC__BUF	src/diff_file.h	42;"	d
GIT_DIFF_FIND_ALL	include/git2/diff.h	/^	GIT_DIFF_FIND_ALL = (0x0ff),$/;"	e	enum:__anon270
GIT_DIFF_FIND_AND_BREAK_REWRITES	include/git2/diff.h	/^	GIT_DIFF_FIND_AND_BREAK_REWRITES =$/;"	e	enum:__anon270
GIT_DIFF_FIND_BY_CONFIG	include/git2/diff.h	/^	GIT_DIFF_FIND_BY_CONFIG = 0,$/;"	e	enum:__anon270
GIT_DIFF_FIND_COPIES	include/git2/diff.h	/^	GIT_DIFF_FIND_COPIES = (1u << 2),$/;"	e	enum:__anon270
GIT_DIFF_FIND_COPIES_FROM_UNMODIFIED	include/git2/diff.h	/^	GIT_DIFF_FIND_COPIES_FROM_UNMODIFIED = (1u << 3),$/;"	e	enum:__anon270
GIT_DIFF_FIND_DONT_IGNORE_WHITESPACE	include/git2/diff.h	/^	GIT_DIFF_FIND_DONT_IGNORE_WHITESPACE = (1u << 13),$/;"	e	enum:__anon270
GIT_DIFF_FIND_EXACT_MATCH_ONLY	include/git2/diff.h	/^	GIT_DIFF_FIND_EXACT_MATCH_ONLY = (1u << 14),$/;"	e	enum:__anon270
GIT_DIFF_FIND_FOR_UNTRACKED	include/git2/diff.h	/^	GIT_DIFF_FIND_FOR_UNTRACKED = (1u << 6),$/;"	e	enum:__anon270
GIT_DIFF_FIND_IGNORE_LEADING_WHITESPACE	include/git2/diff.h	/^	GIT_DIFF_FIND_IGNORE_LEADING_WHITESPACE = 0,$/;"	e	enum:__anon270
GIT_DIFF_FIND_IGNORE_WHITESPACE	include/git2/diff.h	/^	GIT_DIFF_FIND_IGNORE_WHITESPACE = (1u << 12),$/;"	e	enum:__anon270
GIT_DIFF_FIND_OPTIONS_INIT	include/git2/diff.h	605;"	d
GIT_DIFF_FIND_OPTIONS_VERSION	include/git2/diff.h	604;"	d
GIT_DIFF_FIND_REMOVE_UNMODIFIED	include/git2/diff.h	/^	GIT_DIFF_FIND_REMOVE_UNMODIFIED = (1u << 16),$/;"	e	enum:__anon270
GIT_DIFF_FIND_RENAMES	include/git2/diff.h	/^	GIT_DIFF_FIND_RENAMES = (1u << 0),$/;"	e	enum:__anon270
GIT_DIFF_FIND_RENAMES_FROM_REWRITES	include/git2/diff.h	/^	GIT_DIFF_FIND_RENAMES_FROM_REWRITES = (1u << 1),$/;"	e	enum:__anon270
GIT_DIFF_FIND_REWRITES	include/git2/diff.h	/^	GIT_DIFF_FIND_REWRITES = (1u << 4),$/;"	e	enum:__anon270
GIT_DIFF_FLAG_BINARY	include/git2/diff.h	/^	GIT_DIFF_FLAG_BINARY     = (1u << 0), \/** file(s) treated as binary data *\/$/;"	e	enum:__anon264
GIT_DIFF_FLAG_NOT_BINARY	include/git2/diff.h	/^	GIT_DIFF_FLAG_NOT_BINARY = (1u << 1), \/** file(s) treated as text data *\/$/;"	e	enum:__anon264
GIT_DIFF_FLAG_VALID_ID	include/git2/diff.h	/^	GIT_DIFF_FLAG_VALID_ID  = (1u << 2), \/** `id` value is known correct *\/$/;"	e	enum:__anon264
GIT_DIFF_FLAG__CLEAR_INTERNAL	src/diff.h	51;"	d
GIT_DIFF_FLAG__FREE_BLOB	src/diff.h	/^	GIT_DIFF_FLAG__FREE_BLOB  = (1 << 11), \/* release the blob when done *\/$/;"	e	enum:__anon178
GIT_DIFF_FLAG__FREE_DATA	src/diff.h	/^	GIT_DIFF_FLAG__FREE_DATA  = (1 << 8),  \/* internal file data is allocated *\/$/;"	e	enum:__anon178
GIT_DIFF_FLAG__FREE_PATH	src/diff.h	/^	GIT_DIFF_FLAG__FREE_PATH  = (1 << 7),  \/* `path` is allocated memory *\/$/;"	e	enum:__anon178
GIT_DIFF_FLAG__HAS_SELF_SIMILARITY	src/diff.h	/^	GIT_DIFF_FLAG__HAS_SELF_SIMILARITY = (1 << 20),$/;"	e	enum:__anon178
GIT_DIFF_FLAG__IS_RENAME_SOURCE	src/diff.h	/^	GIT_DIFF_FLAG__IS_RENAME_SOURCE = (1 << 19),$/;"	e	enum:__anon178
GIT_DIFF_FLAG__IS_RENAME_TARGET	src/diff.h	/^	GIT_DIFF_FLAG__IS_RENAME_TARGET = (1 << 18),$/;"	e	enum:__anon178
GIT_DIFF_FLAG__LOADED	src/diff.h	/^	GIT_DIFF_FLAG__LOADED     = (1 << 12), \/* file data has been loaded *\/$/;"	e	enum:__anon178
GIT_DIFF_FLAG__NO_DATA	src/diff.h	/^	GIT_DIFF_FLAG__NO_DATA    = (1 << 10), \/* file data should not be loaded *\/$/;"	e	enum:__anon178
GIT_DIFF_FLAG__TO_DELETE	src/diff.h	/^	GIT_DIFF_FLAG__TO_DELETE  = (1 << 16), \/* delete entry during rename det. *\/$/;"	e	enum:__anon178
GIT_DIFF_FLAG__TO_SPLIT	src/diff.h	/^	GIT_DIFF_FLAG__TO_SPLIT   = (1 << 17), \/* split entry during rename det. *\/$/;"	e	enum:__anon178
GIT_DIFF_FLAG__UNMAP_DATA	src/diff.h	/^	GIT_DIFF_FLAG__UNMAP_DATA = (1 << 9),  \/* internal file data is mmap'ed *\/$/;"	e	enum:__anon178
GIT_DIFF_FORCE_BINARY	include/git2/diff.h	/^	GIT_DIFF_FORCE_BINARY = (1u << 21),$/;"	e	enum:__anon263
GIT_DIFF_FORCE_TEXT	include/git2/diff.h	/^	GIT_DIFF_FORCE_TEXT = (1u << 20),$/;"	e	enum:__anon263
GIT_DIFF_FORMAT_NAME_ONLY	include/git2/diff.h	/^	GIT_DIFF_FORMAT_NAME_ONLY    = 4u, \/**< like git diff --name-only *\/$/;"	e	enum:__anon273
GIT_DIFF_FORMAT_NAME_STATUS	include/git2/diff.h	/^	GIT_DIFF_FORMAT_NAME_STATUS  = 5u, \/**< like git diff --name-status *\/$/;"	e	enum:__anon273
GIT_DIFF_FORMAT_PATCH	include/git2/diff.h	/^	GIT_DIFF_FORMAT_PATCH        = 1u, \/**< full git diff *\/$/;"	e	enum:__anon273
GIT_DIFF_FORMAT_PATCH_HEADER	include/git2/diff.h	/^	GIT_DIFF_FORMAT_PATCH_HEADER = 2u, \/**< just the file headers of patch *\/$/;"	e	enum:__anon273
GIT_DIFF_FORMAT_RAW	include/git2/diff.h	/^	GIT_DIFF_FORMAT_RAW          = 3u, \/**< like git diff --raw *\/$/;"	e	enum:__anon273
GIT_DIFF_IGNORE_CASE	include/git2/diff.h	/^	GIT_DIFF_IGNORE_CASE = (1u << 10),$/;"	e	enum:__anon263
GIT_DIFF_IGNORE_FILEMODE	include/git2/diff.h	/^	GIT_DIFF_IGNORE_FILEMODE = (1u << 8),$/;"	e	enum:__anon263
GIT_DIFF_IGNORE_SUBMODULES	include/git2/diff.h	/^	GIT_DIFF_IGNORE_SUBMODULES = (1u << 9),$/;"	e	enum:__anon263
GIT_DIFF_IGNORE_WHITESPACE	include/git2/diff.h	/^	GIT_DIFF_IGNORE_WHITESPACE = (1u << 22),$/;"	e	enum:__anon263
GIT_DIFF_IGNORE_WHITESPACE_CHANGE	include/git2/diff.h	/^	GIT_DIFF_IGNORE_WHITESPACE_CHANGE = (1u << 23),$/;"	e	enum:__anon263
GIT_DIFF_IGNORE_WHITESPACE_EOL	include/git2/diff.h	/^	GIT_DIFF_IGNORE_WHITESPACE_EOL = (1u << 24),$/;"	e	enum:__anon263
GIT_DIFF_INCLUDE_IGNORED	include/git2/diff.h	/^	GIT_DIFF_INCLUDE_IGNORED = (1u << 1),$/;"	e	enum:__anon263
GIT_DIFF_INCLUDE_TYPECHANGE	include/git2/diff.h	/^	GIT_DIFF_INCLUDE_TYPECHANGE = (1u << 6),$/;"	e	enum:__anon263
GIT_DIFF_INCLUDE_TYPECHANGE_TREES	include/git2/diff.h	/^	GIT_DIFF_INCLUDE_TYPECHANGE_TREES = (1u << 7),$/;"	e	enum:__anon263
GIT_DIFF_INCLUDE_UNMODIFIED	include/git2/diff.h	/^	GIT_DIFF_INCLUDE_UNMODIFIED = (1u << 5),$/;"	e	enum:__anon263
GIT_DIFF_INCLUDE_UNTRACKED	include/git2/diff.h	/^	GIT_DIFF_INCLUDE_UNTRACKED = (1u << 3),$/;"	e	enum:__anon263
GIT_DIFF_LINE_ADDITION	include/git2/diff.h	/^	GIT_DIFF_LINE_ADDITION  = '+',$/;"	e	enum:__anon269
GIT_DIFF_LINE_ADD_EOFNL	include/git2/diff.h	/^	GIT_DIFF_LINE_ADD_EOFNL = '>',     \/**< Old has no LF at end, new does *\/$/;"	e	enum:__anon269
GIT_DIFF_LINE_BINARY	include/git2/diff.h	/^	GIT_DIFF_LINE_BINARY    = 'B' \/**< For "Binary files x and y differ" *\/$/;"	e	enum:__anon269
GIT_DIFF_LINE_CONTEXT	include/git2/diff.h	/^	GIT_DIFF_LINE_CONTEXT   = ' ',$/;"	e	enum:__anon269
GIT_DIFF_LINE_CONTEXT_EOFNL	include/git2/diff.h	/^	GIT_DIFF_LINE_CONTEXT_EOFNL = '=', \/**< Both files have no LF at end *\/$/;"	e	enum:__anon269
GIT_DIFF_LINE_DELETION	include/git2/diff.h	/^	GIT_DIFF_LINE_DELETION  = '-',$/;"	e	enum:__anon269
GIT_DIFF_LINE_DEL_EOFNL	include/git2/diff.h	/^	GIT_DIFF_LINE_DEL_EOFNL = '<',     \/**< Old has LF at end, new does not *\/$/;"	e	enum:__anon269
GIT_DIFF_LINE_FILE_HDR	include/git2/diff.h	/^	GIT_DIFF_LINE_FILE_HDR  = 'F',$/;"	e	enum:__anon269
GIT_DIFF_LINE_HUNK_HDR	include/git2/diff.h	/^	GIT_DIFF_LINE_HUNK_HDR  = 'H',$/;"	e	enum:__anon269
GIT_DIFF_MINIMAL	include/git2/diff.h	/^	GIT_DIFF_MINIMAL = (1 << 29),$/;"	e	enum:__anon263
GIT_DIFF_NORMAL	include/git2/diff.h	/^	GIT_DIFF_NORMAL = 0,$/;"	e	enum:__anon263
GIT_DIFF_OPTIONS_INIT	include/git2/diff.h	376;"	d
GIT_DIFF_OPTIONS_VERSION	include/git2/diff.h	371;"	d
GIT_DIFF_PATCH_ALLOCATED	src/diff_patch.c	/^	GIT_DIFF_PATCH_ALLOCATED   = (1 << 0),$/;"	e	enum:__anon149	file:
GIT_DIFF_PATCH_DIFFABLE	src/diff_patch.c	/^	GIT_DIFF_PATCH_DIFFABLE    = (1 << 3),$/;"	e	enum:__anon149	file:
GIT_DIFF_PATCH_DIFFED	src/diff_patch.c	/^	GIT_DIFF_PATCH_DIFFED      = (1 << 4),$/;"	e	enum:__anon149	file:
GIT_DIFF_PATCH_FLATTENED	src/diff_patch.c	/^	GIT_DIFF_PATCH_FLATTENED   = (1 << 5),$/;"	e	enum:__anon149	file:
GIT_DIFF_PATCH_INITIALIZED	src/diff_patch.c	/^	GIT_DIFF_PATCH_INITIALIZED = (1 << 1),$/;"	e	enum:__anon149	file:
GIT_DIFF_PATCH_LOADED	src/diff_patch.c	/^	GIT_DIFF_PATCH_LOADED      = (1 << 2),$/;"	e	enum:__anon149	file:
GIT_DIFF_PATIENCE	include/git2/diff.h	/^	GIT_DIFF_PATIENCE = (1u << 28),$/;"	e	enum:__anon263
GIT_DIFF_RECURSE_IGNORED_DIRS	include/git2/diff.h	/^	GIT_DIFF_RECURSE_IGNORED_DIRS = (1u << 2),$/;"	e	enum:__anon263
GIT_DIFF_RECURSE_UNTRACKED_DIRS	include/git2/diff.h	/^	GIT_DIFF_RECURSE_UNTRACKED_DIRS = (1u << 4),$/;"	e	enum:__anon263
GIT_DIFF_REVERSE	include/git2/diff.h	/^	GIT_DIFF_REVERSE = (1u << 0),$/;"	e	enum:__anon263
GIT_DIFF_SHOW_UNMODIFIED	include/git2/diff.h	/^	GIT_DIFF_SHOW_UNMODIFIED = (1u << 26),$/;"	e	enum:__anon263
GIT_DIFF_SHOW_UNTRACKED_CONTENT	include/git2/diff.h	/^	GIT_DIFF_SHOW_UNTRACKED_CONTENT = (1u << 25),$/;"	e	enum:__anon263
GIT_DIFF_SKIP_BINARY_CHECK	include/git2/diff.h	/^	GIT_DIFF_SKIP_BINARY_CHECK = (1u << 13),$/;"	e	enum:__anon263
GIT_DIFF__VERBOSE	src/diff.h	53;"	d
GIT_DIR	src/repository.h	26;"	d
GIT_DIRECTION_FETCH	include/git2/net.h	/^	GIT_DIRECTION_FETCH = 0,$/;"	e	enum:__anon274
GIT_DIRECTION_PUSH	include/git2/net.h	/^	GIT_DIRECTION_PUSH  = 1$/;"	e	enum:__anon274
GIT_DIR_MODE	src/repository.h	27;"	d
GIT_EAMBIGUOUS	include/git2/errors.h	/^	GIT_EAMBIGUOUS = -5,		\/*< More than one object matches *\/$/;"	e	enum:__anon225
GIT_EBAREREPO	include/git2/errors.h	/^	GIT_EBAREREPO       =  -8,	\/*< Operation not allowed on bare repository *\/$/;"	e	enum:__anon225
GIT_EBUFS	include/git2/errors.h	/^	GIT_EBUFS      = -6,		\/*< Output buffer too short to hold data *\/$/;"	e	enum:__anon225
GIT_EEXISTS	include/git2/errors.h	/^	GIT_EEXISTS    = -4,		\/*< Object exists preventing operation *\/$/;"	e	enum:__anon225
GIT_EINVALIDSPEC	include/git2/errors.h	/^	GIT_EINVALIDSPEC    = -12,	\/*< Name\/ref spec was not in a valid format *\/$/;"	e	enum:__anon225
GIT_ELOCKED	include/git2/errors.h	/^	GIT_ELOCKED         = -14,	\/*< Lock file prevented operation *\/$/;"	e	enum:__anon225
GIT_EMERGECONFLICT	include/git2/errors.h	/^	GIT_EMERGECONFLICT  = -13,	\/*< Merge conflicts prevented operation *\/$/;"	e	enum:__anon225
GIT_EMODIFIED	include/git2/errors.h	/^	GIT_EMODIFIED       = -15,	\/*< Reference value does not match expected *\/$/;"	e	enum:__anon225
GIT_END_DECL	include/git2/common.h	21;"	d
GIT_END_DECL	include/git2/common.h	26;"	d
GIT_ENONFASTFORWARD	include/git2/errors.h	/^	GIT_ENONFASTFORWARD = -11,	\/*< Reference was not fast-forwardable *\/$/;"	e	enum:__anon225
GIT_ENOTFOUND	include/git2/errors.h	/^	GIT_ENOTFOUND  = -3,		\/*< Requested object could not be found *\/$/;"	e	enum:__anon225
GIT_EOL_CRLF	src/repository.h	/^	GIT_EOL_CRLF = 1,$/;"	e	enum:__anon53
GIT_EOL_DEFAULT	src/repository.h	/^	GIT_EOL_DEFAULT = GIT_EOL_NATIVE,$/;"	e	enum:__anon53
GIT_EOL_LF	src/repository.h	/^	GIT_EOL_LF = 2,$/;"	e	enum:__anon53
GIT_EOL_NATIVE	src/repository.h	/^	GIT_EOL_NATIVE = GIT_EOL_CRLF,$/;"	e	enum:__anon53
GIT_EOL_UNSET	src/repository.h	/^	GIT_EOL_UNSET = 0,$/;"	e	enum:__anon53
GIT_ERROR	include/git2/errors.h	/^	GIT_ERROR      = -1,		\/*< Generic error *\/$/;"	e	enum:__anon225
GIT_EUNBORNBRANCH	include/git2/errors.h	/^	GIT_EUNBORNBRANCH   =  -9,	\/*< HEAD refers to branch with no commits *\/$/;"	e	enum:__anon225
GIT_EUNMERGED	include/git2/errors.h	/^	GIT_EUNMERGED       = -10,	\/*< Merge in progress prevented operation *\/$/;"	e	enum:__anon225
GIT_EUSER	include/git2/errors.h	/^	GIT_EUSER      = -7,$/;"	e	enum:__anon225
GIT_EXTERN	include/git2/common.h	31;"	d
GIT_EXTERN	include/git2/common.h	35;"	d
GIT_EXTERN	include/git2/common.h	37;"	d
GIT_FEATURE_HTTPS	include/git2/common.h	/^	GIT_FEATURE_HTTPS = (1 << 1),$/;"	e	enum:__anon233
GIT_FEATURE_SSH	include/git2/common.h	/^	GIT_FEATURE_SSH = (1 << 2),$/;"	e	enum:__anon233
GIT_FEATURE_THREADS	include/git2/common.h	/^	GIT_FEATURE_THREADS	= (1 << 0),$/;"	e	enum:__anon233
GIT_FETCH_HEAD_FILE	src/refs.h	35;"	d
GIT_FILEBUF_APPEND	src/filebuf.h	19;"	d
GIT_FILEBUF_DEFLATE_SHIFT	src/filebuf.h	23;"	d
GIT_FILEBUF_DO_NOT_BUFFER	src/filebuf.h	22;"	d
GIT_FILEBUF_FORCE	src/filebuf.h	20;"	d
GIT_FILEBUF_HASH_CONTENTS	src/filebuf.h	18;"	d
GIT_FILEBUF_INIT	src/filebuf.h	52;"	d
GIT_FILEBUF_TEMPORARY	src/filebuf.h	21;"	d
GIT_FILEBUF_THREADS	src/filebuf.h	15;"	d
GIT_FILELOCK_EXTENSION	src/filebuf.h	25;"	d
GIT_FILELOCK_EXTLENGTH	src/filebuf.h	26;"	d
GIT_FILEMODE_BLOB	include/git2/types.h	/^	GIT_FILEMODE_BLOB					= 0100644,$/;"	e	enum:__anon238
GIT_FILEMODE_BLOB_EXECUTABLE	include/git2/types.h	/^	GIT_FILEMODE_BLOB_EXECUTABLE		= 0100755,$/;"	e	enum:__anon238
GIT_FILEMODE_BLOB_GROUP_WRITABLE	src/tree.h	62;"	d
GIT_FILEMODE_COMMIT	include/git2/types.h	/^	GIT_FILEMODE_COMMIT					= 0160000,$/;"	e	enum:__anon238
GIT_FILEMODE_DEFAULT	src/repository.h	/^	GIT_FILEMODE_DEFAULT = GIT_CVAR_TRUE,$/;"	e	enum:__anon53
GIT_FILEMODE_LINK	include/git2/types.h	/^	GIT_FILEMODE_LINK					= 0120000,$/;"	e	enum:__anon238
GIT_FILEMODE_NEW	include/git2/types.h	/^	GIT_FILEMODE_NEW					= 0000000,$/;"	e	enum:__anon238
GIT_FILEMODE_TREE	include/git2/types.h	/^	GIT_FILEMODE_TREE					= 0040000,$/;"	e	enum:__anon238
GIT_FILE_CONTENT_PREFIX	src/repository.c	30;"	d	file:
GIT_FILTER_CLEAN	include/git2/filter.h	/^	GIT_FILTER_CLEAN = GIT_FILTER_TO_ODB,$/;"	e	enum:__anon231
GIT_FILTER_CRLF	include/git2/sys/filter.h	29;"	d
GIT_FILTER_CRLF_PRIORITY	include/git2/sys/filter.h	35;"	d
GIT_FILTER_DRIVER_PRIORITY	include/git2/sys/filter.h	47;"	d
GIT_FILTER_IDENT	include/git2/sys/filter.h	30;"	d
GIT_FILTER_IDENT_PRIORITY	include/git2/sys/filter.h	40;"	d
GIT_FILTER_SMUDGE	include/git2/filter.h	/^	GIT_FILTER_SMUDGE = GIT_FILTER_TO_WORKTREE,$/;"	e	enum:__anon231
GIT_FILTER_TO_ODB	include/git2/filter.h	/^	GIT_FILTER_TO_ODB = 1,$/;"	e	enum:__anon231
GIT_FILTER_TO_WORKTREE	include/git2/filter.h	/^	GIT_FILTER_TO_WORKTREE = 0,$/;"	e	enum:__anon231
GIT_FILTER_VERSION	include/git2/sys/filter.h	245;"	d
GIT_FLEX_ARRAY	src/cc-compat.h	17;"	d
GIT_FLEX_ARRAY	src/cc-compat.h	20;"	d
GIT_FLEX_ARRAY	src/cc-compat.h	22;"	d
GIT_FLEX_ARRAY	src/cc-compat.h	28;"	d
GIT_FORMAT_PRINTF	include/git2/common.h	42;"	d
GIT_FORMAT_PRINTF	include/git2/common.h	44;"	d
GIT_GLOBAL	src/global.h	22;"	d
GIT_HASHSIG_IGNORE_WHITESPACE	src/hashsig.h	/^	GIT_HASHSIG_IGNORE_WHITESPACE = 1, \/* ignore whitespace *\/$/;"	e	enum:__anon113
GIT_HASHSIG_NORMAL	src/hashsig.h	/^	GIT_HASHSIG_NORMAL = 0, \/* use all data *\/$/;"	e	enum:__anon113
GIT_HASHSIG_SMART_WHITESPACE	src/hashsig.h	/^	GIT_HASHSIG_SMART_WHITESPACE = 2, \/* ignore \\r and all space after \\n *\/$/;"	e	enum:__anon113
GIT_HASH_CNG_DLL_NAME	src/hash/hash_win32.h	38;"	d
GIT_HASH_CNG_HASH_OBJECT_LEN	src/hash/hash_win32.h	44;"	d
GIT_HASH_CNG_HASH_REUSABLE	src/hash/hash_win32.h	47;"	d
GIT_HASH_CNG_HASH_TYPE	src/hash/hash_win32.h	41;"	d
GIT_HEAD_FILE	src/refs.h	33;"	d
GIT_HOOKS_DIR	src/repo_template.h	13;"	d
GIT_HOOKS_DIR_MODE	src/repo_template.h	14;"	d
GIT_HOOKS_README_CONTENT	src/repo_template.h	18;"	d
GIT_HOOKS_README_FILE	src/repo_template.h	16;"	d
GIT_HOOKS_README_MODE	src/repo_template.h	17;"	d
GIT_HTTP_AUTH_BASIC	src/transports/http.c	/^	GIT_HTTP_AUTH_BASIC = 1,$/;"	e	enum:__anon79	file:
GIT_IDXENTRY_ADDED	include/git2/index.h	111;"	d
GIT_IDXENTRY_CONFLICTED	include/git2/index.h	116;"	d
GIT_IDXENTRY_EXTENDED	include/git2/index.h	76;"	d
GIT_IDXENTRY_EXTENDED2	include/git2/index.h	97;"	d
GIT_IDXENTRY_EXTENDED_FLAGS	include/git2/index.h	99;"	d
GIT_IDXENTRY_HASHED	include/git2/index.h	113;"	d
GIT_IDXENTRY_INTENT_TO_ADD	include/git2/index.h	94;"	d
GIT_IDXENTRY_NAMEMASK	include/git2/index.h	74;"	d
GIT_IDXENTRY_NEW_SKIP_WORKTREE	include/git2/index.h	119;"	d
GIT_IDXENTRY_REMOVE	include/git2/index.h	109;"	d
GIT_IDXENTRY_SKIP_WORKTREE	include/git2/index.h	95;"	d
GIT_IDXENTRY_STAGE	include/git2/index.h	80;"	d
GIT_IDXENTRY_STAGEMASK	include/git2/index.h	75;"	d
GIT_IDXENTRY_STAGESHIFT	include/git2/index.h	78;"	d
GIT_IDXENTRY_UNHASHED	include/git2/index.h	114;"	d
GIT_IDXENTRY_UNPACKED	include/git2/index.h	118;"	d
GIT_IDXENTRY_UPDATE	include/git2/index.h	108;"	d
GIT_IDXENTRY_UPTODATE	include/git2/index.h	110;"	d
GIT_IDXENTRY_VALID	include/git2/index.h	77;"	d
GIT_IDXENTRY_WT_REMOVE	include/git2/index.h	115;"	d
GIT_IGNORECASE_DEFAULT	src/repository.h	/^	GIT_IGNORECASE_DEFAULT = GIT_CVAR_FALSE,$/;"	e	enum:__anon53
GIT_IGNORESTAT_DEFAULT	src/repository.h	/^	GIT_IGNORESTAT_DEFAULT = GIT_CVAR_FALSE,$/;"	e	enum:__anon53
GIT_IGNORE_CONFIG	src/attr.h	13;"	d
GIT_IGNORE_DEFAULT_RULES	src/ignore.c	10;"	d	file:
GIT_IGNORE_FILE	src/ignore.h	14;"	d
GIT_IGNORE_FILE_INREPO	src/ignore.h	15;"	d
GIT_IGNORE_FILE_XDG	src/ignore.h	16;"	d
GIT_IGNORE_INTERNAL	src/ignore.c	8;"	d	file:
GIT_INDEXCAP_FROM_OWNER	include/git2/index.h	/^	GIT_INDEXCAP_FROM_OWNER  = -1,$/;"	e	enum:__anon229
GIT_INDEXCAP_IGNORE_CASE	include/git2/index.h	/^	GIT_INDEXCAP_IGNORE_CASE = 1,$/;"	e	enum:__anon229
GIT_INDEXCAP_NO_FILEMODE	include/git2/index.h	/^	GIT_INDEXCAP_NO_FILEMODE = 2,$/;"	e	enum:__anon229
GIT_INDEXCAP_NO_SYMLINKS	include/git2/index.h	/^	GIT_INDEXCAP_NO_SYMLINKS = 4,$/;"	e	enum:__anon229
GIT_INDEX_ADD_CHECK_PATHSPEC	include/git2/index.h	/^	GIT_INDEX_ADD_CHECK_PATHSPEC = (1u << 2),$/;"	e	enum:__anon230
GIT_INDEX_ADD_DEFAULT	include/git2/index.h	/^	GIT_INDEX_ADD_DEFAULT = 0,$/;"	e	enum:__anon230
GIT_INDEX_ADD_DISABLE_PATHSPEC_MATCH	include/git2/index.h	/^	GIT_INDEX_ADD_DISABLE_PATHSPEC_MATCH = (1u << 1),$/;"	e	enum:__anon230
GIT_INDEX_ADD_FORCE	include/git2/index.h	/^	GIT_INDEX_ADD_FORCE = (1u << 0),$/;"	e	enum:__anon230
GIT_INDEX_FILE	src/index.h	17;"	d
GIT_INDEX_FILE_MODE	src/index.h	18;"	d
GIT_INDEX_STAGE_ANY	include/git2/index.h	147;"	d
GIT_INFO_DIR	src/repo_template.h	25;"	d
GIT_INFO_DIR_MODE	src/repo_template.h	26;"	d
GIT_INFO_EXCLUDE_CONTENT	src/repo_template.h	30;"	d
GIT_INFO_EXCLUDE_FILE	src/repo_template.h	28;"	d
GIT_INFO_EXCLUDE_MODE	src/repo_template.h	29;"	d
GIT_INIT_STRUCTURE	src/common.h	169;"	d
GIT_INLINE	src/checkout.c	/^GIT_INLINE(bool) conflict_pathspec_match($/;"	f
GIT_INLINE	src/common.h	15;"	d
GIT_INLINE	src/common.h	17;"	d
GIT_INLINE	src/diff_tform.c	/^GIT_INLINE(bool) delta_is_new_only(git_diff_delta *delta)$/;"	f
GIT_INLINE	src/diff_tform.c	/^GIT_INLINE(bool) delta_is_split(git_diff_delta *delta)$/;"	f
GIT_INLINE	src/iterator.c	/^GIT_INLINE(bool) tree_iterator__at_tree(tree_iterator *ti)$/;"	f
GIT_INLINE	src/iterator.c	/^GIT_INLINE(bool) workdir_path_is_dotgit(const git_buf *path)$/;"	f
GIT_INLINE	src/merge.c	/^GIT_INLINE(bool) merge_check_fastforward($/;"	f
GIT_INLINE	src/merge.c	/^GIT_INLINE(bool) merge_check_uptodate($/;"	f
GIT_INLINE	src/merge.c	/^GIT_INLINE(bool) merge_diff_any_side_added_or_modified($/;"	f
GIT_INLINE	src/merge.c	/^GIT_INLINE(bool) path_is_prefixed(const char *parent, const char *child)$/;"	f
GIT_INLINE	src/pathspec.c	/^GIT_INLINE(size_t) pathspec_mark_pattern(git_bitvec *used, size_t pos)$/;"	f
GIT_INLINE	src/tree.c	/^GIT_INLINE(git_filemode_t) normalize_filemode(git_filemode_t filemode)$/;"	f
GIT_INLINE	src/vector.c	/^GIT_INLINE(size_t) compute_new_size(git_vector *v)$/;"	f
GIT_INLINE	src/win32/posix_w32.c	/^GIT_INLINE(time_t) filetime_to_time_t(const FILETIME *ft)$/;"	f
GIT_ISBLOCKED	src/posix.h	36;"	d
GIT_ISBLOCKED	src/posix.h	38;"	d
GIT_ITERATOR_DONT_AUTOEXPAND	src/iterator.h	/^	GIT_ITERATOR_DONT_AUTOEXPAND  = (1u << 3),$/;"	e	enum:__anon111
GIT_ITERATOR_DONT_IGNORE_CASE	src/iterator.h	/^	GIT_ITERATOR_DONT_IGNORE_CASE = (1u << 1),$/;"	e	enum:__anon111
GIT_ITERATOR_FIRST_ACCESS	src/iterator.c	50;"	d	file:
GIT_ITERATOR_IGNORE_CASE	src/iterator.h	/^	GIT_ITERATOR_IGNORE_CASE = (1u << 0),$/;"	e	enum:__anon111
GIT_ITERATOR_INCLUDE_TREES	src/iterator.h	/^	GIT_ITERATOR_INCLUDE_TREES    = (1u << 2),$/;"	e	enum:__anon111
GIT_ITERATOR_PRECOMPOSE_UNICODE	src/iterator.h	/^	GIT_ITERATOR_PRECOMPOSE_UNICODE = (1u << 4),$/;"	e	enum:__anon111
GIT_ITERATOR_TYPE_EMPTY	src/iterator.h	/^	GIT_ITERATOR_TYPE_EMPTY = 0,$/;"	e	enum:__anon110
GIT_ITERATOR_TYPE_FS	src/iterator.h	/^	GIT_ITERATOR_TYPE_FS = 4,$/;"	e	enum:__anon110
GIT_ITERATOR_TYPE_INDEX	src/iterator.h	/^	GIT_ITERATOR_TYPE_INDEX = 2,$/;"	e	enum:__anon110
GIT_ITERATOR_TYPE_TREE	src/iterator.h	/^	GIT_ITERATOR_TYPE_TREE = 1,$/;"	e	enum:__anon110
GIT_ITERATOR_TYPE_WORKDIR	src/iterator.h	/^	GIT_ITERATOR_TYPE_WORKDIR = 3,$/;"	e	enum:__anon110
GIT_ITEROVER	include/git2/errors.h	/^	GIT_ITEROVER        = -31,	\/*< Signals end of iteration with iterator *\/$/;"	e	enum:__anon225
GIT_LOOSE_PRIORITY	src/odb.c	25;"	d	file:
GIT_MAP_FILE	src/map.h	20;"	d
GIT_MAP_FIXED	src/map.h	24;"	d
GIT_MAP_PRIVATE	src/map.h	22;"	d
GIT_MAP_SHARED	src/map.h	21;"	d
GIT_MAP_TYPE	src/map.h	23;"	d
GIT_MEMORY_BARRIER	src/thread-utils.h	273;"	d
GIT_MEMORY_BARRIER	src/thread-utils.h	275;"	d
GIT_MEMORY_BARRIER	src/thread-utils.h	277;"	d
GIT_MERGE_DEFAULT	include/git2/merge.h	/^	GIT_MERGE_DEFAULT = 0,$/;"	e	enum:__anon252
GIT_MERGE_DIFF_BOTH_ADDED	src/merge.h	/^	GIT_MERGE_DIFF_BOTH_ADDED = (1 << 1),$/;"	e	enum:__anon142
GIT_MERGE_DIFF_BOTH_DELETED	src/merge.h	/^	GIT_MERGE_DIFF_BOTH_DELETED = (1 << 2),$/;"	e	enum:__anon142
GIT_MERGE_DIFF_BOTH_MODIFIED	src/merge.h	/^	GIT_MERGE_DIFF_BOTH_MODIFIED = (1 << 0),$/;"	e	enum:__anon142
GIT_MERGE_DIFF_BOTH_RENAMED	src/merge.h	/^	GIT_MERGE_DIFF_BOTH_RENAMED = (1 << 7),$/;"	e	enum:__anon142
GIT_MERGE_DIFF_BOTH_RENAMED_1_TO_2	src/merge.h	/^	GIT_MERGE_DIFF_BOTH_RENAMED_1_TO_2 = (1 << 8),$/;"	e	enum:__anon142
GIT_MERGE_DIFF_BOTH_RENAMED_2_TO_1	src/merge.h	/^	GIT_MERGE_DIFF_BOTH_RENAMED_2_TO_1 = (1 << 9),$/;"	e	enum:__anon142
GIT_MERGE_DIFF_DF_CHILD	src/merge.h	/^	GIT_MERGE_DIFF_DF_CHILD = (1 << 11),$/;"	e	enum:__anon142
GIT_MERGE_DIFF_DIRECTORY_FILE	src/merge.h	/^	GIT_MERGE_DIFF_DIRECTORY_FILE = (1 << 10),$/;"	e	enum:__anon142
GIT_MERGE_DIFF_MODIFIED_DELETED	src/merge.h	/^	GIT_MERGE_DIFF_MODIFIED_DELETED = (1 << 3),$/;"	e	enum:__anon142
GIT_MERGE_DIFF_NONE	src/merge.h	/^	GIT_MERGE_DIFF_NONE = 0,$/;"	e	enum:__anon142
GIT_MERGE_DIFF_RENAMED_ADDED	src/merge.h	/^	GIT_MERGE_DIFF_RENAMED_ADDED = (1 << 6),$/;"	e	enum:__anon142
GIT_MERGE_DIFF_RENAMED_DELETED	src/merge.h	/^	GIT_MERGE_DIFF_RENAMED_DELETED = (1 << 5),$/;"	e	enum:__anon142
GIT_MERGE_DIFF_RENAMED_MODIFIED	src/merge.h	/^	GIT_MERGE_DIFF_RENAMED_MODIFIED = (1 << 4),$/;"	e	enum:__anon142
GIT_MERGE_FASTFORWARD_ONLY	include/git2/merge.h	/^	GIT_MERGE_FASTFORWARD_ONLY = 2,$/;"	e	enum:__anon252
GIT_MERGE_FILE_FAVOR_NORMAL	include/git2/merge.h	/^	GIT_MERGE_FILE_FAVOR_NORMAL = 0,$/;"	e	enum:__anon250
GIT_MERGE_FILE_FAVOR_OURS	include/git2/merge.h	/^	GIT_MERGE_FILE_FAVOR_OURS = 1,$/;"	e	enum:__anon250
GIT_MERGE_FILE_FAVOR_THEIRS	include/git2/merge.h	/^	GIT_MERGE_FILE_FAVOR_THEIRS = 2,$/;"	e	enum:__anon250
GIT_MERGE_FILE_FAVOR_UNION	include/git2/merge.h	/^	GIT_MERGE_FILE_FAVOR_UNION = 3,$/;"	e	enum:__anon250
GIT_MERGE_FILE_INPUT_INIT	src/merge_file.h	23;"	d
GIT_MERGE_FILE_MODE	src/merge.h	19;"	d
GIT_MERGE_FILE_OPTIONS_INIT	src/merge_file.h	56;"	d
GIT_MERGE_FILE_RESULT_INIT	src/merge_file.h	35;"	d
GIT_MERGE_FILE_SIDE_EXISTS	src/merge_file.c	18;"	d	file:
GIT_MERGE_FILE_SIMPLIFY_ALNUM	src/merge_file.h	/^	GIT_MERGE_FILE_SIMPLIFY_ALNUM = (1 << 0),$/;"	e	enum:__anon57
GIT_MERGE_FILE_STYLE_DIFF3	src/merge_file.h	/^	GIT_MERGE_FILE_STYLE_DIFF3 = 1,$/;"	e	enum:__anon58
GIT_MERGE_FILE_STYLE_MERGE	src/merge_file.h	/^	GIT_MERGE_FILE_STYLE_MERGE = 0,$/;"	e	enum:__anon58
GIT_MERGE_HEAD_FILE	src/refs.h	36;"	d
GIT_MERGE_INDEX_ENTRY_EXISTS	src/merge.c	44;"	d	file:
GIT_MERGE_INDEX_ENTRY_ISFILE	src/merge.c	45;"	d	file:
GIT_MERGE_MODE_FILE	src/merge.h	18;"	d
GIT_MERGE_MSG_FILE	src/merge.h	17;"	d
GIT_MERGE_NO_FASTFORWARD	include/git2/merge.h	/^	GIT_MERGE_NO_FASTFORWARD = 1,$/;"	e	enum:__anon252
GIT_MERGE_OPTS_INIT	include/git2/merge.h	145;"	d
GIT_MERGE_OPTS_VERSION	include/git2/merge.h	144;"	d
GIT_MERGE_TREE_FIND_RENAMES	include/git2/merge.h	/^	GIT_MERGE_TREE_FIND_RENAMES = (1 << 0),$/;"	e	enum:__anon249
GIT_MERGE_TREE_OPTS_INIT	include/git2/merge.h	105;"	d
GIT_MERGE_TREE_OPTS_VERSION	include/git2/merge.h	104;"	d
GIT_MERGE_TREE_RENAME_THRESHOLD	src/merge.h	21;"	d
GIT_MERGE_TREE_TARGET_LIMIT	src/merge.h	22;"	d
GIT_MKDIR_CHMOD	src/fileops.h	/^	GIT_MKDIR_CHMOD = 4,$/;"	e	enum:__anon44
GIT_MKDIR_CHMOD_PATH	src/fileops.h	/^	GIT_MKDIR_CHMOD_PATH = 8,$/;"	e	enum:__anon44
GIT_MKDIR_EXCL	src/fileops.h	/^	GIT_MKDIR_EXCL = 1,$/;"	e	enum:__anon44
GIT_MKDIR_PATH	src/fileops.h	/^	GIT_MKDIR_PATH = 2,$/;"	e	enum:__anon44
GIT_MKDIR_SKIP_LAST	src/fileops.h	/^	GIT_MKDIR_SKIP_LAST = 16,$/;"	e	enum:__anon44
GIT_MKDIR_SKIP_LAST2	src/fileops.h	/^	GIT_MKDIR_SKIP_LAST2 = 32,$/;"	e	enum:__anon44
GIT_MKDIR_VERIFY_DIR	src/fileops.h	/^	GIT_MKDIR_VERIFY_DIR = 64,$/;"	e	enum:__anon44
GIT_MMAP_VALIDATE	src/map.h	38;"	d
GIT_MODE_ISBLOB	src/fileops.h	221;"	d
GIT_MODE_PERMS_MASK	src/fileops.h	218;"	d
GIT_MODE_TYPE	src/fileops.h	220;"	d
GIT_MODE_TYPE_MASK	src/fileops.h	219;"	d
GIT_MODULES_FILE	src/submodule.c	26;"	d	file:
GIT_NOTES_DEFAULT_MSG_ADD	src/notes.h	17;"	d
GIT_NOTES_DEFAULT_MSG_RM	src/notes.h	20;"	d
GIT_NOTES_DEFAULT_REF	src/notes.h	15;"	d
GIT_OBJECTS_DIR	src/odb.h	19;"	d
GIT_OBJECTS_INFO_DIR	src/repo_template.h	10;"	d
GIT_OBJECTS_PACK_DIR	src/repo_template.h	11;"	d
GIT_OBJECT_DIR_MODE	src/odb.h	20;"	d
GIT_OBJECT_FILE_MODE	src/odb.h	21;"	d
GIT_OBJ_ANY	include/git2/types.h	/^	GIT_OBJ_ANY = -2,		\/**< Object can be any of the following *\/$/;"	e	enum:__anon235
GIT_OBJ_BAD	include/git2/types.h	/^	GIT_OBJ_BAD = -1,		\/**< Object is invalid. *\/$/;"	e	enum:__anon235
GIT_OBJ_BLOB	include/git2/types.h	/^	GIT_OBJ_BLOB = 3,		\/**< A file revision object. *\/$/;"	e	enum:__anon235
GIT_OBJ_COMMIT	include/git2/types.h	/^	GIT_OBJ_COMMIT = 1,		\/**< A commit object. *\/$/;"	e	enum:__anon235
GIT_OBJ_OFS_DELTA	include/git2/types.h	/^	GIT_OBJ_OFS_DELTA = 6, \/**< A delta, base is given by an offset. *\/$/;"	e	enum:__anon235
GIT_OBJ_REF_DELTA	include/git2/types.h	/^	GIT_OBJ_REF_DELTA = 7, \/**< A delta, base is given by object id. *\/$/;"	e	enum:__anon235
GIT_OBJ_TAG	include/git2/types.h	/^	GIT_OBJ_TAG = 4,		\/**< An annotated tag object. *\/$/;"	e	enum:__anon235
GIT_OBJ_TREE	include/git2/types.h	/^	GIT_OBJ_TREE = 2,		\/**< A tree (directory listing) object. *\/$/;"	e	enum:__anon235
GIT_OBJ__EXT1	include/git2/types.h	/^	GIT_OBJ__EXT1 = 0,		\/**< Reserved for future use. *\/$/;"	e	enum:__anon235
GIT_OBJ__EXT2	include/git2/types.h	/^	GIT_OBJ__EXT2 = 5,		\/**< Reserved for future use. *\/$/;"	e	enum:__anon235
GIT_ODB_BACKEND_INIT	include/git2/sys/odb_backend.h	90;"	d
GIT_ODB_BACKEND_VERSION	include/git2/sys/odb_backend.h	89;"	d
GIT_OID_HEXSZ	include/git2/oid.h	26;"	d
GIT_OID_HEX_ZERO	include/git2/common.h	84;"	d
GIT_OID_MINPREFIXLEN	include/git2/oid.h	30;"	d
GIT_OID_RAWSZ	include/git2/oid.h	23;"	d
GIT_OK	include/git2/errors.h	/^	GIT_OK         =  0,		\/*< No error *\/$/;"	e	enum:__anon225
GIT_OPT_ENABLE_CACHING	include/git2/common.h	/^	GIT_OPT_ENABLE_CACHING,$/;"	e	enum:__anon234
GIT_OPT_GET_CACHED_MEMORY	include/git2/common.h	/^	GIT_OPT_GET_CACHED_MEMORY,$/;"	e	enum:__anon234
GIT_OPT_GET_MWINDOW_MAPPED_LIMIT	include/git2/common.h	/^	GIT_OPT_GET_MWINDOW_MAPPED_LIMIT,$/;"	e	enum:__anon234
GIT_OPT_GET_MWINDOW_SIZE	include/git2/common.h	/^	GIT_OPT_GET_MWINDOW_SIZE,$/;"	e	enum:__anon234
GIT_OPT_GET_SEARCH_PATH	include/git2/common.h	/^	GIT_OPT_GET_SEARCH_PATH,$/;"	e	enum:__anon234
GIT_OPT_GET_TEMPLATE_PATH	include/git2/common.h	/^	GIT_OPT_GET_TEMPLATE_PATH,$/;"	e	enum:__anon234
GIT_OPT_SET_CACHE_MAX_SIZE	include/git2/common.h	/^	GIT_OPT_SET_CACHE_MAX_SIZE,$/;"	e	enum:__anon234
GIT_OPT_SET_CACHE_OBJECT_LIMIT	include/git2/common.h	/^	GIT_OPT_SET_CACHE_OBJECT_LIMIT,$/;"	e	enum:__anon234
GIT_OPT_SET_MWINDOW_MAPPED_LIMIT	include/git2/common.h	/^	GIT_OPT_SET_MWINDOW_MAPPED_LIMIT,$/;"	e	enum:__anon234
GIT_OPT_SET_MWINDOW_SIZE	include/git2/common.h	/^	GIT_OPT_SET_MWINDOW_SIZE,$/;"	e	enum:__anon234
GIT_OPT_SET_SEARCH_PATH	include/git2/common.h	/^	GIT_OPT_SET_SEARCH_PATH,$/;"	e	enum:__anon234
GIT_OPT_SET_TEMPLATE_PATH	include/git2/common.h	/^	GIT_OPT_SET_TEMPLATE_PATH$/;"	e	enum:__anon234
GIT_ORIG_HEAD_FILE	src/refs.h	34;"	d
GIT_PACKBUILDER_ADDING_OBJECTS	include/git2/pack.h	/^	GIT_PACKBUILDER_ADDING_OBJECTS = 0,$/;"	e	enum:__anon204
GIT_PACKBUILDER_DELTAFICATION	include/git2/pack.h	/^	GIT_PACKBUILDER_DELTAFICATION = 1,$/;"	e	enum:__anon204
GIT_PACKBUILDER__MUTEX_OP	src/pack-objects.c	44;"	d	file:
GIT_PACKBUILDER__MUTEX_OP	src/pack-objects.c	52;"	d	file:
GIT_PACKEDREFS_FILE	src/refs.h	29;"	d
GIT_PACKEDREFS_FILE_MODE	src/refs.h	31;"	d
GIT_PACKEDREFS_HEADER	src/refs.h	30;"	d
GIT_PACKED_PRIORITY	src/odb.c	26;"	d	file:
GIT_PACKREF_HAS_PEEL	src/refs.c	/^	GIT_PACKREF_HAS_PEEL = 1,$/;"	e	enum:__anon157	file:
GIT_PACKREF_WAS_LOOSE	src/refs.c	/^	GIT_PACKREF_WAS_LOOSE = 2$/;"	e	enum:__anon157	file:
GIT_PACK_BIG_FILE_THRESHOLD	src/pack-objects.h	26;"	d
GIT_PACK_CACHE_MEMORY_LIMIT	src/pack.h	68;"	d
GIT_PACK_CACHE_SIZE_LIMIT	src/pack.h	69;"	d
GIT_PACK_DELTA_CACHE_LIMIT	src/pack-objects.h	25;"	d
GIT_PACK_DELTA_CACHE_SIZE	src/pack-objects.h	24;"	d
GIT_PACK_DEPTH	src/pack-objects.h	23;"	d
GIT_PACK_FILE_MODE	src/pack.h	21;"	d
GIT_PACK_WINDOW	src/pack-objects.h	22;"	d
GIT_PASSTHROUGH	include/git2/errors.h	/^	GIT_PASSTHROUGH     = -30,	\/*< Internal only *\/$/;"	e	enum:__anon225
GIT_PATHSPEC_DEFAULT	include/git2/pathspec.h	/^	GIT_PATHSPEC_DEFAULT        = 0,$/;"	e	enum:__anon216
GIT_PATHSPEC_FAILURES_ONLY	include/git2/pathspec.h	/^	GIT_PATHSPEC_FAILURES_ONLY  = (1u << 5),$/;"	e	enum:__anon216
GIT_PATHSPEC_FIND_FAILURES	include/git2/pathspec.h	/^	GIT_PATHSPEC_FIND_FAILURES  = (1u << 4),$/;"	e	enum:__anon216
GIT_PATHSPEC_IGNORE_CASE	include/git2/pathspec.h	/^	GIT_PATHSPEC_IGNORE_CASE    = (1u << 0),$/;"	e	enum:__anon216
GIT_PATHSPEC_NOMATCH	src/pathspec.h	54;"	d
GIT_PATHSPEC_NO_GLOB	include/git2/pathspec.h	/^	GIT_PATHSPEC_NO_GLOB        = (1u << 2),$/;"	e	enum:__anon216
GIT_PATHSPEC_NO_MATCH_ERROR	include/git2/pathspec.h	/^	GIT_PATHSPEC_NO_MATCH_ERROR = (1u << 3),$/;"	e	enum:__anon216
GIT_PATHSPEC_USE_CASE	include/git2/pathspec.h	/^	GIT_PATHSPEC_USE_CASE       = (1u << 1),$/;"	e	enum:__anon216
GIT_PATH_DIR_IGNORE_CASE	src/path.h	/^	GIT_PATH_DIR_IGNORE_CASE = (1u << 0),$/;"	e	enum:__anon125
GIT_PATH_DIR_PRECOMPOSE_UNICODE	src/path.h	/^	GIT_PATH_DIR_PRECOMPOSE_UNICODE = (1u << 1),$/;"	e	enum:__anon125
GIT_PATH_EQUAL	src/path.h	/^enum { GIT_PATH_NOTEQUAL = 0, GIT_PATH_EQUAL = 1, GIT_PATH_PREFIX = 2 };$/;"	e	enum:__anon127
GIT_PATH_ICONV_INIT	src/path.h	414;"	d
GIT_PATH_LIST_SEPARATOR	include/git2/common.h	71;"	d
GIT_PATH_MAX	include/git2/common.h	79;"	d
GIT_PATH_NATIVE_ENCODING	src/path.h	400;"	d
GIT_PATH_NATIVE_ENCODING	src/path.h	402;"	d
GIT_PATH_NOTEQUAL	src/path.h	/^enum { GIT_PATH_NOTEQUAL = 0, GIT_PATH_EQUAL = 1, GIT_PATH_PREFIX = 2 };$/;"	e	enum:__anon127
GIT_PATH_PREFIX	src/path.h	/^enum { GIT_PATH_NOTEQUAL = 0, GIT_PATH_EQUAL = 1, GIT_PATH_PREFIX = 2 };$/;"	e	enum:__anon127
GIT_PATH_REPO_ENCODING	src/path.h	397;"	d
GIT_PERMS_CANONICAL	src/fileops.h	215;"	d
GIT_PERMS_FOR_WRITE	src/fileops.h	216;"	d
GIT_PERMS_IS_EXEC	src/fileops.h	214;"	d
GIT_PKT_ACK	src/transports/smart.h	/^	GIT_PKT_ACK,$/;"	e	enum:git_pkt_type
GIT_PKT_CMD	src/transports/smart.h	/^	GIT_PKT_CMD,$/;"	e	enum:git_pkt_type
GIT_PKT_COMMENT	src/transports/smart.h	/^	GIT_PKT_COMMENT,$/;"	e	enum:git_pkt_type
GIT_PKT_DATA	src/transports/smart.h	/^	GIT_PKT_DATA,$/;"	e	enum:git_pkt_type
GIT_PKT_ERR	src/transports/smart.h	/^	GIT_PKT_ERR,$/;"	e	enum:git_pkt_type
GIT_PKT_FLUSH	src/transports/smart.h	/^	GIT_PKT_FLUSH,$/;"	e	enum:git_pkt_type
GIT_PKT_HAVE	src/transports/smart.h	/^	GIT_PKT_HAVE,$/;"	e	enum:git_pkt_type
GIT_PKT_NAK	src/transports/smart.h	/^	GIT_PKT_NAK,$/;"	e	enum:git_pkt_type
GIT_PKT_NG	src/transports/smart.h	/^	GIT_PKT_NG,$/;"	e	enum:git_pkt_type
GIT_PKT_OK	src/transports/smart.h	/^	GIT_PKT_OK,$/;"	e	enum:git_pkt_type
GIT_PKT_PACK	src/transports/smart.h	/^	GIT_PKT_PACK,$/;"	e	enum:git_pkt_type
GIT_PKT_PROGRESS	src/transports/smart.h	/^	GIT_PKT_PROGRESS,$/;"	e	enum:git_pkt_type
GIT_PKT_REF	src/transports/smart.h	/^	GIT_PKT_REF,$/;"	e	enum:git_pkt_type
GIT_PKT_UNPACK	src/transports/smart.h	/^	GIT_PKT_UNPACK,$/;"	e	enum:git_pkt_type
GIT_POOL_INIT_STRINGPOOL	src/pool.h	42;"	d
GIT_POOL_MIN_PAGESZ	src/pool.c	18;"	d	file:
GIT_POOL_MIN_USABLE	src/pool.c	17;"	d	file:
GIT_PQUEUE_FIXED_SIZE	src/pqueue.h	/^	GIT_PQUEUE_FIXED_SIZE = (GIT_VECTOR_FLAG_MAX << 1),$/;"	e	enum:__anon156
GIT_PRECOMPOSE_DEFAULT	src/repository.h	/^	GIT_PRECOMPOSE_DEFAULT = GIT_CVAR_FALSE,$/;"	e	enum:__anon53
GIT_PROT_EXEC	src/map.h	17;"	d
GIT_PROT_NONE	src/map.h	14;"	d
GIT_PROT_READ	src/map.h	15;"	d
GIT_PROT_WRITE	src/map.h	16;"	d
GIT_PTHREAD_H	src/win32/pthread.h	9;"	d
GIT_PUSH_OPTIONS_INIT	include/git2/push.h	40;"	d
GIT_PUSH_OPTIONS_VERSION	include/git2/push.h	39;"	d
GIT_REBASE_APPLY_APPLYING_FILE	src/refs.h	44;"	d
GIT_REBASE_APPLY_DIR	src/refs.h	42;"	d
GIT_REBASE_APPLY_REBASING_FILE	src/refs.h	43;"	d
GIT_REBASE_MERGE_DIR	src/refs.h	40;"	d
GIT_REBASE_MERGE_INTERACTIVE_FILE	src/refs.h	41;"	d
GIT_REFCOUNT_DEC	src/util.h	218;"	d
GIT_REFCOUNT_INC	src/util.h	214;"	d
GIT_REFCOUNT_OWN	src/util.h	224;"	d
GIT_REFCOUNT_OWNER	src/util.h	228;"	d
GIT_REFCOUNT_VAL	src/util.h	230;"	d
GIT_REFDB_BACKEND_INIT	include/git2/sys/refdb_backend.h	159;"	d
GIT_REFDB_BACKEND_VERSION	include/git2/sys/refdb_backend.h	158;"	d
GIT_REFLOG_DIR	src/reflog.h	14;"	d
GIT_REFLOG_DIR_MODE	src/reflog.h	15;"	d
GIT_REFLOG_FILE_MODE	src/reflog.h	16;"	d
GIT_REFLOG_SIZE_MIN	src/reflog.h	18;"	d
GIT_REFNAME_MAX	src/refs.h	52;"	d
GIT_REFSPEC_TAGS	src/refspec.h	24;"	d
GIT_REFS_DIR	src/refs.h	18;"	d
GIT_REFS_DIR_MODE	src/refs.h	23;"	d
GIT_REFS_FILE_MODE	src/refs.h	24;"	d
GIT_REFS_HEADS_DIR	src/refs.h	19;"	d
GIT_REFS_HEADS_MASTER_FILE	src/refs.h	45;"	d
GIT_REFS_NOTES_DIR	src/refs.h	22;"	d
GIT_REFS_REMOTES_DIR	src/refs.h	21;"	d
GIT_REFS_STASH_FILE	src/refs.h	48;"	d
GIT_REFS_TAGS_DIR	src/refs.h	20;"	d
GIT_REFS_TAGS_DIR_LEN	src/tag.c	454;"	d	file:
GIT_REF_FORMAT_ALLOW_ONELEVEL	include/git2/refs.h	/^	GIT_REF_FORMAT_ALLOW_ONELEVEL = (1u << 0),$/;"	e	enum:__anon208
GIT_REF_FORMAT_NORMAL	include/git2/refs.h	/^	GIT_REF_FORMAT_NORMAL = 0u,$/;"	e	enum:__anon208
GIT_REF_FORMAT_REFSPEC_PATTERN	include/git2/refs.h	/^	GIT_REF_FORMAT_REFSPEC_PATTERN = (1u << 1),$/;"	e	enum:__anon208
GIT_REF_FORMAT_REFSPEC_SHORTHAND	include/git2/refs.h	/^	GIT_REF_FORMAT_REFSPEC_SHORTHAND = (1u << 2),$/;"	e	enum:__anon208
GIT_REF_FORMAT__PRECOMPOSE_UNICODE	src/refs.h	50;"	d
GIT_REF_INVALID	include/git2/types.h	/^	GIT_REF_INVALID = 0, \/** Invalid reference *\/$/;"	e	enum:__anon236
GIT_REF_LISTALL	include/git2/types.h	/^	GIT_REF_LISTALL = GIT_REF_OID|GIT_REF_SYMBOLIC,$/;"	e	enum:__anon236
GIT_REF_OID	include/git2/types.h	/^	GIT_REF_OID = 1, \/** A reference which points at an object id *\/$/;"	e	enum:__anon236
GIT_REF_SYMBOLIC	include/git2/types.h	/^	GIT_REF_SYMBOLIC = 2, \/** A reference which points at another reference *\/$/;"	e	enum:__anon236
GIT_REF_TYPEMASK	src/refs.c	1032;"	d	file:
GIT_REMOTE_CALLBACKS_INIT	include/git2/remote.h	495;"	d
GIT_REMOTE_CALLBACKS_VERSION	include/git2/remote.h	494;"	d
GIT_REMOTE_COMPLETION_DOWNLOAD	include/git2/remote.h	/^	GIT_REMOTE_COMPLETION_DOWNLOAD,$/;"	e	enum:git_remote_completion_type
GIT_REMOTE_COMPLETION_ERROR	include/git2/remote.h	/^	GIT_REMOTE_COMPLETION_ERROR,$/;"	e	enum:git_remote_completion_type
GIT_REMOTE_COMPLETION_INDEXING	include/git2/remote.h	/^	GIT_REMOTE_COMPLETION_INDEXING,$/;"	e	enum:git_remote_completion_type
GIT_REMOTE_DOWNLOAD_TAGS_ALL	include/git2/remote.h	/^	GIT_REMOTE_DOWNLOAD_TAGS_ALL = 2$/;"	e	enum:__anon248
GIT_REMOTE_DOWNLOAD_TAGS_AUTO	include/git2/remote.h	/^	GIT_REMOTE_DOWNLOAD_TAGS_AUTO = 0,$/;"	e	enum:__anon248
GIT_REMOTE_DOWNLOAD_TAGS_NONE	include/git2/remote.h	/^	GIT_REMOTE_DOWNLOAD_TAGS_NONE = 1,$/;"	e	enum:__anon248
GIT_REMOTE_ORIGIN	src/remote.h	16;"	d
GIT_RENAMED_REF_FILE	src/refs.h	26;"	d
GIT_REPOSITORY_INIT_BARE	include/git2/repository.h	/^	GIT_REPOSITORY_INIT_BARE              = (1u << 0),$/;"	e	enum:__anon210
GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE	include/git2/repository.h	/^	GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE = (1u << 5),$/;"	e	enum:__anon210
GIT_REPOSITORY_INIT_MKDIR	include/git2/repository.h	/^	GIT_REPOSITORY_INIT_MKDIR             = (1u << 3),$/;"	e	enum:__anon210
GIT_REPOSITORY_INIT_MKPATH	include/git2/repository.h	/^	GIT_REPOSITORY_INIT_MKPATH            = (1u << 4),$/;"	e	enum:__anon210
GIT_REPOSITORY_INIT_NO_DOTGIT_DIR	include/git2/repository.h	/^	GIT_REPOSITORY_INIT_NO_DOTGIT_DIR     = (1u << 2),$/;"	e	enum:__anon210
GIT_REPOSITORY_INIT_NO_REINIT	include/git2/repository.h	/^	GIT_REPOSITORY_INIT_NO_REINIT         = (1u << 1),$/;"	e	enum:__anon210
GIT_REPOSITORY_INIT_OPTIONS_INIT	include/git2/repository.h	268;"	d
GIT_REPOSITORY_INIT_OPTIONS_VERSION	include/git2/repository.h	267;"	d
GIT_REPOSITORY_INIT_SHARED_ALL	include/git2/repository.h	/^	GIT_REPOSITORY_INIT_SHARED_ALL   = 0002777,$/;"	e	enum:__anon211
GIT_REPOSITORY_INIT_SHARED_GROUP	include/git2/repository.h	/^	GIT_REPOSITORY_INIT_SHARED_GROUP = 0002775,$/;"	e	enum:__anon211
GIT_REPOSITORY_INIT_SHARED_UMASK	include/git2/repository.h	/^	GIT_REPOSITORY_INIT_SHARED_UMASK = 0,$/;"	e	enum:__anon211
GIT_REPOSITORY_INIT__HAS_DOTGIT	src/repository.h	/^	GIT_REPOSITORY_INIT__HAS_DOTGIT = (1u << 16),$/;"	e	enum:__anon54
GIT_REPOSITORY_INIT__IS_REINIT	src/repository.h	/^	GIT_REPOSITORY_INIT__IS_REINIT  = (1u << 18),$/;"	e	enum:__anon54
GIT_REPOSITORY_INIT__NATURAL_WD	src/repository.h	/^	GIT_REPOSITORY_INIT__NATURAL_WD = (1u << 17),$/;"	e	enum:__anon54
GIT_REPOSITORY_OPEN_BARE	include/git2/repository.h	/^	GIT_REPOSITORY_OPEN_BARE      = (1 << 2),$/;"	e	enum:__anon209
GIT_REPOSITORY_OPEN_CROSS_FS	include/git2/repository.h	/^	GIT_REPOSITORY_OPEN_CROSS_FS  = (1 << 1),$/;"	e	enum:__anon209
GIT_REPOSITORY_OPEN_NO_SEARCH	include/git2/repository.h	/^	GIT_REPOSITORY_OPEN_NO_SEARCH = (1 << 0),$/;"	e	enum:__anon209
GIT_REPOSITORY_STATE_APPLY_MAILBOX	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_APPLY_MAILBOX,$/;"	e	enum:__anon213
GIT_REPOSITORY_STATE_APPLY_MAILBOX_OR_REBASE	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_APPLY_MAILBOX_OR_REBASE,$/;"	e	enum:__anon213
GIT_REPOSITORY_STATE_BISECT	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_BISECT,$/;"	e	enum:__anon213
GIT_REPOSITORY_STATE_CHERRY_PICK	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_CHERRY_PICK,$/;"	e	enum:__anon213
GIT_REPOSITORY_STATE_MERGE	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_MERGE,$/;"	e	enum:__anon213
GIT_REPOSITORY_STATE_NONE	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_NONE,$/;"	e	enum:__anon213
GIT_REPOSITORY_STATE_REBASE	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_REBASE,$/;"	e	enum:__anon213
GIT_REPOSITORY_STATE_REBASE_INTERACTIVE	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_REBASE_INTERACTIVE,$/;"	e	enum:__anon213
GIT_REPOSITORY_STATE_REBASE_MERGE	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_REBASE_MERGE,$/;"	e	enum:__anon213
GIT_REPOSITORY_STATE_REVERT	include/git2/repository.h	/^	GIT_REPOSITORY_STATE_REVERT,$/;"	e	enum:__anon213
GIT_REPO_VERSION	src/repository.c	34;"	d	file:
GIT_RESET_HARD	include/git2/reset.h	/^	GIT_RESET_HARD  = 3, \/** MIXED plus changes in working tree discarded *\/$/;"	e	enum:__anon246
GIT_RESET_MIXED	include/git2/reset.h	/^	GIT_RESET_MIXED = 2, \/** SOFT plus reset index to the commit *\/$/;"	e	enum:__anon246
GIT_RESET_SOFT	include/git2/reset.h	/^	GIT_RESET_SOFT  = 1, \/** Move the head to the given commit *\/$/;"	e	enum:__anon246
GIT_RESTRICT	src/win32/pthread.h	14;"	d
GIT_RESTRICT	src/win32/pthread.h	16;"	d
GIT_REVERT_FILE_MODE	src/revert.c	19;"	d	file:
GIT_REVERT_HEAD_FILE	src/refs.h	37;"	d
GIT_REVERT_OPTS_INIT	include/git2/revert.h	34;"	d
GIT_REVERT_OPTS_VERSION	include/git2/revert.h	33;"	d
GIT_REVPARSE_MERGE_BASE	include/git2/revparse.h	/^	GIT_REVPARSE_MERGE_BASE     = 1 << 2,$/;"	e	enum:__anon205
GIT_REVPARSE_RANGE	include/git2/revparse.h	/^	GIT_REVPARSE_RANGE          = 1 << 1,$/;"	e	enum:__anon205
GIT_REVPARSE_SINGLE	include/git2/revparse.h	/^	GIT_REVPARSE_SINGLE         = 1 << 0,$/;"	e	enum:__anon205
GIT_RMDIR_EMPTY_HIERARCHY	src/fileops.h	/^	GIT_RMDIR_EMPTY_HIERARCHY = 0,$/;"	e	enum:__anon45
GIT_RMDIR_EMPTY_PARENTS	src/fileops.h	/^	GIT_RMDIR_EMPTY_PARENTS   = (1 << 2),$/;"	e	enum:__anon45
GIT_RMDIR_REMOVE_BLOCKERS	src/fileops.h	/^	GIT_RMDIR_REMOVE_BLOCKERS = (1 << 3),$/;"	e	enum:__anon45
GIT_RMDIR_REMOVE_FILES	src/fileops.h	/^	GIT_RMDIR_REMOVE_FILES    = (1 << 0),$/;"	e	enum:__anon45
GIT_RMDIR_SKIP_NONEMPTY	src/fileops.h	/^	GIT_RMDIR_SKIP_NONEMPTY   = (1 << 1),$/;"	e	enum:__anon45
GIT_RMDIR_SKIP_ROOT	src/fileops.h	/^	GIT_RMDIR_SKIP_ROOT       = (1 << 4),$/;"	e	enum:__anon45
GIT_RWLOCK_STATIC_INIT	src/thread-utils.h	203;"	d
GIT_RWLOCK_STATIC_INIT	src/thread-utils.h	81;"	d
GIT_SAFE_CRLF_FAIL	src/repository.h	/^	GIT_SAFE_CRLF_FAIL = 1,$/;"	e	enum:__anon53
GIT_SAFE_CRLF_FALSE	src/repository.h	/^	GIT_SAFE_CRLF_FALSE = 0,$/;"	e	enum:__anon53
GIT_SAFE_CRLF_WARN	src/repository.h	/^	GIT_SAFE_CRLF_WARN = 2,$/;"	e	enum:__anon53
GIT_SERVICE_RECEIVEPACK	include/git2/transport.h	/^	GIT_SERVICE_RECEIVEPACK = 4,$/;"	e	enum:__anon245
GIT_SERVICE_RECEIVEPACK_LS	include/git2/transport.h	/^	GIT_SERVICE_RECEIVEPACK_LS = 3,$/;"	e	enum:__anon245
GIT_SERVICE_UPLOADPACK	include/git2/transport.h	/^	GIT_SERVICE_UPLOADPACK = 2,$/;"	e	enum:__anon245
GIT_SERVICE_UPLOADPACK_LS	include/git2/transport.h	/^	GIT_SERVICE_UPLOADPACK_LS = 1,$/;"	e	enum:__anon245
GIT_SIDE_BAND_DATA	src/transports/smart.h	13;"	d
GIT_SIDE_BAND_ERROR	src/transports/smart.h	15;"	d
GIT_SIDE_BAND_PROGRESS	src/transports/smart.h	14;"	d
GIT_SOCKET	src/posix.h	/^typedef SOCKET GIT_SOCKET;$/;"	t
GIT_SOCKET	src/posix.h	/^typedef int GIT_SOCKET;$/;"	t
GIT_SORT_NONE	include/git2/revwalk.h	29;"	d
GIT_SORT_REVERSE	include/git2/revwalk.h	50;"	d
GIT_SORT_TIME	include/git2/revwalk.h	43;"	d
GIT_SORT_TOPOLOGICAL	include/git2/revwalk.h	36;"	d
GIT_SRWLOCK	src/win32/pthread.h	/^typedef struct { void *Ptr; } GIT_SRWLOCK;$/;"	t	typeref:struct:__anon165
GIT_STASH_DEFAULT	include/git2/stash.h	/^	GIT_STASH_DEFAULT = 0,$/;"	e	enum:__anon256
GIT_STASH_FILE	src/refs.h	47;"	d
GIT_STASH_INCLUDE_IGNORED	include/git2/stash.h	/^	GIT_STASH_INCLUDE_IGNORED = (1 << 2),$/;"	e	enum:__anon256
GIT_STASH_INCLUDE_UNTRACKED	include/git2/stash.h	/^	GIT_STASH_INCLUDE_UNTRACKED = (1 << 1),$/;"	e	enum:__anon256
GIT_STASH_KEEP_INDEX	include/git2/stash.h	/^	GIT_STASH_KEEP_INDEX = (1 << 0),$/;"	e	enum:__anon256
GIT_STATUS_CURRENT	include/git2/status.h	/^	GIT_STATUS_CURRENT = 0,$/;"	e	enum:__anon258
GIT_STATUS_IGNORED	include/git2/status.h	/^	GIT_STATUS_IGNORED          = (1u << 14),$/;"	e	enum:__anon258
GIT_STATUS_INDEX_DELETED	include/git2/status.h	/^	GIT_STATUS_INDEX_DELETED    = (1u << 2),$/;"	e	enum:__anon258
GIT_STATUS_INDEX_MODIFIED	include/git2/status.h	/^	GIT_STATUS_INDEX_MODIFIED   = (1u << 1),$/;"	e	enum:__anon258
GIT_STATUS_INDEX_NEW	include/git2/status.h	/^	GIT_STATUS_INDEX_NEW        = (1u << 0),$/;"	e	enum:__anon258
GIT_STATUS_INDEX_RENAMED	include/git2/status.h	/^	GIT_STATUS_INDEX_RENAMED    = (1u << 3),$/;"	e	enum:__anon258
GIT_STATUS_INDEX_TYPECHANGE	include/git2/status.h	/^	GIT_STATUS_INDEX_TYPECHANGE = (1u << 4),$/;"	e	enum:__anon258
GIT_STATUS_OPTIONS_INIT	include/git2/status.h	175;"	d
GIT_STATUS_OPTIONS_VERSION	include/git2/status.h	174;"	d
GIT_STATUS_OPT_DEFAULTS	include/git2/status.h	146;"	d
GIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH	include/git2/status.h	/^	GIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH   = (1u << 5),$/;"	e	enum:__anon260
GIT_STATUS_OPT_EXCLUDE_SUBMODULES	include/git2/status.h	/^	GIT_STATUS_OPT_EXCLUDE_SUBMODULES       = (1u << 3),$/;"	e	enum:__anon260
GIT_STATUS_OPT_INCLUDE_IGNORED	include/git2/status.h	/^	GIT_STATUS_OPT_INCLUDE_IGNORED          = (1u << 1),$/;"	e	enum:__anon260
GIT_STATUS_OPT_INCLUDE_UNMODIFIED	include/git2/status.h	/^	GIT_STATUS_OPT_INCLUDE_UNMODIFIED       = (1u << 2),$/;"	e	enum:__anon260
GIT_STATUS_OPT_INCLUDE_UNTRACKED	include/git2/status.h	/^	GIT_STATUS_OPT_INCLUDE_UNTRACKED        = (1u << 0),$/;"	e	enum:__anon260
GIT_STATUS_OPT_NO_REFRESH	include/git2/status.h	/^	GIT_STATUS_OPT_NO_REFRESH               = (1u << 12),$/;"	e	enum:__anon260
GIT_STATUS_OPT_RECURSE_IGNORED_DIRS	include/git2/status.h	/^	GIT_STATUS_OPT_RECURSE_IGNORED_DIRS     = (1u << 6),$/;"	e	enum:__anon260
GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS	include/git2/status.h	/^	GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS   = (1u << 4),$/;"	e	enum:__anon260
GIT_STATUS_OPT_RENAMES_FROM_REWRITES	include/git2/status.h	/^	GIT_STATUS_OPT_RENAMES_FROM_REWRITES    = (1u << 11),$/;"	e	enum:__anon260
GIT_STATUS_OPT_RENAMES_HEAD_TO_INDEX	include/git2/status.h	/^	GIT_STATUS_OPT_RENAMES_HEAD_TO_INDEX    = (1u << 7),$/;"	e	enum:__anon260
GIT_STATUS_OPT_RENAMES_INDEX_TO_WORKDIR	include/git2/status.h	/^	GIT_STATUS_OPT_RENAMES_INDEX_TO_WORKDIR = (1u << 8),$/;"	e	enum:__anon260
GIT_STATUS_OPT_SORT_CASE_INSENSITIVELY	include/git2/status.h	/^	GIT_STATUS_OPT_SORT_CASE_INSENSITIVELY  = (1u << 10),$/;"	e	enum:__anon260
GIT_STATUS_OPT_SORT_CASE_SENSITIVELY	include/git2/status.h	/^	GIT_STATUS_OPT_SORT_CASE_SENSITIVELY    = (1u << 9),$/;"	e	enum:__anon260
GIT_STATUS_SHOW_INDEX_AND_WORKDIR	include/git2/status.h	/^	GIT_STATUS_SHOW_INDEX_AND_WORKDIR = 0,$/;"	e	enum:__anon259
GIT_STATUS_SHOW_INDEX_ONLY	include/git2/status.h	/^	GIT_STATUS_SHOW_INDEX_ONLY = 1,$/;"	e	enum:__anon259
GIT_STATUS_SHOW_WORKDIR_ONLY	include/git2/status.h	/^	GIT_STATUS_SHOW_WORKDIR_ONLY = 2,$/;"	e	enum:__anon259
GIT_STATUS_WT_DELETED	include/git2/status.h	/^	GIT_STATUS_WT_DELETED       = (1u << 9),$/;"	e	enum:__anon258
GIT_STATUS_WT_MODIFIED	include/git2/status.h	/^	GIT_STATUS_WT_MODIFIED      = (1u << 8),$/;"	e	enum:__anon258
GIT_STATUS_WT_NEW	include/git2/status.h	/^	GIT_STATUS_WT_NEW           = (1u << 7),$/;"	e	enum:__anon258
GIT_STATUS_WT_RENAMED	include/git2/status.h	/^	GIT_STATUS_WT_RENAMED       = (1u << 11),$/;"	e	enum:__anon258
GIT_STATUS_WT_TYPECHANGE	include/git2/status.h	/^	GIT_STATUS_WT_TYPECHANGE    = (1u << 10),$/;"	e	enum:__anon258
GIT_STDLIB_CALL	src/common.h	50;"	d
GIT_STDLIB_CALL	src/win32/msvc-compat.h	49;"	d
GIT_STREAM_RDONLY	include/git2/odb_backend.h	/^	GIT_STREAM_RDONLY = (1 << 1),$/;"	e	enum:__anon255
GIT_STREAM_RW	include/git2/odb_backend.h	/^	GIT_STREAM_RW = (GIT_STREAM_RDONLY | GIT_STREAM_WRONLY),$/;"	e	enum:__anon255
GIT_STREAM_WRONLY	include/git2/odb_backend.h	/^	GIT_STREAM_WRONLY = (1 << 2),$/;"	e	enum:__anon255
GIT_SUBMODULE_IGNORE_ALL	include/git2/types.h	/^	GIT_SUBMODULE_IGNORE_ALL       = 4,  \/* never dirty *\/$/;"	e	enum:__anon240
GIT_SUBMODULE_IGNORE_DEFAULT	include/git2/types.h	/^	GIT_SUBMODULE_IGNORE_DEFAULT   = 0$/;"	e	enum:__anon240
GIT_SUBMODULE_IGNORE_DIRTY	include/git2/types.h	/^	GIT_SUBMODULE_IGNORE_DIRTY     = 3,  \/* only dirty if HEAD moved *\/$/;"	e	enum:__anon240
GIT_SUBMODULE_IGNORE_NONE	include/git2/types.h	/^	GIT_SUBMODULE_IGNORE_NONE      = 1,  \/* any change or untracked == dirty *\/$/;"	e	enum:__anon240
GIT_SUBMODULE_IGNORE_RESET	include/git2/types.h	/^	GIT_SUBMODULE_IGNORE_RESET     = -1, \/* reset to on-disk value *\/$/;"	e	enum:__anon240
GIT_SUBMODULE_IGNORE_UNTRACKED	include/git2/types.h	/^	GIT_SUBMODULE_IGNORE_UNTRACKED = 2,  \/* dirty if tracked files change *\/$/;"	e	enum:__anon240
GIT_SUBMODULE_RECURSE_NO	include/git2/types.h	/^	GIT_SUBMODULE_RECURSE_NO = 0,$/;"	e	enum:__anon241
GIT_SUBMODULE_RECURSE_ONDEMAND	include/git2/types.h	/^	GIT_SUBMODULE_RECURSE_ONDEMAND = 2,$/;"	e	enum:__anon241
GIT_SUBMODULE_RECURSE_RESET	include/git2/types.h	/^	GIT_SUBMODULE_RECURSE_RESET = -1,$/;"	e	enum:__anon241
GIT_SUBMODULE_RECURSE_YES	include/git2/types.h	/^	GIT_SUBMODULE_RECURSE_YES = 1,$/;"	e	enum:__anon241
GIT_SUBMODULE_STATUS_INDEX_ADDED	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_INDEX_ADDED       = (1u << 4),$/;"	e	enum:__anon207
GIT_SUBMODULE_STATUS_INDEX_DELETED	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_INDEX_DELETED     = (1u << 5),$/;"	e	enum:__anon207
GIT_SUBMODULE_STATUS_INDEX_MODIFIED	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_INDEX_MODIFIED    = (1u << 6),$/;"	e	enum:__anon207
GIT_SUBMODULE_STATUS_IN_CONFIG	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_IN_CONFIG         = (1u << 2),$/;"	e	enum:__anon207
GIT_SUBMODULE_STATUS_IN_HEAD	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_IN_HEAD           = (1u << 0),$/;"	e	enum:__anon207
GIT_SUBMODULE_STATUS_IN_INDEX	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_IN_INDEX          = (1u << 1),$/;"	e	enum:__anon207
GIT_SUBMODULE_STATUS_IN_WD	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_IN_WD             = (1u << 3),$/;"	e	enum:__anon207
GIT_SUBMODULE_STATUS_IS_INDEX_UNMODIFIED	include/git2/submodule.h	96;"	d
GIT_SUBMODULE_STATUS_IS_UNMODIFIED	include/git2/submodule.h	93;"	d
GIT_SUBMODULE_STATUS_IS_WD_DIRTY	include/git2/submodule.h	103;"	d
GIT_SUBMODULE_STATUS_IS_WD_UNMODIFIED	include/git2/submodule.h	99;"	d
GIT_SUBMODULE_STATUS_WD_ADDED	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_WD_ADDED          = (1u << 8),$/;"	e	enum:__anon207
GIT_SUBMODULE_STATUS_WD_DELETED	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_WD_DELETED        = (1u << 9),$/;"	e	enum:__anon207
GIT_SUBMODULE_STATUS_WD_INDEX_MODIFIED	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_WD_INDEX_MODIFIED = (1u << 11),$/;"	e	enum:__anon207
GIT_SUBMODULE_STATUS_WD_MODIFIED	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_WD_MODIFIED       = (1u << 10),$/;"	e	enum:__anon207
GIT_SUBMODULE_STATUS_WD_UNINITIALIZED	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_WD_UNINITIALIZED  = (1u << 7),$/;"	e	enum:__anon207
GIT_SUBMODULE_STATUS_WD_UNTRACKED	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_WD_UNTRACKED      = (1u << 13),$/;"	e	enum:__anon207
GIT_SUBMODULE_STATUS_WD_WD_MODIFIED	include/git2/submodule.h	/^	GIT_SUBMODULE_STATUS_WD_WD_MODIFIED    = (1u << 12),$/;"	e	enum:__anon207
GIT_SUBMODULE_STATUS__CLEAR_INTERNAL	src/submodule.h	114;"	d
GIT_SUBMODULE_STATUS__HEAD_NOT_SUBMODULE	src/submodule.h	/^	GIT_SUBMODULE_STATUS__HEAD_NOT_SUBMODULE  = (1u << 24),$/;"	e	enum:__anon43
GIT_SUBMODULE_STATUS__HEAD_OID_VALID	src/submodule.h	/^	GIT_SUBMODULE_STATUS__HEAD_OID_VALID      = (1u << 21),$/;"	e	enum:__anon43
GIT_SUBMODULE_STATUS__INDEX_FLAGS	include/git2/submodule.h	90;"	d
GIT_SUBMODULE_STATUS__INDEX_MULTIPLE_ENTRIES	src/submodule.h	/^	GIT_SUBMODULE_STATUS__INDEX_MULTIPLE_ENTRIES = (1u << 27),$/;"	e	enum:__anon43
GIT_SUBMODULE_STATUS__INDEX_NOT_SUBMODULE	src/submodule.h	/^	GIT_SUBMODULE_STATUS__INDEX_NOT_SUBMODULE = (1u << 25),$/;"	e	enum:__anon43
GIT_SUBMODULE_STATUS__INDEX_OID_VALID	src/submodule.h	/^	GIT_SUBMODULE_STATUS__INDEX_OID_VALID     = (1u << 22),$/;"	e	enum:__anon43
GIT_SUBMODULE_STATUS__IN_FLAGS	include/git2/submodule.h	89;"	d
GIT_SUBMODULE_STATUS__WD_FLAGS	include/git2/submodule.h	91;"	d
GIT_SUBMODULE_STATUS__WD_NOT_SUBMODULE	src/submodule.h	/^	GIT_SUBMODULE_STATUS__WD_NOT_SUBMODULE    = (1u << 26),$/;"	e	enum:__anon43
GIT_SUBMODULE_STATUS__WD_OID_VALID	src/submodule.h	/^	GIT_SUBMODULE_STATUS__WD_OID_VALID        = (1u << 23),$/;"	e	enum:__anon43
GIT_SUBMODULE_STATUS__WD_SCANNED	src/submodule.h	/^	GIT_SUBMODULE_STATUS__WD_SCANNED          = (1u << 20),$/;"	e	enum:__anon43
GIT_SUBMODULE_UPDATE_CHECKOUT	include/git2/types.h	/^	GIT_SUBMODULE_UPDATE_CHECKOUT = 1,$/;"	e	enum:__anon239
GIT_SUBMODULE_UPDATE_DEFAULT	include/git2/types.h	/^	GIT_SUBMODULE_UPDATE_DEFAULT  = 0$/;"	e	enum:__anon239
GIT_SUBMODULE_UPDATE_MERGE	include/git2/types.h	/^	GIT_SUBMODULE_UPDATE_MERGE    = 3,$/;"	e	enum:__anon239
GIT_SUBMODULE_UPDATE_NONE	include/git2/types.h	/^	GIT_SUBMODULE_UPDATE_NONE     = 4,$/;"	e	enum:__anon239
GIT_SUBMODULE_UPDATE_REBASE	include/git2/types.h	/^	GIT_SUBMODULE_UPDATE_REBASE   = 2,$/;"	e	enum:__anon239
GIT_SUBMODULE_UPDATE_RESET	include/git2/types.h	/^	GIT_SUBMODULE_UPDATE_RESET    = -1,$/;"	e	enum:__anon239
GIT_SYMLINKS_DEFAULT	src/repository.h	/^	GIT_SYMLINKS_DEFAULT = GIT_CVAR_TRUE,$/;"	e	enum:__anon53
GIT_SYMREF	src/refs.h	28;"	d
GIT_SYSDIR_GLOBAL	src/sysdir.h	/^	GIT_SYSDIR_GLOBAL = 1,$/;"	e	enum:__anon141
GIT_SYSDIR_SYSTEM	src/sysdir.h	/^	GIT_SYSDIR_SYSTEM = 0,$/;"	e	enum:__anon141
GIT_SYSDIR_TEMPLATE	src/sysdir.h	/^	GIT_SYSDIR_TEMPLATE = 3,$/;"	e	enum:__anon141
GIT_SYSDIR_XDG	src/sysdir.h	/^	GIT_SYSDIR_XDG    = 2,$/;"	e	enum:__anon141
GIT_SYSDIR__MAX	src/sysdir.h	/^	GIT_SYSDIR__MAX   = 4,$/;"	e	enum:__anon141
GIT_TRACE_DEBUG	include/git2/trace.h	/^	GIT_TRACE_DEBUG = 5,$/;"	e	enum:__anon247
GIT_TRACE_ERROR	include/git2/trace.h	/^	GIT_TRACE_ERROR = 2,$/;"	e	enum:__anon247
GIT_TRACE_FATAL	include/git2/trace.h	/^	GIT_TRACE_FATAL = 1,$/;"	e	enum:__anon247
GIT_TRACE_INFO	include/git2/trace.h	/^	GIT_TRACE_INFO = 4,$/;"	e	enum:__anon247
GIT_TRACE_NONE	include/git2/trace.h	/^	GIT_TRACE_NONE = 0,$/;"	e	enum:__anon247
GIT_TRACE_TRACE	include/git2/trace.h	/^	GIT_TRACE_TRACE = 6$/;"	e	enum:__anon247
GIT_TRACE_WARN	include/git2/trace.h	/^	GIT_TRACE_WARN = 3,$/;"	e	enum:__anon247
GIT_TRANSPORTFLAGS_NONE	include/git2/transport.h	/^	GIT_TRANSPORTFLAGS_NONE = 0,$/;"	e	enum:__anon244
GIT_TRANSPORTFLAGS_NO_CHECK_CERT	include/git2/transport.h	/^	GIT_TRANSPORTFLAGS_NO_CHECK_CERT = 1$/;"	e	enum:__anon244
GIT_TRANSPORT_COUNT	src/transport.c	47;"	d	file:
GIT_TRANSPORT_INIT	include/git2/transport.h	280;"	d
GIT_TRANSPORT_VERSION	include/git2/transport.h	279;"	d
GIT_TREEWALK_POST	include/git2/tree.h	/^	GIT_TREEWALK_POST = 1, \/* Post-order *\/$/;"	e	enum:__anon222
GIT_TREEWALK_PRE	include/git2/tree.h	/^	GIT_TREEWALK_PRE = 0, \/* Pre-order *\/$/;"	e	enum:__anon222
GIT_TRUSTCTIME_DEFAULT	src/repository.h	/^	GIT_TRUSTCTIME_DEFAULT = GIT_CVAR_TRUE,$/;"	e	enum:__anon53
GIT_TYPEOF	src/cc-compat.h	33;"	d
GIT_TYPEOF	src/cc-compat.h	35;"	d
GIT_UNUSED	src/cc-compat.h	38;"	d
GIT_VECTOR_FLAG_MAX	src/vector.h	/^	GIT_VECTOR_FLAG_MAX = (1u << 1),$/;"	e	enum:__anon137
GIT_VECTOR_GET	src/vector.h	64;"	d
GIT_VECTOR_INIT	src/vector.h	27;"	d
GIT_VECTOR_SORTED	src/vector.h	/^	GIT_VECTOR_SORTED = (1u << 0),$/;"	e	enum:__anon137
GIT_WIN32	include/git2/common.h	48;"	d
GIT_WINHTTP_AUTH_BASIC	src/transports/winhttp.c	/^	GIT_WINHTTP_AUTH_BASIC = 1,$/;"	e	enum:__anon61	file:
GIT_WINHTTP_AUTH_NEGOTIATE	src/transports/winhttp.c	/^	GIT_WINHTTP_AUTH_NEGOTIATE = 2,$/;"	e	enum:__anon61	file:
GIT_WIN_PATH_UTF16	src/win32/utf-conv.h	14;"	d
GIT_WIN_PATH_UTF8	src/win32/utf-conv.h	17;"	d
GIT_ZSTREAM_INIT	src/zstream.h	22;"	d
GIT__USE_OFFMAP	src/offmap.h	22;"	d
GIT__USE_OIDMAP	src/oidmap.h	29;"	d
GIT__USE_STRMAP	src/strmap.h	22;"	d
GIT__WIN32_NO_WRAP_DIR	src/win32/dir.c	7;"	d	file:
GUNZIP	deps/zlib/inflate.h	16;"	d
GZIP	deps/zlib/deflate.h	23;"	d
H	src/hash/hash_generic.h	/^	unsigned int H[5];$/;"	m	struct:git_hash_ctx
HASHSIG_HASH_MIX	src/hashsig.c	20;"	d	file:
HASHSIG_HASH_SHIFT	src/hashsig.c	18;"	d	file:
HASHSIG_HASH_START	src/hashsig.c	17;"	d	file:
HASHSIG_HEAP_MIN_SIZE	src/hashsig.c	24;"	d	file:
HASHSIG_HEAP_SIZE	src/hashsig.c	23;"	d	file:
HASHSIG_IN_PROGRESS_INIT	src/hashsig.c	155;"	d	file:
HASHSIG_MAX_RUN	src/hashsig.c	16;"	d	file:
HASHSIG_SCALE	src/hashsig.c	14;"	d	file:
HASH_LIMIT	src/delta.c	11;"	d	file:
HAVE_MEMCPY	deps/zlib/zutil.h	226;"	d
HAVE_VSNPRINTF	deps/zlib/zutil.h	182;"	d
HAVE_VSNPRINTF	deps/zlib/zutil.h	187;"	d
HCRC	deps/zlib/inflate.h	/^    HCRC,       \/* i: waiting for header crc (gzip) *\/$/;"	e	enum:__anon198
HCRC_STATE	deps/zlib/deflate.h	55;"	d
HEAD	deps/zlib/inflate.h	/^    HEAD,       \/* i: waiting for magic header *\/$/;"	e	enum:__anon198
HEAP_LCHILD_OF	src/hashsig.c	41;"	d	file:
HEAP_PARENT_OF	src/hashsig.c	43;"	d	file:
HEAP_RCHILD_OF	src/hashsig.c	42;"	d	file:
HEAP_SIZE	deps/zlib/deflate.h	45;"	d
HTTP_BOTH	deps/http-parser/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_ERRNO_GEN	deps/http-parser/http_parser.h	181;"	d
HTTP_ERRNO_GEN	deps/http-parser/http_parser.h	185;"	d
HTTP_ERRNO_MAP	deps/http-parser/http_parser.h	/^  HTTP_ERRNO_MAP(HTTP_ERRNO_GEN)$/;"	e	enum:http_errno
HTTP_ERRNO_MAP	deps/http-parser/http_parser.h	139;"	d
HTTP_MAX_HEADER_SIZE	deps/http-parser/http_parser.h	55;"	d
HTTP_METHOD_MAP	deps/http-parser/http_parser.h	/^  HTTP_METHOD_MAP(XX)$/;"	e	enum:http_method
HTTP_METHOD_MAP	deps/http-parser/http_parser.h	80;"	d
HTTP_PARSER_ERRNO	deps/http-parser/http_parser.h	189;"	d
HTTP_PARSER_STRICT	deps/http-parser/http_parser.h	51;"	d
HTTP_PARSER_VERSION_MAJOR	deps/http-parser/http_parser.h	27;"	d
HTTP_PARSER_VERSION_MINOR	deps/http-parser/http_parser.h	28;"	d
HTTP_REQUEST	deps/http-parser/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_RESPONSE	deps/http-parser/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_STRERROR_GEN	deps/http-parser/http_parser.c	402;"	d	file:
HTTP_STRERROR_GEN	deps/http-parser/http_parser.c	409;"	d	file:
INCLUDE_array_h__	src/array.h	8;"	d
INCLUDE_attr_file_h__	src/attr_file.h	8;"	d
INCLUDE_attr_h__	src/attr.h	8;"	d
INCLUDE_attrcache_h__	src/attrcache.h	8;"	d
INCLUDE_bitvec_h__	src/bitvec.h	8;"	d
INCLUDE_blame_git__	src/blame_git.h	8;"	d
INCLUDE_blame_h__	src/blame.h	2;"	d
INCLUDE_blob_h__	src/blob.h	8;"	d
INCLUDE_branch_h__	src/branch.h	8;"	d
INCLUDE_buf_text_h__	src/buf_text.h	8;"	d
INCLUDE_buffer_h__	src/buffer.h	8;"	d
INCLUDE_cache_h__	src/cache.h	8;"	d
INCLUDE_checkout_h__	src/checkout.h	8;"	d
INCLUDE_cl_merge_helpers_h__	tests/merge/merge_helpers.h	2;"	d
INCLUDE_cl_push_util_h__	tests/online/push_util.h	2;"	d
INCLUDE_cl_status_helpers_h__	tests/status/status_helpers.h	2;"	d
INCLUDE_commit_h__	src/commit.h	8;"	d
INCLUDE_commit_list_h__	src/commit_list.h	8;"	d
INCLUDE_common_h__	src/common.h	8;"	d
INCLUDE_compat_h__	src/cc-compat.h	8;"	d
INCLUDE_config_file_h__	src/config_file.h	8;"	d
INCLUDE_config_h__	src/config.h	8;"	d
INCLUDE_delta_apply_h__	src/delta-apply.h	8;"	d
INCLUDE_diff_driver_h__	src/diff_driver.h	8;"	d
INCLUDE_diff_file_h__	src/diff_file.h	8;"	d
INCLUDE_diff_h__	src/diff.h	8;"	d
INCLUDE_diff_patch_h__	src/diff_patch.h	8;"	d
INCLUDE_diff_xdiff_h__	src/diff_xdiff.h	8;"	d
INCLUDE_dir_h__	src/win32/dir.h	8;"	d
INCLUDE_fetch_h__	src/fetch.h	8;"	d
INCLUDE_fetchhead_h__	src/fetchhead.h	8;"	d
INCLUDE_filebuf_h__	src/filebuf.h	8;"	d
INCLUDE_filediff_h__	src/merge_file.h	8;"	d
INCLUDE_fileops_h__	src/fileops.h	8;"	d
INCLUDE_filter_crlf_h__	tests/filter/crlf.h	2;"	d
INCLUDE_filter_h__	src/filter.h	8;"	d
INCLUDE_fnmatch__compat_h__	src/fnmatch.h	8;"	d
INCLUDE_git_attr_h__	include/git2/attr.h	8;"	d
INCLUDE_git_blame_h__	include/git2/blame.h	9;"	d
INCLUDE_git_blob_h__	include/git2/blob.h	8;"	d
INCLUDE_git_branch_h__	include/git2/branch.h	8;"	d
INCLUDE_git_buf_h__	include/git2/buffer.h	8;"	d
INCLUDE_git_checkout_h__	include/git2/checkout.h	8;"	d
INCLUDE_git_clone_h__	include/git2/clone.h	8;"	d
INCLUDE_git_commit_h__	include/git2/commit.h	8;"	d
INCLUDE_git_common_h__	include/git2/common.h	8;"	d
INCLUDE_git_config_h__	include/git2/config.h	8;"	d
INCLUDE_git_cred_helpers_h__	include/git2/cred_helpers.h	8;"	d
INCLUDE_git_delta_h__	src/delta.h	6;"	d
INCLUDE_git_diff_h__	include/git2/diff.h	8;"	d
INCLUDE_git_errors_h__	include/git2/errors.h	8;"	d
INCLUDE_git_filter_h__	include/git2/filter.h	8;"	d
INCLUDE_git_findfile_h__	src/win32/findfile.h	9;"	d
INCLUDE_git_git_h__	include/git2.h	9;"	d
INCLUDE_git_graph_h__	include/git2/graph.h	8;"	d
INCLUDE_git_ignore_h__	include/git2/ignore.h	8;"	d
INCLUDE_git_index_h__	include/git2/index.h	8;"	d
INCLUDE_git_merge_h__	include/git2/merge.h	8;"	d
INCLUDE_git_message_h__	include/git2/message.h	8;"	d
INCLUDE_git_net_h__	include/git2/net.h	8;"	d
INCLUDE_git_note_h__	include/git2/notes.h	8;"	d
INCLUDE_git_object_h__	include/git2/object.h	8;"	d
INCLUDE_git_odb_backend_h__	include/git2/odb_backend.h	8;"	d
INCLUDE_git_odb_h__	include/git2/odb.h	8;"	d
INCLUDE_git_oid_h__	include/git2/oid.h	8;"	d
INCLUDE_git_pack_h__	include/git2/pack.h	8;"	d
INCLUDE_git_patch_h__	include/git2/patch.h	8;"	d
INCLUDE_git_pathspec_h__	include/git2/pathspec.h	8;"	d
INCLUDE_git_push_h__	include/git2/push.h	8;"	d
INCLUDE_git_refdb_h__	include/git2/refdb.h	8;"	d
INCLUDE_git_reflog_h__	include/git2/reflog.h	8;"	d
INCLUDE_git_refs_h__	include/git2/refs.h	8;"	d
INCLUDE_git_refspec_h__	include/git2/refspec.h	8;"	d
INCLUDE_git_remote_h__	include/git2/remote.h	8;"	d
INCLUDE_git_repository_h__	include/git2/repository.h	8;"	d
INCLUDE_git_reset_h__	include/git2/reset.h	8;"	d
INCLUDE_git_revert_h__	include/git2/revert.h	8;"	d
INCLUDE_git_revparse_h__	include/git2/revparse.h	8;"	d
INCLUDE_git_revwalk_h__	include/git2/revwalk.h	8;"	d
INCLUDE_git_signature_h__	include/git2/signature.h	8;"	d
INCLUDE_git_stash_h__	include/git2/stash.h	8;"	d
INCLUDE_git_status_h__	include/git2/status.h	8;"	d
INCLUDE_git_strarray_h__	include/git2/strarray.h	8;"	d
INCLUDE_git_submodule_h__	include/git2/submodule.h	8;"	d
INCLUDE_git_tag_h__	include/git2/tag.h	8;"	d
INCLUDE_git_threads_h__	include/git2/threads.h	8;"	d
INCLUDE_git_trace_h__	include/git2/trace.h	8;"	d
INCLUDE_git_transport_h__	include/git2/transport.h	8;"	d
INCLUDE_git_tree_h__	include/git2/tree.h	8;"	d
INCLUDE_git_types_h__	include/git2/types.h	8;"	d
INCLUDE_git_utfconv_h__	src/win32/utf-conv.h	8;"	d
INCLUDE_git_version_h__	include/git2/version.h	8;"	d
INCLUDE_git_win32_error_h__	src/win32/error.h	9;"	d
INCLUDE_global_h__	src/global.h	8;"	d
INCLUDE_hash_generic_h__	src/hash/hash_generic.h	9;"	d
INCLUDE_hash_h__	src/hash.h	8;"	d
INCLUDE_hash_openssl_h__	src/hash/hash_openssl.h	9;"	d
INCLUDE_hash_win32_h__	src/hash/hash_win32.h	9;"	d
INCLUDE_hashsig_h__	src/hashsig.h	8;"	d
INCLUDE_ignore_h__	src/ignore.h	8;"	d
INCLUDE_index_h__	src/index.h	8;"	d
INCLUDE_iterator_h__	src/iterator.h	8;"	d
INCLUDE_map_h__	src/map.h	8;"	d
INCLUDE_merge_h__	src/merge.h	8;"	d
INCLUDE_message_h__	src/message.h	8;"	d
INCLUDE_mingw_compat__	src/win32/mingw-compat.h	8;"	d
INCLUDE_msvc_compat__	src/win32/msvc-compat.h	8;"	d
INCLUDE_mwindow__	src/mwindow.h	9;"	d
INCLUDE_netops_h__	src/netops.h	8;"	d
INCLUDE_note_h__	src/notes.h	8;"	d
INCLUDE_object_h__	src/object.h	8;"	d
INCLUDE_odb_h__	src/odb.h	8;"	d
INCLUDE_offmap_h__	src/offmap.h	8;"	d
INCLUDE_oid_h__	src/oid.h	8;"	d
INCLUDE_oidmap_h__	src/oidmap.h	8;"	d
INCLUDE_pack_h__	src/pack.h	9;"	d
INCLUDE_pack_objects_h__	src/pack-objects.h	9;"	d
INCLUDE_path_h__	src/path.h	8;"	d
INCLUDE_pathspec_h__	src/pathspec.h	8;"	d
INCLUDE_pool_h__	src/pool.h	8;"	d
INCLUDE_posix__w32_h__	src/unix/posix.h	8;"	d
INCLUDE_posix__w32_h__	src/win32/posix.h	8;"	d
INCLUDE_posix_h__	src/posix.h	8;"	d
INCLUDE_pqueue_h__	src/pqueue.h	8;"	d
INCLUDE_push_h__	src/push.h	8;"	d
INCLUDE_refdb_fs_h__	src/refdb_fs.h	8;"	d
INCLUDE_refdb_h__	src/refdb.h	8;"	d
INCLUDE_reflog_h__	src/reflog.h	8;"	d
INCLUDE_refs_h__	src/refs.h	8;"	d
INCLUDE_refspec_h__	src/refspec.h	8;"	d
INCLUDE_remote_h__	src/remote.h	8;"	d
INCLUDE_repo_template_h__	src/repo_template.h	8;"	d
INCLUDE_repository_h__	src/repository.h	8;"	d
INCLUDE_revwalk_h__	src/revwalk.h	8;"	d
INCLUDE_sha1_lookup_h__	src/sha1_lookup.h	8;"	d
INCLUDE_signature_h__	src/signature.h	8;"	d
INCLUDE_sorted_cache_h__	src/sortedcache.h	8;"	d
INCLUDE_status_h__	src/status.h	8;"	d
INCLUDE_strlen_h__	src/strnlen.h	8;"	d
INCLUDE_strmap_h__	src/strmap.h	8;"	d
INCLUDE_submodule_h__	src/submodule.h	8;"	d
INCLUDE_sys_git_commit_h__	include/git2/sys/commit.h	8;"	d
INCLUDE_sys_git_config_backend_h__	include/git2/sys/config.h	8;"	d
INCLUDE_sys_git_filter_h__	include/git2/sys/filter.h	8;"	d
INCLUDE_sys_git_index_h__	include/git2/sys/index.h	8;"	d
INCLUDE_sys_git_odb_backend_h__	include/git2/sys/odb_backend.h	8;"	d
INCLUDE_sys_git_refdb_backend_h__	include/git2/sys/refdb_backend.h	8;"	d
INCLUDE_sys_git_refdb_h__	include/git2/sys/refs.h	8;"	d
INCLUDE_sys_git_reflog_h__	include/git2/sys/reflog.h	8;"	d
INCLUDE_sys_git_repository_h__	include/git2/sys/repository.h	8;"	d
INCLUDE_sysdir_h__	src/sysdir.h	8;"	d
INCLUDE_tag_h__	src/tag.h	8;"	d
INCLUDE_thread_utils_h__	src/thread-utils.h	8;"	d
INCLUDE_trace_h__	src/trace.h	8;"	d
INCLUDE_tree_cache_h__	src/tree-cache.h	9;"	d
INCLUDE_tree_h__	src/tree.h	8;"	d
INCLUDE_userdiff_h__	src/userdiff.h	8;"	d
INCLUDE_util_h__	src/util.h	8;"	d
INCLUDE_vector_h__	src/vector.h	8;"	d
INCLUDE_win32_version_h__	src/win32/version.h	8;"	d
INCLUDE_zstream_h__	src/zstream.h	8;"	d
INDEX_ACTION_NONE	src/index.c	/^	INDEX_ACTION_NONE = 0,$/;"	e	enum:__anon160	file:
INDEX_ACTION_REMOVE	src/index.c	/^	INDEX_ACTION_REMOVE = 2,$/;"	e	enum:__anon160	file:
INDEX_ACTION_UPDATE	src/index.c	/^	INDEX_ACTION_UPDATE = 1,$/;"	e	enum:__anon160	file:
INDEX_EXT_CONFLICT_NAME_SIG	src/index.c	/^static const char INDEX_EXT_CONFLICT_NAME_SIG[] = {'N', 'A', 'M', 'E'};$/;"	v	file:
INDEX_EXT_TREECACHE_SIG	src/index.c	/^static const char INDEX_EXT_TREECACHE_SIG[] = {'T', 'R', 'E', 'E'};$/;"	v	file:
INDEX_EXT_UNMERGED_SIG	src/index.c	/^static const char INDEX_EXT_UNMERGED_SIG[] = {'R', 'E', 'U', 'C'};$/;"	v	file:
INDEX_FOOTER_SIZE	src/index.c	/^static const size_t INDEX_FOOTER_SIZE = GIT_OID_RAWSZ;$/;"	v	file:
INDEX_HEADER_SIG	src/index.c	/^static const unsigned int INDEX_HEADER_SIG = 0x44495243;$/;"	v	file:
INDEX_HEADER_SIZE	src/index.c	/^static const size_t INDEX_HEADER_SIZE = 12;$/;"	v	file:
INDEX_OWNER	src/index.c	44;"	d	file:
INDEX_VERSION_NUMBER	src/index.c	/^static const unsigned int INDEX_VERSION_NUMBER = 2;$/;"	v	file:
INDEX_VERSION_NUMBER_EXT	src/index.c	/^static const unsigned int INDEX_VERSION_NUMBER_EXT = 3;$/;"	v	file:
INFLATE_EXTRA	tests/core/zstream.c	7;"	d	file:
INITBITS	deps/zlib/inflate.c	460;"	d	file:
INIT_STATE	deps/zlib/deflate.h	51;"	d
INSERT_STRING	deps/zlib/deflate.c	178;"	d	file:
INSERT_STRING	deps/zlib/deflate.c	183;"	d	file:
INSIDE_NOTWORD	deps/regex/regex_internal.h	/^  INSIDE_NOTWORD = PREV_NOTWORD_CONSTRAINT | NEXT_NOTWORD_CONSTRAINT,$/;"	e	enum:__anon180
INSIDE_WORD	deps/regex/regex_internal.h	/^  INSIDE_WORD = PREV_WORD_CONSTRAINT | NEXT_WORD_CONSTRAINT,$/;"	e	enum:__anon180
INT16_C	include/git2/stdint.h	231;"	d
INT16_MAX	include/git2/stdint.h	135;"	d
INT16_MIN	include/git2/stdint.h	134;"	d
INT32_C	include/git2/stdint.h	232;"	d
INT32_MAX	include/git2/stdint.h	137;"	d
INT32_MIN	include/git2/stdint.h	136;"	d
INT64_C	include/git2/stdint.h	233;"	d
INT64_MAX	include/git2/stdint.h	139;"	d
INT64_MIN	include/git2/stdint.h	138;"	d
INT8_C	include/git2/stdint.h	230;"	d
INT8_MAX	include/git2/stdint.h	133;"	d
INT8_MIN	include/git2/stdint.h	132;"	d
INTMAX_C	include/git2/stdint.h	241;"	d
INTMAX_MAX	include/git2/stdint.h	186;"	d
INTMAX_MIN	include/git2/stdint.h	185;"	d
INTPTR_MAX	include/git2/stdint.h	176;"	d
INTPTR_MAX	include/git2/stdint.h	180;"	d
INTPTR_MIN	include/git2/stdint.h	175;"	d
INTPTR_MIN	include/git2/stdint.h	179;"	d
INT_FAST16_MAX	include/git2/stdint.h	163;"	d
INT_FAST16_MIN	include/git2/stdint.h	162;"	d
INT_FAST32_MAX	include/git2/stdint.h	165;"	d
INT_FAST32_MIN	include/git2/stdint.h	164;"	d
INT_FAST64_MAX	include/git2/stdint.h	167;"	d
INT_FAST64_MIN	include/git2/stdint.h	166;"	d
INT_FAST8_MAX	include/git2/stdint.h	161;"	d
INT_FAST8_MIN	include/git2/stdint.h	160;"	d
INT_LEAST16_MAX	include/git2/stdint.h	149;"	d
INT_LEAST16_MIN	include/git2/stdint.h	148;"	d
INT_LEAST32_MAX	include/git2/stdint.h	151;"	d
INT_LEAST32_MIN	include/git2/stdint.h	150;"	d
INT_LEAST64_MAX	include/git2/stdint.h	153;"	d
INT_LEAST64_MIN	include/git2/stdint.h	152;"	d
INT_LEAST8_MAX	include/git2/stdint.h	147;"	d
INT_LEAST8_MIN	include/git2/stdint.h	146;"	d
INVALID	src/hash/hash_win32.h	/^	INVALID = 0,$/;"	e	enum:hash_win32_prov_type
INVALID_SOCKET	src/posix.h	79;"	d
IPATTERN	src/userdiff.h	205;"	d
IPATTERN	src/userdiff.h	31;"	d
IPos	deps/zlib/deflate.h	/^typedef unsigned IPos;$/;"	t
IS_ALPHA	deps/http-parser/http_parser.c	359;"	d	file:
IS_ALPHANUM	deps/http-parser/http_parser.c	361;"	d	file:
IS_BEGBUF_CONTEXT	deps/regex/regex_internal.h	521;"	d
IS_ENDBUF_CONTEXT	deps/regex/regex_internal.h	522;"	d
IS_EPSILON_NODE	deps/regex/regex_internal.h	361;"	d
IS_HEX	deps/http-parser/http_parser.c	362;"	d	file:
IS_HOST_CHAR	deps/http-parser/http_parser.c	373;"	d	file:
IS_HOST_CHAR	deps/http-parser/http_parser.c	378;"	d	file:
IS_MARK	deps/http-parser/http_parser.c	363;"	d	file:
IS_NEWLINE	deps/regex/regex_internal.h	526;"	d
IS_NEWLINE_CONTEXT	deps/regex/regex_internal.h	520;"	d
IS_NUM	deps/http-parser/http_parser.c	360;"	d	file:
IS_ORDINARY_CONTEXT	deps/regex/regex_internal.h	523;"	d
IS_URL_CHAR	deps/http-parser/http_parser.c	372;"	d	file:
IS_URL_CHAR	deps/http-parser/http_parser.c	376;"	d	file:
IS_USERINFO_CHAR	deps/http-parser/http_parser.c	366;"	d	file:
IS_WIDE_NEWLINE	deps/regex/regex_internal.h	528;"	d
IS_WIDE_WORD_CHAR	deps/regex/regex_internal.h	527;"	d
IS_WORD_CHAR	deps/regex/regex_internal.h	525;"	d
IS_WORD_CONTEXT	deps/regex/regex_internal.h	519;"	d
ITERATOR_BASE_INIT	src/iterator.c	29;"	d	file:
ITERATOR_CASE_FLAGS	src/iterator.c	26;"	d	file:
ITERATOR_SET_CB	src/iterator.c	16;"	d	file:
InfoTemplate	tests/generate.py	/^    class InfoTemplate(Template):$/;"	c	class:Module
KEEP_ALIVE	deps/http-parser/http_parser.c	126;"	d	file:
KHASH_DECLARE	src/khash.h	341;"	d
KHASH_INIT	src/khash.h	349;"	d
KHASH_INIT2	src/khash.h	345;"	d
KHASH_MAP_INIT_INT	src/khash.h	576;"	d
KHASH_MAP_INIT_INT64	src/khash.h	591;"	d
KHASH_MAP_INIT_STR	src/khash.h	607;"	d
KHASH_SET_INIT_INT	src/khash.h	568;"	d
KHASH_SET_INIT_INT64	src/khash.h	583;"	d
KHASH_SET_INIT_STR	src/khash.h	599;"	d
KNOWN_COMMIT_IN_ATTR_REPO	tests/reset/reset_helpers.h	4;"	d
KNOWN_COMMIT_IN_BARE_REPO	tests/reset/reset_helpers.h	3;"	d
LEN	deps/zlib/inflate.h	/^            LEN,        \/* i: waiting for length\/lit\/eob code *\/$/;"	e	enum:__anon198
LENEXT	deps/zlib/inflate.h	/^            LENEXT,     \/* i: waiting for length extra bits *\/$/;"	e	enum:__anon198
LENGTH	deps/zlib/inflate.h	/^    LENGTH,     \/* i: waiting for 32-bit length (gzip) *\/$/;"	e	enum:__anon198
LENGTH_CODES	deps/zlib/deflate.h	30;"	d
LENLENS	deps/zlib/inflate.h	/^        LENLENS,    \/* i: waiting for code length code lengths *\/$/;"	e	enum:__anon198
LENS	deps/zlib/inftrees.h	/^    LENS,$/;"	e	enum:__anon201
LEN_	deps/zlib/inflate.h	/^            LEN_,       \/* i: same as LEN below, but only first time in *\/$/;"	e	enum:__anon198
LF	deps/http-parser/http_parser.c	357;"	d	file:
LFLAGS	examples/Makefile	/^LFLAGS = -L..\/build -lgit2 -lz$/;"	m
LIBGIT2_VERSION	include/git2/version.h	10;"	d
LIBGIT2_VER_MAJOR	include/git2/version.h	11;"	d
LIBGIT2_VER_MINOR	include/git2/version.h	12;"	d
LIBGIT2_VER_REVISION	include/git2/version.h	13;"	d
LIBSSH2_USERAUTH_PUBLICKEY_SIGN_FUNC	include/git2/transport.h	/^typedef LIBSSH2_USERAUTH_PUBLICKEY_SIGN_FUNC((*git_cred_sign_callback));$/;"	t
LINE_END	src/xdiff/xhistogram.c	51;"	d	file:
LINE_END_PTR	src/xdiff/xhistogram.c	52;"	d	file:
LINE_FIRST	deps/regex/regex_internal.h	/^  LINE_FIRST = PREV_NEWLINE_CONSTRAINT,$/;"	e	enum:__anon180
LINE_LAST	deps/regex/regex_internal.h	/^  LINE_LAST = NEXT_NEWLINE_CONSTRAINT,$/;"	e	enum:__anon180
LINE_MAP	src/xdiff/xhistogram.c	82;"	d	file:
LINK_ANCESTOR_OID	tests/checkout/conflict.c	19;"	d	file:
LINK_ANCESTOR_TARGET	tests/checkout/conflict.c	23;"	d	file:
LINK_OURS_OID	tests/checkout/conflict.c	20;"	d	file:
LINK_OURS_TARGET	tests/checkout/conflict.c	24;"	d	file:
LINK_THEIRS_OID	tests/checkout/conflict.c	21;"	d	file:
LINK_THEIRS_TARGET	tests/checkout/conflict.c	25;"	d	file:
LIT	deps/zlib/inflate.h	/^            LIT,        \/* o: waiting for output space to write literal *\/$/;"	e	enum:__anon198
LITERALS	deps/zlib/deflate.h	33;"	d
LIVE_EMPTYREPO_URL	tests/online/clone.c	10;"	d	file:
LIVE_REPO_URL	tests/clone/nonetwork.c	8;"	d	file:
LIVE_REPO_URL	tests/online/clone.c	9;"	d	file:
LIVE_REPO_URL	tests/online/fetchhead.c	8;"	d	file:
LOAD	deps/zlib/inflate.c	438;"	d	file:
LOOKS_LIKE_DRIVE_PREFIX	src/path.c	18;"	d	file:
LOWER	deps/http-parser/http_parser.c	358;"	d	file:
L_CODES	deps/zlib/deflate.h	36;"	d
Len	deps/zlib/deflate.h	76;"	d
M	examples/blame.c	/^	int M;$/;"	m	struct:opts	file:
MAP_FAILED	src/map.h	27;"	d
MARK	deps/http-parser/http_parser.c	112;"	d	file:
MATCH	deps/zlib/inflate.h	/^            MATCH,      \/* o: waiting for output space to copy string *\/$/;"	e	enum:__anon198
MAX	deps/regex/regex_internal.c	/^MAX(size_t a, size_t b)$/;"	f	file:
MAX	deps/regex/regex_internal.c	34;"	d	file:
MAX	src/tsort.c	19;"	d	file:
MAXBITS	deps/zlib/inftrees.c	9;"	d	file:
MAX_BITS	deps/zlib/deflate.h	48;"	d
MAX_BL_BITS	deps/zlib/trees.c	47;"	d	file:
MAX_CNT	src/xdiff/xhistogram.c	49;"	d	file:
MAX_CONTENT_TYPE_LEN	src/transports/winhttp.c	30;"	d	file:
MAX_DIST	deps/zlib/deflate.h	283;"	d
MAX_FILEMODE_BYTES	src/tree.c	18;"	d	file:
MAX_INCLUDE_DEPTH	src/config_file.c	39;"	d	file:
MAX_MATCH	deps/zlib/zutil.h	72;"	d
MAX_MEM_LEVEL	deps/zlib/zconf.h	20;"	d
MAX_NESTING_LEVEL	src/refdb_fs.c	31;"	d	file:
MAX_NESTING_LEVEL	src/refs.c	29;"	d	file:
MAX_OIDS	tests/object/raw/short.c	116;"	d	file:
MAX_OIDS	tests/object/raw/short.c	123;"	d	file:
MAX_OIDS	tests/object/raw/short.c	136;"	d	file:
MAX_OIDS	tests/object/raw/short.c	68;"	d	file:
MAX_OP_SIZE	src/delta.c	247;"	d	file:
MAX_PATHSPEC	examples/status.c	44;"	d	file:
MAX_PTR	deps/zlib/zutil.c	198;"	d	file:
MAX_PTR	src/xdiff/xhistogram.c	48;"	d	file:
MAX_SHUTDOWN_CB	src/global.c	17;"	d	file:
MAX_USED_TAGS	tests/object/tag/list.c	7;"	d	file:
MAX_WBITS	deps/zlib/zconf.h	27;"	d
MB_CHAR	deps/regex/regex_internal.h	/^  MB_CHAR,$/;"	e	enum:__anon191
MB_CUR_MAX	deps/regex/regex_internal.h	123;"	d
MEM	deps/zlib/inflate.h	/^    MEM,        \/* got an inflate() memory error -- remain here until reset *\/$/;"	e	enum:__anon198
MERGE_BRANCH_OID	tests/merge/workdir/dirty.c	9;"	d	file:
MESSAGE	tests/stash/save.c	166;"	d	file:
MESSAGES_COUNT	tests/notes/notes.c	251;"	d	file:
MIN	deps/http-parser/http_parser.c	37;"	d	file:
MIN	src/tsort.c	23;"	d	file:
MIN_ALLOCSIZE	src/vector.c	12;"	d	file:
MIN_LOOKAHEAD	deps/zlib/deflate.h	278;"	d
MIN_MATCH	deps/zlib/zutil.h	71;"	d
MIN_PROGRESS_UPDATE_INTERVAL	src/pack-objects.c	62;"	d	file:
MIN_PROGRESS_UPDATE_INTERVAL	src/transports/smart_protocol.c	20;"	d	file:
MOD	deps/zlib/adler32.c	26;"	d	file:
MOD	deps/zlib/adler32.c	55;"	d	file:
MOD4	deps/zlib/adler32.c	46;"	d	file:
MOD4	deps/zlib/adler32.c	56;"	d	file:
MODE_BITS_MASK	src/diff.c	587;"	d	file:
MORE_CRLF_TEXT_AS_CRLF	tests/filter/crlf.h	17;"	d
MORE_CRLF_TEXT_AS_LF	tests/filter/crlf.h	22;"	d
MORE_CRLF_TEXT_RAW	tests/filter/crlf.h	12;"	d
MORE_LF_TEXT_AS_CRLF	tests/filter/crlf.h	18;"	d
MORE_LF_TEXT_AS_LF	tests/filter/crlf.h	23;"	d
MORE_LF_TEXT_RAW	tests/filter/crlf.h	13;"	d
MSB	src/util.h	15;"	d
MURMUR_BLOCK	src/util.c	397;"	d	file:
MY_ZCALLOC	deps/zlib/zutil.c	190;"	d	file:
MY_ZCALLOC	deps/zlib/zutil.c	268;"	d	file:
Module	tests/generate.py	/^class Module(object):$/;"	c
NAME	deps/zlib/inflate.h	/^    NAME,       \/* i: waiting for end of file name (gzip) *\/$/;"	e	enum:__anon198
NAME_STATE	deps/zlib/deflate.h	53;"	d
NEEDBITS	deps/zlib/inflate.c	478;"	d	file:
NETWORK_XFER_THRESHOLD	src/transports/smart_protocol.c	18;"	d	file:
NEWLINE	tests/filter/custom.c	18;"	d	file:
NEWLINE	tests/filter/custom.c	20;"	d	file:
NEWLINE_CHAR	deps/regex/regex_internal.h	146;"	d
NEW_BRANCH_NAME	tests/refs/branches/create.c	44;"	d	file:
NEW_BRANCH_NAME	tests/refs/branches/move.c	17;"	d	file:
NEW_MESSAGE	deps/http-parser/http_parser.c	394;"	d	file:
NEW_MESSAGE	deps/http-parser/http_parser.c	397;"	d	file:
NEXT_ENDBUF_CONSTRAINT	deps/regex/regex_internal.h	208;"	d
NEXT_NEWLINE_CONSTRAINT	deps/regex/regex_internal.h	206;"	d
NEXT_NOTWORD_CONSTRAINT	deps/regex/regex_internal.h	204;"	d
NEXT_PTR	src/xdiff/xhistogram.c	84;"	d	file:
NEXT_WORD_CONSTRAINT	deps/regex/regex_internal.h	203;"	d
NIL	deps/zlib/deflate.c	104;"	d	file:
NITEMS	tests/core/oidmap.c	11;"	d	file:
NMAX	deps/zlib/adler32.c	15;"	d	file:
NONE	src/transports/http.c	/^	NONE,$/;"	e	enum:last_cb	file:
NON_EXISTING_FILEPATH	tests/core/path.c	466;"	d	file:
NON_EXISTING_HEAD	tests/repo/repo_helpers.h	3;"	d
NON_TYPE	deps/regex/regex_internal.h	/^  NON_TYPE = 0,$/;"	e	enum:__anon182
NON_UNIQUE	src/xdiff/xpatience.c	43;"	d	file:
NOT_SATISFY_NEXT_CONSTRAINT	deps/regex/regex_internal.h	536;"	d
NOT_SATISFY_PREV_CONSTRAINT	deps/regex/regex_internal.h	530;"	d
NOT_WORD_DELIM	deps/regex/regex_internal.h	/^  NOT_WORD_DELIM = NOT_WORD_DELIM_CONSTRAINT$/;"	e	enum:__anon180
NOT_WORD_DELIM_CONSTRAINT	deps/regex/regex_internal.h	210;"	d
NO_MBSUPPORT	deps/regex/config.h	5;"	d
NO_MEMCPY	deps/zlib/zutil.h	216;"	d
NO_MEMCPY	deps/zlib/zutil.h	223;"	d
NO_STRNLEN	src/strnlen.h	11;"	d
NO_vsnprintf	deps/zlib/zutil.h	194;"	d
NO_vsnprintf	deps/zlib/zutil.h	197;"	d
NO_vsnprintf	deps/zlib/zutil.h	208;"	d
NO_vsnprintf	deps/zlib/zutil.h	212;"	d
NUM_VARS	tests/core/env.c	12;"	d	file:
NUM_VARS	tests/core/env.c	7;"	d	file:
OBJECTS	examples/network/Makefile	/^OBJECTS = \\$/;"	m
OBJECT_BASE_SIZE	src/object.c	/^static const int OBJECT_BASE_SIZE = 4096;$/;"	v	file:
OCTO1_BRANCH	tests/merge/workdir/setup.c	19;"	d	file:
OCTO1_OID	tests/merge/workdir/setup.c	20;"	d	file:
OCTO2_BRANCH	tests/merge/workdir/setup.c	22;"	d	file:
OCTO2_OID	tests/merge/workdir/setup.c	23;"	d	file:
OCTO3_BRANCH	tests/merge/workdir/setup.c	25;"	d	file:
OCTO3_OID	tests/merge/workdir/setup.c	26;"	d	file:
OCTO4_BRANCH	tests/merge/workdir/setup.c	28;"	d	file:
OCTO4_OID	tests/merge/workdir/setup.c	29;"	d	file:
OCTO5_BRANCH	tests/merge/workdir/setup.c	31;"	d	file:
OCTO5_OID	tests/merge/workdir/setup.c	32;"	d	file:
OF	deps/zlib/zconf.h	35;"	d
OFF	deps/zlib/inffast.c	25;"	d	file:
OFF	deps/zlib/inffast.c	28;"	d	file:
OID_ZERO	tests/online/push_util.c	/^const git_oid OID_ZERO = {{ 0 }};$/;"	v
ONE_ANCESTOR_OID	tests/index/reuc.c	13;"	d	file:
ONE_LEVEL_AND_REFSPEC	tests/refs/normalize.c	351;"	d	file:
ONE_OUR_OID	tests/index/reuc.c	14;"	d	file:
ONE_THEIR_OID	tests/index/reuc.c	15;"	d	file:
OP_ALT	deps/regex/regex_internal.h	/^  OP_ALT = EPSILON_BIT | 2,$/;"	e	enum:__anon182
OP_BACK_REF	deps/regex/regex_internal.h	/^  OP_BACK_REF = 4,$/;"	e	enum:__anon182
OP_CHARSET_RANGE	deps/regex/regex_internal.h	/^  OP_CHARSET_RANGE,$/;"	e	enum:__anon182
OP_CLOSE_BRACKET	deps/regex/regex_internal.h	/^  OP_CLOSE_BRACKET,$/;"	e	enum:__anon182
OP_CLOSE_CHAR_CLASS	deps/regex/regex_internal.h	/^  OP_CLOSE_CHAR_CLASS,$/;"	e	enum:__anon182
OP_CLOSE_COLL_ELEM	deps/regex/regex_internal.h	/^  OP_CLOSE_COLL_ELEM,$/;"	e	enum:__anon182
OP_CLOSE_DUP_NUM	deps/regex/regex_internal.h	/^  OP_CLOSE_DUP_NUM,$/;"	e	enum:__anon182
OP_CLOSE_EQUIV_CLASS	deps/regex/regex_internal.h	/^  OP_CLOSE_EQUIV_CLASS,$/;"	e	enum:__anon182
OP_CLOSE_SUBEXP	deps/regex/regex_internal.h	/^  OP_CLOSE_SUBEXP = EPSILON_BIT | 1,$/;"	e	enum:__anon182
OP_DUP_ASTERISK	deps/regex/regex_internal.h	/^  OP_DUP_ASTERISK = EPSILON_BIT | 3,$/;"	e	enum:__anon182
OP_DUP_PLUS	deps/regex/regex_internal.h	/^  OP_DUP_PLUS = 18,$/;"	e	enum:__anon182
OP_DUP_QUESTION	deps/regex/regex_internal.h	/^  OP_DUP_QUESTION,$/;"	e	enum:__anon182
OP_NON_MATCH_LIST	deps/regex/regex_internal.h	/^  OP_NON_MATCH_LIST,$/;"	e	enum:__anon182
OP_NOTSPACE	deps/regex/regex_internal.h	/^  OP_NOTSPACE,$/;"	e	enum:__anon182
OP_NOTWORD	deps/regex/regex_internal.h	/^  OP_NOTWORD,$/;"	e	enum:__anon182
OP_OPEN_BRACKET	deps/regex/regex_internal.h	/^  OP_OPEN_BRACKET,$/;"	e	enum:__anon182
OP_OPEN_CHAR_CLASS	deps/regex/regex_internal.h	/^  OP_OPEN_CHAR_CLASS,$/;"	e	enum:__anon182
OP_OPEN_COLL_ELEM	deps/regex/regex_internal.h	/^  OP_OPEN_COLL_ELEM,$/;"	e	enum:__anon182
OP_OPEN_DUP_NUM	deps/regex/regex_internal.h	/^  OP_OPEN_DUP_NUM,$/;"	e	enum:__anon182
OP_OPEN_EQUIV_CLASS	deps/regex/regex_internal.h	/^  OP_OPEN_EQUIV_CLASS,$/;"	e	enum:__anon182
OP_OPEN_SUBEXP	deps/regex/regex_internal.h	/^  OP_OPEN_SUBEXP = EPSILON_BIT | 0,$/;"	e	enum:__anon182
OP_PERIOD	deps/regex/regex_internal.h	/^  OP_PERIOD = 5,$/;"	e	enum:__anon182
OP_SPACE	deps/regex/regex_internal.h	/^  OP_SPACE,$/;"	e	enum:__anon182
OP_UTF8_PERIOD	deps/regex/regex_internal.h	/^  OP_UTF8_PERIOD = 7,$/;"	e	enum:__anon182
OP_WORD	deps/regex/regex_internal.h	/^  OP_WORD,$/;"	e	enum:__anon182
ORIG_HEAD	tests/merge/workdir/setup.c	14;"	d	file:
OS	deps/zlib/inflate.h	/^    OS,         \/* i: waiting for extra flags and operating system (gzip) *\/$/;"	e	enum:__anon198
OS_CODE	deps/zlib/zutil.h	105;"	d
OS_CODE	deps/zlib/zutil.h	109;"	d
OS_CODE	deps/zlib/zutil.h	116;"	d
OS_CODE	deps/zlib/zutil.h	127;"	d
OS_CODE	deps/zlib/zutil.h	132;"	d
OS_CODE	deps/zlib/zutil.h	137;"	d
OS_CODE	deps/zlib/zutil.h	171;"	d
OS_CODE	deps/zlib/zutil.h	80;"	d
OS_CODE	deps/zlib/zutil.h	95;"	d
OS_CODE	deps/zlib/zutil.h	99;"	d
OURS_DIRECTORY_FILE	tests/merge/trees/automerge.c	20;"	d	file:
OURS_DIRECTORY_FILE	tests/merge/workdir/simple.c	23;"	d	file:
OWNING_SUBTRANSPORT	src/transports/git.c	12;"	d	file:
OWNING_SUBTRANSPORT	src/transports/http.c	25;"	d	file:
OWNING_SUBTRANSPORT	src/transports/ssh.c	17;"	d	file:
OWNING_SUBTRANSPORT	src/transports/winhttp.c	51;"	d	file:
O_BINARY	src/posix.h	26;"	d
O_CLOEXEC	src/posix.h	29;"	d
PACKREF_CANNOT_PEEL	src/refdb_fs.c	/^	PACKREF_CANNOT_PEEL = 4,$/;"	e	enum:__anon146	file:
PACKREF_HAS_PEEL	src/refdb_fs.c	/^	PACKREF_HAS_PEEL = 1,$/;"	e	enum:__anon146	file:
PACKREF_SHADOWED	src/refdb_fs.c	/^	PACKREF_SHADOWED = 8,$/;"	e	enum:__anon146	file:
PACKREF_WAS_LOOSE	src/refdb_fs.c	/^	PACKREF_WAS_LOOSE = 2,$/;"	e	enum:__anon146	file:
PACK_IDX_SIGNATURE	src/pack.h	50;"	d
PACK_SIGNATURE	src/pack.h	23;"	d
PACK_VERSION	src/pack.h	24;"	d
PARENT1	src/commit_list.h	12;"	d
PARENT2	src/commit_list.h	13;"	d
PARENTS_PER_COMMIT	src/commit_list.h	17;"	d
PARSE_ERROR_GENERIC	src/transports/http.c	27;"	d	file:
PARSE_ERROR_REPLAY	src/transports/http.c	28;"	d	file:
PARSING_HEADER	deps/http-parser/http_parser.c	312;"	d	file:
PATCH_CACHE	tests/diff/diffiter.c	266;"	d	file:
PATHSPEC_DATATYPE_DIFF	src/pathspec.h	/^	PATHSPEC_DATATYPE_DIFF = 1,$/;"	e	enum:__anon60
PATHSPEC_DATATYPE_STRINGS	src/pathspec.h	/^	PATHSPEC_DATATYPE_STRINGS = 0,$/;"	e	enum:__anon60
PATH_MAGIC	src/sysdir.c	147;"	d	file:
PATTERNS	src/userdiff.h	206;"	d
PATTERNS	src/userdiff.h	29;"	d
PEELING_FULL	src/refdb_fs.c	/^	PEELING_FULL$/;"	e	enum:__anon147	file:
PEELING_NONE	src/refdb_fs.c	/^	PEELING_NONE = 0,$/;"	e	enum:__anon147	file:
PEELING_STANDARD	src/refdb_fs.c	/^	PEELING_STANDARD,$/;"	e	enum:__anon147	file:
PKT_LEN_SIZE	src/transports/smart_pkt.c	23;"	d	file:
PQUEUE_LCHILD_OF	src/pqueue.c	11;"	d	file:
PQUEUE_PARENT_OF	src/pqueue.c	13;"	d	file:
PQUEUE_RCHILD_OF	src/pqueue.c	12;"	d	file:
PREPARE_PACK	src/pack-objects.c	1267;"	d	file:
PREPARE_PACK	src/pack-objects.c	1319;"	d	file:
PRESET_DICT	deps/zlib/zutil.h	75;"	d
PREV_BEGBUF_CONSTRAINT	deps/regex/regex_internal.h	207;"	d
PREV_NEWLINE_CONSTRAINT	deps/regex/regex_internal.h	205;"	d
PREV_NOTWORD_CONSTRAINT	deps/regex/regex_internal.h	202;"	d
PREV_WORD_CONSTRAINT	deps/regex/regex_internal.h	201;"	d
PRIX16	include/git2/inttypes.h	112;"	d
PRIX32	include/git2/inttypes.h	125;"	d
PRIX64	include/git2/inttypes.h	138;"	d
PRIX8	include/git2/inttypes.h	99;"	d
PRIXFAST16	include/git2/inttypes.h	120;"	d
PRIXFAST32	include/git2/inttypes.h	133;"	d
PRIXFAST64	include/git2/inttypes.h	146;"	d
PRIXFAST8	include/git2/inttypes.h	107;"	d
PRIXLEAST16	include/git2/inttypes.h	116;"	d
PRIXLEAST32	include/git2/inttypes.h	129;"	d
PRIXLEAST64	include/git2/inttypes.h	142;"	d
PRIXLEAST8	include/git2/inttypes.h	103;"	d
PRIXMAX	include/git2/inttypes.h	151;"	d
PRIXPTR	include/git2/inttypes.h	156;"	d
PRId16	include/git2/inttypes.h	68;"	d
PRId32	include/git2/inttypes.h	75;"	d
PRId64	include/git2/inttypes.h	82;"	d
PRId8	include/git2/inttypes.h	61;"	d
PRIdFAST16	include/git2/inttypes.h	72;"	d
PRIdFAST32	include/git2/inttypes.h	79;"	d
PRIdFAST64	include/git2/inttypes.h	86;"	d
PRIdFAST8	include/git2/inttypes.h	65;"	d
PRIdLEAST16	include/git2/inttypes.h	70;"	d
PRIdLEAST32	include/git2/inttypes.h	77;"	d
PRIdLEAST64	include/git2/inttypes.h	84;"	d
PRIdLEAST8	include/git2/inttypes.h	63;"	d
PRIdMAX	include/git2/inttypes.h	89;"	d
PRIdPTR	include/git2/inttypes.h	92;"	d
PRIi16	include/git2/inttypes.h	69;"	d
PRIi32	include/git2/inttypes.h	76;"	d
PRIi64	include/git2/inttypes.h	83;"	d
PRIi8	include/git2/inttypes.h	62;"	d
PRIiFAST16	include/git2/inttypes.h	73;"	d
PRIiFAST32	include/git2/inttypes.h	80;"	d
PRIiFAST64	include/git2/inttypes.h	87;"	d
PRIiFAST8	include/git2/inttypes.h	66;"	d
PRIiLEAST16	include/git2/inttypes.h	71;"	d
PRIiLEAST32	include/git2/inttypes.h	78;"	d
PRIiLEAST64	include/git2/inttypes.h	85;"	d
PRIiLEAST8	include/git2/inttypes.h	64;"	d
PRIiMAX	include/git2/inttypes.h	90;"	d
PRIiPTR	include/git2/inttypes.h	93;"	d
PRIo16	include/git2/inttypes.h	109;"	d
PRIo32	include/git2/inttypes.h	122;"	d
PRIo64	include/git2/inttypes.h	135;"	d
PRIo8	include/git2/inttypes.h	96;"	d
PRIoFAST16	include/git2/inttypes.h	117;"	d
PRIoFAST32	include/git2/inttypes.h	130;"	d
PRIoFAST64	include/git2/inttypes.h	143;"	d
PRIoFAST8	include/git2/inttypes.h	104;"	d
PRIoLEAST16	include/git2/inttypes.h	113;"	d
PRIoLEAST32	include/git2/inttypes.h	126;"	d
PRIoLEAST64	include/git2/inttypes.h	139;"	d
PRIoLEAST8	include/git2/inttypes.h	100;"	d
PRIoMAX	include/git2/inttypes.h	148;"	d
PRIoPTR	include/git2/inttypes.h	153;"	d
PRIu16	include/git2/inttypes.h	110;"	d
PRIu32	include/git2/inttypes.h	123;"	d
PRIu64	include/git2/inttypes.h	136;"	d
PRIu8	include/git2/inttypes.h	97;"	d
PRIuFAST16	include/git2/inttypes.h	118;"	d
PRIuFAST32	include/git2/inttypes.h	131;"	d
PRIuFAST64	include/git2/inttypes.h	144;"	d
PRIuFAST8	include/git2/inttypes.h	105;"	d
PRIuLEAST16	include/git2/inttypes.h	114;"	d
PRIuLEAST32	include/git2/inttypes.h	127;"	d
PRIuLEAST64	include/git2/inttypes.h	140;"	d
PRIuLEAST8	include/git2/inttypes.h	101;"	d
PRIuMAX	include/git2/inttypes.h	149;"	d
PRIuPTR	include/git2/inttypes.h	154;"	d
PRIuZ	examples/network/common.h	24;"	d
PRIuZ	examples/network/common.h	26;"	d
PRIuZ	src/cc-compat.h	42;"	d
PRIuZ	src/cc-compat.h	45;"	d
PRIuZ	tests/clar.c	63;"	d	file:
PRIuZ	tests/clar.c	75;"	d	file:
PRIx16	include/git2/inttypes.h	111;"	d
PRIx32	include/git2/inttypes.h	124;"	d
PRIx64	include/git2/inttypes.h	137;"	d
PRIx8	include/git2/inttypes.h	98;"	d
PRIxFAST16	include/git2/inttypes.h	119;"	d
PRIxFAST32	include/git2/inttypes.h	132;"	d
PRIxFAST64	include/git2/inttypes.h	145;"	d
PRIxFAST8	include/git2/inttypes.h	106;"	d
PRIxLEAST16	include/git2/inttypes.h	115;"	d
PRIxLEAST32	include/git2/inttypes.h	128;"	d
PRIxLEAST64	include/git2/inttypes.h	141;"	d
PRIxLEAST8	include/git2/inttypes.h	102;"	d
PRIxMAX	include/git2/inttypes.h	150;"	d
PRIxPTR	include/git2/inttypes.h	155;"	d
PRIxZ	src/cc-compat.h	43;"	d
PRIxZ	src/cc-compat.h	46;"	d
PRIxZ	tests/clar.c	66;"	d	file:
PRIxZ	tests/clar.c	78;"	d	file:
PROXY_CONNECTION	deps/http-parser/http_parser.c	120;"	d	file:
PTHREAD_MUTEX_INITIALIZER	src/win32/pthread.h	37;"	d
PTRDIFF_MAX	include/git2/stdint.h	193;"	d
PTRDIFF_MAX	include/git2/stdint.h	196;"	d
PTRDIFF_MIN	include/git2/stdint.h	192;"	d
PTRDIFF_MIN	include/git2/stdint.h	195;"	d
PULLBYTE	deps/zlib/inflate.c	468;"	d	file:
PUP	deps/zlib/inffast.c	26;"	d	file:
PUP	deps/zlib/inffast.c	29;"	d	file:
PUSH_NEXT	src/tsort.c	308;"	d	file:
Pos	deps/zlib/deflate.h	/^typedef ush Pos;$/;"	t
Posf	deps/zlib/deflate.h	/^typedef Pos FAR Posf;$/;"	t
Ptr	src/win32/pthread.h	/^typedef struct { void *Ptr; } GIT_SRWLOCK;$/;"	m	struct:__anon165
RABIN_SHIFT	src/delta.c	13;"	d	file:
RABIN_WINDOW	src/delta.c	14;"	d	file:
RANGE_ERROR	src/fnmatch.c	23;"	d	file:
RANGE_MATCH	src/fnmatch.c	21;"	d	file:
RANGE_NOMATCH	src/fnmatch.c	22;"	d	file:
REC	src/xdiff/xhistogram.c	90;"	d	file:
RECORD_CALLBACKS_INIT	tests/online/push_util.h	14;"	d
REFNAME_DECOMPOSED	tests/refs/unicode.c	43;"	d	file:
REGS_FIXED	deps/regex/regex.h	406;"	d
REGS_REALLOCATE	deps/regex/regex.h	405;"	d
REGS_UNALLOCATED	deps/regex/regex.h	404;"	d
REG_BADBR	deps/regex/regex.h	/^  REG_BADBR,		\/* Invalid contents of \\{\\}.  *\/$/;"	e	enum:__anon194
REG_BADBR_IDX	deps/regex/regcomp.c	161;"	d	file:
REG_BADPAT	deps/regex/regex.h	/^  REG_BADPAT,		\/* Invalid pattern.  *\/$/;"	e	enum:__anon194
REG_BADPAT_IDX	deps/regex/regcomp.c	137;"	d	file:
REG_BADRPT	deps/regex/regex.h	/^  REG_BADRPT,		\/* No preceding re for repetition op.  *\/$/;"	e	enum:__anon194
REG_BADRPT_IDX	deps/regex/regcomp.c	170;"	d	file:
REG_EBRACE	deps/regex/regex.h	/^  REG_EBRACE,		\/* Unmatched \\{.  *\/$/;"	e	enum:__anon194
REG_EBRACE_IDX	deps/regex/regcomp.c	158;"	d	file:
REG_EBRACK	deps/regex/regex.h	/^  REG_EBRACK,		\/* Unmatched left bracket.  *\/$/;"	e	enum:__anon194
REG_EBRACK_IDX	deps/regex/regcomp.c	152;"	d	file:
REG_ECOLLATE	deps/regex/regex.h	/^  REG_ECOLLATE,		\/* Inalid collating element.  *\/$/;"	e	enum:__anon194
REG_ECOLLATE_IDX	deps/regex/regcomp.c	140;"	d	file:
REG_ECTYPE	deps/regex/regex.h	/^  REG_ECTYPE,		\/* Invalid character class name.  *\/$/;"	e	enum:__anon194
REG_ECTYPE_IDX	deps/regex/regcomp.c	143;"	d	file:
REG_EEND	deps/regex/regex.h	/^  REG_EEND,		\/* Premature end.  *\/$/;"	e	enum:__anon194
REG_EEND_IDX	deps/regex/regcomp.c	173;"	d	file:
REG_EESCAPE	deps/regex/regex.h	/^  REG_EESCAPE,		\/* Trailing backslash.  *\/$/;"	e	enum:__anon194
REG_EESCAPE_IDX	deps/regex/regcomp.c	146;"	d	file:
REG_ENOSYS	deps/regex/regex.h	/^  REG_ENOSYS = -1,	\/* This will never happen for this implementation.  *\/$/;"	e	enum:__anon194
REG_EPAREN	deps/regex/regex.h	/^  REG_EPAREN,		\/* Parenthesis imbalance.  *\/$/;"	e	enum:__anon194
REG_EPAREN_IDX	deps/regex/regcomp.c	155;"	d	file:
REG_ERANGE	deps/regex/regex.h	/^  REG_ERANGE,		\/* Invalid range end.  *\/$/;"	e	enum:__anon194
REG_ERANGE_IDX	deps/regex/regcomp.c	164;"	d	file:
REG_ERPAREN	deps/regex/regex.h	/^  REG_ERPAREN		\/* Unmatched ) or \\); not returned from regcomp.  *\/$/;"	e	enum:__anon194
REG_ERPAREN_IDX	deps/regex/regcomp.c	179;"	d	file:
REG_ESIZE	deps/regex/regex.h	/^  REG_ESIZE,		\/* Compiled pattern bigger than 2^16 bytes.  *\/$/;"	e	enum:__anon194
REG_ESIZE_IDX	deps/regex/regcomp.c	176;"	d	file:
REG_ESPACE	deps/regex/regex.h	/^  REG_ESPACE,		\/* Ran out of memory.  *\/$/;"	e	enum:__anon194
REG_ESPACE_IDX	deps/regex/regcomp.c	167;"	d	file:
REG_ESUBREG	deps/regex/regex.h	/^  REG_ESUBREG,		\/* Invalid back reference.  *\/$/;"	e	enum:__anon194
REG_ESUBREG_IDX	deps/regex/regcomp.c	149;"	d	file:
REG_EXTENDED	deps/regex/regex.h	279;"	d
REG_ICASE	deps/regex/regex.h	283;"	d
REG_MSYSGIT_INSTALL	src/win32/findfile.c	15;"	d	file:
REG_MSYSGIT_INSTALL	src/win32/findfile.c	17;"	d	file:
REG_MSYSGIT_INSTALL_LOCAL	src/win32/findfile.c	12;"	d	file:
REG_NEGATE	src/diff_driver.c	/^	REG_NEGATE = (1 << 15) \/* get out of the way of existing flags *\/$/;"	e	enum:__anon41	file:
REG_NEWLINE	deps/regex/regex.h	288;"	d
REG_NOERROR	deps/regex/regex.h	/^  REG_NOERROR = 0,	\/* Success.  *\/$/;"	e	enum:__anon194
REG_NOERROR_IDX	deps/regex/regcomp.c	131;"	d	file:
REG_NOMATCH	deps/regex/regex.h	/^  REG_NOMATCH,		\/* Didn't find a match (for regexec).  *\/$/;"	e	enum:__anon194
REG_NOMATCH_IDX	deps/regex/regcomp.c	134;"	d	file:
REG_NOSUB	deps/regex/regex.h	292;"	d
REG_NOTBOL	deps/regex/regex.h	302;"	d
REG_NOTEOL	deps/regex/regex.h	305;"	d
REG_STARTEND	deps/regex/regex.h	309;"	d
REMOVED_IN_BRANCH_REUC_ENTRY	tests/merge/trees/automerge.c	46;"	d	file:
REMOVED_IN_BRANCH_REUC_ENTRY	tests/merge/workdir/simple.c	63;"	d	file:
REMOVED_IN_MASTER_REUC_ENTRY	tests/merge/trees/automerge.c	51;"	d	file:
REMOVED_IN_MASTER_REUC_ENTRY	tests/merge/workdir/simple.c	68;"	d	file:
REP1024	tests/clar_libgit2.h	75;"	d
REP15	tests/clar_libgit2.h	72;"	d
REP16	tests/clar_libgit2.h	73;"	d
REP256	tests/clar_libgit2.h	74;"	d
REP4	tests/clar_libgit2.h	71;"	d
REPEAT	tests/object/cache.c	194;"	d	file:
REPEAT	tests/threads/refdb.c	19;"	d	file:
REPOSITORY_ALTERNATE_FOLDER	tests/repo/discover.c	16;"	d	file:
REPOSITORY_ALTERNATE_FOLDER_SUB	tests/repo/discover.c	17;"	d	file:
REPOSITORY_ALTERNATE_FOLDER_SUB_SUB	tests/repo/discover.c	18;"	d	file:
REPOSITORY_ALTERNATE_FOLDER_SUB_SUB_SUB	tests/repo/discover.c	19;"	d	file:
REPO_NAME	tests/stash/foreach.c	16;"	d	file:
REPZ_11_138	deps/zlib/trees.c	59;"	d	file:
REPZ_3_10	deps/zlib/trees.c	56;"	d	file:
REP_3_6	deps/zlib/trees.c	53;"	d	file:
RESTORE	deps/zlib/inflate.c	449;"	d	file:
RESULT	src/commit_list.h	14;"	d
REV	deps/zlib/crc32.c	56;"	d	file:
REVERSE	deps/zlib/inflate.c	503;"	d	file:
REVERSE_FILTER_PRIORITY	tests/filter/custom.c	13;"	d	file:
RE_BACKSLASH_ESCAPE_IN_LISTS	deps/regex/regex.h	62;"	d
RE_BK_PLUS_QM	deps/regex/regex.h	67;"	d
RE_CARET_ANCHORS_HERE	deps/regex/regex.h	173;"	d
RE_CHAR_CLASSES	deps/regex/regex.h	73;"	d
RE_CONTEXT_INDEP_ANCHORS	deps/regex/regex.h	87;"	d
RE_CONTEXT_INDEP_OPS	deps/regex/regex.h	95;"	d
RE_CONTEXT_INVALID_DUP	deps/regex/regex.h	177;"	d
RE_CONTEXT_INVALID_OPS	deps/regex/regex.h	99;"	d
RE_DOT_NEWLINE	deps/regex/regex.h	103;"	d
RE_DOT_NOT_NULL	deps/regex/regex.h	107;"	d
RE_DUP_MAX	deps/regex/regex.h	268;"	d
RE_DUP_MAX	deps/regex/regex.h	271;"	d
RE_ENABLE_I18N	deps/regex/regex_internal.h	127;"	d
RE_HAT_LISTS_NOT_NEWLINE	deps/regex/regex.h	111;"	d
RE_ICASE	deps/regex/regex.h	168;"	d
RE_INTERVALS	deps/regex/regex.h	116;"	d
RE_INVALID_INTERVAL_ORD	deps/regex/regex.h	164;"	d
RE_LIMITED_OPS	deps/regex/regex.h	120;"	d
RE_NEWLINE_ALT	deps/regex/regex.h	124;"	d
RE_NO_BK_BRACES	deps/regex/regex.h	129;"	d
RE_NO_BK_PARENS	deps/regex/regex.h	133;"	d
RE_NO_BK_REFS	deps/regex/regex.h	137;"	d
RE_NO_BK_VBAR	deps/regex/regex.h	141;"	d
RE_NO_EMPTY_RANGES	deps/regex/regex.h	147;"	d
RE_NO_GNU_OPS	deps/regex/regex.h	159;"	d
RE_NO_POSIX_BACKTRACKING	deps/regex/regex.h	155;"	d
RE_NO_SUB	deps/regex/regex.h	181;"	d
RE_NREGS	deps/regex/regex.h	450;"	d
RE_SYNTAX_AWK	deps/regex/regex.h	197;"	d
RE_SYNTAX_ED	deps/regex/regex.h	231;"	d
RE_SYNTAX_EGREP	deps/regex/regex.h	220;"	d
RE_SYNTAX_EMACS	deps/regex/regex.h	195;"	d
RE_SYNTAX_GNU_AWK	deps/regex/regex.h	204;"	d
RE_SYNTAX_GREP	deps/regex/regex.h	215;"	d
RE_SYNTAX_POSIX_AWK	deps/regex/regex.h	210;"	d
RE_SYNTAX_POSIX_BASIC	deps/regex/regex.h	240;"	d
RE_SYNTAX_POSIX_EGREP	deps/regex/regex.h	226;"	d
RE_SYNTAX_POSIX_EXTENDED	deps/regex/regex.h	249;"	d
RE_SYNTAX_POSIX_MINIMAL_BASIC	deps/regex/regex.h	246;"	d
RE_SYNTAX_POSIX_MINIMAL_EXTENDED	deps/regex/regex.h	257;"	d
RE_SYNTAX_SED	deps/regex/regex.h	233;"	d
RE_TRANSLATE_TYPE	deps/regex/regex.h	353;"	d
RE_UNMATCHED_RIGHT_PAREN_ORD	deps/regex/regex.h	151;"	d
RM_RETRY_COUNT	tests/clar/fs.h	3;"	d
RM_RETRY_DELAY	tests/clar/fs.h	4;"	d
R_OK	src/win32/msvc-compat.h	15;"	d
SBC_MAX	deps/regex/regex_internal.h	141;"	d
SB_CHAR	deps/regex/regex_internal.h	/^  SB_CHAR,$/;"	e	enum:__anon191
SCNX16	include/git2/inttypes.h	215;"	d
SCNX32	include/git2/inttypes.h	228;"	d
SCNX64	include/git2/inttypes.h	241;"	d
SCNX8	include/git2/inttypes.h	202;"	d
SCNXFAST16	include/git2/inttypes.h	223;"	d
SCNXFAST32	include/git2/inttypes.h	236;"	d
SCNXFAST64	include/git2/inttypes.h	249;"	d
SCNXFAST8	include/git2/inttypes.h	210;"	d
SCNXLEAST16	include/git2/inttypes.h	219;"	d
SCNXLEAST32	include/git2/inttypes.h	232;"	d
SCNXLEAST64	include/git2/inttypes.h	245;"	d
SCNXLEAST8	include/git2/inttypes.h	206;"	d
SCNXMAX	include/git2/inttypes.h	254;"	d
SCNXPTR	include/git2/inttypes.h	260;"	d
SCNXPTR	include/git2/inttypes.h	265;"	d
SCNd16	include/git2/inttypes.h	166;"	d
SCNd32	include/git2/inttypes.h	173;"	d
SCNd64	include/git2/inttypes.h	180;"	d
SCNd8	include/git2/inttypes.h	159;"	d
SCNdFAST16	include/git2/inttypes.h	170;"	d
SCNdFAST32	include/git2/inttypes.h	177;"	d
SCNdFAST64	include/git2/inttypes.h	184;"	d
SCNdFAST8	include/git2/inttypes.h	163;"	d
SCNdLEAST16	include/git2/inttypes.h	168;"	d
SCNdLEAST32	include/git2/inttypes.h	175;"	d
SCNdLEAST64	include/git2/inttypes.h	182;"	d
SCNdLEAST8	include/git2/inttypes.h	161;"	d
SCNdMAX	include/git2/inttypes.h	187;"	d
SCNdPTR	include/git2/inttypes.h	191;"	d
SCNdPTR	include/git2/inttypes.h	194;"	d
SCNi16	include/git2/inttypes.h	167;"	d
SCNi32	include/git2/inttypes.h	174;"	d
SCNi64	include/git2/inttypes.h	181;"	d
SCNi8	include/git2/inttypes.h	160;"	d
SCNiFAST16	include/git2/inttypes.h	171;"	d
SCNiFAST32	include/git2/inttypes.h	178;"	d
SCNiFAST64	include/git2/inttypes.h	185;"	d
SCNiFAST8	include/git2/inttypes.h	164;"	d
SCNiLEAST16	include/git2/inttypes.h	169;"	d
SCNiLEAST32	include/git2/inttypes.h	176;"	d
SCNiLEAST64	include/git2/inttypes.h	183;"	d
SCNiLEAST8	include/git2/inttypes.h	162;"	d
SCNiMAX	include/git2/inttypes.h	188;"	d
SCNiPTR	include/git2/inttypes.h	192;"	d
SCNiPTR	include/git2/inttypes.h	195;"	d
SCNo16	include/git2/inttypes.h	212;"	d
SCNo32	include/git2/inttypes.h	225;"	d
SCNo64	include/git2/inttypes.h	238;"	d
SCNo8	include/git2/inttypes.h	199;"	d
SCNoFAST16	include/git2/inttypes.h	220;"	d
SCNoFAST32	include/git2/inttypes.h	233;"	d
SCNoFAST64	include/git2/inttypes.h	246;"	d
SCNoFAST8	include/git2/inttypes.h	207;"	d
SCNoLEAST16	include/git2/inttypes.h	216;"	d
SCNoLEAST32	include/git2/inttypes.h	229;"	d
SCNoLEAST64	include/git2/inttypes.h	242;"	d
SCNoLEAST8	include/git2/inttypes.h	203;"	d
SCNoMAX	include/git2/inttypes.h	251;"	d
SCNoPTR	include/git2/inttypes.h	257;"	d
SCNoPTR	include/git2/inttypes.h	262;"	d
SCNu16	include/git2/inttypes.h	213;"	d
SCNu32	include/git2/inttypes.h	226;"	d
SCNu64	include/git2/inttypes.h	239;"	d
SCNu8	include/git2/inttypes.h	200;"	d
SCNuFAST16	include/git2/inttypes.h	221;"	d
SCNuFAST32	include/git2/inttypes.h	234;"	d
SCNuFAST64	include/git2/inttypes.h	247;"	d
SCNuFAST8	include/git2/inttypes.h	208;"	d
SCNuLEAST16	include/git2/inttypes.h	217;"	d
SCNuLEAST32	include/git2/inttypes.h	230;"	d
SCNuLEAST64	include/git2/inttypes.h	243;"	d
SCNuLEAST8	include/git2/inttypes.h	204;"	d
SCNuMAX	include/git2/inttypes.h	252;"	d
SCNuPTR	include/git2/inttypes.h	258;"	d
SCNuPTR	include/git2/inttypes.h	263;"	d
SCNx16	include/git2/inttypes.h	214;"	d
SCNx32	include/git2/inttypes.h	227;"	d
SCNx64	include/git2/inttypes.h	240;"	d
SCNx8	include/git2/inttypes.h	201;"	d
SCNxFAST16	include/git2/inttypes.h	222;"	d
SCNxFAST32	include/git2/inttypes.h	235;"	d
SCNxFAST64	include/git2/inttypes.h	248;"	d
SCNxFAST8	include/git2/inttypes.h	209;"	d
SCNxLEAST16	include/git2/inttypes.h	218;"	d
SCNxLEAST32	include/git2/inttypes.h	231;"	d
SCNxLEAST64	include/git2/inttypes.h	244;"	d
SCNxLEAST8	include/git2/inttypes.h	205;"	d
SCNxMAX	include/git2/inttypes.h	253;"	d
SCNxPTR	include/git2/inttypes.h	259;"	d
SCNxPTR	include/git2/inttypes.h	264;"	d
SEPARATOR	deps/zlib/trees.c	329;"	d	file:
SET_ERRNO	deps/http-parser/http_parser.c	54;"	d	file:
SET_REPO_CONFIG	src/repository.c	1048;"	d	file:
SHA_ASM	src/hash/hash_generic.c	21;"	d	file:
SHA_MIX	src/hash/hash_generic.c	103;"	d	file:
SHA_ROL	src/hash/hash_generic.c	22;"	d	file:
SHA_ROL	src/hash/hash_generic.c	28;"	d	file:
SHA_ROR	src/hash/hash_generic.c	23;"	d	file:
SHA_ROR	src/hash/hash_generic.c	29;"	d	file:
SHA_ROT	src/hash/hash_generic.c	27;"	d	file:
SHA_ROUND	src/hash/hash_generic.c	105;"	d	file:
SHA_SRC	src/hash/hash_generic.c	102;"	d	file:
SHOW_NONE	examples/cat-file.c	/^	SHOW_NONE = 3,$/;"	e	enum:__anon2	file:
SHOW_PRETTY	examples/cat-file.c	/^	SHOW_PRETTY = 4$/;"	e	enum:__anon2	file:
SHOW_SIZE	examples/cat-file.c	/^	SHOW_SIZE = 2,$/;"	e	enum:__anon2	file:
SHOW_TYPE	examples/cat-file.c	/^	SHOW_TYPE = 1,$/;"	e	enum:__anon2	file:
SIG_ATOMIC_MAX	include/git2/stdint.h	200;"	d
SIG_ATOMIC_MIN	include/git2/stdint.h	199;"	d
SIMILARITY_TEST_DATA_1	tests/core/buffer.c	773;"	d	file:
SIMPLE_BRACKET	deps/regex/regex_internal.h	/^  SIMPLE_BRACKET = 3,$/;"	e	enum:__anon182
SIZE_MAX	deps/regex/regex_internal.h	116;"	d
SIZE_MAX	include/git2/stdint.h	204;"	d
SIZE_MAX	include/git2/stdint.h	206;"	d
SKIP	examples/add.c	/^	SKIP = 1,$/;"	e	enum:print_options	file:
SKIP_COMMENTS	src/config_file.c	665;"	d	file:
SKIP_WHITESPACE	src/config_file.c	664;"	d	file:
SM1	tests/submodule/modify.c	125;"	d	file:
SM2	tests/submodule/modify.c	126;"	d	file:
SM3	tests/submodule/modify.c	127;"	d	file:
SMALLEST	deps/zlib/trees.c	430;"	d	file:
SM_LIBGIT2	tests/submodule/modify.c	9;"	d	file:
SM_LIBGIT2B	tests/submodule/modify.c	10;"	d	file:
SM_LIBGIT2_URL	tests/submodule/modify.c	8;"	d	file:
STALE	src/commit_list.h	15;"	d
STANDARD_REPOSITORY	tests/repo/init.c	/^	STANDARD_REPOSITORY = 0,$/;"	e	enum:repo_mode	file:
STATE_NODE_CONTAINS	deps/regex/regexec.c	1592;"	d	file:
STATIC_TREES	deps/zlib/zutil.h	67;"	d
STATUS_INDEX_FLAGS	tests/index/addall.c	21;"	d	file:
STATUS_WT_FLAGS	tests/index/addall.c	26;"	d	file:
STAT_T	tests/clar.c	/^	typedef struct _stat STAT_T;$/;"	t	typeref:struct:_stat	file:
STAT_T	tests/clar.c	/^	typedef struct stat STAT_T;$/;"	t	typeref:struct:stat	file:
STORED	deps/zlib/inflate.h	/^        STORED,     \/* i: waiting for stored size (length and complement) *\/$/;"	e	enum:__anon198
STORED_BLOCK	deps/zlib/zutil.h	66;"	d
STRCMP_CASESELECT	src/util.h	90;"	d
STRICT_CHECK	deps/http-parser/http_parser.c	387;"	d	file:
STRICT_CHECK	deps/http-parser/http_parser.c	396;"	d	file:
SUBEXP	deps/regex/regex_internal.h	/^  SUBEXP = 17,$/;"	e	enum:__anon182
SUBMODULE_MAIN_BRANCH	tests/merge/workdir/submodules.c	12;"	d	file:
SUBMODULE_OTHER2_BRANCH	tests/merge/workdir/submodules.c	14;"	d	file:
SUBMODULE_OTHER_BRANCH	tests/merge/workdir/submodules.c	13;"	d	file:
SUB_REPOSITORY_FOLDER	tests/repo/discover.c	11;"	d	file:
SUB_REPOSITORY_FOLDER_NAME	tests/repo/discover.c	10;"	d	file:
SUB_REPOSITORY_FOLDER_SUB	tests/repo/discover.c	12;"	d	file:
SUB_REPOSITORY_FOLDER_SUB_SUB	tests/repo/discover.c	13;"	d	file:
SUB_REPOSITORY_FOLDER_SUB_SUB_SUB	tests/repo/discover.c	14;"	d	file:
SYNC	deps/zlib/inflate.h	/^    SYNC        \/* looking for synchronization bytes to restart inflate() *\/$/;"	e	enum:__anon198
S_IFGITLINK	src/posix.h	16;"	d
S_IFLNK	src/win32/mingw-compat.h	19;"	d
S_IFLNK	src/win32/msvc-compat.h	23;"	d
S_IREAD	tests/odb/loose.c	8;"	d	file:
S_ISDIR	src/win32/msvc-compat.h	26;"	d
S_ISDIR	tests/clar.c	55;"	d	file:
S_ISFIFO	src/win32/msvc-compat.h	28;"	d
S_ISGID	src/posix.h	22;"	d
S_ISGITLINK	src/posix.h	17;"	d
S_ISLNK	src/win32/mingw-compat.h	20;"	d
S_ISLNK	src/win32/msvc-compat.h	29;"	d
S_ISREG	src/win32/msvc-compat.h	27;"	d
S_IWRITE	tests/odb/loose.c	9;"	d	file:
S_IXUSR	src/win32/msvc-compat.h	24;"	d
T	deps/http-parser/http_parser.c	193;"	d	file:
T	deps/http-parser/http_parser.c	195;"	d	file:
T	deps/http-parser/http_parser.c	233;"	d	file:
T	src/delta.c	/^static const unsigned int T[256] = {$/;"	v	file:
TABLE	deps/zlib/inflate.h	/^        TABLE,      \/* i: waiting for dynamic block table lengths *\/$/;"	e	enum:__anon198
TABLE_HASH	src/xdiff/xhistogram.c	107;"	d	file:
TBLS	deps/zlib/crc32.c	62;"	d	file:
TBLS	deps/zlib/crc32.c	64;"	d	file:
TEMP_REPO_FOLDER	tests/repo/discover.c	7;"	d	file:
TESTSTR	tests/core/buffer.c	7;"	d	file:
TESTSTR_4096	tests/core/buffer.c	11;"	d	file:
TESTSTR_8192	tests/core/buffer.c	12;"	d	file:
TEST_ANCESTOR_OID	tests/index/conflicts.c	19;"	d	file:
TEST_CONFIG	tests/config/new.c	7;"	d	file:
TEST_CONFIG	tests/config/stress.c	7;"	d	file:
TEST_DIR	tests/index/addall.c	7;"	d	file:
TEST_FILE	tests/config/refresh.c	3;"	d	file:
TEST_INDEX2_PATH	tests/index/tests.c	7;"	d	file:
TEST_INDEXBAD_PATH	tests/index/tests.c	9;"	d	file:
TEST_INDEXBIG_PATH	tests/index/tests.c	8;"	d	file:
TEST_INDEX_PATH	tests/index/conflicts.c	9;"	d	file:
TEST_INDEX_PATH	tests/index/names.c	11;"	d	file:
TEST_INDEX_PATH	tests/index/reuc.c	11;"	d	file:
TEST_INDEX_PATH	tests/index/stage.c	9;"	d	file:
TEST_INDEX_PATH	tests/index/tests.c	6;"	d	file:
TEST_INDEX_PATH	tests/merge/trees/automerge.c	12;"	d	file:
TEST_INDEX_PATH	tests/merge/trees/trivial.c	13;"	d	file:
TEST_INDEX_PATH	tests/merge/workdir/fastforward.c	13;"	d	file:
TEST_INDEX_PATH	tests/merge/workdir/setup.c	12;"	d	file:
TEST_INDEX_PATH	tests/merge/workdir/simple.c	14;"	d	file:
TEST_INDEX_PATH	tests/merge/workdir/submodules.c	16;"	d	file:
TEST_INDEX_PATH	tests/merge/workdir/trivial.c	14;"	d	file:
TEST_OUR_OID	tests/index/conflicts.c	20;"	d	file:
TEST_REPO_PATH	tests/checkout/conflict.c	9;"	d	file:
TEST_REPO_PATH	tests/index/conflicts.c	8;"	d	file:
TEST_REPO_PATH	tests/index/names.c	10;"	d	file:
TEST_REPO_PATH	tests/index/reuc.c	10;"	d	file:
TEST_REPO_PATH	tests/index/stage.c	8;"	d	file:
TEST_REPO_PATH	tests/merge/trees/automerge.c	11;"	d	file:
TEST_REPO_PATH	tests/merge/trees/commits.c	9;"	d	file:
TEST_REPO_PATH	tests/merge/trees/modeconflict.c	11;"	d	file:
TEST_REPO_PATH	tests/merge/trees/renames.c	11;"	d	file:
TEST_REPO_PATH	tests/merge/trees/treediff.c	10;"	d	file:
TEST_REPO_PATH	tests/merge/trees/trivial.c	12;"	d	file:
TEST_REPO_PATH	tests/merge/workdir/dirty.c	8;"	d	file:
TEST_REPO_PATH	tests/merge/workdir/fastforward.c	12;"	d	file:
TEST_REPO_PATH	tests/merge/workdir/renames.c	12;"	d	file:
TEST_REPO_PATH	tests/merge/workdir/setup.c	11;"	d	file:
TEST_REPO_PATH	tests/merge/workdir/simple.c	13;"	d	file:
TEST_REPO_PATH	tests/merge/workdir/submodules.c	10;"	d	file:
TEST_REPO_PATH	tests/merge/workdir/trivial.c	13;"	d	file:
TEST_REPO_PATH	tests/revert/bare.c	10;"	d	file:
TEST_REPO_PATH	tests/revert/workdir.c	10;"	d	file:
TEST_THEIR_OID	tests/index/conflicts.c	21;"	d	file:
THEIRS_AUTOMERGE_BRANCH	tests/merge/trees/automerge.c	14;"	d	file:
THEIRS_DIRECTORY_FILE	tests/merge/trees/automerge.c	21;"	d	file:
THEIRS_DIRECTORY_FILE	tests/merge/workdir/simple.c	24;"	d	file:
THEIRS_FASTFORWARD_BRANCH	tests/merge/workdir/fastforward.c	15;"	d	file:
THEIRS_FASTFORWARD_ID	tests/merge/workdir/fastforward.c	16;"	d	file:
THEIRS_NOFASTFORWARD_BRANCH	tests/merge/workdir/fastforward.c	18;"	d	file:
THEIRS_NOFASTFORWARD_ID	tests/merge/workdir/fastforward.c	19;"	d	file:
THEIRS_SIMPLE_BRANCH	tests/merge/workdir/setup.c	16;"	d	file:
THEIRS_SIMPLE_BRANCH	tests/merge/workdir/simple.c	16;"	d	file:
THEIRS_SIMPLE_OID	tests/merge/workdir/setup.c	17;"	d	file:
THEIRS_SIMPLE_OID	tests/merge/workdir/simple.c	17;"	d	file:
THEIRS_UNRELATED_BRANCH	tests/merge/trees/automerge.c	16;"	d	file:
THEIRS_UNRELATED_BRANCH	tests/merge/workdir/simple.c	19;"	d	file:
THEIRS_UNRELATED_OID	tests/merge/trees/automerge.c	17;"	d	file:
THEIRS_UNRELATED_OID	tests/merge/workdir/simple.c	20;"	d	file:
THEIRS_UNRELATED_PARENT	tests/merge/trees/automerge.c	18;"	d	file:
THEIRS_UNRELATED_PARENT	tests/merge/workdir/simple.c	21;"	d	file:
THREADCOUNT	tests/object/cache.c	195;"	d	file:
THREADS	tests/threads/refdb.c	20;"	d	file:
TIME	deps/zlib/inflate.h	/^    TIME,       \/* i: waiting for modification time (gzip) *\/$/;"	e	enum:__anon198
TOKEN	deps/http-parser/http_parser.c	371;"	d	file:
TOKEN	deps/http-parser/http_parser.c	375;"	d	file:
TOO_FAR	deps/zlib/deflate.c	108;"	d	file:
TRANSFER_ENCODING	deps/http-parser/http_parser.c	123;"	d	file:
TREE_IDX_ANCESTOR	src/merge.c	/^	TREE_IDX_ANCESTOR = 0,$/;"	e	enum:__anon171	file:
TREE_IDX_OURS	src/merge.c	/^	TREE_IDX_OURS = 1,$/;"	e	enum:__anon171	file:
TREE_IDX_THEIRS	src/merge.c	/^	TREE_IDX_THEIRS = 2$/;"	e	enum:__anon171	file:
TREE_OID_ANCESTOR	tests/merge/trees/treediff.c	12;"	d	file:
TREE_OID_BRANCH	tests/merge/trees/treediff.c	14;"	d	file:
TREE_OID_DF_ANCESTOR	tests/merge/trees/treediff.c	18;"	d	file:
TREE_OID_DF_SIDE1	tests/merge/trees/treediff.c	19;"	d	file:
TREE_OID_DF_SIDE2	tests/merge/trees/treediff.c	20;"	d	file:
TREE_OID_MASTER	tests/merge/trees/treediff.c	13;"	d	file:
TREE_OID_RENAMES1	tests/merge/trees/treediff.c	15;"	d	file:
TREE_OID_RENAMES2	tests/merge/trees/treediff.c	16;"	d	file:
TREE_OID_RENAME_CONFLICT_ANCESTOR	tests/merge/trees/treediff.c	22;"	d	file:
TREE_OID_RENAME_CONFLICT_OURS	tests/merge/trees/treediff.c	23;"	d	file:
TREE_OID_RENAME_CONFLICT_THEIRS	tests/merge/trees/treediff.c	24;"	d	file:
TRY_FREE	deps/zlib/zutil.h	272;"	d
TWO_ANCESTOR_OID	tests/index/reuc.c	17;"	d	file:
TWO_OUR_OID	tests/index/reuc.c	18;"	d	file:
TWO_THEIR_OID	tests/index/reuc.c	19;"	d	file:
TYPE	deps/zlib/inflate.h	/^        TYPE,       \/* i: waiting for type bits, including last-flag bit *\/$/;"	e	enum:__anon198
TYPEDO	deps/zlib/inflate.h	/^        TYPEDO,     \/* i: same, but skip check to exit inflate on new block *\/$/;"	e	enum:__anon198
T_0_15	src/hash/hash_generic.c	110;"	d	file:
T_16_19	src/hash/hash_generic.c	111;"	d	file:
T_20_39	src/hash/hash_generic.c	112;"	d	file:
T_40_59	src/hash/hash_generic.c	113;"	d	file:
T_60_79	src/hash/hash_generic.c	114;"	d	file:
Template	tests/generate.py	/^    class Template(object):$/;"	c	class:Module
TestSuite	tests/generate.py	/^class TestSuite(object):$/;"	c
Trace	deps/zlib/zutil.h	250;"	d
Trace	deps/zlib/zutil.h	257;"	d
Tracec	deps/zlib/zutil.h	253;"	d
Tracec	deps/zlib/zutil.h	260;"	d
Tracecv	deps/zlib/zutil.h	254;"	d
Tracecv	deps/zlib/zutil.h	261;"	d
Tracev	deps/zlib/zutil.h	251;"	d
Tracev	deps/zlib/zutil.h	258;"	d
Tracevv	deps/zlib/zutil.h	252;"	d
Tracevv	deps/zlib/zutil.h	259;"	d
U	src/delta.c	/^static const unsigned int U[256] = {$/;"	v	file:
UF_FRAGMENT	deps/http-parser/http_parser.h	/^  , UF_FRAGMENT         = 5$/;"	e	enum:http_parser_url_fields
UF_HOST	deps/http-parser/http_parser.h	/^  , UF_HOST             = 1$/;"	e	enum:http_parser_url_fields
UF_MAX	deps/http-parser/http_parser.h	/^  , UF_MAX              = 7$/;"	e	enum:http_parser_url_fields
UF_PATH	deps/http-parser/http_parser.h	/^  , UF_PATH             = 3$/;"	e	enum:http_parser_url_fields
UF_PORT	deps/http-parser/http_parser.h	/^  , UF_PORT             = 2$/;"	e	enum:http_parser_url_fields
UF_QUERY	deps/http-parser/http_parser.h	/^  , UF_QUERY            = 4$/;"	e	enum:http_parser_url_fields
UF_SCHEMA	deps/http-parser/http_parser.h	/^  { UF_SCHEMA           = 0$/;"	e	enum:http_parser_url_fields
UF_USERINFO	deps/http-parser/http_parser.h	/^  , UF_USERINFO         = 6$/;"	e	enum:http_parser_url_fields
UINT16_C	include/git2/stdint.h	236;"	d
UINT16_MAX	include/git2/stdint.h	141;"	d
UINT31_MAX	src/indexer.c	21;"	d	file:
UINT32_C	include/git2/stdint.h	237;"	d
UINT32_MAX	include/git2/stdint.h	142;"	d
UINT64_C	include/git2/stdint.h	238;"	d
UINT64_MAX	include/git2/stdint.h	143;"	d
UINT8_C	include/git2/stdint.h	235;"	d
UINT8_MAX	include/git2/stdint.h	140;"	d
UINTMAX_C	include/git2/stdint.h	242;"	d
UINTMAX_MAX	include/git2/stdint.h	187;"	d
UINTPTR_MAX	include/git2/stdint.h	177;"	d
UINTPTR_MAX	include/git2/stdint.h	181;"	d
UINT_FAST16_MAX	include/git2/stdint.h	169;"	d
UINT_FAST32_MAX	include/git2/stdint.h	170;"	d
UINT_FAST64_MAX	include/git2/stdint.h	171;"	d
UINT_FAST8_MAX	include/git2/stdint.h	168;"	d
UINT_LEAST16_MAX	include/git2/stdint.h	155;"	d
UINT_LEAST32_MAX	include/git2/stdint.h	156;"	d
UINT_LEAST64_MAX	include/git2/stdint.h	157;"	d
UINT_LEAST8_MAX	include/git2/stdint.h	154;"	d
ULLONG_MAX	deps/http-parser/http_parser.c	33;"	d	file:
UNCHANGED_INDEX_ENTRY	tests/merge/trees/automerge.c	32;"	d	file:
UNCHANGED_INDEX_ENTRY	tests/merge/workdir/simple.c	40;"	d	file:
UNRELATED_NEW1	tests/merge/workdir/simple.c	45;"	d	file:
UNRELATED_NEW2	tests/merge/workdir/simple.c	48;"	d	file:
UNUSED	deps/regex/regex_internal.h	32;"	d
UNUSED	deps/regex/regex_internal.h	34;"	d
UNUSED	examples/network/common.c	10;"	d	file:
UNUSED	examples/network/common.c	12;"	d	file:
UNUSED	examples/network/common.c	14;"	d	file:
UPDATE	deps/zlib/inflate.c	412;"	d	file:
UPDATE	deps/zlib/inflate.c	415;"	d	file:
UPDATE	examples/add.c	/^	UPDATE = 4,$/;"	e	enum:print_options	file:
UPDATE_HASH	deps/zlib/deflate.c	164;"	d	file:
UPGRADE	deps/http-parser/http_parser.c	124;"	d	file:
USE_DEFAULT	src/diff_tform.c	322;"	d	file:
USE_DEFAULT	src/diff_tform.c	336;"	d	file:
UTF8_BOM	tests/filter/crlf.h	8;"	d
UUID_LENGTH_CCH	src/transports/winhttp.c	33;"	d	file:
UniqueGenerator	tests/resources/userdiff/after/file.php	/^class UniqueGenerator$/;"	c
UniqueGenerator	tests/resources/userdiff/before/file.php	/^class UniqueGenerator$/;"	c
UniqueGenerator	tests/resources/userdiff/files/file.php	/^class UniqueGenerator$/;"	c
VALUE	src/transports/http.c	/^	VALUE$/;"	e	enum:last_cb	file:
VERBOSE	examples/add.c	/^	VERBOSE = 2,$/;"	e	enum:print_options	file:
VERY_SECURE_ENCRYPTION	tests/filter/custom.c	15;"	d	file:
W	src/hash/hash_generic.c	96;"	d	file:
W	src/hash/hash_generic.h	/^	unsigned int W[16];$/;"	m	struct:git_hash_ctx
WCHAR_MAX	include/git2/stdint.h	215;"	d
WCHAR_MIN	include/git2/stdint.h	212;"	d
WC_ERR_INVALID_CHARS	src/win32/error.c	16;"	d	file:
WIDEN	src/transports/winhttp.c	28;"	d	file:
WIDEN2	src/transports/winhttp.c	27;"	d	file:
WIDE_NEWLINE_CHAR	deps/regex/regex_internal.h	147;"	d
WIN32_IS_WSEP	src/win32/posix_w32.c	56;"	d	file:
WIN32_LEAN_AND_MEAN	src/thread-utils.c	11;"	d	file:
WINHTTP_OPTION_PEERDIST_EXTENSION_STATE	src/transports/winhttp.c	31;"	d	file:
WINT_MAX	include/git2/stdint.h	219;"	d
WINT_MIN	include/git2/stdint.h	218;"	d
WIN_INIT	deps/zlib/deflate.h	288;"	d
WORD_DEFAULT	src/userdiff.h	207;"	d
WORD_DEFAULT	src/userdiff.h	23;"	d
WORD_DELIM	deps/regex/regex_internal.h	/^  WORD_DELIM = WORD_DELIM_CONSTRAINT,$/;"	e	enum:__anon180
WORD_DELIM_CONSTRAINT	deps/regex/regex_internal.h	209;"	d
WORD_FIRST	deps/regex/regex_internal.h	/^  WORD_FIRST = PREV_NOTWORD_CONSTRAINT | NEXT_WORD_CONSTRAINT,$/;"	e	enum:__anon180
WORD_LAST	deps/regex/regex_internal.h	/^  WORD_LAST = PREV_WORD_CONSTRAINT | NEXT_NOTWORD_CONSTRAINT,$/;"	e	enum:__anon180
WORKDIR	tests/object/blob/write.c	9;"	d	file:
WRITE_BUFFER_SIZE	src/filebuf.c	/^static const size_t WRITE_BUFFER_SIZE = (4096 * 2);$/;"	v	file:
WRITE_ONE_BREAK	src/pack-objects.c	/^	WRITE_ONE_BREAK = 0, \/* writing this will bust the limit; not written *\/$/;"	e	enum:write_one_status	file:
WRITE_ONE_RECURSIVE	src/pack-objects.c	/^	WRITE_ONE_RECURSIVE = 2 \/* already scheduled to be written *\/$/;"	e	enum:write_one_status	file:
WRITE_ONE_SKIP	src/pack-objects.c	/^	WRITE_ONE_SKIP = -1, \/* already written *\/$/;"	e	enum:write_one_status	file:
WRITE_ONE_WRITTEN	src/pack-objects.c	/^	WRITE_ONE_WRITTEN = 1, \/* normal *\/$/;"	e	enum:write_one_status	file:
W_OK	src/win32/msvc-compat.h	14;"	d
W_OK	tests/clar.c	52;"	d	file:
XDF_HISTOGRAM_DIFF	src/xdiff/xdiff.h	36;"	d
XDF_IGNORE_WHITESPACE	src/xdiff/xdiff.h	32;"	d
XDF_IGNORE_WHITESPACE_AT_EOL	src/xdiff/xdiff.h	34;"	d
XDF_IGNORE_WHITESPACE_CHANGE	src/xdiff/xdiff.h	33;"	d
XDF_NEED_MINIMAL	src/xdiff/xdiff.h	31;"	d
XDF_PATIENCE_DIFF	src/xdiff/xdiff.h	35;"	d
XDF_WHITESPACE_FLAGS	src/xdiff/xdiff.h	37;"	d
XDIFFI_H	src/xdiff/xdiffi.h	24;"	d
XDIFF_H	src/xdiff/xdiff.h	24;"	d
XDL_ABS	src/xdiff/xmacros.h	31;"	d
XDL_ADDBITS	src/xdiff/xmacros.h	34;"	d
XDL_BDOP_CPY	src/xdiff/xdiff.h	53;"	d
XDL_BDOP_INS	src/xdiff/xdiff.h	52;"	d
XDL_BDOP_INSB	src/xdiff/xdiff.h	54;"	d
XDL_EMIT_COMMON	src/xdiff/xdiff.h	45;"	d
XDL_EMIT_FUNCCONTEXT	src/xdiff/xdiff.h	46;"	d
XDL_EMIT_FUNCNAMES	src/xdiff/xdiff.h	44;"	d
XDL_GUESS_NLINES1	src/xdiff/xprepare.c	29;"	d	file:
XDL_GUESS_NLINES2	src/xdiff/xprepare.c	30;"	d	file:
XDL_HASHLONG	src/xdiff/xmacros.h	36;"	d
XDL_HEUR_MIN_COST	src/xdiff/xdiffi.c	28;"	d	file:
XDL_ISDIGIT	src/xdiff/xmacros.h	32;"	d
XDL_ISSPACE	src/xdiff/xmacros.h	33;"	d
XDL_KPDIS_RUN	src/xdiff/xprepare.c	26;"	d	file:
XDL_K_HEUR	src/xdiff/xdiffi.c	31;"	d	file:
XDL_LE32_GET	src/xdiff/xmacros.h	46;"	d
XDL_LE32_PUT	src/xdiff/xmacros.h	38;"	d
XDL_LINE_MAX	src/xdiff/xdiffi.c	29;"	d	file:
XDL_MASKBITS	src/xdiff/xmacros.h	35;"	d
XDL_MAX	src/xdiff/xmacros.h	30;"	d
XDL_MAX_COST_MIN	src/xdiff/xdiffi.c	27;"	d	file:
XDL_MAX_EQLIMIT	src/xdiff/xprepare.c	27;"	d	file:
XDL_MERGE_DIFF3	src/xdiff/xdiff.h	68;"	d
XDL_MERGE_EAGER	src/xdiff/xdiff.h	58;"	d
XDL_MERGE_FAVOR_OURS	src/xdiff/xdiff.h	63;"	d
XDL_MERGE_FAVOR_THEIRS	src/xdiff/xdiff.h	64;"	d
XDL_MERGE_FAVOR_UNION	src/xdiff/xdiff.h	65;"	d
XDL_MERGE_MINIMAL	src/xdiff/xdiff.h	57;"	d
XDL_MERGE_ZEALOUS	src/xdiff/xdiff.h	59;"	d
XDL_MERGE_ZEALOUS_ALNUM	src/xdiff/xdiff.h	60;"	d
XDL_MIN	src/xdiff/xmacros.h	29;"	d
XDL_MMB_READONLY	src/xdiff/xdiff.h	48;"	d
XDL_MMF_ATOMIC	src/xdiff/xdiff.h	50;"	d
XDL_PATCH_IGNOREBSPACE	src/xdiff/xdiff.h	42;"	d
XDL_PATCH_MODEMASK	src/xdiff/xdiff.h	41;"	d
XDL_PATCH_NORMAL	src/xdiff/xdiff.h	39;"	d
XDL_PATCH_REVERSE	src/xdiff/xdiff.h	40;"	d
XDL_PTRFREE	src/xdiff/xmacros.h	37;"	d
XDL_SIMSCAN_WINDOW	src/xdiff/xprepare.c	28;"	d	file:
XDL_SNAKE_CNT	src/xdiff/xdiffi.c	30;"	d	file:
XEMIT_H	src/xdiff/xemit.h	24;"	d
XINCLUDE_H	src/xdiff/xinclude.h	24;"	d
XMACROS_H	src/xdiff/xmacros.h	24;"	d
XPREPARE_H	src/xdiff/xprepare.h	24;"	d
XTYPES_H	src/xdiff/xtypes.h	24;"	d
XUTILS_H	src/xdiff/xutils.h	24;"	d
XX	deps/http-parser/http_parser.c	132;"	d	file:
XX	deps/http-parser/http_parser.c	134;"	d	file:
XX	deps/http-parser/http_parser.h	115;"	d
XX	deps/http-parser/http_parser.h	117;"	d
ZALLOC	deps/zlib/zutil.h	269;"	d
ZCONF_H	deps/zlib/zconf.h	9;"	d
ZEXPORT	deps/zlib/zconf.h	30;"	d
ZEXPORTVA	deps/zlib/zconf.h	31;"	d
ZEXTERN	deps/zlib/zconf.h	29;"	d
ZFREE	deps/zlib/zutil.h	271;"	d
ZLIB_H	deps/zlib/zlib.h	32;"	d
ZLIB_INTERNAL	deps/zlib/zutil.h	17;"	d
ZLIB_INTERNAL	deps/zlib/zutil.h	19;"	d
ZLIB_VERNUM	deps/zlib/zlib.h	41;"	d
ZLIB_VERSION	deps/zlib/zlib.h	40;"	d
ZLIB_VER_MAJOR	deps/zlib/zlib.h	42;"	d
ZLIB_VER_MINOR	deps/zlib/zlib.h	43;"	d
ZLIB_VER_REVISION	deps/zlib/zlib.h	44;"	d
ZLIB_VER_SUBREVISION	deps/zlib/zlib.h	45;"	d
ZSTREAM_BUFFER_MIN_EXTRA	src/zstream.c	14;"	d	file:
ZSTREAM_BUFFER_SIZE	src/zstream.c	13;"	d	file:
ZUTIL_H	deps/zlib/zutil.h	14;"	d
Z_ASCII	deps/zlib/zlib.h	201;"	d
Z_BEST_COMPRESSION	deps/zlib/zlib.h	188;"	d
Z_BEST_SPEED	deps/zlib/zlib.h	187;"	d
Z_BINARY	deps/zlib/zlib.h	199;"	d
Z_BLOCK	deps/zlib/zlib.h	169;"	d
Z_BUF_ERROR	deps/zlib/zlib.h	180;"	d
Z_DATA_ERROR	deps/zlib/zlib.h	178;"	d
Z_DEFAULT_COMPRESSION	deps/zlib/zlib.h	189;"	d
Z_DEFAULT_STRATEGY	deps/zlib/zlib.h	196;"	d
Z_DEFLATED	deps/zlib/zlib.h	205;"	d
Z_ERRNO	deps/zlib/zlib.h	176;"	d
Z_FILTERED	deps/zlib/zlib.h	192;"	d
Z_FINISH	deps/zlib/zlib.h	168;"	d
Z_FIXED	deps/zlib/zlib.h	195;"	d
Z_FULL_FLUSH	deps/zlib/zlib.h	167;"	d
Z_HUFFMAN_ONLY	deps/zlib/zlib.h	193;"	d
Z_MEM_ERROR	deps/zlib/zlib.h	179;"	d
Z_NEED_DICT	deps/zlib/zlib.h	175;"	d
Z_NO_COMPRESSION	deps/zlib/zlib.h	186;"	d
Z_NO_FLUSH	deps/zlib/zlib.h	164;"	d
Z_NULL	deps/zlib/zlib.h	208;"	d
Z_OK	deps/zlib/zlib.h	173;"	d
Z_PARTIAL_FLUSH	deps/zlib/zlib.h	165;"	d
Z_RLE	deps/zlib/zlib.h	194;"	d
Z_STREAM_END	deps/zlib/zlib.h	174;"	d
Z_STREAM_ERROR	deps/zlib/zlib.h	177;"	d
Z_SYNC_FLUSH	deps/zlib/zlib.h	166;"	d
Z_TEXT	deps/zlib/zlib.h	200;"	d
Z_TREES	deps/zlib/zlib.h	170;"	d
Z_UNKNOWN	deps/zlib/zlib.h	202;"	d
Z_VERSION_ERROR	deps/zlib/zlib.h	181;"	d
_INCLUDE_git_indexer_h__	include/git2/indexer.h	8;"	d
_MAIN_CC	tests/clar.c	25;"	d	file:
_MAIN_CC	tests/clar.c	72;"	d	file:
_MSC_INTTYPES_H_	include/git2/inttypes.h	37;"	d
_MSC_STDINT_H_	include/git2/stdint.h	37;"	d
_PTRDIFF_T_DEFINED	deps/zlib/zutil.h	149;"	d
_REGEX_CONFIG_H_	deps/regex/config.h	2;"	d
_REGEX_H	deps/regex/regex.h	26;"	d
_REGEX_INTERNAL_H	deps/regex/regex_internal.h	22;"	d
_RE_DEFINE_LOCALE_FUNCTIONS	deps/regex/regex_internal.h	89;"	d
_RE_SYNTAX_POSIX_COMMON	deps/regex/regex.h	236;"	d
_SC_NPROCESSORS_ONLN	src/thread-utils.c	24;"	d	file:
_SC_NPROCESSORS_ONLN	src/thread-utils.c	26;"	d	file:
_S_IFLNK	src/win32/mingw-compat.h	18;"	d
_S_IFLNK	src/win32/msvc-compat.h	22;"	d
_W64	include/git2/stdint.h	60;"	d
_W64	include/git2/stdint.h	62;"	d
__AC_KHASH_H	src/khash.h	105;"	d
__CLAR_LIBGIT2__	tests/clar_libgit2.h	2;"	d
__CLAR_TEST_ATTR_EXPECT__	tests/attr/attr_expect.h	2;"	d
__CLAR_TEST_H__	tests/clar.h	8;"	d
__COMMON_H__	examples/network/common.h	2;"	d
__KHASH_IMPL	src/khash.h	194;"	d
__KHASH_PROTOTYPES	src/khash.h	185;"	d
__KHASH_TYPE	src/khash.h	177;"	d
__REPB_PREFIX	deps/regex/regex.h	358;"	d
__REPB_PREFIX	deps/regex/regex.h	360;"	d
__RE_TRANSLATE_TYPE	deps/regex/regex.h	351;"	d
__USE_GNU	deps/regex/regex.h	37;"	d
__ac_HASH_UPPER	src/khash.h	/^static const double __ac_HASH_UPPER = 0.77;$/;"	v
__ac_Wang_hash	src/khash.h	/^static kh_inline khint_t __ac_Wang_hash(khint_t key)$/;"	f
__ac_X31_hash_string	src/khash.h	/^static kh_inline khint_t __ac_X31_hash_string(const char *s)$/;"	f
__ac_fsize	src/khash.h	156;"	d
__ac_inc	src/khash.h	151;"	d
__ac_inc	src/khash.h	153;"	d
__ac_isdel	src/khash.h	143;"	d
__ac_iseither	src/khash.h	144;"	d
__ac_isempty	src/khash.h	142;"	d
__ac_set_isboth_false	src/khash.h	147;"	d
__ac_set_isdel_false	src/khash.h	145;"	d
__ac_set_isdel_true	src/khash.h	148;"	d
__ac_set_isempty_false	src/khash.h	146;"	d
__attribute	deps/regex/regex_internal.h	169;"	d
__attribute	deps/regex/regex_internal.h	171;"	d
__btowc	deps/regex/regex_internal.h	159;"	d
__call	tests/resources/userdiff/after/file.php	/^    public function __call($name, $arguments)$/;"	f
__call	tests/resources/userdiff/before/file.php	/^    public function __call($name, $arguments)$/;"	f
__call	tests/resources/userdiff/files/file.php	/^    public function __call($name, $arguments)$/;"	f
__compat_regexec	deps/regex/regexec.c	/^__compat_regexec (const regex_t *__restrict preg,$/;"	f
__construct	tests/resources/userdiff/after/file.php	/^    public function __construct(Generator $generator, $maxRetries)$/;"	f
__construct	tests/resources/userdiff/before/file.php	/^    public function __construct(Generator $generator, $maxRetries)$/;"	f
__construct	tests/resources/userdiff/files/file.php	/^    public function __construct(Generator $generator, $maxRetries)$/;"	f
__get	tests/resources/userdiff/after/file.php	/^    public function __get($attribute)$/;"	f
__get	tests/resources/userdiff/before/file.php	/^    public function __get($attribute)$/;"	f
__get	tests/resources/userdiff/files/file.php	/^    public function __get($attribute)$/;"	f
__init__	tests/generate.py	/^        def __init__(self, module):$/;"	m	class:Module.Template
__init__	tests/generate.py	/^    def __init__(self, name):$/;"	m	class:Module
__init__	tests/generate.py	/^    def __init__(self, path):$/;"	m	class:TestSuite
__iswctype	deps/regex/regex_internal.h	156;"	d
__iswctype	deps/regex/regex_internal.h	158;"	d
__libc_lock_define	deps/regex/regex_internal.h	61;"	d
__libc_lock_init	deps/regex/regex_internal.h	62;"	d
__libc_lock_lock	deps/regex/regex_internal.h	63;"	d
__libc_lock_unlock	deps/regex/regex_internal.h	64;"	d
__libc_use_alloca	deps/regex/regex_internal.h	468;"	d
__libc_use_alloca	deps/regex/regex_internal.h	475;"	d
__libc_use_alloca	deps/regex/regex_internal.h	479;"	d
__mbrtowc	deps/regex/regex_internal.h	160;"	d
__mempcpy	deps/regex/regex_internal.h	161;"	d
__mempcpy	deps/regex/regex_internal.h	162;"	d
__regfree	deps/regex/regex_internal.h	164;"	d
__restrict	deps/regex/regex.h	546;"	d
__restrict	deps/regex/regex.h	548;"	d
__restrict_arr	deps/regex/regex.h	556;"	d
__restrict_arr	deps/regex/regex.h	558;"	d
__state	src/global.c	/^static git_global_st __state;$/;"	v	file:
__wcrtomb	deps/regex/regex_internal.h	163;"	d
__wctype	deps/regex/regex_internal.h	152;"	d
__wctype	deps/regex/regex_internal.h	154;"	d
_alloc_size	src/vector.h	/^	size_t _alloc_size;$/;"	m	struct:git_vector
_buf	tests/buf/splice.c	/^static git_buf _buf;$/;"	v	file:
_cfg	tests/notes/notesref.c	/^static git_config *_cfg;$/;"	v	file:
_check_dir_contents	src/path.c	/^static bool _check_dir_contents($/;"	f	file:
_cl_repo	tests/clar_libgit2.c	/^static git_repository *_cl_repo = NULL;$/;"	v	file:
_cl_sandbox	tests/clar_libgit2.c	/^static const char *_cl_sandbox = NULL;$/;"	v	file:
_clar	tests/clar.c	/^} _clar;$/;"	v	typeref:struct:__anon23	file:
_clar_path	tests/clar/sandbox.h	/^static char _clar_path[4096];$/;"	v
_cmp	src/vector.h	/^	git_vector_cmp _cmp;$/;"	m	struct:git_vector
_commits	tests/pack/packbuilder.c	/^static git_vector _commits;$/;"	v	file:
_commits_is_initialized	tests/pack/packbuilder.c	/^static int _commits_is_initialized;$/;"	v	file:
_config	src/repository.h	/^	git_config *_config;$/;"	m	struct:git_repository
_config	tests/network/remote/createthenload.c	/^static git_config *_config;$/;"	v	file:
_cp_r_callback	src/fileops.c	/^static int _cp_r_callback(void *ref, git_buf *from)$/;"	f	file:
_cp_r_mkdir	src/fileops.c	/^static int _cp_r_mkdir(cp_r_info *info, git_buf *from)$/;"	f	file:
_cvar_map_autocrlf	src/config_cache.c	/^static git_cvar_map _cvar_map_autocrlf[] = {$/;"	v	file:
_cvar_map_eol	src/config_cache.c	/^static git_cvar_map _cvar_map_eol[] = {$/;"	v	file:
_cvar_map_int	src/config_cache.c	/^static git_cvar_map _cvar_map_int[] = {$/;"	v	file:
_cvar_maps	src/config_cache.c	/^static struct map_data _cvar_maps[] = {$/;"	v	typeref:struct:map_data	file:
_dirent_loose_load	src/refdb_fs.c	/^static int _dirent_loose_load(void *payload, git_buf *full_path)$/;"	f	file:
_dist_code	deps/zlib/trees.c	/^uch _dist_code[DIST_CODE_LEN];$/;"	v
_dist_code	deps/zlib/trees.h	/^const uch ZLIB_INTERNAL _dist_code[DIST_CODE_LEN] = {$/;"	v
_entries	tests/object/tree/write.c	/^} _entries[] = {$/;"	v	typeref:struct:__anon22	file:
_fake	tests/odb/backend/nonrefreshing.c	/^static fake_backend *_fake;$/;"	v	file:
_fixture	tests/revwalk/basic.c	/^static const char *_fixture = NULL;$/;"	v	file:
_git_action	src/transports/git.c	/^static int _git_action($/;"	f	file:
_git_close	src/transports/git.c	/^static int _git_close(git_smart_subtransport *subtransport)$/;"	f	file:
_git_free	src/transports/git.c	/^static void _git_free(git_smart_subtransport *subtransport)$/;"	f	file:
_git_receivepack	src/transports/git.c	/^static int _git_receivepack($/;"	f	file:
_git_receivepack_ls	src/transports/git.c	/^static int _git_receivepack_ls($/;"	f	file:
_git_ssh_authenticate_session	src/transports/ssh.c	/^static int _git_ssh_authenticate_session($/;"	f	file:
_git_ssh_session_create	src/transports/ssh.c	/^static int _git_ssh_session_create($/;"	f	file:
_git_ssh_setup_conn	src/transports/ssh.c	/^static int _git_ssh_setup_conn($/;"	f	file:
_git_uploadpack	src/transports/git.c	/^static int _git_uploadpack($/;"	f	file:
_git_uploadpack_ls	src/transports/git.c	/^static int _git_uploadpack_ls($/;"	f	file:
_halloc	deps/zlib/zutil.c	271;"	d	file:
_hfree	deps/zlib/zutil.c	272;"	d	file:
_index	src/repository.h	/^	git_index *_index;$/;"	m	struct:git_repository
_index	tests/reset/default.c	/^static git_index *_index;$/;"	v	file:
_indexer	tests/pack/packbuilder.c	/^static git_indexer *_indexer;$/;"	v	file:
_length_code	deps/zlib/trees.c	/^uch _length_code[MAX_MATCH-MIN_MATCH+1];$/;"	v
_length_code	deps/zlib/trees.h	/^const uch ZLIB_INTERNAL _length_code[MAX_MATCH-MIN_MATCH+1]= {$/;"	v
_mutex	src/global.c	/^static DWORD _mutex = 0;$/;"	v	file:
_n_inits	src/global.c	/^static DWORD _n_inits = 0;$/;"	v	file:
_name	tests/config/multivar.c	/^static const char *_name = "remote.ab.url";$/;"	v	file:
_note	tests/notes/notesref.c	/^static git_note *_note;$/;"	v	file:
_odb	src/repository.h	/^	git_odb *_odb;$/;"	m	struct:git_repository
_odb	tests/odb/foreach.c	/^static git_odb *_odb;$/;"	v	file:
_odb	tests/odb/mixed.c	/^static git_odb *_odb;$/;"	v	file:
_odb	tests/odb/packed.c	/^static git_odb *_odb;$/;"	v	file:
_odb	tests/odb/packed_one.c	/^static git_odb *_odb;$/;"	v	file:
_odb	tests/odb/sorting.c	/^static git_odb *_odb;$/;"	v	file:
_oid	tests/odb/backend/nonrefreshing.c	/^static git_oid _oid;$/;"	v	file:
_oid_b1	tests/online/push.c	/^static git_oid _oid_b1;$/;"	v	file:
_oid_b2	tests/online/push.c	/^static git_oid _oid_b2;$/;"	v	file:
_oid_b3	tests/online/push.c	/^static git_oid _oid_b3;$/;"	v	file:
_oid_b4	tests/online/push.c	/^static git_oid _oid_b4;$/;"	v	file:
_oid_b5	tests/online/push.c	/^static git_oid _oid_b5;$/;"	v	file:
_oid_b6	tests/online/push.c	/^static git_oid _oid_b6;$/;"	v	file:
_once_init	src/global.c	/^static pthread_once_t _once_init = PTHREAD_ONCE_INIT;$/;"	v	file:
_packbuilder	tests/pack/packbuilder.c	/^static git_packbuilder *_packbuilder;$/;"	v	file:
_path	tests/repo/state.c	/^static git_buf _path;$/;"	v	file:
_pathspecs	tests/reset/default.c	/^static git_strarray _pathspecs;$/;"	v	file:
_record_cbs	tests/online/push.c	/^static git_remote_callbacks _record_cbs = RECORD_CALLBACKS_INIT(&_record_cbs_data);$/;"	v	file:
_record_cbs_data	tests/online/push.c	/^static record_callbacks_data _record_cbs_data = {{ 0 }};$/;"	v	file:
_refdb	src/repository.h	/^	git_refdb *_refdb;$/;"	m	struct:git_repository
_refspec	tests/network/remote/remotes.c	/^static const git_refspec *_refspec;$/;"	v	file:
_remote	tests/network/remote/createthenload.c	/^static git_remote *_remote;$/;"	v	file:
_remote	tests/network/remote/remotes.c	/^static git_remote *_remote;$/;"	v	file:
_remote	tests/network/remote/rename.c	/^static git_remote *_remote;$/;"	v	file:
_remote	tests/online/push.c	/^static git_remote *_remote;$/;"	v	file:
_remote_default	tests/online/push.c	/^static char *_remote_default;$/;"	v	file:
_remote_pass	tests/online/push.c	/^static char *_remote_pass;$/;"	v	file:
_remote_ssh_key	tests/online/push.c	/^static char *_remote_ssh_key;$/;"	v	file:
_remote_ssh_passphrase	tests/online/push.c	/^static char *_remote_ssh_passphrase;$/;"	v	file:
_remote_ssh_pubkey	tests/online/push.c	/^static char *_remote_ssh_pubkey;$/;"	v	file:
_remote_url	tests/online/push.c	/^static char *_remote_url;$/;"	v	file:
_remote_user	tests/online/push.c	/^static char *_remote_user;$/;"	v	file:
_render_callback	tests/generate.py	/^        def _render_callback(self, cb):$/;"	m	class:Module.Template
_replacer	tests/generate.py	/^        def _replacer(match):$/;"	f	function:Module._skip_comments
_repo	tests/commit/commit.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/commit/parent.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/graph/descendant_of.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/network/remote/createthenload.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/network/remote/remotes.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/network/remote/rename.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/notes/notes.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/notes/notesref.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/object/tree/duplicateentries.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/odb/backend/nonrefreshing.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/odb/foreach.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/online/fetch.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/online/push.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/pack/packbuilder.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/repo/hashfile.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/repo/init.c	/^static git_repository *_repo = NULL;$/;"	v	file:
_repo	tests/repo/message.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/repo/state.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/reset/default.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/revwalk/basic.c	/^static git_repository *_repo = NULL;$/;"	v	file:
_repo	tests/revwalk/mergebase.c	/^static git_repository *_repo;$/;"	v	file:
_repo	tests/revwalk/signatureparsing.c	/^static git_repository *_repo;$/;"	v	file:
_repo2	tests/revwalk/mergebase.c	/^static git_repository *_repo2;$/;"	v	file:
_revwalker	tests/pack/packbuilder.c	/^static git_revwalk *_revwalker;$/;"	v	file:
_sig	tests/notes/notes.c	/^static git_signature *_sig;$/;"	v	file:
_sig	tests/notes/notesref.c	/^static git_signature *_sig;$/;"	v	file:
_skip_comments	tests/generate.py	/^    def _skip_comments(self, text):$/;"	m	class:Module
_sm_ignore_map	src/submodule.c	/^static git_cvar_map _sm_ignore_map[] = {$/;"	v	file:
_sm_recurse_map	src/submodule.c	/^static git_cvar_map _sm_recurse_map[] = {$/;"	v	file:
_sm_update_map	src/submodule.c	/^static git_cvar_map _sm_update_map[] = {$/;"	v	file:
_ssh_action	src/transports/ssh.c	/^static int _ssh_action($/;"	f	file:
_ssh_close	src/transports/ssh.c	/^static int _ssh_close(git_smart_subtransport *subtransport)$/;"	f	file:
_ssh_free	src/transports/ssh.c	/^static void _ssh_free(git_smart_subtransport *subtransport)$/;"	f	file:
_stats	tests/pack/packbuilder.c	/^static git_transfer_progress _stats;$/;"	v	file:
_struct_count	tests/core/vector.c	/^static int _struct_count = 0;$/;"	v	file:
_tag_blob	tests/online/push.c	/^static git_oid _tag_blob;$/;"	v	file:
_tag_commit	tests/online/push.c	/^static git_oid _tag_commit;$/;"	v	file:
_tag_lightweight	tests/online/push.c	/^static git_oid _tag_lightweight;$/;"	v	file:
_tag_tag	tests/online/push.c	/^static git_oid _tag_tag;$/;"	v	file:
_tag_tree	tests/online/push.c	/^static git_oid _tag_tree;$/;"	v	file:
_target	tests/reset/default.c	/^static git_object *_target;$/;"	v	file:
_tls_index	src/global.c	/^static DWORD _tls_index;$/;"	v	file:
_tls_key	src/global.c	/^static pthread_key_t _tls_key;$/;"	v	file:
_tr_align	deps/zlib/trees.c	/^void ZLIB_INTERNAL _tr_align(s)$/;"	f
_tr_flush_block	deps/zlib/trees.c	/^void ZLIB_INTERNAL _tr_flush_block(s, buf, stored_len, last)$/;"	f
_tr_init	deps/zlib/trees.c	/^void ZLIB_INTERNAL _tr_init(s)$/;"	f
_tr_stored_block	deps/zlib/trees.c	/^void ZLIB_INTERNAL _tr_stored_block(s, buf, stored_len, last)$/;"	f
_tr_tally	deps/zlib/trees.c	/^int ZLIB_INTERNAL _tr_tally (s, dist, lc)$/;"	f
_tr_tally_dist	deps/zlib/deflate.h	326;"	d
_tr_tally_dist	deps/zlib/deflate.h	338;"	d
_tr_tally_lit	deps/zlib/deflate.h	319;"	d
_tr_tally_lit	deps/zlib/deflate.h	337;"	d
_walk	tests/revwalk/basic.c	/^static git_revwalk *_walk = NULL;$/;"	v	file:
_walk	tests/revwalk/signatureparsing.c	/^static git_revwalk *_walk;$/;"	v	file:
a	tests/diff/tree.c	/^static git_tree *a, *b;$/;"	v	file:
abkref_ents	deps/regex/regex_internal.h	/^  int abkref_ents;$/;"	m	struct:__anon189
abort_diff	tests/diff/notify.c	/^static int abort_diff($/;"	f	file:
accept_mb	deps/regex/regex_internal.h	/^  unsigned int accept_mb : 1;$/;"	m	struct:__anon184
accept_mb	deps/regex/regex_internal.h	/^  unsigned int accept_mb : 1;$/;"	m	struct:re_dfastate_t
access	tests/clar.c	37;"	d	file:
ack_pkt	src/transports/smart_pkt.c	/^static int ack_pkt(git_pkt **out, const char *line, size_t len)$/;"	f	file:
acquire_init_state_context	deps/regex/regexec.c	/^acquire_init_state_context (reg_errcode_t *err, const re_match_context_t *mctx,$/;"	f
action	examples/cat-file.c	/^	int action;$/;"	m	struct:opts	file:
action	include/git2/transport.h	/^	int (* action)($/;"	m	struct:git_smart_subtransport
active_refspecs	src/remote.h	/^	git_vector active_refspecs;$/;"	m	struct:git_remote
active_reg_t	deps/regex/regex.h	/^typedef unsigned long int active_reg_t;$/;"	t
active_suite	tests/clar.c	/^	const char *active_suite;$/;"	m	struct:__anon23	file:
active_test	tests/clar.c	/^	const char *active_test;$/;"	m	struct:__anon23	file:
add_and_check_mode	tests/index/filemodes.c	54;"	d	file:
add_and_check_mode_	tests/index/filemodes.c	/^static void add_and_check_mode_($/;"	f	file:
add_and_dwim	src/remote.c	/^static int add_and_dwim(git_remote *remote, const char *str, int push)$/;"	f	file:
add_backend_internal	src/odb.c	/^static int add_backend_internal($/;"	f	file:
add_blame_entry	src/blame_git.c	/^static void add_blame_entry(git_blame *blame, git_blame__entry *e)$/;"	f	file:
add_blob_and_filter	tests/filter/ident.c	/^static void add_blob_and_filter($/;"	f	file:
add_default_backends	src/odb.c	/^static int add_default_backends($/;"	f	file:
add_descendants_to_write_order	src/pack-objects.c	/^static void add_descendants_to_write_order(git_pobject **wo, unsigned int *endp,$/;"	f	file:
add_epsilon_src_nodes	deps/regex/regexec.c	/^add_epsilon_src_nodes (const re_dfa_t *dfa, re_node_set *dest_nodes,$/;"	f	file:
add_fake_conflicts	tests/object/tree/duplicateentries.c	/^static void add_fake_conflicts(git_index *index)$/;"	f	file:
add_family_to_write_order	src/pack-objects.c	/^static void add_family_to_write_order(git_pobject **wo, unsigned int *endp,$/;"	f	file:
add_push_report_pkt	src/transports/smart_protocol.c	/^static int add_push_report_pkt(git_push *push, git_pkt *pkt)$/;"	f	file:
add_push_report_sideband_pkt	src/transports/smart_protocol.c	/^static int add_push_report_sideband_pkt(git_push *push, git_pkt_data *data_pkt)$/;"	f	file:
add_ref	src/transports/local.c	/^static int add_ref(transport_local *t, const char *name)$/;"	f	file:
add_ref_from_push_spec	src/transports/smart_protocol.c	/^static int add_ref_from_push_spec(git_vector *refs, push_spec *push_spec)$/;"	f	file:
add_refspec	src/remote.c	/^static int add_refspec(git_remote *remote, const char *string, bool is_fetch)$/;"	f	file:
add_revision	examples/log.c	/^static int add_revision(struct log_state *s, const char *revstr)$/;"	f	file:
add_to_cache	src/filebuf.c	/^GIT_INLINE(void) add_to_cache(git_filebuf *file, const void *buf, size_t len)$/;"	f
add_to_workdir	tests/attr/repo.c	/^static void add_to_workdir(const char *filename, const char *content)$/;"	f	file:
add_to_write_order	src/pack-objects.c	/^GIT_INLINE(void) add_to_write_order(git_pobject **wo, unsigned int *endp,$/;"	f
addall_cancel_at	tests/index/addall.c	/^static int addall_cancel_at($/;"	f	file:
addall_create_test_repo	tests/index/addall.c	/^static void addall_create_test_repo(bool check_every_step)$/;"	f	file:
addall_match_prefix	tests/index/addall.c	/^static int addall_match_prefix($/;"	f	file:
addall_match_suffix	tests/index/addall.c	/^static int addall_match_suffix($/;"	f	file:
additional_transports	src/transport.c	/^static git_vector additional_transports = GIT_VECTOR_INIT;$/;"	v	file:
addrinfo	src/posix.h	/^struct addrinfo {$/;"	s
adler	deps/zlib/zlib.h	/^    uLong   adler;      \/* adler32 value of the uncompressed data *\/$/;"	m	struct:z_stream_s
adler32	deps/zlib/adler32.c	/^uLong ZEXPORT adler32(adler, buf, len)$/;"	f
adler32_combine	deps/zlib/adler32.c	/^uLong ZEXPORT adler32_combine(adler1, adler2, len2)$/;"	f
adler32_combine	deps/zlib/zlib.h	1579;"	d
adler32_combine64	deps/zlib/adler32.c	/^uLong ZEXPORT adler32_combine64(adler1, adler2, len2)$/;"	f
adler32_combine_	deps/zlib/adler32.c	/^local uLong adler32_combine_(adler1, adler2, len2)$/;"	f
advance	src/iterator.h	/^	int (*advance)(const git_index_entry **, git_iterator *);$/;"	m	struct:__anon112
advance_delta_offset	src/indexer.c	/^static int advance_delta_offset(git_indexer *idx, git_otype type)$/;"	f	file:
advance_into	src/iterator.h	/^	int (*advance_into)(const git_index_entry **, git_iterator *);$/;"	m	struct:__anon112
affected	tests/merge/workdir/dirty.c	/^static char *affected[][5] = {$/;"	v	file:
after	examples/log.c	/^	git_time_t after;$/;"	m	struct:log_options	file:
ahead_behind	src/graph.c	/^static int ahead_behind(git_commit_list_node *one, git_commit_list_node *two,$/;"	f	file:
ai_addr	src/posix.h	/^	struct sockaddr *ai_addr;$/;"	m	struct:addrinfo	typeref:struct:addrinfo::sockaddr
ai_addr_in	src/posix.h	/^	struct sockaddr_in ai_addr_in;$/;"	m	struct:addrinfo	typeref:struct:addrinfo::sockaddr_in
ai_addrlen	src/posix.h	/^	size_t ai_addrlen;$/;"	m	struct:addrinfo
ai_family	src/posix.h	/^	int ai_family;$/;"	m	struct:addrinfo
ai_hostent	src/posix.h	/^	struct hostent *ai_hostent;$/;"	m	struct:addrinfo	typeref:struct:addrinfo::hostent
ai_next	src/posix.h	/^	struct addrinfo *ai_next;$/;"	m	struct:addrinfo	typeref:struct:addrinfo::addrinfo
ai_port	src/posix.h	/^	long ai_port;$/;"	m	struct:addrinfo
ai_protocol	src/posix.h	/^	int ai_protocol;$/;"	m	struct:addrinfo
ai_servent	src/posix.h	/^	struct servent *ai_servent;$/;"	m	struct:addrinfo	typeref:struct:addrinfo::servent
ai_socktype	src/posix.h	/^	int ai_socktype;$/;"	m	struct:addrinfo
alasts	deps/regex/regex_internal.h	/^  int alasts; \/* Allocation size of LASTS.  *\/$/;"	m	struct:__anon188
alien	tests/diff/blob.c	/^static git_blob *d, *alien;$/;"	v	file:
all_iter	src/config.c	/^} all_iter;$/;"	t	typeref:struct:__anon94	file:
all_iter_free	src/config.c	/^static void all_iter_free(git_config_iterator *_iter)$/;"	f	file:
all_iter_glob_free	src/config.c	/^static void all_iter_glob_free(git_config_iterator *_iter)$/;"	f	file:
all_iter_glob_next	src/config.c	/^static int all_iter_glob_next(git_config_entry **entry, git_config_iterator *_iter)$/;"	f	file:
all_iter_next	src/config.c	/^static int all_iter_next(git_config_entry **entry, git_config_iterator *_iter)$/;"	f	file:
alloc	deps/regex/regex_internal.h	/^  int alloc;$/;"	m	struct:__anon181
alloc	deps/regex/regex_internal.h	/^  int alloc;$/;"	m	struct:__anon186
alloc	deps/regex/regex_internal.h	/^  int alloc;$/;"	m	struct:re_fail_stack_t
alloc	deps/regex/regex_internal.h	/^  int alloc;$/;"	m	struct:re_state_table_entry
alloc	src/tsort.c	/^	size_t alloc;$/;"	m	struct:tsort_store	file:
alloc	src/xdiff/xpatience.c	/^	int nr, alloc;$/;"	m	struct:hashmap	file:
alloc	src/xdiff/xprepare.c	/^	long alloc;$/;"	m	struct:s_xdlclassifier	file:
alloc_entry	src/tree.c	/^static git_tree_entry *alloc_entry(const char *filename)$/;"	f	file:
alloc_func	deps/zlib/zlib.h	/^typedef voidpf (*alloc_func) OF((voidpf opaque, uInt items, uInt size));$/;"	t
alloc_parents	src/commit_list.c	/^static git_commit_list_node **alloc_parents($/;"	f	file:
alloc_ref	src/refs.c	/^static git_reference *alloc_ref(const char *name)$/;"	f	file:
alloc_struct	tests/core/vector.c	/^static my_struct *alloc_struct(int value)$/;"	f	file:
alloca	deps/regex/regex.c	63;"	d	file:
alloca	deps/regex/regex.c	64;"	d	file:
ambiguous	src/status.c	/^	int ambiguous;$/;"	m	struct:status_file_info	file:
analyze	deps/regex/regcomp.c	/^analyze (regex_t *preg)$/;"	f	file:
ancestor	include/git2/sys/index.h	/^	char *ancestor;$/;"	m	struct:git_index_name_entry
ancestor	src/checkout.c	/^	const git_index_entry *ancestor;$/;"	m	struct:__anon122	file:
ancestor	src/xdiff/xdiff.h	/^	const char *ancestor;	\/* label for orig *\/$/;"	m	struct:s_xmparam
ancestor	tests/checkout/conflict.c	/^	char ancestor[64];$/;"	m	struct:checkout_name_entry	file:
ancestor	tests/merge/merge_helpers.h	/^	struct merge_index_with_status ancestor;$/;"	m	struct:merge_index_conflict_data	typeref:struct:merge_index_conflict_data::merge_index_with_status
ancestor_entry	src/merge.h	/^	git_index_entry ancestor_entry;$/;"	m	struct:__anon144
ancestor_label	include/git2/checkout.h	/^	const char *ancestor_label; \/** the name of the common ancestor side of conflicts *\/$/;"	m	struct:git_checkout_opts
ancestor_mode	tests/merge/merge_helpers.h	/^	unsigned int ancestor_mode;$/;"	m	struct:merge_reuc_entry
ancestor_oid_str	tests/merge/merge_helpers.h	/^	char ancestor_oid_str[41];$/;"	m	struct:merge_reuc_entry
ancestor_path	tests/merge/merge_helpers.h	/^	char ancestor_path[128];$/;"	m	struct:merge_name_entry
ancur	src/xdiff/xtypes.h	/^	chanode_t *ancur;$/;"	m	struct:s_chastore
annotated_object_sha	tests/notes/notes.c	/^	const char *annotated_object_sha;$/;"	m	struct:__anon12	file:
any_left_hand_identifier	src/revparse.c	/^static bool any_left_hand_identifier(git_object *object, git_reference *reference, size_t identifier_len)$/;"	f	file:
append	include/git2/odb_backend.h	/^	int (*append)(git_odb_writepack *writepack, const void *data, size_t size, git_transfer_progress *stats);$/;"	m	struct:git_odb_writepack
append_abbreviated_oid	src/stash.c	/^static int append_abbreviated_oid(git_buf *out, const git_oid *b_commit)$/;"	f	file:
append_ceiling_dir	tests/repo/discover.c	/^static void append_ceiling_dir(git_buf *ceiling_dirs, const char *path)$/;"	f	file:
append_commit_description	src/stash.c	/^static int append_commit_description(git_buf *out, git_commit* commit)$/;"	f	file:
append_entry	src/tree.c	/^static int append_entry($/;"	f	file:
apply	include/git2/sys/filter.h	/^	git_filter_apply_fn    apply;$/;"	m	struct:git_filter
apply_basic_credential	src/transports/http.c	/^static int apply_basic_credential(git_buf *buf, git_cred *cred)$/;"	f	file:
apply_basic_credential	src/transports/winhttp.c	/^static int apply_basic_credential(HINTERNET request, git_cred *cred)$/;"	f	file:
apply_default_credentials	src/transports/winhttp.c	/^static int apply_default_credentials(HINTERNET request)$/;"	f	file:
apply_splits_and_deletes	src/diff_tform.c	/^static int apply_splits_and_deletes($/;"	f	file:
approxidate_alpha	src/date.c	/^static const char *approxidate_alpha(const char *date, struct tm *tm, struct tm *now, int *num, int *touched)$/;"	f	file:
approxidate_digit	src/date.c	/^static const char *approxidate_digit(const char *date, struct tm *tm, int *num)$/;"	f	file:
approxidate_str	src/date.c	/^static git_time_t approxidate_str(const char *date,$/;"	f	file:
are_symlinks_supported	src/repository.c	/^static bool are_symlinks_supported(const char *wd_path)$/;"	f	file:
argc	examples/common.h	/^	int    argc;$/;"	m	struct:args_info
args	src/commit.c	/^	va_list args;$/;"	m	struct:__anon97	file:
args_info	examples/common.h	/^struct args_info {$/;"	s
argv	examples/common.h	/^	char **argv;$/;"	m	struct:args_info
array	deps/regex/regex_internal.h	/^  re_dfastate_t **array;$/;"	m	struct:__anon186
array	deps/regex/regex_internal.h	/^  re_dfastate_t **array;$/;"	m	struct:re_state_table_entry
array	include/git2/strarray.h	/^GIT_EXTERN(void) git_strarray_free(git_strarray *array);$/;"	v
as_path	src/diff_file.h	/^	const char *as_path;$/;"	m	struct:__anon155
asize	include/git2/buffer.h	/^	size_t asize, size;$/;"	m	struct:__anon214
asize	src/hashsig.c	/^	int size, asize;$/;"	m	struct:__anon100	file:
assert_all_refnames_match	tests/refs/iterator.c	/^static void assert_all_refnames_match(git_vector *output)$/;"	f	file:
assert_appends	tests/refs/reflog/reflog.c	/^static void assert_appends(const git_signature *committer, const git_oid *oid)$/;"	f	file:
assert_binary_blobs_comparison	tests/diff/blob.c	/^static void assert_binary_blobs_comparison(diff_expects *expected)$/;"	f	file:
assert_blob_creation	tests/object/blob/write.c	/^static void assert_blob_creation(const char *path_to_file, const char *blob_from_path, blob_creator_fn creator)$/;"	f	file:
assert_blob_oid	tests/stash/save.c	/^static void assert_blob_oid(const char* revision, const char* expected_oid)$/;"	f	file:
assert_branch_has_been_found	tests/refs/branches/iterator.c	/^static void assert_branch_has_been_found(struct expectations *findings, const char* expected_branch_name)$/;"	f	file:
assert_called_notifications	tests/diff/notify.c	/^static int assert_called_notifications($/;"	f	file:
assert_cannot_create_remote	tests/network/remote/remotes.c	/^void assert_cannot_create_remote(const char *name, int expected_error)$/;"	f
assert_changed_single_one_line_file	tests/diff/blob.c	/^static void assert_changed_single_one_line_file($/;"	f	file:
assert_commit_is_head	tests/object/commit/commitstagedfile.c	151;"	d	file:
assert_commit_is_head_	tests/object/commit/commitstagedfile.c	/^static void assert_commit_is_head_(git_commit *c, const char *file, int line)$/;"	f	file:
assert_commit_message_contains	tests/stash/save.c	/^static void assert_commit_message_contains(const char *revision, const char *fragment)$/;"	f	file:
assert_commit_summary	tests/commit/commit.c	/^void assert_commit_summary(const char *expected, const char *given)$/;"	f
assert_commit_tree_has_n_entries	tests/object/commit/commitstagedfile.c	/^static void assert_commit_tree_has_n_entries(git_commit *c, int count)$/;"	f	file:
assert_config_entry_existence	tests/config/config_helpers.c	/^void assert_config_entry_existence($/;"	f
assert_config_entry_on_init	tests/repo/init.c	/^static void assert_config_entry_on_init($/;"	f	file:
assert_config_entry_on_init_bytype	tests/repo/init.c	/^static void assert_config_entry_on_init_bytype($/;"	f	file:
assert_config_entry_value	tests/config/config_helpers.c	/^void assert_config_entry_value($/;"	f
assert_conflict	tests/checkout/tree.c	/^void assert_conflict($/;"	f
assert_content_in_index	tests/reset/default.c	/^static void assert_content_in_index($/;"	f	file:
assert_correct_reflog	tests/clone/nonetwork.c	/^static void assert_correct_reflog(const char *name)$/;"	f	file:
assert_dir_exists	tests/checkout/typechange.c	/^static void assert_dir_exists(const char *path)$/;"	f	file:
assert_file_exists	tests/checkout/typechange.c	/^static void assert_file_exists(const char *path)$/;"	f	file:
assert_has_reflog	tests/refs/reflog/reflog.c	/^static void assert_has_reflog(bool expected_result, const char *name)$/;"	f	file:
assert_head_is_correctly_detached	tests/repo/head.c	/^static void assert_head_is_correctly_detached(void)$/;"	f	file:
assert_hooks_match	tests/repo/init.c	/^static void assert_hooks_match($/;"	f	file:
assert_identical_blobs_comparison	tests/diff/blob.c	/^static void assert_identical_blobs_comparison(diff_expects *expected)$/;"	f	file:
assert_ignore_case	tests/status/worktree.c	/^static void assert_ignore_case($/;"	f	file:
assert_index_is_sorted	tests/index/tests.c	/^static void assert_index_is_sorted(git_index *index)$/;"	f	file:
assert_invalid_config_key_name	tests/config/validkeyname.c	/^static void assert_invalid_config_key_name(const char *name)$/;"	f	file:
assert_invalid_config_section_name	tests/config/rename.c	/^static void assert_invalid_config_section_name($/;"	f	file:
assert_invalid_single_spec	tests/refs/revparse.c	/^static void assert_invalid_single_spec(const char *invalid_spec)$/;"	f	file:
assert_is_branch	tests/refs/read.c	/^static void assert_is_branch(const char *name, bool expected_branchness)$/;"	f	file:
assert_is_ignored	tests/attr/ignore.c	/^void assert_is_ignored(bool expected, const char *filepath)$/;"	f
assert_is_note	tests/refs/read.c	/^static void assert_is_note(const char *name, bool expected_noteness)$/;"	f	file:
assert_is_tag	tests/refs/read.c	/^static void assert_is_tag(const char *name, bool expected_tagness)$/;"	f	file:
assert_merge_and_or_remote_key_missing	tests/refs/branches/upstream.c	/^static void assert_merge_and_or_remote_key_missing(git_repository *repository, const git_commit *target, const char *entry_name)$/;"	f	file:
assert_mergebase_many	tests/revwalk/mergebase.c	/^static void assert_mergebase_many(const char *expected_sha, int count, ...)$/;"	f	file:
assert_message_prettifying	tests/object/message.c	/^static void assert_message_prettifying(char *expected_output, char *input, int strip_comments)$/;"	f	file:
assert_mode_seems_okay	tests/repo/init.c	/^static void assert_mode_seems_okay($/;"	f	file:
assert_name_and_email	tests/commit/signature.c	/^static void assert_name_and_email($/;"	f	file:
assert_named_chunked_blob	tests/object/blob/fromchunks.c	/^static void assert_named_chunked_blob(const char *expected_sha, const char *fake_name)$/;"	f	file:
assert_note_equal	tests/notes/notes.c	/^static void assert_note_equal(git_note *note, char *message, git_oid *note_oid) {$/;"	f	file:
assert_nth_gen_parent	tests/commit/parent.c	/^static void assert_nth_gen_parent(unsigned int gen, const char *expected_oid)$/;"	f	file:
assert_object_oid	tests/stash/save.c	/^static void assert_object_oid(const char* revision, const char* expected_oid, git_otype type)$/;"	f	file:
assert_on_branch	tests/checkout/checkout_helpers.c	/^void assert_on_branch(git_repository *repo, const char *branch)$/;"	f
assert_one_modified	tests/diff/blob.c	/^static void assert_one_modified($/;"	f	file:
assert_one_modified_with_lines	tests/diff/blob.c	/^static void assert_one_modified_with_lines(diff_expects *expected, int lines)$/;"	f	file:
assert_patch_matches_blobs	tests/diff/blob.c	/^static void assert_patch_matches_blobs($/;"	f	file:
assert_peel	tests/object/peel.c	/^static void assert_peel($/;"	f	file:
assert_peel	tests/refs/peel.c	/^static void assert_peel($/;"	f	file:
assert_peel_error	tests/object/peel.c	/^static void assert_peel_error(int error, const char *sha, git_otype requested_type)$/;"	f	file:
assert_peel_error	tests/refs/peel.c	/^static void assert_peel_error(int error, const char *ref_name, git_otype requested_type)$/;"	f	file:
assert_peel_generic	tests/refs/peel.c	/^static void assert_peel_generic($/;"	f	file:
assert_proper_normalization	tests/attr/repo.c	/^static void assert_proper_normalization(git_index *index, const char *filename, const char *expected_sha)$/;"	f	file:
assert_refspec	tests/network/refspecs.c	/^static void assert_refspec(unsigned int direction, const char *input, bool is_expected_to_be_valid)$/;"	f	file:
assert_repo_state	tests/repo/state.c	/^static void assert_repo_state(git_repository_state_t state)$/;"	f	file:
assert_reset_soft	tests/reset/soft.c	/^static void assert_reset_soft(bool should_be_detached)$/;"	f	file:
assert_resolve_relative	tests/core/path.c	/^static void assert_resolve_relative($/;"	f	file:
assert_retrieval	tests/refs/branches/iterator.c	/^static void assert_retrieval(unsigned int flags, unsigned int expected_count)$/;"	f	file:
assert_retrieval	tests/refs/foreachglob.c	/^static void assert_retrieval(const char *glob, int expected_count)$/;"	f	file:
assert_shorthand	tests/refs/shorthand.c	/^void assert_shorthand(git_repository *repo, const char *refname, const char *shorthand)$/;"	f
assert_show	tests/status/worktree.c	/^void assert_show(const int entry_counts, const char *entry_paths[],$/;"	f
assert_signature	tests/refs/reflog/reflog.c	/^static void assert_signature(const git_signature *expected, const git_signature *actual)$/;"	f	file:
assert_status	tests/stash/stash_helpers.c	/^void assert_status($/;"	f
assert_tree_from_path	tests/object/tree/frompath.c	/^static void assert_tree_from_path($/;"	f	file:
assert_unescape	tests/core/buffer.c	/^static void assert_unescape(char *expected, char *to_unescape) {$/;"	f	file:
assert_workdir_matches_tree	tests/checkout/typechange.c	/^static void assert_workdir_matches_tree($/;"	f	file:
assert_zlib_equal	tests/core/zstream.c	42;"	d	file:
assert_zlib_equal_	tests/core/zstream.c	/^static void assert_zlib_equal_($/;"	f	file:
assigns	src/attr_file.h	/^	git_vector assigns;		\/* vector of <git_attr_assignment*> *\/$/;"	m	struct:__anon130
asub_tops	deps/regex/regex_internal.h	/^  int asub_tops;$/;"	m	struct:__anon189
at_end	src/iterator.h	/^	int (*at_end)(git_iterator *);$/;"	m	struct:__anon112
at_least_one_cb	src/repository.c	/^static int at_least_one_cb(const char *refname, void *payload)$/;"	f	file:
attr	src/tree.h	/^	uint16_t attr;$/;"	m	struct:git_tree_entry
attr	tests/attr/attr_expect.h	/^	const char *attr;$/;"	m	struct:attr_expected
attr	tests/object/tree/write.c	/^	unsigned int attr;$/;"	m	struct:__anon22	file:
attr_cache__lookup_path	src/attr.c	/^static int attr_cache__lookup_path($/;"	f	file:
attr_check_expected	tests/attr/attr_expect.h	/^GIT_INLINE(void) attr_check_expected($/;"	f
attr_expect_t	tests/attr/attr_expect.h	/^enum attr_expect_t {$/;"	g
attr_expected	tests/attr/attr_expect.h	/^struct attr_expected {$/;"	s
attr_get_many_info	src/attr.c	/^} attr_get_many_info;$/;"	t	typeref:struct:__anon175	file:
attr_walk_up_info	src/attr.c	/^} attr_walk_up_info;$/;"	t	typeref:struct:__anon176	file:
attrcache	src/repository.h	/^	git_attr_cache attrcache;$/;"	m	struct:git_repository
attrdata	src/filter.c	/^	char *attrdata;$/;"	m	struct:__anon88	file:
attribute_hidden	deps/regex/regcomp.c	/^const char __re_error_msgid[] attribute_hidden =$/;"	v
attribute_hidden	deps/regex/regcomp.c	/^const size_t __re_error_msgid_idx[] attribute_hidden =$/;"	v
attribute_hidden	deps/regex/regex_internal.h	165;"	d
attributes	include/git2/sys/filter.h	/^	const char            *attributes;$/;"	m	struct:git_filter
attrs	src/filter.c	/^	const char *attrs[GIT_FLEX_ARRAY];$/;"	m	struct:__anon88	file:
auth_mechanism	src/transports/http.c	/^	http_authmechanism_t auth_mechanism;$/;"	m	struct:__anon81	file:
auth_mechanism	src/transports/winhttp.c	/^	int auth_mechanism;$/;"	m	struct:__anon63	file:
author	examples/log.c	/^	char *author;$/;"	m	struct:log_options	file:
author	src/commit.h	/^	git_signature *author;$/;"	m	struct:git_commit
auto_crlf	src/crlf.c	/^	int auto_crlf;$/;"	m	struct:crlf_attrs	file:
automergeable	src/merge_file.h	/^	bool automergeable;$/;"	m	struct:__anon56
avail	src/pool.c	/^	uint32_t avail;$/;"	m	struct:git_pool_page	file:
avail_in	deps/zlib/zlib.h	/^    uInt     avail_in;  \/* number of bytes available at next_in *\/$/;"	m	struct:z_stream_s
avail_out	deps/zlib/zlib.h	/^    uInt     avail_out; \/* remaining free space at next_out *\/$/;"	m	struct:z_stream_s
b	tests/diff/tree.c	/^static git_tree *a, *b;$/;"	v	file:
b64str	src/buffer.c	/^static const char b64str[] =$/;"	v	file:
back	deps/zlib/inflate.h	/^    int back;                   \/* bits back of last unprocessed length\/lit *\/$/;"	m	struct:inflate_state
backend	include/git2/odb_backend.h	/^	git_odb_backend *backend;$/;"	m	struct:git_odb_stream
backend	include/git2/odb_backend.h	/^	git_odb_backend *backend;$/;"	m	struct:git_odb_writepack
backend	include/git2/sys/config.h	/^	git_config_backend *backend;$/;"	m	struct:git_config_iterator
backend	src/odb.c	/^	git_odb_backend *backend;$/;"	m	struct:__anon117	file:
backend	src/refdb.h	/^	git_refdb_backend *backend;$/;"	m	struct:git_refdb
backend_free	src/config_file.c	/^static void backend_free(git_config_backend *_backend)$/;"	f	file:
backend_internal	src/odb.c	/^} backend_internal;$/;"	t	typeref:struct:__anon117	file:
backend_sort_cmp	src/odb.c	/^static int backend_sort_cmp(const void *a, const void *b)$/;"	f	file:
backends	src/odb.h	/^	git_vector backends;$/;"	m	struct:git_odb
bad_object_sha1	src/pack.h	/^	git_oid *bad_object_sha1; \/* array of git_oid *\/$/;"	m	struct:git_pack_file
bad_tag_id	tests/object/tag/read.c	/^static const char *bad_tag_id = "eda9f45a2a98d4c17a09d681d88569fa4ea91755";$/;"	v	file:
badly_tagged_commit	tests/object/tag/read.c	/^static const char *badly_tagged_commit = "e90810b8df3e80c413d903f631643c716887138d";$/;"	v	file:
bare	examples/init.c	/^	int bare;$/;"	m	struct:opts	file:
bare	include/git2/clone.h	/^	int bare;$/;"	m	struct:git_clone_options
base	src/fileops.c	/^	const char *base;$/;"	m	struct:__anon36	file:
base	src/iterator.c	/^	git_iterator base;$/;"	m	struct:__anon83	file:
base	src/iterator.c	/^	git_iterator base;$/;"	m	struct:__anon84	file:
base	src/iterator.c	/^	git_iterator base;$/;"	m	struct:__anon85	file:
base	src/iterator.c	/^	git_iterator base;$/;"	m	struct:fs_iterator	file:
base	tests/odb/sorting.c	/^	git_odb_backend base;$/;"	m	struct:__anon28	file:
base_dist	deps/zlib/trees.c	/^local int base_dist[D_CODES];$/;"	v
base_dist	deps/zlib/trees.h	/^local const int base_dist[D_CODES] = {$/;"	v
base_length	deps/zlib/trees.c	/^local int base_length[LENGTH_CODES];$/;"	v
base_length	deps/zlib/trees.h	/^local const int base_length[LENGTH_CODES] = {$/;"	v
base_obj	tests/pack/indexer.c	/^static const unsigned char base_obj[] = { 07, 076 };$/;"	v	file:
base_obj_len	tests/pack/indexer.c	/^static const unsigned int base_obj_len = 2;$/;"	v	file:
baselen	src/fileops.c	/^	size_t baselen;$/;"	m	struct:__anon36	file:
baseline	include/git2/checkout.h	/^	git_tree *baseline; \/** expected content of workdir, defaults to HEAD *\/$/;"	m	struct:git_checkout_opts
basename	src/attr_file.h	/^	char    *basename;$/;"	m	struct:__anon135
bases	src/pack.h	/^	git_pack_cache bases; \/* delta base cache *\/$/;"	m	struct:git_pack_file
basic_authtype	src/transports/http.c	/^static const char *basic_authtype = "Basic";$/;"	v	file:
bdiffparam_t	src/xdiff/xdiff.h	/^} bdiffparam_t;$/;"	t	typeref:struct:s_bdiffparam
before	examples/log.c	/^	git_time_t before;$/;"	m	struct:log_options	file:
begin1	src/xdiff/xhistogram.c	/^	unsigned int begin1, end1;$/;"	m	struct:region	file:
begin2	src/xdiff/xhistogram.c	/^	unsigned int begin2, end2;$/;"	m	struct:region	file:
bi_buf	deps/zlib/deflate.h	/^    ush bi_buf;$/;"	m	struct:internal_state
bi_flush	deps/zlib/trees.c	/^local void bi_flush(s)$/;"	f
bi_reverse	deps/zlib/trees.c	/^local unsigned bi_reverse(code, len)$/;"	f
bi_valid	deps/zlib/deflate.h	/^    int bi_valid;$/;"	m	struct:internal_state
bi_windup	deps/zlib/trees.c	/^local void bi_windup(s)$/;"	f
big_file_threshold	src/pack-objects.h	/^	uint64_t big_file_threshold;$/;"	m	struct:git_packbuilder
bin_tree_storage_t	deps/regex/regex_internal.h	/^struct bin_tree_storage_t$/;"	s
bin_tree_storage_t	deps/regex/regex_internal.h	/^typedef struct bin_tree_storage_t bin_tree_storage_t;$/;"	t	typeref:struct:bin_tree_storage_t
bin_tree_t	deps/regex/regex_internal.h	/^struct bin_tree_t$/;"	s
bin_tree_t	deps/regex/regex_internal.h	/^typedef struct bin_tree_t bin_tree_t;$/;"	t	typeref:struct:bin_tree_t
binary	src/checkout.c	/^		binary:1,$/;"	m	struct:__anon122	file:
binary	src/merge.h	/^	int binary:1;$/;"	m	struct:__anon144
binary_flags	src/diff_driver.c	/^	uint32_t binary_flags;$/;"	m	struct:git_diff_driver	file:
binary_search	src/xdiff/xpatience.c	/^static int binary_search(struct entry **sequence, int longest,$/;"	f	file:
binsearch	src/tsort.c	/^static int binsearch($/;"	f	file:
bisort	src/tsort.c	/^static void bisort($/;"	f	file:
bitflip_filter_apply	tests/filter/custom.c	/^static int bitflip_filter_apply($/;"	f	file:
bitflip_filter_free	tests/filter/custom.c	/^static void bitflip_filter_free(git_filter *f)$/;"	f	file:
bitflipped_and_reversed_data	tests/filter/custom.c	/^static unsigned char bitflipped_and_reversed_data[] =$/;"	v	file:
bits	deps/zlib/inflate.h	/^    unsigned bits;              \/* number of bits in "in" *\/$/;"	m	struct:inflate_state
bits	deps/zlib/inftrees.h	/^    unsigned char bits;         \/* bits in this part of the code *\/$/;"	m	struct:__anon200
bits	src/bitvec.h	/^		uint64_t bits;$/;"	m	union:__anon162::__anon163
bits_sent	deps/zlib/deflate.h	/^    ulg bits_sent;      \/* bit length of compressed data sent mod 2^32 *\/$/;"	m	struct:internal_state
bitset_clear	deps/regex/regex_internal.h	193;"	d
bitset_contain	deps/regex/regex_internal.h	195;"	d
bitset_copy	deps/regex/regex_internal.h	199;"	d
bitset_empty	deps/regex/regex_internal.h	197;"	d
bitset_mask	deps/regex/regex_internal.h	/^bitset_mask (bitset_t dest, const bitset_t src)$/;"	f
bitset_merge	deps/regex/regex_internal.h	/^bitset_merge (bitset_t dest, const bitset_t src)$/;"	f
bitset_not	deps/regex/regex_internal.h	/^bitset_not (bitset_t set)$/;"	f
bitset_set	deps/regex/regex_internal.h	191;"	d
bitset_set_all	deps/regex/regex_internal.h	198;"	d
bitset_t	deps/regex/regex_internal.h	/^typedef bitset_word_t bitset_t[BITSET_WORDS];$/;"	t
bitset_word_t	deps/regex/regex_internal.h	/^typedef unsigned long int bitset_word_t;$/;"	t
bitsizeof	src/util.h	14;"	d
bkref_ents	deps/regex/regex_internal.h	/^  struct re_backref_cache_entry *bkref_ents;$/;"	m	struct:__anon189	typeref:struct:__anon189::re_backref_cache_entry
bl_count	deps/zlib/deflate.h	/^    ush bl_count[MAX_BITS+1];$/;"	m	struct:internal_state
bl_desc	deps/zlib/deflate.h	/^    struct tree_desc_s bl_desc;              \/* desc. for bit length tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s
bl_order	deps/zlib/trees.c	/^local const uch bl_order[BL_CODES]$/;"	v
bl_tree	deps/zlib/deflate.h	/^    struct ct_data_s bl_tree[2*BL_CODES+1];  \/* Huffman tree for bit lengths *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s
blame	include/git2/blame.h	/^GIT_EXTERN(uint32_t) git_blame_get_hunk_count(git_blame *blame);$/;"	v
blame	include/git2/blame.h	/^GIT_EXTERN(void) git_blame_free(git_blame *blame);$/;"	v
blame	src/blame_git.c	/^	git_blame *blame;$/;"	m	struct:blame_chunk_cb_data	file:
blame_chunk	src/blame_git.c	/^static void blame_chunk($/;"	f	file:
blame_chunk_cb_data	src/blame_git.c	/^typedef struct blame_chunk_cb_data {$/;"	s	file:
blame_chunk_cb_data	src/blame_git.c	/^}blame_chunk_cb_data;$/;"	t	typeref:struct:blame_chunk_cb_data	file:
blame_internal	src/blame.c	/^static int blame_internal(git_blame *blame)$/;"	f	file:
blame_overlap	src/blame_git.c	/^static void blame_overlap($/;"	f	file:
bld	include/git2/tree.h	/^GIT_EXTERN(unsigned int) git_treebuilder_entrycount(git_treebuilder *bld);$/;"	v
bld	include/git2/tree.h	/^GIT_EXTERN(void) git_treebuilder_clear(git_treebuilder *bld);$/;"	v
bld	include/git2/tree.h	/^GIT_EXTERN(void) git_treebuilder_free(git_treebuilder *bld);$/;"	v
blen	tests/odb/loose_data.h	/^    size_t        blen;    \/* length of data in object store            *\/$/;"	m	struct:object_data
blob	include/git2/blob.h	/^GIT_EXTERN(const git_oid *) git_blob_id(const git_blob *blob);$/;"	v
blob	include/git2/blob.h	/^GIT_EXTERN(const void *) git_blob_rawcontent(const git_blob *blob);$/;"	v
blob	include/git2/blob.h	/^GIT_EXTERN(git_off_t) git_blob_rawsize(const git_blob *blob);$/;"	v
blob	include/git2/blob.h	/^GIT_EXTERN(git_repository *) git_blob_owner(const git_blob *blob);$/;"	v
blob	include/git2/blob.h	/^GIT_EXTERN(int) git_blob_is_binary(git_blob *blob);$/;"	v
blob	include/git2/blob.h	/^GIT_EXTERN(void) git_blob_free(git_blob *blob);$/;"	v
blob	src/blame.h	/^	git_blob *blob;$/;"	m	struct:git_blame__origin
blob	src/diff_file.h	/^	const git_blob *blob;$/;"	m	struct:__anon154
blob	src/diff_file.h	/^	const git_blob *blob;$/;"	m	struct:__anon155
blob	src/diff_tform.c	/^	git_blob *blob;$/;"	m	struct:__anon115	file:
blob_content_to_file	src/checkout.c	/^static int blob_content_to_file($/;"	f	file:
blob_content_to_link	src/checkout.c	/^static int blob_content_to_link($/;"	f	file:
blob_creator_fn	tests/object/blob/write.c	/^typedef int (*blob_creator_fn)($/;"	t	file:
blob_oid	tests/object/tree/attributes.c	/^static const char *blob_oid = "3d0970ec547fc41ef8a5882dde99c6adce65b021";$/;"	v	file:
blob_oid	tests/object/tree/write.c	/^static const char *blob_oid = "fa49b077972391ad58037050f2a75f74e3671e92";$/;"	v	file:
block_done	deps/zlib/deflate.c	/^    block_done,     \/* block flush performed *\/$/;"	e	enum:__anon199	file:
block_start	deps/zlib/deflate.h	/^    long block_start;$/;"	m	struct:internal_state
block_state	deps/zlib/deflate.c	/^} block_state;$/;"	t	typeref:enum:__anon199	file:
bom	src/buf_text.h	/^	git_bom_t bom; \/* BOM found at head of text *\/$/;"	m	struct:__anon139
bool	deps/regex/regex.c	72;"	d	file:
bool	src/cc-compat.h	/^	typedef unsigned char bool;$/;"	t
boundary	include/git2/blame.h	/^	char boundary;$/;"	m	struct:git_blame_hunk
br2_name	tests/refs/settargetwithlog.c	/^static const char *br2_name = "refs\/heads\/br2";$/;"	v	file:
br2_tip	tests/refs/settargetwithlog.c	/^static const char *br2_tip = "a4a7dce85cf63874e984719f4fdd239f5145052f";$/;"	v	file:
bracket_elem_t	deps/regex/regex_internal.h	/^} bracket_elem_t;$/;"	t	typeref:struct:__anon192
bracket_elem_type	deps/regex/regex_internal.h	/^} bracket_elem_type;$/;"	t	typeref:enum:__anon191
branch	include/git2/branch.h	/^	git_reference *branch);$/;"	v
branch	include/git2/branch.h	/^GIT_EXTERN(int) git_branch_delete(git_reference *branch);$/;"	v
branch	src/submodule.h	/^	char *branch;$/;"	m	struct:git_submodule
branch	tests/commit/write.c	/^static git_reference *head, *branch;$/;"	v	file:
branch	tests/refs/branches/create.c	/^static git_reference *branch;$/;"	v	file:
branch	tests/refs/branches/ishead.c	/^static git_reference *branch;$/;"	v	file:
branch	tests/refs/branches/lookup.c	/^static git_reference *branch;$/;"	v	file:
branch	tests/refs/branches/upstream.c	/^static git_reference *branch, *upstream;$/;"	v	file:
branch_iter	src/branch.c	/^} branch_iter;$/;"	t	typeref:struct:__anon159	file:
branch_name	tests/refs/branches/iterator.c	/^	const char *branch_name;$/;"	m	struct:expectations	file:
branchname	src/clone.c	/^	git_buf branchname;$/;"	m	struct:head_info	file:
break_rewrite_threshold	include/git2/diff.h	/^	uint16_t break_rewrite_threshold;$/;"	m	struct:__anon272
bsize	src/xdiff/xdiff.h	/^	long bsize;$/;"	m	struct:s_bdiffparam
bswap16	src/bswap.h	30;"	d
bswap16	src/bswap.h	43;"	d
bswap16	src/bswap.h	63;"	d
bswap16	src/bswap.h	77;"	d
bswap32	src/bswap.h	22;"	d
bswap32	src/bswap.h	34;"	d
bswap32	src/bswap.h	54;"	d
bswap32	src/bswap.h	76;"	d
btowc	deps/regex/regcomp.c	/^btowc (int c)$/;"	f
buf	src/diff_file.h	/^	const void *buf;$/;"	m	struct:__anon155
buf	src/diff_print.c	/^	git_buf *buf;$/;"	m	struct:__anon123	file:
buf	src/pack-objects.c	/^	git_buf buf;$/;"	m	struct:tree_walk_context	file:
buf	src/path.h	/^	git_buf buf;$/;"	m	struct:__anon128
buf	src/xdiff/xemit.c	/^	char buf[80];$/;"	m	struct:func_line	file:
buf_pos	src/filebuf.h	/^	size_t buf_size, buf_pos;$/;"	m	struct:git_filebuf
buf_size	src/filebuf.h	/^	size_t buf_size, buf_pos;$/;"	m	struct:git_filebuf
buf_size	src/transports/http.c	/^	size_t buf_size;$/;"	m	struct:__anon82	file:
buferr_t	src/filebuf.c	/^enum buferr_t {$/;"	g	file:
buffer	include/git2/buffer.h	/^GIT_EXTERN(void) git_buf_free(git_buf *buffer);$/;"	v
buffer	src/config_file.c	/^	git_buf buffer;$/;"	m	struct:reader	file:
buffer	src/filebuf.h	/^	unsigned char *buffer;$/;"	m	struct:git_filebuf
buffer	src/odb.c	/^	char *buffer;$/;"	m	struct:__anon118	file:
buffer	src/odb.h	/^	void *buffer;$/;"	m	struct:git_odb_object
buffer	src/transports/http.c	/^	char *buffer;$/;"	m	struct:__anon82	file:
buffer	src/transports/smart.h	/^	gitno_buffer buffer;$/;"	m	struct:__anon73
buffer_data	src/transports/smart.h	/^	char buffer_data[65536];$/;"	m	struct:__anon73
buffer_hunk_cb	src/blame.c	/^static int buffer_hunk_cb($/;"	f	file:
buffer_line_cb	src/blame.c	/^static int buffer_line_cb($/;"	f	file:
buffer_signature	include/git2/diff.h	/^	int (*buffer_signature)($/;"	m	struct:__anon271
buffer_to_file	src/checkout.c	/^static int buffer_to_file($/;"	f	file:
buffer_want_with_caps	src/transports/smart_pkt.c	/^static int buffer_want_with_caps(const git_remote_head *head, transport_smart_caps *caps, git_buf *buf)$/;"	f	file:
buflen	src/diff_file.h	/^	size_t buflen;$/;"	m	struct:__anon155
bufs_len	deps/regex/regex_internal.h	/^  int bufs_len;$/;"	m	struct:re_string_t
build_bl_tree	deps/zlib/trees.c	/^local int build_bl_tree(s)$/;"	f
build_charclass	deps/regex/regcomp.c	/^build_charclass (RE_TRANSLATE_TYPE trans, bitset_t sbcset,$/;"	f	file:
build_charclass_op	deps/regex/regcomp.c	/^build_charclass_op (re_dfa_t *dfa, RE_TRANSLATE_TYPE trans,$/;"	f	file:
build_collating_symbol	deps/regex/regcomp.c	/^build_collating_symbol (bitset_t sbcset, re_charset_t *mbcset,$/;"	f	file:
build_equiv_class	deps/regex/regcomp.c	/^build_equiv_class (bitset_t sbcset, re_charset_t *mbcset,$/;"	f	file:
build_fake_backend	tests/odb/backend/nonrefreshing.c	/^static int build_fake_backend($/;"	f	file:
build_range_exp	deps/regex/regcomp.c	/^build_range_exp (bitset_t sbcset, re_charset_t *mbcset, int *range_alloc,$/;"	f	file:
build_regex	src/revparse.c	/^static int build_regex(regex_t *regex, const char *pattern)$/;"	f	file:
build_sandbox_path	tests/clar/sandbox.h	/^static int build_sandbox_path(void)$/;"	f
build_sifted_states	deps/regex/regexec.c	/^build_sifted_states (const re_match_context_t *mctx, re_sift_context_t *sctx,$/;"	f	file:
build_test_tree	tests/repo/iterator.c	/^static void build_test_tree($/;"	f	file:
build_tree	deps/zlib/trees.c	/^local void build_tree(s, desc)$/;"	f
build_tree_from_index	src/stash.c	/^static int build_tree_from_index(git_tree **out, git_index *index)$/;"	f	file:
build_trtable	deps/regex/regexec.c	/^build_trtable (const re_dfa_t *dfa, re_dfastate_t *state)$/;"	f	file:
build_untracked_tree	src/stash.c	/^static int build_untracked_tree($/;"	f	file:
build_upper_buffer	deps/regex/regex_internal.c	/^build_upper_buffer (re_string_t *pstr)$/;"	f	file:
build_wcs_buffer	deps/regex/regex_internal.c	/^build_wcs_buffer (re_string_t *pstr)$/;"	f	file:
build_wcs_upper_buffer	deps/regex/regex_internal.c	/^build_wcs_upper_buffer (re_string_t *pstr)$/;"	f	file:
build_workdir_tree	src/stash.c	/^static int build_workdir_tree($/;"	f	file:
build_workdir_tree	tests/repo/iterator.c	/^static void build_workdir_tree(const char *root, int dirs, int subs)$/;"	f	file:
builtin_defs	src/userdiff.h	/^static git_diff_driver_definition builtin_defs[] = {$/;"	v
bye_id	tests/object/raw/hash.c	/^static char *bye_id = "ce08fe4884650f067bd5703b6a59a8b3b3c99a09";$/;"	v	file:
bye_text	tests/object/raw/hash.c	/^static char *bye_text = "bye world\\n";$/;"	v	file:
bytes	tests/odb/loose_data.h	/^    unsigned char *bytes;  \/* (compressed) bytes stored in object store *\/$/;"	m	struct:object_data
bytes_read	src/transports/http.c	/^	size_t *bytes_read;$/;"	m	struct:__anon82	file:
c	deps/regex/regex_internal.h	/^    unsigned char c;		\/* for CHARACTER *\/$/;"	m	union:__anon184::__anon185
c	src/hash/hash_openssl.h	/^	SHA_CTX c;$/;"	m	struct:git_hash_ctx
cache_add	src/pack.c	/^static int cache_add(git_pack_cache *cache, git_rawobj *base, git_off_t offset)$/;"	f	file:
cache_data	src/attr_file.h	/^	} cache_data;$/;"	m	struct:__anon133	typeref:union:__anon133::__anon134
cache_evict_entries	src/cache.c	/^static void cache_evict_entries(git_cache *cache)$/;"	f	file:
cache_free	src/pack.c	/^static void cache_free(git_pack_cache *cache)$/;"	f	file:
cache_get	src/cache.c	/^static void *cache_get(git_cache *cache, const git_oid *oid, unsigned int flags)$/;"	f	file:
cache_get	src/pack.c	/^static git_pack_cache_entry *cache_get(git_pack_cache *cache, git_off_t offset)$/;"	f	file:
cache_init	src/pack.c	/^static int cache_init(git_pack_cache *cache)$/;"	f	file:
cache_max_small_delta_size	src/pack-objects.h	/^	uint64_t cache_max_small_delta_size;$/;"	m	struct:git_packbuilder
cache_mutex	src/pack-objects.h	/^	git_mutex cache_mutex;$/;"	m	struct:git_packbuilder
cache_parsed	tests/object/cache.c	/^static void *cache_parsed(void *arg)$/;"	f	file:
cache_quick	tests/object/cache.c	/^static void *cache_quick(void *arg)$/;"	f	file:
cache_raw	tests/object/cache.c	/^static void *cache_raw(void *arg)$/;"	f	file:
cache_should_store	src/cache.c	/^static bool cache_should_store(git_otype object_type, size_t object_size)$/;"	f	file:
cache_store	src/cache.c	/^static void *cache_store(git_cache *cache, git_cached_obj *entry)$/;"	f	file:
cached	examples/diff.c	/^	int cached;$/;"	m	struct:opts	file:
cached	src/object.h	/^	git_cached_obj cached;$/;"	m	struct:git_object
cached	src/odb.h	/^	git_cached_obj cached;$/;"	m	struct:git_odb_object
calc_eclosure	deps/regex/regcomp.c	/^calc_eclosure (re_dfa_t *dfa)$/;"	f	file:
calc_eclosure_iter	deps/regex/regcomp.c	/^calc_eclosure_iter (re_node_set *new_set, re_dfa_t *dfa, int node, int root)$/;"	f	file:
calc_first	deps/regex/regcomp.c	/^calc_first (void *extra, bin_tree_t *node)$/;"	f	file:
calc_inveclosure	deps/regex/regcomp.c	/^calc_inveclosure (re_dfa_t *dfa)$/;"	f	file:
calc_next	deps/regex/regcomp.c	/^calc_next (UNUSED void *extra, bin_tree_t *node)$/;"	f	file:
calc_self_similarity	src/diff_tform.c	/^static int calc_self_similarity($/;"	f	file:
calc_state_hash	deps/regex/regex_internal.c	/^calc_state_hash (const re_node_set *nodes, unsigned int context)$/;"	f	file:
calculate_work	src/push.c	/^static int calculate_work(git_push *push)$/;"	f	file:
callback	include/git2/transport.h	/^	git_smart_subtransport_cb callback;$/;"	m	struct:git_smart_subtransport_definition
callback	src/diff_xdiff.h	/^	xdemitcb_t   callback;$/;"	m	struct:__anon103
callback	src/trace.h	/^	git_trace_callback callback;$/;"	m	struct:git_trace_data
callback	src/transports/smart_protocol.c	/^	git_transfer_progress_callback callback;$/;"	m	struct:network_packetsize_payload	file:
callback_cb	tests/stash/foreach.c	/^static int callback_cb($/;"	f	file:
callback_count	tests/generate.py	/^    def callback_count(self):$/;"	m	class:TestSuite
callback_data	tests/stash/foreach.c	/^struct callback_data$/;"	s	file:
callbacks	src/remote.h	/^	git_remote_callbacks callbacks;$/;"	m	struct:git_remote
can_symlink	src/checkout.c	/^	int can_symlink;$/;"	m	struct:__anon121	file:
cancel	include/git2/transport.h	/^	void (*cancel)(git_transport *transport);$/;"	m	struct:git_transport
cancel_after	tests/core/path.c	/^	int cancel_after;$/;"	m	struct:__anon25	file:
cancel_at_half	tests/online/clone.c	/^static int cancel_at_half(const git_transfer_progress *stats, void *payload)$/;"	f	file:
cancel_at_half	tests/online/fetch.c	/^static int cancel_at_half(const git_transfer_progress *stats, void *payload)$/;"	f	file:
cancel_iteration	tests/attr/repo.c	/^static int cancel_iteration($/;"	f	file:
cancelled	src/transports/local.c	/^	git_atomic cancelled;$/;"	m	struct:__anon78	file:
cancelled	src/transports/smart.h	/^	git_atomic cancelled;$/;"	m	struct:__anon73
capabilities	src/transports/smart.h	/^	char *capabilities;$/;"	m	struct:__anon65
caps	src/transports/smart.h	/^	transport_smart_caps caps;$/;"	m	struct:__anon73
case_paths	tests/status/worktree.c	/^static const char *case_paths[] = { "B", "H", "c", "g" };$/;"	v	file:
case_statuses	tests/status/worktree.c	/^static unsigned int case_statuses[] = {$/;"	v	file:
cb	src/iterator.c	/^	git_iterator_callbacks cb;$/;"	m	struct:__anon83	file:
cb	src/iterator.c	/^	git_iterator_callbacks cb;$/;"	m	struct:__anon84	file:
cb	src/iterator.c	/^	git_iterator_callbacks cb;$/;"	m	struct:__anon85	file:
cb	src/iterator.c	/^	git_iterator_callbacks cb;$/;"	m	struct:fs_iterator	file:
cb	src/iterator.h	/^	git_iterator_callbacks *cb;$/;"	m	struct:git_iterator
cb	src/odb_loose.c	/^	git_odb_foreach_cb cb;$/;"	m	struct:foreach_state	file:
cb	src/tag.c	/^	git_tag_foreach_cb cb;$/;"	m	struct:__anon49	file:
cb	src/transports/smart_protocol.c	/^	git_push_transfer_progress cb;$/;"	m	struct:push_packbuilder_payload	file:
cb	tests/config/multivar.c	/^static int cb(const git_config_entry *entry, void *data)$/;"	f	file:
cb__free_status	src/global.c	/^static void cb__free_status(void *st)$/;"	f	file:
cb__reflist_add	src/refs.c	/^static int cb__reflist_add(const char *ref, void *data)$/;"	f	file:
cb_data	src/netops.h	/^	void *cb_data;$/;"	m	struct:gitno_buffer
cb_data	src/tag.c	/^	void *cb_data;$/;"	m	struct:__anon49	file:
cb_payload	src/transports/smart_protocol.c	/^	void *cb_payload;$/;"	m	struct:push_packbuilder_payload	file:
cb_status__check_592	tests/status/worktree.c	/^static int cb_status__check_592(const char *p, unsigned int s, void *payload)$/;"	f	file:
cb_status__count	tests/status/status_helpers.c	/^int cb_status__count(const char *p, unsigned int s, void *payload)$/;"	f
cb_status__expected_path	tests/status/worktree_init.c	/^static int cb_status__expected_path(const char *p, unsigned int s, void *payload)$/;"	f	file:
cb_status__interrupt	tests/status/worktree.c	/^static int cb_status__interrupt(const char *p, unsigned int s, void *payload)$/;"	f	file:
cb_status__match	tests/status/submodules.c	/^static int cb_status__match(const char *p, unsigned int s, void *payload)$/;"	f	file:
cb_status__normal	tests/status/status_helpers.c	/^int cb_status__normal($/;"	f
cb_status__print	tests/status/status_helpers.c	/^int cb_status__print($/;"	f
cb_status__single	tests/status/status_helpers.c	/^int cb_status__single(const char *p, unsigned int s, void *payload)$/;"	f
cb_tag_foreach	src/pack-objects.c	/^static int cb_tag_foreach(const char *name, git_oid *oid, void *data)$/;"	f	file:
cb_tree_walk	src/pack-objects.c	/^static int cb_tree_walk($/;"	f	file:
cfg	include/git2/config.h	/^GIT_EXTERN(int) git_config_refresh(git_config *cfg);$/;"	v
cfg	include/git2/config.h	/^GIT_EXTERN(void) git_config_free(git_config *cfg);$/;"	v
cfg	include/git2/sys/config.h	/^	struct git_config *cfg;$/;"	m	struct:git_config_backend	typeref:struct:git_config_backend::git_config
cfg	src/config.c	/^	const git_config *cfg;$/;"	m	struct:__anon94	file:
cfg	tests/config/validkeyname.c	/^static git_config *cfg;$/;"	v	file:
cfg_attr_file	src/attrcache.h	/^	char *cfg_attr_file; \/* cached value of core.attributesfile *\/$/;"	m	struct:__anon92
cfg_callback_countdown	tests/config/read.c	/^static int cfg_callback_countdown(const git_config_entry *entry, void *payload)$/;"	f	file:
cfg_excl_file	src/attrcache.h	/^	char *cfg_excl_file; \/* cached value of core.excludesfile *\/$/;"	m	struct:__anon92
ch	deps/regex/regex_internal.h	/^    unsigned char ch;$/;"	m	union:__anon192::__anon193
change_type	tests/merge/merge_helpers.h	/^	git_merge_diff_type_t change_type;$/;"	m	struct:merge_index_conflict_data
channel	src/transports/ssh.c	/^	LIBSSH2_CHANNEL *channel;$/;"	m	struct:__anon76	file:
chanode_t	src/xdiff/xtypes.h	/^} chanode_t;$/;"	t	typeref:struct:s_chanode
char_classes	deps/regex/regex_internal.h	/^  wctype_t *char_classes;$/;"	m	struct:__anon183
charf	deps/zlib/zconf.h	/^typedef char  FAR charf;$/;"	t
chastore_t	src/xdiff/xtypes.h	/^} chastore_t;$/;"	t	typeref:struct:s_chastore
chdir	tests/clar.c	34;"	d	file:
check	deps/zlib/inflate.h	/^    unsigned long check;        \/* protected copy of check value *\/$/;"	m	struct:inflate_state
check	include/git2/sys/filter.h	/^	git_filter_check_fn    check;$/;"	m	struct:git_filter
check_arrival	deps/regex/regexec.c	/^check_arrival (re_match_context_t *mctx, state_array_t *path, int top_node,$/;"	f	file:
check_arrival_add_next_nodes	deps/regex/regexec.c	/^check_arrival_add_next_nodes (re_match_context_t *mctx, int str_idx,$/;"	f	file:
check_arrival_expand_ecl	deps/regex/regexec.c	/^check_arrival_expand_ecl (const re_dfa_t *dfa, re_node_set *cur_nodes,$/;"	f	file:
check_arrival_expand_ecl_sub	deps/regex/regexec.c	/^check_arrival_expand_ecl_sub (const re_dfa_t *dfa, re_node_set *dst_nodes,$/;"	f	file:
check_backend_sorting	tests/odb/sorting.c	/^static void check_backend_sorting(git_odb *odb)$/;"	f	file:
check_basename	tests/core/path.c	/^check_basename(const char *A, const char *B)$/;"	f	file:
check_blame_hunk_index	tests/blame/blame_helpers.c	/^void check_blame_hunk_index(git_repository *repo, git_blame *blame, int idx,$/;"	f
check_buf	tests/core/buffer.c	955;"	d	file:
check_buf_append	tests/core/buffer.c	/^check_buf_append($/;"	f	file:
check_buf_append_abc	tests/core/buffer.c	/^check_buf_append_abc($/;"	f	file:
check_cert	src/remote.h	/^	int check_cert;$/;"	m	struct:git_remote
check_counts	tests/core/dirent.c	/^static void check_counts(walk_data *d)$/;"	f	file:
check_crlf	src/crlf.c	/^static int check_crlf(const char *value)$/;"	f	file:
check_delta_limit	src/pack-objects.c	/^static unsigned int check_delta_limit(git_pobject *me, unsigned int n)$/;"	f	file:
check_diff_patches	tests/diff/submodules.c	53;"	d	file:
check_diff_patches_at_line	tests/diff/submodules.c	/^static void check_diff_patches_at_line($/;"	f	file:
check_dirname	tests/core/path.c	/^check_dirname(const char *A, const char *B)$/;"	f	file:
check_dst_limits	deps/regex/regexec.c	/^check_dst_limits (const re_match_context_t *mctx, re_node_set *limits,$/;"	f	file:
check_dst_limits_calc_pos	deps/regex/regexec.c	/^check_dst_limits_calc_pos (const re_match_context_t *mctx, int limit,$/;"	f	file:
check_dst_limits_calc_pos_1	deps/regex/regexec.c	/^check_dst_limits_calc_pos_1 (const re_match_context_t *mctx, int boundaries,$/;"	f	file:
check_eol	src/crlf.c	/^static int check_eol(const char *value)$/;"	f	file:
check_error	examples/general.c	/^static void check_error(int error_code, const char *action)$/;"	f	file:
check_file_contents	tests/checkout/checkout_helpers.h	8;"	d
check_file_contents_nocr	tests/checkout/checkout_helpers.h	11;"	d
check_file_directory_collision	src/index.c	/^static int check_file_directory_collision(git_index *index,$/;"	f	file:
check_fromurl	tests/core/path.c	/^static void check_fromurl(const char *expected_result, const char *input, int should_fail)$/;"	f	file:
check_get_multivar	tests/config/multivar.c	/^static void check_get_multivar(git_config *cfg, int expected)$/;"	f	file:
check_get_multivar_foreach	tests/config/multivar.c	/^static void check_get_multivar_foreach($/;"	f	file:
check_glob_iter	tests/config/read.c	/^static void check_glob_iter(git_config *cfg, const char *regexp, int expected)$/;"	f	file:
check_global_searchpath	tests/core/env.c	/^static void check_global_searchpath($/;"	f	file:
check_halt_node_context	deps/regex/regexec.c	/^check_halt_node_context (const re_dfa_t *dfa, int node, unsigned int context)$/;"	f	file:
check_halt_state_context	deps/regex/regexec.c	/^check_halt_state_context (const re_match_context_t *mctx,$/;"	f	file:
check_host_name	src/netops.c	/^static int check_host_name(const char *name, const char *host)$/;"	f	file:
check_index_range	tests/diff/iterator.c	/^static void check_index_range($/;"	f	file:
check_invariant	src/tsort.c	/^static int check_invariant(struct tsort_run *stack, ssize_t stack_curr)$/;"	f	file:
check_joinbuf_2	tests/core/buffer.c	/^check_joinbuf_2($/;"	f	file:
check_joinbuf_n_2	tests/core/buffer.c	/^check_joinbuf_n_2($/;"	f	file:
check_joinbuf_n_4	tests/core/buffer.c	/^check_joinbuf_n_4($/;"	f	file:
check_joinbuf_overlapped	tests/core/buffer.c	/^check_joinbuf_overlapped($/;"	f	file:
check_joinpath	tests/core/path.c	/^check_joinpath(const char *path_a, const char *path_b, const char *expected_path)$/;"	f	file:
check_joinpath_n	tests/core/path.c	/^check_joinpath_n($/;"	f	file:
check_last_reflog_entry	tests/repo/head.c	/^static void check_last_reflog_entry(const char *email, const char *message)$/;"	f	file:
check_lg2	examples/common.c	/^void check_lg2(int error, const char *message, const char *extra)$/;"	f
check_lref	src/push.c	/^static int check_lref(git_push *push, char *ref)$/;"	f	file:
check_match	deps/zlib/deflate.c	/^local void check_match(s, start, match, length)$/;"	f
check_match	deps/zlib/deflate.c	1292;"	d	file:
check_matching	deps/regex/regexec.c	/^check_matching (re_match_context_t *mctx, int fl_longest_match,$/;"	f	file:
check_mode	tests/core/mkdir.c	114;"	d	file:
check_mode_at_line	tests/core/mkdir.c	/^static void check_mode_at_line($/;"	f	file:
check_node_accept	deps/regex/regexec.c	/^check_node_accept (const re_match_context_t *mctx, const re_token_t *node,$/;"	f	file:
check_node_accept_bytes	deps/regex/regexec.c	/^check_node_accept_bytes (const re_dfa_t *dfa, int node_idx,$/;"	f	file:
check_object_files	tests/object/raw/write.c	/^static void check_object_files(object_data *d)$/;"	f	file:
check_one_assign	tests/attr/file.c	/^static void check_one_assign($/;"	f	file:
check_one_walkup_step	tests/core/path.c	/^static int check_one_walkup_step(void *ref, git_buf *path)$/;"	f	file:
check_partial_oid	tests/object/raw/convert.c	/^static void check_partial_oid($/;"	f	file:
check_path_to_dir	tests/core/path.c	/^check_path_to_dir($/;"	f	file:
check_percent_decoding	tests/core/path.c	/^static void check_percent_decoding(const char *expected_result, const char *input)$/;"	f	file:
check_removal_cb	tests/diff/patch.c	/^static int check_removal_cb($/;"	f	file:
check_repositoryformatversion	src/repository.c	/^static int check_repositoryformatversion(git_config *config)$/;"	f	file:
check_rref	src/push.c	/^static int check_rref(char *ref)$/;"	f	file:
check_single_patch_stats	tests/diff/patch.c	/^static void check_single_patch_stats($/;"	f	file:
check_some_bits	tests/core/bitvec.c	/^static void check_some_bits(git_bitvec *bv, size_t length)$/;"	f	file:
check_stat_data	tests/index/addall.c	/^static void check_stat_data(git_index *index, const char *path, bool match)$/;"	f	file:
check_status	tests/index/addall.c	102;"	d	file:
check_status_at_line	tests/index/addall.c	/^static void check_status_at_line($/;"	f	file:
check_string_to_dir	tests/core/path.c	/^check_string_to_dir($/;"	f	file:
check_subexp_limits	deps/regex/regexec.c	/^check_subexp_limits (const re_dfa_t *dfa, re_node_set *dest_nodes,$/;"	f	file:
check_subexp_matching_top	deps/regex/regexec.c	/^check_subexp_matching_top (re_match_context_t *mctx, re_node_set *cur_nodes,$/;"	f	file:
check_topdir	tests/core/path.c	/^check_topdir(const char *A, const char *B)$/;"	f	file:
check_tree_entry	tests/diff/iterator.c	/^static void check_tree_entry($/;"	f	file:
check_tree_range	tests/diff/iterator.c	/^static void check_tree_range($/;"	f	file:
check_walkup_info	tests/core/path.c	/^} check_walkup_info;$/;"	t	typeref:struct:__anon25	file:
check_wd_first_through_third_range	tests/diff/iterator.c	/^static void check_wd_first_through_third_range($/;"	f	file:
checkout_action	src/checkout.c	/^static int checkout_action($/;"	f	file:
checkout_action_common	src/checkout.c	/^static int checkout_action_common($/;"	f	file:
checkout_action_no_wd	src/checkout.c	/^static int checkout_action_no_wd($/;"	f	file:
checkout_action_wd_only	src/checkout.c	/^static int checkout_action_wd_only($/;"	f	file:
checkout_action_with_wd	src/checkout.c	/^static int checkout_action_with_wd($/;"	f	file:
checkout_action_with_wd_blocker	src/checkout.c	/^static int checkout_action_with_wd_blocker($/;"	f	file:
checkout_action_with_wd_dir	src/checkout.c	/^static int checkout_action_with_wd_dir($/;"	f	file:
checkout_blob	src/checkout.c	/^static int checkout_blob($/;"	f	file:
checkout_branch	include/git2/clone.h	/^	const char* checkout_branch;$/;"	m	struct:git_clone_options
checkout_cancel_at	tests/checkout/tree.c	/^struct checkout_cancel_at {$/;"	s	file:
checkout_cancel_cb	tests/checkout/tree.c	/^static int checkout_cancel_cb($/;"	f	file:
checkout_conflict_detect_binary	src/checkout.c	/^GIT_INLINE(int) checkout_conflict_detect_binary(git_repository *repo, checkout_conflictdata *conflict)$/;"	f
checkout_conflict_detect_submodule	src/checkout.c	/^GIT_INLINE(int) checkout_conflict_detect_submodule(checkout_conflictdata *conflict)$/;"	f
checkout_conflictdata	src/checkout.c	/^} checkout_conflictdata;$/;"	t	typeref:struct:__anon122	file:
checkout_conflictdata_cmp	src/checkout.c	/^static int checkout_conflictdata_cmp(const void *a, const void *b)$/;"	f	file:
checkout_conflictdata_empty	src/checkout.c	/^int checkout_conflictdata_empty(const git_vector *conflicts, size_t idx)$/;"	f
checkout_conflicts_cmp_ancestor	src/checkout.c	/^static int checkout_conflicts_cmp_ancestor(const void *p, const void *c)$/;"	f	file:
checkout_conflicts_cmp_entry	src/checkout.c	/^GIT_INLINE(int) checkout_conflicts_cmp_entry($/;"	f
checkout_conflicts_coalesce_renames	src/checkout.c	/^static int checkout_conflicts_coalesce_renames($/;"	f	file:
checkout_conflicts_load	src/checkout.c	/^static int checkout_conflicts_load(checkout_data *data, git_iterator *workdir, git_vector *pathspec)$/;"	f	file:
checkout_conflicts_load_byname_entry	src/checkout.c	/^static int checkout_conflicts_load_byname_entry($/;"	f	file:
checkout_conflicts_mark_directoryfile	src/checkout.c	/^static int checkout_conflicts_mark_directoryfile($/;"	f	file:
checkout_conflicts_search_ancestor	src/checkout.c	/^static checkout_conflictdata *checkout_conflicts_search_ancestor($/;"	f	file:
checkout_conflicts_search_branch	src/checkout.c	/^static checkout_conflictdata *checkout_conflicts_search_branch($/;"	f	file:
checkout_count_callback	tests/checkout/checkout_helpers.c	/^int checkout_count_callback($/;"	f
checkout_counts	tests/checkout/checkout_helpers.h	/^} checkout_counts;$/;"	t	typeref:struct:__anon6
checkout_create_conflicts	src/checkout.c	/^static int checkout_create_conflicts(checkout_data *data)$/;"	f	file:
checkout_create_submodules	src/checkout.c	/^static int checkout_create_submodules($/;"	f	file:
checkout_create_the_new	src/checkout.c	/^static int checkout_create_the_new($/;"	f	file:
checkout_data	src/checkout.c	/^} checkout_data;$/;"	t	typeref:struct:__anon121	file:
checkout_data_clear	src/checkout.c	/^static void checkout_data_clear(checkout_data *data)$/;"	f	file:
checkout_data_init	src/checkout.c	/^static int checkout_data_init($/;"	f	file:
checkout_deferred_remove	src/checkout.c	/^static int checkout_deferred_remove(git_repository *repo, const char *path)$/;"	f	file:
checkout_get_actions	src/checkout.c	/^static int checkout_get_actions($/;"	f	file:
checkout_get_conflicts	src/checkout.c	/^static int checkout_get_conflicts($/;"	f	file:
checkout_idxentry_cmp	src/checkout.c	/^GIT_INLINE(int) checkout_idxentry_cmp($/;"	f
checkout_index_entry	tests/checkout/conflict.c	/^struct checkout_index_entry {$/;"	s	file:
checkout_is_workdir_modified	src/checkout.c	/^static bool checkout_is_workdir_modified($/;"	f	file:
checkout_lookup_head_tree	src/checkout.c	/^static int checkout_lookup_head_tree(git_tree **out, git_repository *repo)$/;"	f	file:
checkout_merge_path	src/checkout.c	/^static int checkout_merge_path($/;"	f	file:
checkout_name_entry	tests/checkout/conflict.c	/^struct checkout_name_entry {$/;"	s	file:
checkout_notify	src/checkout.c	/^static int checkout_notify($/;"	f	file:
checkout_opts	include/git2/clone.h	/^	git_checkout_opts checkout_opts;$/;"	m	struct:git_clone_options
checkout_opts	include/git2/merge.h	/^	git_checkout_opts checkout_opts;$/;"	m	struct:__anon253
checkout_opts	include/git2/revert.h	/^	git_checkout_opts checkout_opts;$/;"	m	struct:__anon257
checkout_path_suffixed	src/checkout.c	/^static int checkout_path_suffixed(git_buf *path, const char *suffix)$/;"	f	file:
checkout_progress	examples/network/clone.c	/^static void checkout_progress(const char *path, size_t cur, size_t tot, void *payload)$/;"	f	file:
checkout_progress	tests/online/clone.c	/^static void checkout_progress(const char *path, size_t cur, size_t tot, void *payload)$/;"	f	file:
checkout_progress_counter	tests/checkout/index.c	/^static void checkout_progress_counter($/;"	f	file:
checkout_remaining_wd_items	src/checkout.c	/^static int checkout_remaining_wd_items($/;"	f	file:
checkout_remove_the_old	src/checkout.c	/^static int checkout_remove_the_old($/;"	f	file:
checkout_safe_for_update_only	src/checkout.c	/^static int checkout_safe_for_update_only(const char *path, mode_t expected_mode)$/;"	f	file:
checkout_strategy	include/git2/checkout.h	/^	unsigned int checkout_strategy; \/** default will be a dry run *\/$/;"	m	struct:git_checkout_opts
checkout_submodule	src/checkout.c	/^static int checkout_submodule($/;"	f	file:
checkout_submodule_update_index	src/checkout.c	/^static int checkout_submodule_update_index($/;"	f	file:
checkout_tree_with_blob_ignored_in_workdir	tests/checkout/tree.c	/^static int checkout_tree_with_blob_ignored_in_workdir(int strategy, bool isdir)$/;"	f	file:
checkout_update_index	src/checkout.c	/^static int checkout_update_index($/;"	f	file:
checkout_write_content	src/checkout.c	/^static int checkout_write_content($/;"	f	file:
checkout_write_entries	src/checkout.c	/^static int checkout_write_entries($/;"	f	file:
checkout_write_entry	src/checkout.c	/^static int checkout_write_entry($/;"	f	file:
checkout_write_merge	src/checkout.c	/^static int checkout_write_merge($/;"	f	file:
chg0	src/xdiff/xmerge.c	/^	long chg0;$/;"	m	struct:s_xdmerge	file:
chg1	src/xdiff/xdiffi.h	/^	long chg1, chg2;$/;"	m	struct:s_xdchange
chg1	src/xdiff/xmerge.c	/^	long chg1, chg2;$/;"	m	struct:s_xdmerge	file:
chg2	src/xdiff/xdiffi.h	/^	long chg1, chg2;$/;"	m	struct:s_xdchange
chg2	src/xdiff/xmerge.c	/^	long chg1, chg2;$/;"	m	struct:s_xdmerge	file:
children	src/oid.c	/^	node_index children[16];$/;"	m	union:__anon124	file:
children	src/tree-cache.h	/^	struct git_tree_cache **children;$/;"	m	struct:git_tree_cache	typeref:struct:git_tree_cache::git_tree_cache
children_count	src/tree-cache.h	/^	size_t children_count;$/;"	m	struct:git_tree_cache
chunk_buffer	src/transports/http.c	/^	char *chunk_buffer;$/;"	m	struct:__anon80	file:
chunk_buffer	src/transports/winhttp.c	/^	char *chunk_buffer;$/;"	m	struct:__anon62	file:
chunk_buffer_len	src/transports/http.c	/^	unsigned chunk_buffer_len;$/;"	m	struct:__anon80	file:
chunk_buffer_len	src/transports/winhttp.c	/^	unsigned chunk_buffer_len;$/;"	m	struct:__anon62	file:
chunked	src/transports/http.c	/^		chunked : 1,$/;"	m	struct:__anon80	file:
chunked	src/transports/winhttp.c	/^		chunked : 1;$/;"	m	struct:__anon62	file:
cl_assert	tests/clar.h	42;"	d
cl_assert_	tests/clar.h	28;"	d
cl_assert_at_line	tests/clar_libgit2.h	32;"	d
cl_assert_equal_b	tests/clar.h	67;"	d
cl_assert_equal_file	tests/clar_libgit2.h	54;"	d
cl_assert_equal_file_ignore_cr	tests/clar_libgit2.h	57;"	d
cl_assert_equal_i	tests/clar.h	63;"	d
cl_assert_equal_i_	tests/clar.h	64;"	d
cl_assert_equal_i_fmt	tests/clar.h	65;"	d
cl_assert_equal_p	tests/clar.h	69;"	d
cl_assert_equal_s	tests/clar.h	60;"	d
cl_assert_equal_s_	tests/clar.h	61;"	d
cl_assert_equal_sz	tests/clar_libgit2.h	46;"	d
cl_assert_error	tests/core/stat.c	18;"	d	file:
cl_assert_in_range	tests/clar_libgit2.h	51;"	d
cl_check	tests/clar.h	49;"	d
cl_check_	tests/clar.h	35;"	d
cl_check_fail	tests/clar.h	48;"	d
cl_check_fail_	tests/clar.h	34;"	d
cl_check_pass	tests/clar.h	47;"	d
cl_check_pass_	tests/clar.h	33;"	d
cl_fail	tests/clar.h	54;"	d
cl_fixture	tests/clar/fixtures.h	/^const char *cl_fixture(const char *fixture_name)$/;"	f
cl_fixture_cleanup	tests/clar/fixtures.h	/^void cl_fixture_cleanup(const char *fixture_name)$/;"	f
cl_fixture_sandbox	tests/clar/fixtures.h	/^void cl_fixture_sandbox(const char *fixture_name)$/;"	f
cl_fs_cleanup	tests/clar/fs.h	/^cl_fs_cleanup(void)$/;"	f
cl_getenv	tests/clar_libgit2.c	/^char *cl_getenv(const char *name)$/;"	f
cl_git_append2file	tests/clar_libgit2.c	/^void cl_git_append2file(const char *path, const char *content)$/;"	f
cl_git_fail	tests/clar_libgit2.h	26;"	d
cl_git_fail_with	tests/clar_libgit2.h	28;"	d
cl_git_fixture_url	tests/clar_libgit2.c	/^const char* cl_git_fixture_url(const char *fixturename)$/;"	f
cl_git_mkfile	tests/clar_libgit2.c	/^void cl_git_mkfile(const char *filename, const char *content)$/;"	f
cl_git_pass	tests/clar_libgit2.h	14;"	d
cl_git_path_url	tests/clar_libgit2.c	/^const char* cl_git_path_url(const char *path)$/;"	f
cl_git_remove_placeholders	tests/clar_libgit2.c	/^int cl_git_remove_placeholders(const char *directory_path, const char *filename)$/;"	f
cl_git_report_failure	tests/clar_libgit2.c	/^void cl_git_report_failure($/;"	f
cl_git_rewritefile	tests/clar_libgit2.c	/^void cl_git_rewritefile(const char *path, const char *content)$/;"	f
cl_git_sandbox_cleanup	tests/clar_libgit2.c	/^void cl_git_sandbox_cleanup(void)$/;"	f
cl_git_sandbox_init	tests/clar_libgit2.c	/^git_repository *cl_git_sandbox_init(const char *sandbox)$/;"	f
cl_git_sandbox_reopen	tests/clar_libgit2.c	/^git_repository *cl_git_sandbox_reopen(void)$/;"	f
cl_git_write2file	tests/clar_libgit2.c	/^void cl_git_write2file($/;"	f
cl_is_chmod_supported	tests/clar_libgit2.c	/^bool cl_is_chmod_supported(void)$/;"	f
cl_must_fail	tests/clar.h	41;"	d
cl_must_fail_	tests/clar.h	27;"	d
cl_must_pass	tests/clar.h	40;"	d
cl_must_pass_	tests/clar.h	26;"	d
cl_rename	tests/clar_libgit2.c	/^int cl_rename(const char *source, const char *dest)$/;"	f
cl_repo_commit_from_index	tests/clar_libgit2.c	/^void cl_repo_commit_from_index($/;"	f
cl_repo_get_bool	tests/clar_libgit2.c	/^int cl_repo_get_bool(git_repository *repo, const char *cfg)$/;"	f
cl_repo_set_bool	tests/clar_libgit2.c	/^void cl_repo_set_bool(git_repository *repo, const char *cfg, int value)$/;"	f
cl_repo_set_string	tests/clar_libgit2.c	/^void cl_repo_set_string(git_repository *repo, const char *cfg, const char *value)$/;"	f
cl_set_cleanup	tests/clar.c	/^void cl_set_cleanup(void (*cleanup)(void *), void *opaque)$/;"	f
cl_setenv	tests/clar_libgit2.c	/^int cl_setenv(const char *name, const char *value)$/;"	f
cl_toggle_filemode	tests/clar_libgit2.c	/^bool cl_toggle_filemode(const char *filename)$/;"	f
cl_warning	tests/clar.h	55;"	d
clar__assert	tests/clar.c	/^void clar__assert($/;"	f
clar__assert_equal	tests/clar.c	/^void clar__assert_equal($/;"	f
clar__assert_equal_file	tests/clar_libgit2.c	/^void clar__assert_equal_file($/;"	f
clar__assert_in_range	tests/clar_libgit2.h	/^GIT_INLINE(void) clar__assert_in_range($/;"	f
clar__fail	tests/clar.c	/^void clar__fail($/;"	f
clar_error	tests/clar.c	/^struct clar_error {$/;"	s	file:
clar_func	tests/clar.c	/^struct clar_func {$/;"	s	file:
clar_parse_args	tests/clar.c	/^clar_parse_args(int argc, char **argv)$/;"	f	file:
clar_print_error	tests/clar/print.h	/^static void clar_print_error(int num, const struct clar_error *error)$/;"	f
clar_print_init	tests/clar/print.h	/^static void clar_print_init(int test_count, int suite_count, const char *suite_names)$/;"	f
clar_print_onabort	tests/clar/print.h	/^static void clar_print_onabort(const char *msg, ...)$/;"	f
clar_print_onsuite	tests/clar/print.h	/^static void clar_print_onsuite(const char *suite_name, int suite_index)$/;"	f
clar_print_ontest	tests/clar/print.h	/^static void clar_print_ontest(const char *test_name, int test_number, int failed)$/;"	f
clar_print_shutdown	tests/clar/print.h	/^static void clar_print_shutdown(int test_count, int suite_count, int error_count)$/;"	f
clar_report_errors	tests/clar.c	/^clar_report_errors(void)$/;"	f	file:
clar_run_suite	tests/clar.c	/^clar_run_suite(const struct clar_suite *suite, const char *filter)$/;"	f	file:
clar_run_test	tests/clar.c	/^clar_run_test($/;"	f	file:
clar_sandbox	tests/clar/sandbox.h	/^static int clar_sandbox(void)$/;"	f
clar_suite	tests/clar.c	/^struct clar_suite {$/;"	s	file:
clar_test	tests/clar.c	/^clar_test(int argc, char **argv)$/;"	f
clar_unsandbox	tests/clar/sandbox.h	/^static void clar_unsandbox(void)$/;"	f
clar_usage	tests/clar.c	/^clar_usage(const char *arg)$/;"	f	file:
clean_name	tests/generate.py	/^    def clean_name(self):$/;"	m	class:Module
clean_state_log_if_needed	deps/regex/regexec.c	/^clean_state_log_if_needed (re_match_context_t *mctx, int next_state_log_idx)$/;"	f	file:
clean_test_config	tests/config/read.c	/^static void clean_test_config(void *unused)$/;"	f	file:
cleanup	include/git2/sys/filter.h	/^	git_filter_cleanup_fn  cleanup;$/;"	m	struct:git_filter
cleanup	tests/clar.c	/^	struct clar_func cleanup;$/;"	m	struct:clar_suite	typeref:struct:clar_suite::clar_func	file:
cleanup_1397	tests/index/tests.c	/^static void cleanup_1397(void *opaque)$/;"	f	file:
cleanup__remove_file	tests/status/single.c	/^cleanup__remove_file(void *_file)$/;"	f	file:
cleanup_basedir	tests/core/mkdir.c	/^static void cleanup_basedir(void *ref)$/;"	f	file:
cleanup_basic_dirs	tests/core/mkdir.c	/^static void cleanup_basic_dirs(void *ref)$/;"	f	file:
cleanup_chmod_root	tests/core/mkdir.c	/^static void cleanup_chmod_root(void *ref)$/;"	f	file:
cleanup_fixture_submodules	tests/submodule/submodule_helpers.c	/^static void cleanup_fixture_submodules(void *payload)$/;"	f	file:
cleanup_local_repo	tests/network/fetchlocal.c	/^static void cleanup_local_repo(void *path)$/;"	f	file:
cleanup_myrepo	tests/index/tests.c	/^static void cleanup_myrepo(void *opaque)$/;"	f	file:
cleanup_new_repo	tests/status/worktree_init.c	/^static void cleanup_new_repo(void *path)$/;"	f	file:
cleanup_repository	tests/clone/empty.c	/^static void cleanup_repository(void *path)$/;"	f	file:
cleanup_repository	tests/fetchhead/nonetwork.c	/^static void cleanup_repository(void *path)$/;"	f	file:
cleanup_repository	tests/repo/init.c	/^static void cleanup_repository(void *path)$/;"	f	file:
cleanup_sandbox	tests/network/fetchlocal.c	/^static void cleanup_sandbox(void *unused)$/;"	f	file:
clear_cache	src/cache.c	/^static void clear_cache(git_cache *cache)$/;"	f	file:
clear_parser_state	src/transports/http.c	/^static void clear_parser_state(http_subtransport *t)$/;"	f	file:
clone_cancel_checkout_cb	tests/clone/nonetwork.c	/^static int clone_cancel_checkout_cb($/;"	f	file:
clone_cancel_fetch_transfer_progress_cb	tests/clone/nonetwork.c	/^static int clone_cancel_fetch_transfer_progress_cb($/;"	f	file:
close	examples/network/index-pack.c	14;"	d	file:
close	include/git2/transport.h	/^	int (*close)(git_smart_subtransport *transport);$/;"	m	struct:git_smart_subtransport
close	include/git2/transport.h	/^	int (*close)(git_transport *transport);$/;"	m	struct:git_transport
close_algorithm_provider	src/hash/hash_win32.h	/^	hash_win32_cng_close_algorithm_provider_fn close_algorithm_provider;$/;"	m	struct:hash_cng_prov
closedir	src/win32/dir.h	39;"	d
cmd	src/transports/git.c	/^	const char *cmd;$/;"	m	struct:__anon74	file:
cmd	src/transports/smart.h	/^	char *cmd;$/;"	m	struct:git_pkt_cmd
cmd	src/transports/ssh.c	/^	const char *cmd;$/;"	m	struct:__anon76	file:
cmd_receivepack	src/transports/git.c	/^static const char cmd_receivepack[] = "git-receive-pack";$/;"	v	file:
cmd_receivepack	src/transports/ssh.c	/^static const char cmd_receivepack[] = "git-receive-pack";$/;"	v	file:
cmd_uploadpack	src/transports/git.c	/^static const char cmd_uploadpack[] = "git-upload-pack";$/;"	v	file:
cmd_uploadpack	src/transports/ssh.c	/^static const char cmd_uploadpack[] = "git-upload-pack";$/;"	v	file:
cmp	src/hashsig.c	/^	hashsig_cmp cmp;$/;"	m	struct:__anon100	file:
cmp	src/tsort.c	/^	git__sort_r_cmp cmp;$/;"	m	struct:tsort_store	file:
cmp	src/util.c	/^	git__sort_r_cmp cmp;$/;"	m	struct:__anon106	file:
cmp_ints	tests/core/pqueue.c	/^static int cmp_ints(const void *v1, const void *v2)$/;"	f	file:
cmp_objects	tests/object/raw/write.c	/^static void cmp_objects(git_rawobj *o1, git_rawobj *o2)$/;"	f	file:
cmp_objects	tests/odb/loose.c	/^static void cmp_objects(git_rawobj *o, object_data *d)$/;"	f	file:
cmp_old_ref	src/refdb_fs.c	/^static int cmp_old_ref(int *cmp, git_refdb_backend *backend, const char *name,$/;"	f	file:
cmp_recs	src/xdiff/xhistogram.c	/^static int cmp_recs(xpparam_t const *xpp,$/;"	f	file:
cng	src/hash/hash_win32.h	/^		struct hash_cng_ctx cng;$/;"	m	union:git_hash_ctx::__anon170	typeref:struct:git_hash_ctx::__anon170::hash_cng_ctx
cng	src/hash/hash_win32.h	/^		struct hash_cng_prov cng;$/;"	m	union:git_hash_prov::__anon169	typeref:struct:git_hash_prov::__anon169::hash_cng_prov
cnt	src/xdiff/xhistogram.c	/^		unsigned int ptr, cnt;$/;"	m	struct:histindex::record	file:
cnt	src/xdiff/xhistogram.c	/^	unsigned int cnt,$/;"	m	struct:histindex	file:
coalesce	src/blame_git.c	/^static void coalesce(git_blame *blame)$/;"	f	file:
code	deps/zlib/deflate.h	/^        ush  code;       \/* bit string *\/$/;"	m	union:ct_data_s::__anon202
code	deps/zlib/inftrees.h	/^} code;$/;"	t	typeref:struct:__anon200
codes	deps/zlib/inflate.h	/^    code codes[ENOUGH];         \/* space for code tables *\/$/;"	m	struct:inflate_state
codetype	deps/zlib/inftrees.h	/^} codetype;$/;"	t	typeref:enum:__anon201
coll_syms	deps/regex/regex_internal.h	/^  int32_t *coll_syms;$/;"	m	struct:__anon183
collapse	src/tsort.c	/^static ssize_t collapse(void **dst, struct tsort_run *stack, ssize_t stack_curr, struct tsort_store *store, ssize_t size)$/;"	f	file:
collect_attr_files	src/attr.c	/^static int collect_attr_files($/;"	f	file:
collect_progress	tests/checkout/conflict.c	/^static void collect_progress($/;"	f	file:
color	examples/diff.c	/^	int color;$/;"	m	struct:opts	file:
color_printer	examples/diff.c	/^static int color_printer($/;"	f	file:
colors	examples/diff.c	/^static const char *colors[] = {$/;"	v	file:
comm_max	deps/zlib/zlib.h	/^    uInt    comm_max;   \/* space at comment (only when reading header) *\/$/;"	m	struct:gz_header_s
commands	examples/network/git2.c	/^} commands[] = {$/;"	v	typeref:struct:__anon3
comment	deps/zlib/zlib.h	/^    Bytef   *comment;   \/* pointer to zero-terminated comment or Z_NULL *\/$/;"	m	struct:gz_header_s
comment	src/transports/smart.h	/^	char comment[GIT_FLEX_ARRAY];$/;"	m	struct:__anon67
comment_pkt	src/transports/smart_pkt.c	/^static int comment_pkt(git_pkt **out, const char *line, size_t len)$/;"	f	file:
commit	include/git2/commit.h	/^GIT_EXTERN(const char *) git_commit_message(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(const char *) git_commit_message_encoding(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(const char *) git_commit_message_raw(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(const char *) git_commit_raw_header(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(const char *) git_commit_summary(git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(const git_oid *) git_commit_id(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(const git_oid *) git_commit_tree_id(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(const git_signature *) git_commit_author(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(const git_signature *) git_commit_committer(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(git_repository *) git_commit_owner(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(git_time_t) git_commit_time(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(int) git_commit_time_offset(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(unsigned int) git_commit_parentcount(const git_commit *commit);$/;"	v
commit	include/git2/commit.h	/^GIT_EXTERN(void) git_commit_free(git_commit *commit);$/;"	v
commit	include/git2/odb_backend.h	/^	int (*commit)(git_odb_writepack *writepack, git_transfer_progress *stats);$/;"	m	struct:git_odb_writepack
commit	src/blame.h	/^	git_commit *commit;$/;"	m	struct:git_blame__origin
commit	src/merge.h	/^	git_commit *commit;$/;"	m	struct:git_merge_head
commit	tests/commit/parent.c	/^static git_commit *commit;$/;"	v	file:
commit	tests/commit/write.c	/^static git_commit *commit;$/;"	v	file:
commit	tests/graph/descendant_of.c	/^static git_commit *commit;$/;"	v	file:
commit	tests/odb/loose_data.h	/^static object_data commit = {$/;"	v
commit_bytes	tests/odb/loose_data.h	/^static unsigned char commit_bytes[] = {$/;"	v
commit_count	tests/revwalk/basic.c	45;"	d	file:
commit_data	tests/object/raw/data.h	/^static unsigned char commit_data[] = {$/;"	v
commit_data	tests/odb/loose_data.h	/^static unsigned char commit_data[] = {$/;"	v
commit_error	src/commit_list.c	/^static int commit_error(git_commit_list_node *commit, const char *msg)$/;"	f	file:
commit_head	tests/revwalk/basic.c	/^static const char *commit_head = "a4a7dce85cf63874e984719f4fdd239f5145052f";$/;"	v	file:
commit_head	tests/revwalk/simplify.c	/^static const char *commit_head = "a4a7dce85cf63874e984719f4fdd239f5145052f";$/;"	v	file:
commit_id	tests/object/raw/data.h	/^static char *commit_id = "3d7f8a6af076c8c3f20071a8935cdbe8228594d1";$/;"	v
commit_id	tests/refs/races.c	/^static const char *commit_id = "099fabac3a9ea935598528c27f866e34089c2eff";$/;"	v	file:
commit_ids	tests/revwalk/basic.c	/^static const char *commit_ids[] = {$/;"	v	file:
commit_index	src/stash.c	/^static int commit_index($/;"	f	file:
commit_message	tests/commit/write.c	/^static const char *commit_message = "This commit has been created in memory\\n\\$/;"	v	file:
commit_msg	tests/refs/reflog/reflog.c	10;"	d	file:
commit_obj	tests/object/raw/data.h	/^static git_rawobj commit_obj = {$/;"	v
commit_parent_data	src/commit.c	/^} commit_parent_data;$/;"	t	typeref:struct:__anon99	file:
commit_parent_for_amend	src/commit.c	/^static const git_oid *commit_parent_for_amend(size_t curr, void *payload)$/;"	f	file:
commit_parent_from_array	src/commit.c	/^static const git_oid *commit_parent_from_array(size_t curr, void *payload)$/;"	f	file:
commit_parent_from_ids	src/commit.c	/^static const git_oid *commit_parent_from_ids(size_t curr, void *payload)$/;"	f	file:
commit_parent_from_varargs	src/commit.c	/^static const git_oid *commit_parent_from_varargs(size_t curr, void *payload)$/;"	f	file:
commit_parent_oids	src/commit.c	/^} commit_parent_oids;$/;"	t	typeref:struct:__anon98	file:
commit_parent_varargs	src/commit.c	/^} commit_parent_varargs;$/;"	t	typeref:struct:__anon97	file:
commit_pool	src/revwalk.h	/^	git_pool commit_pool;$/;"	m	struct:git_revwalk
commit_quick_parse	src/commit_list.c	/^static int commit_quick_parse($/;"	f	file:
commit_sorting_segment	tests/revwalk/basic.c	/^static const int commit_sorting_segment[][6] = {$/;"	v	file:
commit_sorting_time	tests/revwalk/basic.c	/^static const int commit_sorting_time[][6] = {$/;"	v	file:
commit_sorting_time_reverse	tests/revwalk/basic.c	/^static const int commit_sorting_time_reverse[][6] = {$/;"	v	file:
commit_sorting_topo	tests/revwalk/basic.c	/^static const int commit_sorting_topo[][6] = {$/;"	v	file:
commit_sorting_topo_reverse	tests/revwalk/basic.c	/^static const int commit_sorting_topo_reverse[][6] = {$/;"	v	file:
commit_untracked	src/stash.c	/^static int commit_untracked($/;"	f	file:
commit_worktree	src/stash.c	/^static int commit_worktree($/;"	f	file:
commits	src/revwalk.h	/^	git_oidmap *commits;$/;"	m	struct:git_revwalk
commitspec	examples/blame.c	/^	char *commitspec;$/;"	m	struct:opts	file:
committer	examples/log.c	/^	char *committer;$/;"	m	struct:log_options	file:
committer	src/commit.h	/^	git_signature *committer;$/;"	m	struct:git_commit
committer	src/reflog.h	/^	git_signature *committer;$/;"	m	struct:git_reflog_entry
committer_email	tests/commit/write.c	/^static const char *committer_email = "vicent@github.com";$/;"	v	file:
committer_name	tests/commit/write.c	/^static const char *committer_name = "Vicent Marti";$/;"	v	file:
common	src/transports/smart.h	/^	git_vector common;$/;"	m	struct:__anon73
common	src/transports/smart.h	/^	int common:1,$/;"	m	struct:transport_smart_caps
compare_structs	tests/core/vector.c	/^static int compare_structs(const void *a, const void *b)$/;"	f	file:
compare_them	tests/core/vector.c	/^static int compare_them(const void *a, const void *b)$/;"	f	file:
completed_bkref_map	deps/regex/regex_internal.h	/^  bitset_word_t completed_bkref_map;$/;"	m	struct:re_dfa_t
completed_steps	examples/network/clone.c	/^	size_t completed_steps;$/;"	m	struct:progress_data	file:
completed_steps	src/checkout.c	/^	size_t completed_steps;$/;"	m	struct:__anon121	file:
completion	include/git2/remote.h	/^	int (*completion)(git_remote_completion_type type, void *data);$/;"	m	struct:git_remote_callbacks
compress	include/git2/sys/refdb_backend.h	/^	int (*compress)(git_refdb_backend *backend);$/;"	m	struct:git_refdb_backend
compress_block	deps/zlib/trees.c	/^local void compress_block(s, ltree, dtree)$/;"	f
compress_func	deps/zlib/deflate.c	/^typedef block_state (*compress_func) OF((deflate_state *s, int flush));$/;"	t	file:
compress_input_various_ways	tests/core/zstream.c	/^static void compress_input_various_ways(git_buf *input)$/;"	f	file:
compressed_len	deps/zlib/deflate.h	/^    ulg compressed_len; \/* total bit length of compressed file mod 2^32 *\/$/;"	m	struct:internal_state
compute_digest	src/filebuf.h	/^	bool compute_digest;$/;"	m	struct:git_filebuf
compute_minrun	src/tsort.c	/^static size_t compute_minrun(size_t n)$/;"	f	file:
compute_write_order	src/pack-objects.c	/^static git_pobject **compute_write_order(git_packbuilder *pb)$/;"	f	file:
cond	src/pack-objects.c	/^	git_cond cond;$/;"	m	struct:thread_params	file:
config	deps/zlib/deflate.c	/^} config;$/;"	t	typeref:struct:config_s	file:
config	src/config.c	/^	git_config *config;$/;"	m	struct:rename_data	file:
config	src/diff_xdiff.h	/^	xdemitconf_t config;$/;"	m	struct:__anon103
config	src/remote.c	/^	git_config *config;$/;"	m	struct:update_data	file:
config_backend_cmp	src/config.c	/^static int config_backend_cmp(const void *a, const void *b)$/;"	f	file:
config_delete	src/config_file.c	/^static int config_delete(git_config_backend *cfg, const char *name)$/;"	f	file:
config_delete_multivar	src/config_file.c	/^static int config_delete_multivar(git_config_backend *cfg, const char *name, const char *regexp)$/;"	f	file:
config_error_nofiles	src/config.c	/^static int config_error_nofiles(const char *name)$/;"	f	file:
config_error_notfound	src/config.c	/^static int config_error_notfound(const char *name)$/;"	f	file:
config_free	src/config.c	/^static void config_free(git_config *cfg)$/;"	f	file:
config_get	src/config_file.c	/^static int config_get(const git_config_backend *cfg, const char *key, const git_config_entry **out)$/;"	f	file:
config_get	src/pack-objects.c	110;"	d	file:
config_get	src/pack-objects.c	96;"	d	file:
config_iterator_free	src/config_file.c	/^static void config_iterator_free($/;"	f	file:
config_iterator_new	src/config_file.c	/^static int config_iterator_new($/;"	f	file:
config_iterator_next	src/config_file.c	/^static int config_iterator_next($/;"	f	file:
config_keychar	src/config_file.c	/^GIT_INLINE(int) config_keychar(int c)$/;"	f
config_level_to_sysdir	src/settings.c	/^static int config_level_to_sysdir(int config_level)$/;"	f	file:
config_open	src/config_file.c	/^static int config_open(git_config_backend *cfg, git_config_level_t level)$/;"	f	file:
config_parse	src/config_file.c	/^static int config_parse(diskfile_backend *cfg_file, struct reader *reader, git_config_level_t level, int depth)$/;"	f	file:
config_refresh	src/config_file.c	/^static int config_refresh(git_config_backend *cfg)$/;"	f	file:
config_s	deps/zlib/deflate.c	/^typedef struct config_s {$/;"	s	file:
config_set	src/config_file.c	/^static int config_set(git_config_backend *cfg, const char *name, const char *value)$/;"	f	file:
config_set_multivar	src/config_file.c	/^static int config_set_multivar($/;"	f	file:
config_write	src/config_file.c	/^static int config_write(diskfile_backend *cfg, const char *key, const regex_t *preg, const char* value)$/;"	f	file:
configuration_table	deps/zlib/deflate.c	/^local const config configuration_table[10] = {$/;"	v
configuration_table	deps/zlib/deflate.c	/^local const config configuration_table[2] = {$/;"	v
confirm_submodule_status	tests/submodule/status.c	/^static int confirm_submodule_status($/;"	f	file:
conflict_entry_name	src/checkout.c	/^static int conflict_entry_name($/;"	f	file:
conflict_name_cmp	src/index.c	/^static int conflict_name_cmp(const void *a, const void *b)$/;"	f	file:
conflicts	src/checkout.c	/^	git_vector conflicts;$/;"	m	struct:__anon121	file:
conflicts	src/merge.h	/^	git_vector conflicts;$/;"	m	struct:__anon143
conflicts	tests/checkout/typechange.c	/^	int conflicts;$/;"	m	struct:__anon5	file:
conndata	tests/network/urlparse.c	/^static gitno_connection_data conndata;$/;"	v	file:
connect	include/git2/transport.h	/^	int (*connect)($/;"	m	struct:git_transport
connect_to_local_repository	tests/network/remote/local.c	/^static void connect_to_local_repository(const char *local_repository)$/;"	f	file:
connected	src/transports/http.c	/^	bool connected;$/;"	m	struct:__anon81	file:
connected	src/transports/local.c	/^	unsigned connected : 1,$/;"	m	struct:__anon78	file:
connected	src/transports/smart.h	/^		connected : 1;$/;"	m	struct:__anon73
connection	src/transports/winhttp.c	/^	HINTERNET connection;$/;"	m	struct:__anon63	file:
connection_data	src/transports/http.c	/^	gitno_connection_data connection_data;$/;"	m	struct:__anon81	file:
connection_data	src/transports/winhttp.c	/^	gitno_connection_data connection_data;$/;"	m	struct:__anon63	file:
considered	src/hashsig.c	/^	int considered;$/;"	m	struct:git_hashsig	file:
constraint	deps/regex/regex_internal.h	/^  unsigned int constraint : 10;	\/* context constraint *\/$/;"	m	struct:__anon184
contains_angle_brackets	src/signature.c	/^static bool contains_angle_brackets(const char *input)$/;"	f	file:
contains_branches	tests/refs/branches/iterator.c	/^static void contains_branches(struct expectations exp[], git_branch_iterator *iter)$/;"	f	file:
content	include/git2/diff.h	/^	const char *content; \/** Pointer to diff text, not NUL-byte terminated *\/$/;"	m	struct:git_diff_line
content	src/repo_template.h	/^	const char *content;$/;"	m	struct:__anon145
content	tests/core/vector.c	/^	int content;$/;"	m	struct:__anon26	file:
content_len	include/git2/diff.h	/^	size_t content_len;  \/** Number of bytes of data *\/$/;"	m	struct:git_diff_line
content_length	deps/http-parser/http_parser.h	/^  uint64_t content_length; \/* # bytes in body (0 if no Content-Length header) *\/$/;"	m	struct:http_parser
content_offset	include/git2/diff.h	/^	git_off_t content_offset; \/** Offset in the original file to the content *\/$/;"	m	struct:git_diff_line
content_size	src/diff_patch.c	/^	size_t content_size, context_size, header_size;$/;"	m	struct:git_patch	file:
content_type	src/transports/http.c	/^	char *content_type;$/;"	m	struct:__anon81	file:
contents	src/vector.h	/^	void **contents;$/;"	m	struct:git_vector
context	deps/regex/regex_internal.h	/^  unsigned int context : 4;$/;"	m	struct:re_dfastate_t
context_lines	include/git2/diff.h	/^	uint16_t    context_lines;    \/**< defaults to 3 *\/$/;"	m	struct:__anon268
context_size	src/diff_patch.c	/^	size_t content_size, context_size, header_size;$/;"	m	struct:git_patch	file:
copy_block	deps/zlib/trees.c	/^local void copy_block(s, buf, len, header)$/;"	f
copy_file	tests/index/tests.c	/^static void copy_file(const char *src, const char *dst)$/;"	f	file:
copy_refspecs	src/remote.c	/^static int copy_refspecs(git_strarray *array, const git_remote *remote, unsigned int push)$/;"	f	file:
copy_threshold	include/git2/diff.h	/^	uint16_t copy_threshold;$/;"	m	struct:__anon272
count	include/git2/strarray.h	/^	size_t count;$/;"	m	struct:git_strarray
count	src/status.c	/^	unsigned int count;$/;"	m	struct:status_file_info	file:
count	src/xdiff/xprepare.c	/^	long count;$/;"	m	struct:s_xdlclassifier	file:
count	tests/checkout/tree.c	/^	int count;$/;"	m	struct:checkout_cancel_at	file:
count	tests/core/dirent.c	/^	int count; \/* return count *\/$/;"	m	struct:name_data	file:
count	tests/core/vector.c	/^	int count;$/;"	m	struct:__anon26	file:
count	tests/status/status_helpers.h	/^	int count;$/;"	m	struct:__anon30
count	tests/submodule/lookup.c	/^	int count;$/;"	m	struct:__anon11	file:
count_attrs	tests/attr/repo.c	/^static int count_attrs($/;"	f	file:
count_cb	tests/refs/foreachglob.c	/^static int count_cb(const char *reference_name, void *payload)$/;"	f	file:
count_cfg_entries	tests/config/read.c	/^static int count_cfg_entries(const git_config_entry *entry, void *payload)$/;"	f	file:
count_cfg_entries_and_compare_levels	tests/config/read.c	/^static int count_cfg_entries_and_compare_levels($/;"	f	file:
count_run	src/tsort.c	/^static ssize_t count_run($/;"	f	file:
counter	tests/online/fetch.c	/^static int counter;$/;"	v	file:
counter	tests/submodule/status.c	/^	size_t counter;$/;"	m	struct:__anon10	file:
cp_by_fd	src/fileops.c	/^static int cp_by_fd(int ifd, int ofd, bool close_fd_when_done)$/;"	f	file:
cp_link	src/fileops.c	/^static int cp_link(const char *from, const char *to, size_t link_size)$/;"	f	file:
cp_r_info	src/fileops.c	/^} cp_r_info;$/;"	t	typeref:struct:__anon37	file:
cpy	include/git2/errors.h	/^GIT_EXTERN(int) giterr_detach(git_error *cpy);$/;"	v
cr	src/buf_text.h	/^	unsigned int nul, cr, lf, crlf; \/* NUL, CR, LF and CRLF counts *\/$/;"	m	struct:__anon139
crc	src/indexer.c	/^	uint32_t crc;$/;"	m	struct:entry	file:
crc32	deps/zlib/crc32.c	/^unsigned long ZEXPORT crc32(crc, buf, len)$/;"	f
crc32_big	deps/zlib/crc32.c	/^local unsigned long crc32_big(crc, buf, len)$/;"	f
crc32_combine	deps/zlib/crc32.c	/^uLong ZEXPORT crc32_combine(crc1, crc2, len2)$/;"	f
crc32_combine	deps/zlib/zlib.h	1580;"	d
crc32_combine64	deps/zlib/crc32.c	/^uLong ZEXPORT crc32_combine64(crc1, crc2, len2)$/;"	f
crc32_combine_	deps/zlib/crc32.c	/^local uLong crc32_combine_(crc1, crc2, len2)$/;"	f
crc32_little	deps/zlib/crc32.c	/^local unsigned long crc32_little(crc, buf, len)$/;"	f
crc_object	src/indexer.c	/^static int crc_object(uint32_t *crc_out, git_mwindow_file *mwf, git_off_t start, git_off_t size)$/;"	f	file:
crc_table	deps/zlib/crc32.c	/^local unsigned long FAR crc_table[TBLS][256];$/;"	v
crc_table	deps/zlib/crc32.h	/^local const unsigned long FAR crc_table[TBLS][256] =$/;"	v
crc_table_empty	deps/zlib/crc32.c	/^local volatile int crc_table_empty = 1;$/;"	v
create_and_configure_origin	src/clone.c	/^static int create_and_configure_origin($/;"	f	file:
create_annotation	tests/object/tag/write.c	/^void create_annotation(git_oid *tag_id, const char *name)$/;"	f
create_bitflip_filter	tests/filter/custom.c	/^static git_filter *create_bitflip_filter(void)$/;"	f	file:
create_branch	src/clone.c	/^static int create_branch($/;"	f	file:
create_cd_newstate	deps/regex/regex_internal.c	/^create_cd_newstate (const re_dfa_t *dfa, const re_node_set *nodes,$/;"	f	file:
create_ci_newstate	deps/regex/regex_internal.c	/^create_ci_newstate (const re_dfa_t *dfa, const re_node_set *nodes,$/;"	f	file:
create_conflict	tests/checkout/tree.c	/^static void create_conflict(void)$/;"	f	file:
create_conflicting_index	tests/checkout/conflict.c	/^static void create_conflicting_index(void)$/;"	f	file:
create_deletion_refspecs	tests/online/push_util.c	/^int create_deletion_refspecs(git_vector *out, const git_remote_head **heads, size_t heads_len)$/;"	f
create_empty_file	src/repository.c	/^static int create_empty_file(const char *path, mode_t mode)$/;"	f	file:
create_error	src/stash.c	/^static int create_error(int error, const char *msg)$/;"	f	file:
create_fake_stash_reference_and_reflog	tests/refs/revparse.c	/^static void create_fake_stash_reference_and_reflog(git_repository *repo)$/;"	f	file:
create_hash	src/hash/hash_win32.h	/^	hash_win32_cng_create_hash_fn create_hash;$/;"	m	struct:hash_cng_prov
create_index	tests/checkout/conflict.c	/^static void create_index(struct checkout_index_entry *entries, size_t entries_len)$/;"	f	file:
create_index_error	src/index.c	/^static int create_index_error(int error, const char *msg)$/;"	f	file:
create_index_names	tests/checkout/conflict.c	/^static void create_index_names(struct checkout_name_entry *entries, size_t entries_len)$/;"	f	file:
create_initial_commit	examples/init.c	/^static void create_initial_commit(git_repository *repo)$/;"	f	file:
create_initial_state	deps/regex/regcomp.c	/^create_initial_state (re_dfa_t *dfa)$/;"	f	file:
create_internal	src/remote.c	/^static int create_internal(git_remote **out, git_repository *repo, const char *name, const char *url, const char *fetch)$/;"	f	file:
create_name_extension_data	src/index.c	/^static int create_name_extension_data(git_buf *name_buf, git_index_name_entry *conflict_name)$/;"	f	file:
create_new_reflog_file	src/refdb_fs.c	/^static int create_new_reflog_file(const char *filepath)$/;"	f	file:
create_note	tests/notes/notes.c	/^static void create_note(git_oid *note_oid, const char *canonical_namespace, const char *target_sha, const char *message)$/;"	f	file:
create_refs	tests/threads/refdb.c	/^static void *create_refs(void *arg)$/;"	f	file:
create_remote_tracking_branch	tests/merge/workdir/setup.c	/^static int create_remote_tracking_branch(const char *branch_name, const char *oid_str)$/;"	f	file:
create_reuc_extension_data	src/index.c	/^static int create_reuc_extension_data(git_buf *reuc_buf, git_index_reuc_entry *reuc)$/;"	f	file:
create_reverse_filter	tests/filter/custom.c	/^static git_filter *create_reverse_filter(const char *attrs)$/;"	f	file:
create_token_tree	deps/regex/regcomp.c	/^create_token_tree (re_dfa_t *dfa, bin_tree_t *left, bin_tree_t *right,$/;"	f	file:
create_tracking_branch	src/clone.c	/^static int create_tracking_branch($/;"	f	file:
create_tree	deps/regex/regcomp.c	/^create_tree (re_dfa_t *dfa, bin_tree_t *left, bin_tree_t *right,$/;"	f	file:
cred	include/git2/transport.h	/^GIT_EXTERN(int) git_cred_has_username(git_cred *cred);$/;"	v
cred	src/transports/http.c	/^	git_cred *cred;$/;"	m	struct:__anon81	file:
cred	src/transports/ssh.c	/^	git_cred *cred;$/;"	m	struct:__anon77	file:
cred	src/transports/winhttp.c	/^	git_cred *cred;$/;"	m	struct:__anon63	file:
cred_acquire_cb	examples/network/common.c	/^int cred_acquire_cb(git_cred **out,$/;"	f
cred_acquire_cb	src/transports/smart.h	/^	git_cred_acquire_cb cred_acquire_cb;$/;"	m	struct:__anon73
cred_acquire_cb	tests/online/push.c	/^static int cred_acquire_cb($/;"	f	file:
cred_acquire_payload	src/transports/smart.h	/^	void *cred_acquire_payload;$/;"	m	struct:__anon73
cred_failure_cb	tests/online/clone.c	/^static int cred_failure_cb($/;"	f	file:
credentials	include/git2/remote.h	/^	int (*credentials)(git_cred **cred, const char *url, const char *username_from_url, unsigned int allowed_types,	void *data);$/;"	m	struct:git_remote_callbacks
credtype	include/git2/transport.h	/^	git_credtype_t credtype;$/;"	m	struct:git_cred
crlf	src/buf_text.h	/^	unsigned int nul, cr, lf, crlf; \/* NUL, CR, LF and CRLF counts *\/$/;"	m	struct:__anon139
crlf_action	src/crlf.c	/^	int crlf_action;$/;"	m	struct:crlf_attrs	file:
crlf_apply	src/crlf.c	/^static int crlf_apply($/;"	f	file:
crlf_apply_to_odb	src/crlf.c	/^static int crlf_apply_to_odb($/;"	f	file:
crlf_apply_to_workdir	src/crlf.c	/^static int crlf_apply_to_workdir($/;"	f	file:
crlf_attrs	src/crlf.c	/^struct crlf_attrs {$/;"	s	file:
crlf_check	src/crlf.c	/^static int crlf_check($/;"	f	file:
crlf_cleanup	src/crlf.c	/^static void crlf_cleanup($/;"	f	file:
crlf_filter	src/crlf.c	/^struct crlf_filter {$/;"	s	file:
crlf_input_action	src/crlf.c	/^static int crlf_input_action(struct crlf_attrs *ca)$/;"	f	file:
cryptoapi	src/hash/hash_win32.h	/^		struct hash_cryptoapi_ctx cryptoapi;$/;"	m	union:git_hash_ctx::__anon170	typeref:struct:git_hash_ctx::__anon170::hash_cryptoapi_ctx
cryptoapi	src/hash/hash_win32.h	/^		struct hash_cryptoapi_prov cryptoapi;$/;"	m	union:git_hash_prov::__anon169	typeref:struct:git_hash_prov::__anon169::hash_cryptoapi_prov
csec	src/win32/pthread.h	/^		CRITICAL_SECTION csec;$/;"	m	union:__anon166::__anon167
ct_data	deps/zlib/deflate.h	/^} FAR ct_data;$/;"	t	typeref:struct:ct_data_s
ct_data_s	deps/zlib/deflate.h	/^typedef struct ct_data_s {$/;"	s
ctime	include/git2/index.h	/^	git_index_time ctime;$/;"	m	struct:git_index_entry
ctime	src/index.c	/^	struct entry_time ctime;$/;"	m	struct:entry_long	typeref:struct:entry_long::entry_time	file:
ctime	src/index.c	/^	struct entry_time ctime;$/;"	m	struct:entry_short	typeref:struct:entry_short::entry_time	file:
ctx	src/hash/hash_win32.h	/^	} ctx;$/;"	m	struct:git_hash_ctx	typeref:union:git_hash_ctx::__anon170
ctx	src/netops.h	/^	SSL_CTX *ctx;$/;"	m	struct:gitno_ssl
ctx	src/pack-objects.h	/^	git_hash_ctx ctx;$/;"	m	struct:git_packbuilder
ctx_type	deps/regex/regex_internal.h	/^    re_context_type ctx_type;	\/* for ANCHOR *\/$/;"	m	union:__anon184::__anon185
ctxlen	src/xdiff/xdiff.h	/^	long ctxlen;$/;"	m	struct:s_xdemitconf
cur	src/index.h	/^	size_t cur;$/;"	m	struct:git_index_conflict_iterator
cur_idx	deps/regex/regex_internal.h	/^  int cur_idx;$/;"	m	struct:re_string_t
cur_state	deps/regex/regex_internal.h	/^  mbstate_t cur_state;$/;"	m	struct:re_string_t
curpos	src/pack.h	/^	git_off_t curpos;$/;"	m	struct:git_packfile_stream
current	src/config.c	/^	git_config_iterator *current;$/;"	m	struct:__anon94	file:
current	src/iterator.c	/^	size_t current;   \/* start of currently active range in frame *\/$/;"	m	struct:tree_iterator_frame	file:
current	src/iterator.c	/^	size_t current;$/;"	m	struct:__anon85	file:
current	src/iterator.h	/^	int (*current)(const git_index_entry **, git_iterator *);$/;"	m	struct:__anon112
current_diff_line	src/blame.h	/^	size_t current_diff_line;$/;"	m	struct:git_blame
current_head_target	tests/refs/create.c	/^static const char *current_head_target = "refs\/heads\/master";$/;"	v	file:
current_head_target	tests/refs/read.c	/^static const char *current_head_target = "refs\/heads\/master";$/;"	v	file:
current_hunk	src/blame.h	/^	git_blame_hunk *current_hunk;$/;"	m	struct:git_blame
current_master_tip	tests/refs/create.c	/^static const char *current_master_tip = "099fabac3a9ea935598528c27f866e34089c2eff";$/;"	v	file:
current_master_tip	tests/refs/createwithlog.c	/^static const char *current_master_tip = "a65fedf39aefe402d3bb6e24df4d4f5fe4547750";$/;"	v	file:
current_master_tip	tests/refs/delete.c	/^static const char *current_master_tip = "a65fedf39aefe402d3bb6e24df4d4f5fe4547750";$/;"	v	file:
current_master_tip	tests/refs/read.c	/^static const char *current_master_tip = "a65fedf39aefe402d3bb6e24df4d4f5fe4547750";$/;"	v	file:
current_master_tip	tests/refs/reflog/reflog.c	/^static const char *current_master_tip = "a65fedf39aefe402d3bb6e24df4d4f5fe4547750";$/;"	v	file:
current_stream	src/transports/git.c	/^	git_stream *current_stream;$/;"	m	struct:__anon75	file:
current_stream	src/transports/smart.h	/^	git_smart_subtransport_stream *current_stream;$/;"	m	struct:__anon73
current_stream	src/transports/ssh.c	/^	ssh_stream *current_stream;$/;"	m	struct:__anon77	file:
cvar_cache	src/repository.h	/^	git_cvar_value cvar_cache[GIT_CVAR_CACHE_MAX];$/;"	m	struct:git_repository
cvar_free	src/config_file.c	/^static void cvar_free(cvar_t *var)$/;"	f	file:
cvar_length	src/config_file.c	/^static int cvar_length(cvar_t *var)$/;"	f	file:
cvar_name	src/config_cache.c	/^	const char *cvar_name;$/;"	m	struct:map_data	file:
cvar_t	src/config_file.c	/^typedef struct cvar_t {$/;"	s	file:
cvar_t	src/config_file.c	/^} cvar_t;$/;"	t	typeref:struct:cvar_t	file:
cvar_type	include/git2/config.h	/^	git_cvar_t cvar_type;$/;"	m	struct:__anon220
d	tests/diff/blob.c	/^static git_blob *d, *alien;$/;"	v	file:
d_buf	deps/zlib/deflate.h	/^    ushf *d_buf;$/;"	m	struct:internal_state
d_code	deps/zlib/deflate.h	301;"	d
d_desc	deps/zlib/deflate.h	/^    struct tree_desc_s d_desc;               \/* desc. for distance tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s
d_ino	src/win32/dir.h	/^	int d_ino;$/;"	m	struct:git__dirent
d_name	src/win32/dir.h	/^	git_win32_path_as_utf8 d_name;$/;"	m	struct:git__dirent
dad	deps/zlib/deflate.h	/^        ush  dad;        \/* father node in Huffman tree *\/$/;"	m	union:ct_data_s::__anon203
data	deps/http-parser/http_parser.h	/^  void *data; \/* A pointer to get hook to the "connection" or "socket" object *\/$/;"	m	struct:http_parser
data	deps/regex/regex_internal.h	/^  bin_tree_t data[BIN_TREE_STORAGE_SIZE];$/;"	m	struct:bin_tree_storage_t
data	src/diff_tform.c	/^	git_buf data;$/;"	m	struct:__anon115	file:
data	src/hash.h	/^	void *data;$/;"	m	struct:__anon119
data	src/map.h	/^	void *data; \/* data bytes			*\/$/;"	m	struct:__anon140
data	src/merge_file.h	/^	unsigned char *data;$/;"	m	struct:__anon56
data	src/netops.h	/^	char *data;$/;"	m	struct:gitno_buffer
data	src/odb.h	/^	void *data;			\/**< Raw, decompressed object data. *\/$/;"	m	struct:__anon38
data	src/odb_loose.c	/^	void *data;$/;"	m	struct:foreach_state	file:
data	src/pack-objects.c	/^	void *data;$/;"	m	struct:unpacked	file:
data	src/pool.c	/^	char data[GIT_FLEX_ARRAY];$/;"	m	struct:git_pool_page	file:
data	src/transports/smart.h	/^	char data[GIT_FLEX_ARRAY];$/;"	m	struct:__anon68
data	tests/core/zstream.c	/^static const char *data = "This is a test test test of This is a test";$/;"	v	file:
data	tests/odb/loose_data.h	/^    unsigned char *data;   \/* (uncompressed) object data                *\/$/;"	m	struct:object_data
data	tests/stash/foreach.c	/^struct callback_data data;$/;"	v	typeref:struct:callback_data
data_cb	src/diff_patch.h	/^	git_diff_line_cb data_cb;$/;"	m	struct:git_diff_output
data_pkt	src/transports/smart_pkt.c	/^static int data_pkt(git_pkt **out, const char *line, size_t len)$/;"	f	file:
data_ready	src/pack-objects.c	/^	int data_ready;$/;"	m	struct:thread_params	file:
data_type	deps/zlib/zlib.h	/^    int     data_type;  \/* best guess about the data type: binary or text *\/$/;"	m	struct:z_stream_s
datatype	src/pathspec.h	/^	int datatype;$/;"	m	struct:git_pathspec_match_list
date_am	src/date.c	/^static void date_am(struct tm *tm, struct tm *now, int *num)$/;"	f	file:
date_midnight	src/date.c	/^static void date_midnight(struct tm *tm, struct tm *now, int *num)$/;"	f	file:
date_mode	src/date.c	/^} date_mode;$/;"	t	typeref:enum:__anon104	file:
date_never	src/date.c	/^static void date_never(struct tm *tm, struct tm *now, int *num)$/;"	f	file:
date_noon	src/date.c	/^static void date_noon(struct tm *tm, struct tm *now, int *num)$/;"	f	file:
date_now	src/date.c	/^static void date_now(struct tm *tm, struct tm *now, int *num)$/;"	f	file:
date_pm	src/date.c	/^static void date_pm(struct tm *tm, struct tm *now, int *num)$/;"	f	file:
date_tea	src/date.c	/^static void date_tea(struct tm *tm, struct tm *now, int *num)$/;"	f	file:
date_time	src/date.c	/^static void date_time(struct tm *tm, struct tm *now, int hour)$/;"	f	file:
date_yesterday	src/date.c	/^static void date_yesterday(struct tm *tm, struct tm *now, int *num)$/;"	f	file:
db	include/git2/odb.h	/^GIT_EXTERN(void) git_odb_free(git_odb *db);$/;"	v
db	include/git2/sys/refdb_backend.h	/^	git_refdb *db;$/;"	m	struct:git_reference_iterator
db	src/reflog.h	/^	git_refdb *db;$/;"	m	struct:git_reflog
db	src/refs.h	/^	git_refdb *db;$/;"	m	struct:git_reference
debug	tests/checkout/checkout_helpers.h	/^	int debug;$/;"	m	struct:__anon6
debug	tests/diff/diff_helpers.h	/^	int debug;$/;"	m	struct:__anon8
debug	tests/status/status_helpers.h	/^	bool debug;$/;"	m	struct:__anon29
debug	tests/status/status_helpers.h	/^	bool debug;$/;"	m	struct:__anon30
declared_size	include/git2/odb_backend.h	/^	size_t declared_size;$/;"	m	struct:git_odb_stream
decref_split	src/blame_git.c	/^static void decref_split(git_blame__entry *split)$/;"	f	file:
def_ff	src/xdiff/xemit.c	/^static long def_ff(const char *rec, long len, char *buf, long sz, void *priv)$/;"	f	file:
default_free	src/transports/cred.c	/^static void default_free(struct git_cred *cred)$/;"	f	file:
default_swab16	src/bswap.h	/^GIT_INLINE(uint16_t) default_swab16(uint16_t val)$/;"	f
default_swab32	src/bswap.h	/^GIT_INLINE(uint32_t) default_swab32(uint32_t val)$/;"	f
default_value	src/config_cache.c	/^	int default_value;$/;"	m	struct:map_data	file:
deflate	deps/zlib/deflate.c	/^int ZEXPORT deflate (strm, flush)$/;"	f
deflateBound	deps/zlib/deflate.c	/^uLong ZEXPORT deflateBound(strm, sourceLen)$/;"	f
deflateCopy	deps/zlib/deflate.c	/^int ZEXPORT deflateCopy (dest, source)$/;"	f
deflateEnd	deps/zlib/deflate.c	/^int ZEXPORT deflateEnd (strm)$/;"	f
deflateInit	deps/zlib/zlib.h	1546;"	d
deflateInit2	deps/zlib/zlib.h	1550;"	d
deflateInit2_	deps/zlib/deflate.c	/^int ZEXPORT deflateInit2_(strm, level, method, windowBits, memLevel, strategy,$/;"	f
deflateInit_	deps/zlib/deflate.c	/^int ZEXPORT deflateInit_(strm, level, version, stream_size)$/;"	f
deflateParams	deps/zlib/deflate.c	/^int ZEXPORT deflateParams(strm, level, strategy)$/;"	f
deflatePrime	deps/zlib/deflate.c	/^int ZEXPORT deflatePrime (strm, bits, value)$/;"	f
deflateReset	deps/zlib/deflate.c	/^int ZEXPORT deflateReset (strm)$/;"	f
deflateSetDictionary	deps/zlib/deflate.c	/^int ZEXPORT deflateSetDictionary (strm, dictionary, dictLength)$/;"	f
deflateSetHeader	deps/zlib/deflate.c	/^int ZEXPORT deflateSetHeader (strm, head)$/;"	f
deflateTune	deps/zlib/deflate.c	/^int ZEXPORT deflateTune(strm, good_length, max_lazy, nice_length, max_chain)$/;"	f
deflate_copyright	deps/zlib/deflate.c	/^const char deflate_copyright[] =$/;"	v
deflate_fast	deps/zlib/deflate.c	/^local block_state deflate_fast(s, flush)$/;"	f
deflate_huff	deps/zlib/deflate.c	/^local block_state deflate_huff(s, flush)$/;"	f
deflate_rle	deps/zlib/deflate.c	/^local block_state deflate_rle(s, flush)$/;"	f
deflate_slow	deps/zlib/deflate.c	/^local block_state deflate_slow(s, flush)$/;"	f
deflate_state	deps/zlib/deflate.h	/^} FAR deflate_state;$/;"	t	typeref:struct:internal_state
deflate_stored	deps/zlib/deflate.c	/^local block_state deflate_stored(s, flush)$/;"	f
del	include/git2/sys/config.h	/^	int (*del)(struct git_config_backend *, const char *key);$/;"	m	struct:git_config_backend
del	include/git2/sys/refdb_backend.h	/^	int (*del)(git_refdb_backend *backend, const char *ref_name, const git_oid *old_id, const char *old_target);$/;"	m	struct:git_refdb_backend
del_multivar	include/git2/sys/config.h	/^	int (*del_multivar)(struct git_config_backend *, const char *key, const char *regexp);$/;"	m	struct:git_config_backend
delete_head	tests/repo/repo_helpers.c	/^void delete_head(git_repository* repo)$/;"	f
delete_one_config	tests/submodule/modify.c	/^static int delete_one_config(const git_config_entry *entry, void *payload)$/;"	f	file:
delete_refs	src/transports/smart.h	/^		delete_refs:1,$/;"	m	struct:transport_smart_caps
delete_refs	tests/threads/refdb.c	/^static void *delete_refs(void *arg)$/;"	f	file:
delta	src/diff_patch.c	/^	git_diff_delta *delta;$/;"	m	struct:git_patch	file:
delta	src/diff_patch.c	/^	git_diff_delta delta;$/;"	m	struct:__anon150	file:
delta	src/pack-objects.h	/^	struct git_pobject *delta; \/* delta base object *\/$/;"	m	struct:git_pobject	typeref:struct:git_pobject::git_pobject
delta_cache_size	src/pack-objects.h	/^	uint64_t delta_cache_size;$/;"	m	struct:git_packbuilder
delta_cacheable	src/pack-objects.c	/^static int delta_cacheable(git_packbuilder *pb, unsigned long src_size,$/;"	f	file:
delta_child	src/pack-objects.h	/^	struct git_pobject *delta_child; \/* deltified objects who bases me *\/$/;"	m	struct:git_pobject	typeref:struct:git_pobject::git_pobject
delta_data	src/pack-objects.h	/^	void *delta_data;$/;"	m	struct:git_pobject
delta_index	src/diff_patch.c	/^	size_t delta_index;$/;"	m	struct:git_patch	file:
delta_info	src/indexer.c	/^struct delta_info {$/;"	s	file:
delta_make_rename	src/diff_tform.c	/^GIT_INLINE(void) delta_make_rename($/;"	f
delta_off	src/indexer.c	/^	git_off_t delta_off;$/;"	m	struct:delta_info	file:
delta_sibling	src/pack-objects.h	/^	struct git_pobject *delta_sibling; \/* other deltified objects$/;"	m	struct:git_pobject	typeref:struct:git_pobject::git_pobject
delta_size	src/pack-objects.h	/^	unsigned long delta_size;$/;"	m	struct:git_pobject
deltas	src/diff.h	/^	git_vector       deltas;    \/* vector of git_diff_delta *\/$/;"	m	struct:git_diff
deltas	src/indexer.c	/^	git_vector deltas;$/;"	m	struct:git_indexer	file:
dend	src/xdiff/xtypes.h	/^	long dstart, dend;$/;"	m	struct:s_xdfile
depth	deps/zlib/deflate.h	/^    uch depth[2*L_CODES+1];$/;"	m	struct:internal_state
depth	src/fileops.c	/^	int depth;$/;"	m	struct:__anon36	file:
depth	src/iterator.c	/^	int depth;$/;"	m	struct:fs_iterator	file:
depth	src/pack-objects.c	/^	int depth;$/;"	m	struct:thread_params	file:
depth	src/pack-objects.c	/^	int depth;$/;"	m	struct:unpacked	file:
dereference_object	src/object.c	/^static int dereference_object(git_object **dereferenced, git_object *obj)$/;"	f	file:
dereference_to_non_tag	src/revparse.c	/^static int dereference_to_non_tag(git_object **out, git_object *obj)$/;"	f	file:
description	deps/http-parser/http_parser.c	/^  const char *description;$/;"	m	struct:__anon197	file:
description	include/git2/repository.h	/^	const char *description;$/;"	m	struct:__anon212
description	tests/clar.c	/^	char *description;$/;"	m	struct:clar_error	file:
destpath	tests/odb/alternates.c	/^static git_buf destpath, filepath;$/;"	v	file:
destroy_hash	src/hash/hash_win32.h	/^	hash_win32_cng_destroy_hash_fn destroy_hash;$/;"	m	struct:hash_cng_prov
detect_data_type	deps/zlib/trees.c	/^local int detect_data_type(s)$/;"	f
dev	include/git2/index.h	/^	unsigned int dev;$/;"	m	struct:git_index_entry
dev	src/index.c	/^	uint32_t dev;$/;"	m	struct:entry_long	file:
dev	src/index.c	/^	uint32_t dev;$/;"	m	struct:entry_short	file:
df_path	src/merge.c	/^	const char *df_path;$/;"	m	struct:merge_diff_df_data	file:
dfa	deps/regex/regex_internal.h	/^  const re_dfa_t *const dfa;$/;"	m	struct:__anon189
dfa	deps/regex/regex_internal.h	/^  const re_dfa_t *dfa;$/;"	m	struct:__anon189
diff	include/git2/diff.h	/^GIT_EXTERN(int) git_diff_is_sorted_icase(const git_diff *diff);$/;"	v
diff	include/git2/diff.h	/^GIT_EXTERN(size_t) git_diff_num_deltas(const git_diff *diff);$/;"	v
diff	include/git2/diff.h	/^GIT_EXTERN(void) git_diff_free(git_diff *diff);$/;"	v
diff	src/checkout.c	/^	git_diff *diff;$/;"	m	struct:__anon121	file:
diff	src/diff_patch.c	/^	git_diff *diff; \/* for refcount purposes, maybe NULL for blob diffs *\/$/;"	m	struct:git_patch	file:
diff	src/diff_print.c	/^	git_diff *diff;$/;"	m	struct:__anon123	file:
diff	tests/diff/tree.c	/^static git_diff *diff;$/;"	v	file:
diff_cb	src/diff_patch.h	/^	int (*diff_cb)(git_diff_output *output, git_patch *patch);$/;"	m	struct:git_diff_output
diff_context_find	src/diff_driver.c	/^static long diff_context_find($/;"	f	file:
diff_context_line__pattern_match	src/diff_driver.c	/^static int diff_context_line__pattern_match($/;"	f	file:
diff_context_line__simple	src/diff_driver.c	/^static int diff_context_line__simple($/;"	f	file:
diff_delta__alloc	src/diff.c	/^static git_diff_delta *diff_delta__alloc($/;"	f	file:
diff_delta__dup	src/diff_tform.c	/^static git_diff_delta *diff_delta__dup($/;"	f	file:
diff_delta__from_one	src/diff.c	/^static int diff_delta__from_one($/;"	f	file:
diff_delta__from_two	src/diff.c	/^static int diff_delta__from_two($/;"	f	file:
diff_delta__i2w_path	src/diff.c	/^GIT_INLINE(const char *) diff_delta__i2w_path(const git_diff_delta *delta)$/;"	f
diff_delta__last_for_item	src/diff.c	/^static git_diff_delta *diff_delta__last_for_item($/;"	f	file:
diff_delta__merge_like_cgit	src/diff_tform.c	/^static git_diff_delta *diff_delta__merge_like_cgit($/;"	f	file:
diff_delta__merge_like_cgit_reversed	src/diff_tform.c	/^static git_diff_delta *diff_delta__merge_like_cgit_reversed($/;"	f	file:
diff_delta__path	src/diff.c	/^GIT_INLINE(const char *) diff_delta__path(const git_diff_delta *delta)$/;"	f
diff_delta_format_with_paths	src/diff_print.c	/^static int diff_delta_format_with_paths($/;"	f	file:
diff_driver_add_patterns	src/diff_driver.c	/^static int diff_driver_add_patterns($/;"	f	file:
diff_driver_funcname	src/diff_driver.c	/^static int diff_driver_funcname(const git_config_entry *entry, void *payload)$/;"	f	file:
diff_driver_xfuncname	src/diff_driver.c	/^static int diff_driver_xfuncname(const git_config_entry *entry, void *payload)$/;"	f	file:
diff_drivers	src/repository.h	/^	git_diff_driver_registry *diff_drivers;$/;"	m	struct:git_repository
diff_error_outofrange	src/diff_patch.c	/^static int diff_error_outofrange(const char *thing)$/;"	f	file:
diff_expects	tests/diff/diff_helpers.h	/^} diff_expects;$/;"	t	typeref:struct:__anon8
diff_file_cb	tests/diff/diff_helpers.c	/^int diff_file_cb($/;"	f
diff_file_content_binary_by_content	src/diff_file.c	/^static void diff_file_content_binary_by_content(git_diff_file_content *fc)$/;"	f	file:
diff_file_content_binary_by_size	src/diff_file.c	/^static bool diff_file_content_binary_by_size(git_diff_file_content *fc)$/;"	f	file:
diff_file_content_commit_to_str	src/diff_file.c	/^static int diff_file_content_commit_to_str($/;"	f	file:
diff_file_content_init_common	src/diff_file.c	/^static int diff_file_content_init_common($/;"	f	file:
diff_file_content_load_blob	src/diff_file.c	/^static int diff_file_content_load_blob(git_diff_file_content *fc)$/;"	f	file:
diff_file_content_load_workdir	src/diff_file.c	/^static int diff_file_content_load_workdir(git_diff_file_content *fc)$/;"	f	file:
diff_file_content_load_workdir_file	src/diff_file.c	/^static int diff_file_content_load_workdir_file($/;"	f	file:
diff_file_content_load_workdir_symlink	src/diff_file.c	/^static int diff_file_content_load_workdir_symlink($/;"	f	file:
diff_find_match	src/diff_tform.c	/^} diff_find_match;$/;"	t	typeref:struct:__anon116	file:
diff_foreach_via_iterator	tests/diff/diff_helpers.c	/^int diff_foreach_via_iterator($/;"	f
diff_from_sources	src/diff_patch.c	/^static int diff_from_sources($/;"	f	file:
diff_hunk_cb	tests/diff/diff_helpers.c	/^int diff_hunk_cb($/;"	f
diff_hunks	src/blame_git.c	/^static int diff_hunks(mmfile_t file_a, mmfile_t file_b, void *cb_data)$/;"	f	file:
diff_in_progress	src/diff.c	/^} diff_in_progress;$/;"	t	typeref:struct:__anon34	file:
diff_insert_delta	src/diff.c	/^static int diff_insert_delta($/;"	f	file:
diff_line_cb	tests/diff/diff_helpers.c	/^int diff_line_cb($/;"	f
diff_list_alloc	src/diff.c	/^static git_diff *diff_list_alloc($/;"	f	file:
diff_list_apply_options	src/diff.c	/^static int diff_list_apply_options($/;"	f	file:
diff_list_free	src/diff.c	/^static void diff_list_free(git_diff *diff)$/;"	f	file:
diff_load_index	src/diff.c	/^static int diff_load_index(git_index **index, git_repository *repo)$/;"	f	file:
diff_mnemonic_prefix	src/diff.c	/^static const char *diff_mnemonic_prefix($/;"	f	file:
diff_output	examples/common.c	/^int diff_output($/;"	f
diff_output_init	src/diff_patch.c	/^static void diff_output_init($/;"	f	file:
diff_output_to_patch	src/diff_patch.c	/^static void diff_output_to_patch(git_diff_output *out, git_patch *patch)$/;"	f	file:
diff_patch_alloc_from_diff	src/diff_patch.c	/^static int diff_patch_alloc_from_diff($/;"	f	file:
diff_patch_file_cb	src/diff_patch.c	/^static int diff_patch_file_cb($/;"	f	file:
diff_patch_free	src/diff_patch.c	/^static void diff_patch_free(git_patch *patch)$/;"	f	file:
diff_patch_from_sources	src/diff_patch.c	/^static int diff_patch_from_sources($/;"	f	file:
diff_patch_generate	src/diff_patch.c	/^static int diff_patch_generate(git_patch *patch, git_diff_output *output)$/;"	f	file:
diff_patch_hunk	src/diff_patch.c	/^struct diff_patch_hunk {$/;"	s	file:
diff_patch_hunk	src/diff_patch.c	/^typedef struct diff_patch_hunk diff_patch_hunk;$/;"	t	typeref:struct:diff_patch_hunk	file:
diff_patch_hunk_cb	src/diff_patch.c	/^static int diff_patch_hunk_cb($/;"	f	file:
diff_patch_init_common	src/diff_patch.c	/^static void diff_patch_init_common(git_patch *patch)$/;"	f	file:
diff_patch_init_from_diff	src/diff_patch.c	/^static int diff_patch_init_from_diff($/;"	f	file:
diff_patch_invoke_file_callback	src/diff_patch.c	/^static int diff_patch_invoke_file_callback($/;"	f	file:
diff_patch_line_cb	src/diff_patch.c	/^static int diff_patch_line_cb($/;"	f	file:
diff_patch_load	src/diff_patch.c	/^static int diff_patch_load(git_patch *patch, git_diff_output *output)$/;"	f	file:
diff_patch_update_binary	src/diff_patch.c	/^static void diff_patch_update_binary(git_patch *patch)$/;"	f	file:
diff_patch_with_delta	src/diff_patch.c	/^} diff_patch_with_delta;$/;"	t	typeref:struct:__anon150	file:
diff_patch_with_delta_alloc	src/diff_patch.c	/^static int diff_patch_with_delta_alloc($/;"	f	file:
diff_pick_suffix	src/diff_print.c	/^static char diff_pick_suffix(int mode)$/;"	f	file:
diff_pick_suffix	tests/diff/diff_helpers.c	/^static char diff_pick_suffix(int mode)$/;"	f	file:
diff_print	tests/diff/diff_helpers.c	/^void diff_print(FILE *fp, git_diff *diff)$/;"	f
diff_print_cb	tests/diff/diff_helpers.c	/^static int diff_print_cb($/;"	f	file:
diff_print_file_cb	tests/diff/diff_helpers.c	/^int diff_print_file_cb($/;"	f
diff_print_info	src/diff_print.c	/^} diff_print_info;$/;"	t	typeref:struct:__anon123	file:
diff_print_info_init	src/diff_print.c	/^static int diff_print_info_init($/;"	f	file:
diff_print_numstat	examples/diff.c	/^static void diff_print_numstat(git_diff *diff)$/;"	f	file:
diff_print_oid_range	src/diff_print.c	/^static int diff_print_oid_range($/;"	f	file:
diff_print_one_name_only	src/diff_print.c	/^static int diff_print_one_name_only($/;"	f	file:
diff_print_one_name_status	src/diff_print.c	/^static int diff_print_one_name_status($/;"	f	file:
diff_print_one_raw	src/diff_print.c	/^static int diff_print_one_raw($/;"	f	file:
diff_print_patch_file	src/diff_print.c	/^static int diff_print_patch_file($/;"	f	file:
diff_print_patch_hunk	src/diff_print.c	/^static int diff_print_patch_hunk($/;"	f	file:
diff_print_patch_line	src/diff_print.c	/^static int diff_print_patch_line($/;"	f	file:
diff_print_raw	tests/diff/diff_helpers.c	/^void diff_print_raw(FILE *fp, git_diff *diff)$/;"	f
diff_print_to_buffer_cb	src/diff_print.c	/^static int diff_print_to_buffer_cb($/;"	f	file:
diff_required	src/diff_patch.c	/^static int diff_required(git_diff *diff, const char *action)$/;"	f	file:
diff_scan_inside_untracked_dir	src/diff.c	/^static int diff_scan_inside_untracked_dir($/;"	f	file:
diff_single_generate	src/diff_patch.c	/^static int diff_single_generate(diff_patch_with_delta *pd, git_xdiff_output *xo)$/;"	f	file:
diff_stop_after_2_files	tests/diff/index.c	/^static int diff_stop_after_2_files($/;"	f	file:
diff_strdup_prefix	src/diff.c	/^static char *diff_strdup_prefix(git_pool *pool, const char *prefix)$/;"	f	file:
diff_time_eq	src/diff.c	/^static bool diff_time_eq($/;"	f	file:
diff_update_lines	src/diff_xdiff.c	/^static int diff_update_lines($/;"	f	file:
diffcaps	src/diff.h	/^	uint32_t diffcaps;$/;"	m	struct:git_diff
diffdata_t	src/xdiff/xdiffi.h	/^} diffdata_t;$/;"	t	typeref:struct:s_diffdata
diffopts	examples/diff.c	/^	git_diff_options diffopts;$/;"	m	struct:opts	file:
digest	src/filebuf.h	/^	git_hash_ctx digest;$/;"	m	struct:git_filebuf
dir	examples/cat-file.c	/^	const char *dir;$/;"	m	struct:opts	file:
dir	examples/diff.c	/^	const char *dir;$/;"	m	struct:opts	file:
dir	examples/init.c	/^	const char *dir;$/;"	m	struct:opts	file:
dir	src/ignore.h	/^	git_buf dir; \/* current directory reflected in ign_path *\/$/;"	m	struct:__anon174
dir	src/win32/dir.h	/^	char dir[GIT_FLEX_ARRAY];$/;"	m	struct:__anon168
dir	tests/object/raw/write.c	/^    char *dir;    \/* object store (fan-out) directory name     *\/$/;"	m	struct:object_data	file:
dir	tests/odb/loose_data.h	/^    char          *dir;    \/* object store (fan-out) directory name     *\/$/;"	m	struct:object_data
dir_len	src/odb_loose.c	/^	size_t dir_len;$/;"	m	struct:__anon153	file:
dir_len	src/odb_loose.c	/^	size_t dir_len;$/;"	m	struct:foreach_state	file:
dir_mode	include/git2/checkout.h	/^	unsigned int dir_mode;  \/** default is 0755 *\/$/;"	m	struct:git_checkout_opts
dircount	tests/merge/merge_helpers.c	/^int dircount(void *payload, git_buf *pathbuf)$/;"	f
direach_flags	src/refdb_fs.c	/^	uint32_t direach_flags;$/;"	m	struct:refdb_fs_backend	file:
direction	src/transports/local.c	/^	int direction;$/;"	m	struct:__anon78	file:
direction	src/transports/smart.h	/^	int direction;$/;"	m	struct:__anon73
directoryfile	src/checkout.c	/^		directoryfile:1,$/;"	m	struct:__anon122	file:
dirent	src/win32/dir.h	33;"	d
dirent_cleanup__cb	tests/core/dirent.c	/^static void dirent_cleanup__cb(void *_d)$/;"	f	file:
dirload_flags	src/iterator.c	/^	uint32_t dirload_flags;$/;"	m	struct:fs_iterator	file:
dirmode	src/fileops.c	/^	mode_t dirmode;$/;"	m	struct:__anon37	file:
dirs	tests/object/tree/walk.c	/^	int dirs;$/;"	m	struct:treewalk_skip_data	file:
dirty	tests/checkout/typechange.c	/^	int dirty;$/;"	m	struct:__anon5	file:
disable	tests/generate.py	/^    def disable(self, excluded):$/;"	m	class:TestSuite
disable_filters	include/git2/checkout.h	/^	int disable_filters;    \/** don't apply filters like CRLF conversion *\/$/;"	m	struct:git_checkout_opts
disk_inode	src/odb.c	/^	ino_t disk_inode;$/;"	m	struct:__anon117	file:
diskfile_backend	src/config_file.c	/^} diskfile_backend;$/;"	t	typeref:struct:__anon35	file:
distbits	deps/zlib/inflate.h	/^    unsigned distbits;          \/* index bits for distcode *\/$/;"	m	struct:inflate_state
distcode	deps/zlib/inflate.h	/^    code const FAR *distcode;   \/* starting table for distance codes *\/$/;"	m	struct:inflate_state
distfix	deps/zlib/inffixed.h	/^    static const code distfix[32] = {$/;"	v
distrust_filemode	src/index.h	/^	unsigned int distrust_filemode:1;$/;"	m	struct:git_index
dl	deps/zlib/deflate.h	/^    } dl;$/;"	m	struct:ct_data_s	typeref:union:ct_data_s::__anon203
dl_data	examples/network/fetch.c	/^struct dl_data {$/;"	s	file:
dlen	tests/odb/loose_data.h	/^    size_t        dlen;    \/* length of (uncompressed) object data      *\/$/;"	m	struct:object_data
dll	src/hash/hash_win32.h	/^	HINSTANCE dll;$/;"	m	struct:hash_cng_prov
dmax	deps/zlib/inflate.h	/^    unsigned dmax;              \/* zlib header max distance (INFLATE_STRICT) *\/$/;"	m	struct:inflate_state
do_clone	examples/network/clone.c	/^int do_clone(git_repository *repo, int argc, char **argv)$/;"	f
do_fetch	tests/online/fetch.c	/^static void do_fetch(const char *url, git_remote_autotag_option_t flag, int n)$/;"	f	file:
do_lstat	src/win32/posix_w32.c	/^static int do_lstat($/;"	f	file:
do_not_buffer	src/filebuf.h	/^	bool do_not_buffer;$/;"	m	struct:git_filebuf
do_progress_callback	src/indexer.c	/^static int do_progress_callback(git_indexer *idx, git_transfer_progress *stats)$/;"	f	file:
do_push	src/push.c	/^static int do_push(git_push *push)$/;"	f	file:
do_push	tests/online/push.c	/^static void do_push($/;"	f	file:
do_verify_push_status	tests/online/push.c	/^static void do_verify_push_status(git_push *push, const push_status expected[], const size_t expected_len)$/;"	f	file:
does_fs_decompose_unicode_paths	src/repository.c	/^static bool does_fs_decompose_unicode_paths(const char *wd_path)$/;"	f	file:
done	deps/zlib/zlib.h	/^    int     done;       \/* true when done reading gzip header (not used$/;"	m	struct:gz_header_s
done	src/pack-objects.h	/^	bool done;$/;"	m	struct:git_packbuilder
done	src/pack.h	/^	int done;$/;"	m	struct:git_packfile_stream
dont_call_me_cb	tests/network/remote/rename.c	/^static int dont_call_me_cb(const char *fetch_refspec, void *payload)$/;"	f	file:
dont_notify_cb	tests/checkout/index.c	/^static int dont_notify_cb($/;"	f	file:
dot	tests/core/dirent.c	/^static walk_data dot = {$/;"	v	file:
dot_names	tests/core/dirent.c	/^static name_data dot_names[] = {$/;"	v	file:
down	src/iterator.c	/^	tree_iterator_frame *up, *down;$/;"	m	struct:tree_iterator_frame	file:
download	examples/network/fetch.c	/^static void *download(void *ptr)$/;"	f	file:
download_pack	include/git2/transport.h	/^	int (*download_pack)($/;"	m	struct:git_transport
download_tags	src/remote.h	/^	git_remote_autotag_option_t download_tags;$/;"	m	struct:git_remote
download_tags_value	src/remote.c	/^static int download_tags_value(git_remote *remote, git_config *cfg)$/;"	f	file:
driver	src/diff_driver.h	/^	git_diff_driver *driver;$/;"	m	struct:__anon161
driver	src/diff_file.h	/^	git_diff_driver *driver;$/;"	m	struct:__anon154
drivers	src/diff_driver.c	/^	git_strmap *drivers;$/;"	m	struct:git_diff_driver_registry	file:
dst	src/date.c	/^	int dst;$/;"	m	struct:__anon105	file:
dst	src/refspec.h	/^	char *dst;$/;"	m	struct:git_refspec
dstart	src/xdiff/xtypes.h	/^	long dstart, dend;$/;"	m	struct:s_xdfile
dummy	deps/zlib/deflate.c	/^struct static_tree_desc_s {int dummy;}; \/* for buggy compilers *\/$/;"	m	struct:static_tree_desc_s	file:
dummy	deps/zlib/zlib.h	/^    struct internal_state {int dummy;};$/;"	m	struct:internal_state
dummy	deps/zlib/zutil.c	/^struct internal_state      {int dummy;}; \/* for buggy compilers *\/$/;"	m	struct:internal_state	file:
dummy_transport_definition	src/transport.c	/^static transport_definition dummy_transport_definition = { NULL, 1, git_transport_dummy, NULL };$/;"	v	file:
dup_entry	src/blame_git.c	/^static void dup_entry(git_blame__entry *dst, git_blame__entry *src)$/;"	f	file:
dup_hunk	src/blame.c	/^static git_blame_hunk* dup_hunk(git_blame_hunk *hunk)$/;"	f	file:
duplicate_level	src/config.c	/^static int duplicate_level(void **old_raw, void *new_raw)$/;"	f	file:
duplicate_node	deps/regex/regcomp.c	/^duplicate_node (re_dfa_t *dfa, int org_idx, unsigned int constraint)$/;"	f	file:
duplicate_node_closure	deps/regex/regcomp.c	/^duplicate_node_closure (re_dfa_t *dfa, int top_org_node, int top_clone_node,$/;"	f	file:
duplicate_tree	deps/regex/regcomp.c	/^duplicate_tree (const bin_tree_t *root, re_dfa_t *dfa)$/;"	f	file:
duplicated	deps/regex/regex_internal.h	/^  unsigned int duplicated : 1;$/;"	m	struct:__anon184
dwim_refspecs	src/remote.c	/^static int dwim_refspecs(git_vector *out, git_vector *refspecs, git_vector *refs)$/;"	f	file:
dyn_dtree	deps/zlib/deflate.h	/^    struct ct_data_s dyn_dtree[2*D_CODES+1]; \/* distance tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s
dyn_ltree	deps/zlib/deflate.h	/^    struct ct_data_s dyn_ltree[HEAP_SIZE];   \/* literal and length tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s
dyn_tree	deps/zlib/deflate.h	/^    ct_data *dyn_tree;           \/* the dynamic tree *\/$/;"	m	struct:tree_desc_s
eclosures	deps/regex/regex_internal.h	/^  re_node_set *eclosures;$/;"	m	struct:re_dfa_t
edests	deps/regex/regex_internal.h	/^  re_node_set *edests;$/;"	m	struct:re_dfa_t
eflags	deps/regex/regex_internal.h	/^  int eflags;$/;"	m	struct:__anon189
elems	deps/regex/regex_internal.h	/^  int *elems;$/;"	m	struct:__anon181
elems	deps/zlib/trees.c	/^    int     elems;               \/* max number of elements in the tree *\/$/;"	m	struct:static_tree_desc_s	file:
email	include/git2/types.h	/^	char *email; \/** email of the author *\/$/;"	m	struct:git_signature
email	tests/commit/parse.c	/^	const char *email;$/;"	m	struct:__anon15	file:
emit_func	src/xdiff/xdiff.h	/^	void (*emit_func)(void);$/;"	m	struct:s_xdemitconf
emit_func_t	src/xdiff/xemit.h	/^typedef int (*emit_func_t)(xdfenv_t *xe, xdchange_t *xscr, xdemitcb_t *ecb,$/;"	t
empty	tests/core/dirent.c	/^static walk_data empty = {$/;"	v	file:
empty_iterator	src/iterator.c	/^} empty_iterator;$/;"	t	typeref:struct:__anon83	file:
empty_iterator__advance	src/iterator.c	159;"	d	file:
empty_iterator__advance_into	src/iterator.c	160;"	d	file:
empty_iterator__at_end	src/iterator.c	/^static int empty_iterator__at_end(git_iterator *i)$/;"	f	file:
empty_iterator__current	src/iterator.c	158;"	d	file:
empty_iterator__free	src/iterator.c	/^static void empty_iterator__free(git_iterator *i)$/;"	f	file:
empty_iterator__noop	src/iterator.c	/^static int empty_iterator__noop(const git_index_entry **e, git_iterator *i)$/;"	f	file:
empty_iterator__reset	src/iterator.c	/^static int empty_iterator__reset(git_iterator *i, const char *s, const char *e)$/;"	f	file:
empty_iterator__seek	src/iterator.c	/^static int empty_iterator__seek(git_iterator *i, const char *p)$/;"	f	file:
empty_names	tests/core/dirent.c	/^static name_data empty_names[] = {$/;"	v	file:
empty_tmp_dir	tests/core/rmdir.c	/^static const char *empty_tmp_dir = "test_gitfo_rmdir_recurs_test";$/;"	v	file:
enabled	tests/clar.c	/^	int enabled;$/;"	m	struct:clar_suite	file:
encounters	tests/refs/branches/iterator.c	/^	int encounters;$/;"	m	struct:expectations	file:
end	deps/regex/regex.h	/^  regoff_t *end;$/;"	m	struct:re_registers
end	src/iterator.h	/^	char *end;$/;"	m	struct:git_iterator
end1	src/xdiff/xhistogram.c	/^	unsigned int begin1, end1;$/;"	m	struct:region	file:
end2	src/xdiff/xhistogram.c	/^	unsigned int begin2, end2;$/;"	m	struct:region	file:
end_line	examples/blame.c	/^	int end_line;$/;"	m	struct:opts	file:
enqueue	src/revwalk.h	/^	int (*enqueue)(git_revwalk *, git_commit_list_node *);$/;"	m	struct:git_revwalk
enqueue_object	src/push.c	/^static int enqueue_object($/;"	f	file:
enqueue_tag	src/push.c	/^static int enqueue_tag(git_object **out, git_push *push, git_oid *id)$/;"	f	file:
ensure_base_rev_is_not_known_yet	src/revparse.c	/^static int ensure_base_rev_is_not_known_yet(git_object *object)$/;"	f	file:
ensure_base_rev_loaded	src/revparse.c	/^static int ensure_base_rev_loaded(git_object **object, git_reference **reference, const char *spec, size_t identifier_len, git_repository *repo, bool allow_empty_identifier)$/;"	f	file:
ensure_is_an_updatable_direct_reference	src/refs.c	/^static int ensure_is_an_updatable_direct_reference(git_reference *ref)$/;"	f	file:
ensure_is_an_updatable_symbolic_reference	src/refs.c	/^static int ensure_is_an_updatable_symbolic_reference(git_reference *ref)$/;"	f	file:
ensure_left_hand_identifier_is_not_known_yet	src/revparse.c	/^static int ensure_left_hand_identifier_is_not_known_yet(git_object *object, git_reference *reference)$/;"	f	file:
ensure_log	include/git2/sys/refdb_backend.h	/^	int (*ensure_log)(git_refdb_backend *backend, const char *refname);$/;"	m	struct:git_refdb_backend
ensure_no_refname_starts_with_a_forward_slash	tests/refs/listall.c	/^static void ensure_no_refname_starts_with_a_forward_slash(const char *path)$/;"	f	file:
ensure_refname_invalid	tests/refs/normalize.c	/^static void ensure_refname_invalid(unsigned int flags, const char *input_refname)$/;"	f	file:
ensure_refname_normalized	tests/refs/normalize.c	/^static void ensure_refname_normalized($/;"	f	file:
ensure_refspecs	tests/network/remote/rename.c	/^static int ensure_refspecs(const char* refspec_name, void *payload)$/;"	f	file:
ensure_remote_doesnot_exist	src/remote.c	/^static int ensure_remote_doesnot_exist(git_repository *repo, const char *name)$/;"	f	file:
ensure_remote_name_is_valid	src/remote.c	/^static int ensure_remote_name_is_valid(const char *name)$/;"	f	file:
ensure_repository_discover	tests/repo/discover.c	/^static void ensure_repository_discover(const char *start_path,$/;"	f	file:
ensure_repository_init	tests/repo/init.c	/^static void ensure_repository_init($/;"	f	file:
ensure_segment_validity	src/refs.c	/^static int ensure_segment_validity(const char *name)$/;"	f	file:
ensure_tag_pattern_match	tests/object/tag/list.c	/^static void ensure_tag_pattern_match(git_repository *repo,$/;"	f	file:
ensure_there_are_changes_to_stash	src/stash.c	/^static int ensure_there_are_changes_to_stash($/;"	f	file:
ensure_workdir	tests/checkout/conflict.c	/^static void ensure_workdir(const char *path, int mode, const char *oid_str)$/;"	f	file:
ensure_workdir_contents	tests/checkout/conflict.c	/^static void ensure_workdir_contents(const char *path, const char *contents)$/;"	f	file:
ensure_workdir_link	tests/checkout/conflict.c	/^static void ensure_workdir_link(const char *path, const char *target)$/;"	f	file:
ensure_workdir_mode	tests/checkout/conflict.c	/^static void ensure_workdir_mode(const char *path, int mode)$/;"	f	file:
ensure_workdir_oid	tests/checkout/conflict.c	/^static void ensure_workdir_oid(const char *path, const char *oid_str)$/;"	f	file:
ent	src/blame.h	/^	git_blame__entry *ent;$/;"	m	struct:git_blame
enter_dir_cb	src/iterator.c	/^	int (*enter_dir_cb)(fs_iterator *self);$/;"	m	struct:fs_iterator	file:
entrance_nodes	deps/regex/regex_internal.h	/^  re_node_set *entrance_nodes;$/;"	m	struct:re_dfastate_t
entries	src/index.h	/^	git_vector entries;$/;"	m	struct:git_index
entries	src/iterator.c	/^	git_vector entries;$/;"	m	struct:fs_iterator_frame	file:
entries	src/iterator.c	/^	tree_iterator_entry *entries[GIT_FLEX_ARRAY];$/;"	m	struct:tree_iterator_frame	file:
entries	src/pack.h	/^	git_offmap *entries;$/;"	m	struct:__anon32
entries	src/reflog.h	/^	git_vector entries;$/;"	m	struct:git_reflog
entries	src/tree-cache.h	/^	ssize_t entries;$/;"	m	struct:git_tree_cache
entries	src/tree.h	/^	git_vector entries;$/;"	m	struct:git_tree
entries	src/tree.h	/^	git_vector entries;$/;"	m	struct:git_treebuilder
entries	src/xdiff/xpatience.c	/^	} *entries, *first, *last;$/;"	m	struct:hashmap	typeref:struct:hashmap::entry	file:
entries_cmp_path	src/index.h	/^	git_vector_cmp entries_cmp_path;$/;"	m	struct:git_index
entries_search	src/index.c	/^	git_vector_cmp entries_search;$/;"	m	struct:read_tree_data	file:
entries_search	src/index.h	/^	git_vector_cmp entries_search;$/;"	m	struct:git_index
entries_search_path	src/index.h	/^	git_vector_cmp entries_search_path;$/;"	m	struct:git_index
entry	include/git2/index.h	/^GIT_EXTERN(int) git_index_entry_stage(const git_index_entry *entry);$/;"	v
entry	include/git2/reflog.h	/^GIT_EXTERN(const char *) git_reflog_entry_message(const git_reflog_entry *entry);$/;"	v
entry	include/git2/reflog.h	/^GIT_EXTERN(const git_oid *) git_reflog_entry_id_new(const git_reflog_entry *entry);$/;"	v
entry	include/git2/reflog.h	/^GIT_EXTERN(const git_oid *) git_reflog_entry_id_old(const git_reflog_entry *entry);$/;"	v
entry	include/git2/reflog.h	/^GIT_EXTERN(const git_signature *) git_reflog_entry_committer(const git_reflog_entry *entry);$/;"	v
entry	include/git2/sys/reflog.h	/^GIT_EXTERN(void) git_reflog_entry__free(git_reflog_entry *entry);$/;"	v
entry	include/git2/tree.h	/^GIT_EXTERN(const char *) git_tree_entry_name(const git_tree_entry *entry);$/;"	v
entry	include/git2/tree.h	/^GIT_EXTERN(const git_oid *) git_tree_entry_id(const git_tree_entry *entry);$/;"	v
entry	include/git2/tree.h	/^GIT_EXTERN(git_filemode_t) git_tree_entry_filemode(const git_tree_entry *entry);$/;"	v
entry	include/git2/tree.h	/^GIT_EXTERN(git_filemode_t) git_tree_entry_filemode_raw(const git_tree_entry *entry);$/;"	v
entry	include/git2/tree.h	/^GIT_EXTERN(git_otype) git_tree_entry_type(const git_tree_entry *entry);$/;"	v
entry	include/git2/tree.h	/^GIT_EXTERN(void) git_tree_entry_free(git_tree_entry *entry);$/;"	v
entry	src/config_file.c	/^	git_config_entry *entry;$/;"	m	struct:cvar_t	file:
entry	src/indexer.c	/^struct entry {$/;"	s	file:
entry	src/iterator.c	/^	git_index_entry entry;$/;"	m	struct:__anon84	file:
entry	src/iterator.c	/^	git_index_entry entry;$/;"	m	struct:fs_iterator	file:
entry	src/win32/dir.h	/^	struct git__dirent entry;$/;"	m	struct:__anon168	typeref:struct:__anon168::git__dirent
entry	src/xdiff/xpatience.c	/^	struct entry {$/;"	s	struct:hashmap	file:
entry	tests/merge/merge_helpers.h	/^	struct merge_index_entry entry;$/;"	m	struct:merge_index_with_status	typeref:struct:merge_index_with_status::merge_index_entry
entry_count	src/index.c	/^	uint32_t entry_count;$/;"	m	struct:index_header	file:
entry_count	tests/status/status_helpers.h	/^	int entry_count;$/;"	m	struct:__anon29
entry_count0	tests/status/status_data.h	/^static const int entry_count0 = 16;$/;"	v
entry_count2	tests/status/status_data.h	/^static const int entry_count2 = 15;$/;"	v
entry_count3	tests/status/status_data.h	/^static const int entry_count3 = 22;$/;"	v
entry_count4	tests/status/status_data.h	/^static const int entry_count4 = 23;$/;"	v
entry_count5	tests/status/status_data.h	/^static const int entry_count5 = 8;$/;"	v
entry_count6	tests/status/status_data.h	/^static const int entry_count6 = 13;$/;"	v
entry_fromname	src/tree.c	/^static const git_tree_entry *entry_fromname($/;"	f	file:
entry_is_current	src/iterator.c	/^	bool entry_is_current;$/;"	m	struct:__anon84	file:
entry_is_prefixed	src/diff.c	/^static bool entry_is_prefixed($/;"	f	file:
entry_long	src/index.c	/^struct entry_long {$/;"	s	file:
entry_paths0	tests/status/status_data.h	/^static const char *entry_paths0[] = {$/;"	v
entry_paths2	tests/status/status_data.h	/^static const char *entry_paths2[] = {$/;"	v
entry_paths3	tests/status/status_data.h	/^static const char *entry_paths3[] = {$/;"	v
entry_paths3_icase	tests/status/status_data.h	/^static const char *entry_paths3_icase[] = {$/;"	v
entry_paths4	tests/status/status_data.h	/^static const char *entry_paths4[] = {$/;"	v
entry_paths5	tests/status/status_data.h	/^static const char *entry_paths5[] = {$/;"	v
entry_paths6	tests/status/status_data.h	/^static const char *entry_paths6[] = {$/;"	v
entry_short	src/index.c	/^struct entry_short {$/;"	s	file:
entry_size	src/index.c	27;"	d	file:
entry_sort_cmp	src/tree.c	/^static int entry_sort_cmp(const void *a, const void *b)$/;"	f	file:
entry_srch_key	src/index.c	/^struct entry_srch_key {$/;"	s	file:
entry_start	src/indexer.c	/^	git_off_t entry_start;$/;"	m	struct:git_indexer	file:
entry_statuses0	tests/status/status_data.h	/^static const unsigned int entry_statuses0[] = {$/;"	v
entry_statuses2	tests/status/status_data.h	/^static const unsigned int entry_statuses2[] = {$/;"	v
entry_statuses3	tests/status/status_data.h	/^static const unsigned int entry_statuses3[] = {$/;"	v
entry_statuses3_icase	tests/status/status_data.h	/^static const unsigned int entry_statuses3_icase[] = {$/;"	v
entry_statuses4	tests/status/status_data.h	/^static const unsigned int entry_statuses4[] = {$/;"	v
entry_statuses5	tests/status/status_data.h	/^static const unsigned int entry_statuses5[] = {$/;"	v
entry_statuses6	tests/status/status_data.h	/^static const unsigned int entry_statuses6[] = {$/;"	v
entry_time	src/index.c	/^struct entry_time {$/;"	s	file:
entrycomp	src/diff.h	/^	int (*entrycomp)(const void *a, const void *b);$/;"	m	struct:git_diff
entrycount	src/tree.h	/^	size_t entrycount; \/* vector may contain "removed" entries *\/$/;"	m	struct:git_treebuilder
entrycount	tests/refs/reflog/drop.c	/^static size_t entrycount;$/;"	v	file:
env	src/xdiff/xhistogram.c	/^	xdfenv_t *env;$/;"	m	struct:histindex	file:
env	src/xdiff/xpatience.c	/^	xdfenv_t *env;$/;"	m	struct:hashmap	file:
env_save	tests/core/env.c	/^static char *env_save[NUM_VARS];$/;"	v	file:
env_vars	tests/core/env.c	/^static const char *env_vars[NUM_VARS] = { "HOME" };$/;"	v	file:
env_vars	tests/core/env.c	/^static const char *env_vars[NUM_VARS] = {$/;"	v	file:
eof	src/config_file.c	/^	int eof;$/;"	m	struct:reader	file:
eol	src/crlf.c	/^	int eol;$/;"	m	struct:crlf_attrs	file:
eps_reachable_subexps_map	deps/regex/regex_internal.h	/^  unsigned short int eps_reachable_subexps_map;$/;"	m	struct:re_backref_cache_entry
eps_via_nodes	deps/regex/regex_internal.h	/^  re_node_set eps_via_nodes;$/;"	m	struct:re_fail_stack_ent_t
equiv_classes	deps/regex/regex_internal.h	/^  int32_t *equiv_classes;$/;"	m	struct:__anon183
err_pkt	src/transports/smart_pkt.c	/^static int err_pkt(git_pkt **out, const char *line, size_t len)$/;"	f	file:
errno	deps/zlib/zutil.c	/^    int errno = 0;$/;"	v
error	src/diff_patch.h	/^	int error;$/;"	m	struct:git_diff_output
error	src/transports/smart.h	/^	char error[GIT_FLEX_ARRAY];$/;"	m	struct:__anon69
error	tests/checkout/tree.c	/^	int error;$/;"	m	struct:checkout_cancel_at	file:
error_cb	src/transports/smart.h	/^	git_transport_message_cb error_cb;$/;"	m	struct:__anon73
error_code	src/common.h	/^	int       error_code;$/;"	m	struct:__anon114
error_code	tests/odb/backend/nonrefreshing.c	/^	git_error_code error_code;$/;"	m	struct:fake_backend	file:
error_invalid_local_file_uri	src/path.c	/^static int error_invalid_local_file_uri(const char *uri)$/;"	f	file:
error_msg	src/common.h	/^	git_error error_msg;$/;"	m	struct:__anon114
error_msg	tests/clar.c	/^	const char *error_msg;$/;"	m	struct:clar_error	file:
error_t	src/global.h	/^	git_error error_t;$/;"	m	struct:__anon164
errors	tests/clar.c	/^	struct clar_error *errors;$/;"	m	struct:__anon23	typeref:struct:__anon23::clar_error	file:
escape_value	src/config_file.c	/^static char *escape_value(const char *ptr)$/;"	f	file:
escaped	src/config_file.c	/^static const char *escaped = "\\n\\t\\b\\"\\\\";$/;"	v	file:
escapes	src/config_file.c	/^static const char *escapes = "ntb\\"\\\\";$/;"	v	file:
execute_test	tests/checkout/binaryunicode.c	/^static void execute_test(void)$/;"	f	file:
exists	include/git2/sys/odb_backend.h	/^	int (* exists)($/;"	m	struct:git_odb_backend
exists	include/git2/sys/refdb_backend.h	/^	int (*exists)($/;"	m	struct:git_refdb_backend
exists_calls	tests/odb/backend/nonrefreshing.c	/^	int exists_calls;$/;"	m	struct:fake_backend	file:
exit_on_error	tests/clar.c	/^	int exit_on_error;$/;"	m	struct:__anon23	file:
expand_bkref_cache	deps/regex/regexec.c	/^expand_bkref_cache (re_match_context_t *mctx, re_node_set *cur_nodes,$/;"	f	file:
expect	tests/core/path.c	/^	char **expect;$/;"	m	struct:__anon25	file:
expect	tests/diff/tree.c	/^static diff_expects expect;$/;"	v	file:
expect_idx	tests/core/path.c	/^	int expect_idx;$/;"	m	struct:__anon25	file:
expect_iterator_items	tests/repo/iterator.c	/^static void expect_iterator_items($/;"	f	file:
expectations	tests/refs/branches/iterator.c	/^struct expectations {$/;"	s	file:
expected	src/status.c	/^	char *expected;$/;"	m	struct:status_file_info	file:
expected	tests/attr/attr_expect.h	/^	enum attr_expect_t expected;$/;"	m	struct:attr_expected	typeref:enum:attr_expected::attr_expect_t
expected	tests/diff/blob.c	/^static diff_expects expected;$/;"	v	file:
expected_entry_count	tests/status/status_helpers.h	/^	int expected_entry_count;$/;"	m	struct:__anon29
expected_files	tests/status/submodules.c	/^static const char *expected_files[] = {$/;"	v	file:
expected_index_0	tests/diff/iterator.c	/^static const char *expected_index_0[] = {$/;"	v	file:
expected_index_1	tests/diff/iterator.c	/^static const char *expected_index_1[] = {$/;"	v	file:
expected_index_oids_0	tests/diff/iterator.c	/^static const char *expected_index_oids_0[] = {$/;"	v	file:
expected_index_oids_1	tests/diff/iterator.c	/^static const char* expected_index_oids_1[] = {$/;"	v	file:
expected_index_oids_range	tests/diff/iterator.c	/^static const char *expected_index_oids_range[] = {$/;"	v	file:
expected_index_range	tests/diff/iterator.c	/^static const char *expected_index_range[] = {$/;"	v	file:
expected_matches	tests/object/tag/list.c	/^	const size_t expected_matches;$/;"	m	struct:pattern_match_t	file:
expected_patch_text	tests/diff/diffiter.c	/^static const char *expected_patch_text[8] = {$/;"	v	file:
expected_paths	tests/status/status_helpers.h	/^	const char** expected_paths;$/;"	m	struct:__anon29
expected_ref	tests/online/push_util.h	/^} expected_ref;$/;"	t	typeref:struct:__anon20
expected_remote_name	tests/refs/branches/remote.c	/^static const char *expected_remote_name = "test";$/;"	v	file:
expected_remote_name_length	tests/refs/branches/remote.c	/^static int expected_remote_name_length;$/;"	v	file:
expected_results	tests/object/tag/list.c	/^	const char* expected_results[MAX_USED_TAGS];$/;"	m	struct:pattern_match_t	file:
expected_status	tests/status/submodules.c	/^static unsigned int expected_status[] = {$/;"	v	file:
expected_statuses	tests/status/status_helpers.h	/^	const unsigned int* expected_statuses;$/;"	m	struct:__anon29
expected_str	tests/attr/attr_expect.h	/^	const char *expected_str;$/;"	m	struct:attr_expected
expected_str	tests/revwalk/simplify.c	/^static const char *expected_str[] = {$/;"	v	file:
expected_tree_0	tests/diff/iterator.c	/^const char *expected_tree_0[] = {$/;"	v
expected_tree_1	tests/diff/iterator.c	/^const char *expected_tree_1[] = {$/;"	v
expected_tree_2	tests/diff/iterator.c	/^const char *expected_tree_2[] = {$/;"	v
expected_tree_3	tests/diff/iterator.c	/^const char *expected_tree_3[] = {$/;"	v
expected_tree_4	tests/diff/iterator.c	/^const char *expected_tree_4[] = {$/;"	v
expected_tree_ranged_0	tests/diff/iterator.c	/^const char *expected_tree_ranged_0[] = {$/;"	v
expected_tree_ranged_1	tests/diff/iterator.c	/^const char *expected_tree_ranged_1[] = {$/;"	v
extend_buffers	deps/regex/regexec.c	/^extend_buffers (re_match_context_t *mctx)$/;"	f	file:
extension_size	src/index.c	/^	uint32_t extension_size;$/;"	m	struct:index_extension	file:
extra	deps/zlib/inflate.h	/^    unsigned extra;             \/* extra bits needed *\/$/;"	m	struct:inflate_state
extra	deps/zlib/zlib.h	/^    Bytef   *extra;     \/* pointer to extra field or Z_NULL if none *\/$/;"	m	struct:gz_header_s
extra	tests/core/oidmap.c	/^	size_t extra;$/;"	m	struct:__anon24	file:
extra_base	deps/zlib/trees.c	/^    int     extra_base;          \/* base index for extra_bits *\/$/;"	m	struct:static_tree_desc_s	file:
extra_bits	deps/zlib/trees.c	/^    const intf *extra_bits;      \/* extra bits for each code or NULL *\/$/;"	m	struct:static_tree_desc_s	file:
extra_blbits	deps/zlib/trees.c	/^local const int extra_blbits[BL_CODES]\/* extra bits for each bit length code *\/$/;"	v
extra_dbits	deps/zlib/trees.c	/^local const int extra_dbits[D_CODES] \/* extra bits for each distance code *\/$/;"	v
extra_lbits	deps/zlib/trees.c	/^local const int extra_lbits[LENGTH_CODES] \/* extra bits for each length code *\/$/;"	v
extra_len	deps/zlib/zlib.h	/^    uInt    extra_len;  \/* extra field length (valid if extra != Z_NULL) *\/$/;"	m	struct:gz_header_s
extra_max	deps/zlib/zlib.h	/^    uInt    extra_max;  \/* space at extra (only when reading header) *\/$/;"	m	struct:gz_header_s
extract_curly_braces_content	src/revparse.c	/^static int extract_curly_braces_content(git_buf *buf, const char *spec, size_t *pos)$/;"	f	file:
extract_how_many	src/revparse.c	/^static int extract_how_many(int *n, const char *spec, size_t *pos)$/;"	f	file:
extract_path	src/revparse.c	/^static int extract_path(git_buf *buf, const char *spec, size_t *pos)$/;"	f	file:
extract_trimmed	src/signature.c	/^static char *extract_trimmed(const char *ptr, size_t len)$/;"	f	file:
f	src/crlf.c	/^	git_filter f;$/;"	m	struct:crlf_filter	file:
f	src/win32/dir.h	/^	WIN32_FIND_DATAW f;$/;"	m	struct:__anon168
failing_chunked_source_cb	tests/object/blob/fromchunks.c	/^static int failing_chunked_source_cb($/;"	f	file:
failing_commit_cases	tests/commit/parse.c	/^static char *failing_commit_cases[] = {$/;"	v	file:
failing_header_cases	tests/commit/parse.c	/^static parse_test_case failing_header_cases[] = {$/;"	v	file:
failing_signature_cases	tests/commit/parse.c	/^failing_signature_test_case failing_signature_cases[] = {$/;"	v
failing_signature_test_case	tests/commit/parse.c	/^} failing_signature_test_case;$/;"	t	typeref:struct:__anon16	file:
failures	src/pathspec.h	/^	git_pathspec_string_array_t failures;$/;"	m	struct:git_pathspec_match_list
fake_backend	tests/odb/backend/nonrefreshing.c	/^typedef struct fake_backend {$/;"	s	file:
fake_backend	tests/odb/backend/nonrefreshing.c	/^} fake_backend;$/;"	t	typeref:struct:fake_backend	file:
fake_backend	tests/odb/sorting.c	/^} fake_backend;$/;"	t	typeref:struct:__anon28	file:
fake_backend__exists	tests/odb/backend/nonrefreshing.c	/^static int fake_backend__exists(git_odb_backend *backend, const git_oid *oid)$/;"	f	file:
fake_backend__free	tests/odb/backend/nonrefreshing.c	/^static void fake_backend__free(git_odb_backend *_backend)$/;"	f	file:
fake_backend__read	tests/odb/backend/nonrefreshing.c	/^static int fake_backend__read($/;"	f	file:
fake_backend__read_header	tests/odb/backend/nonrefreshing.c	/^static int fake_backend__read_header($/;"	f	file:
fake_backend__read_prefix	tests/odb/backend/nonrefreshing.c	/^static int fake_backend__read_prefix($/;"	f	file:
fake_remote	tests/refs/branches/delete.c	/^static git_reference *fake_remote;$/;"	v	file:
fake_remote	tests/refs/branches/iterator.c	/^static git_reference *fake_remote;$/;"	v	file:
fake_remote	tests/refs/foreachglob.c	/^static git_reference *fake_remote;$/;"	v	file:
fake_wstream	src/odb.c	/^} fake_wstream;$/;"	t	typeref:struct:__anon118	file:
fake_wstream__free	src/odb.c	/^static void fake_wstream__free(git_odb_stream *_stream)$/;"	f	file:
fake_wstream__fwrite	src/odb.c	/^static int fake_wstream__fwrite(git_odb_stream *_stream, const git_oid *oid)$/;"	f	file:
fake_wstream__write	src/odb.c	/^static int fake_wstream__write(git_odb_stream *_stream, const char *data, size_t len)$/;"	f	file:
fall_back_to_classic_diff	src/xdiff/xhistogram.c	/^static int fall_back_to_classic_diff(struct histindex *index,$/;"	f	file:
fall_back_to_classic_diff	src/xdiff/xpatience.c	/^static int fall_back_to_classic_diff(struct hashmap *map,$/;"	f	file:
false	deps/regex/regex.c	79;"	d	file:
false	src/cc-compat.h	63;"	d
fanout	src/indexer.c	/^	unsigned int fanout[256];$/;"	m	struct:git_indexer	file:
fastforward_oid	src/merge.h	/^	git_oid fastforward_oid;$/;"	m	struct:git_merge_result
fatal	examples/common.c	/^void fatal(const char *message, const char *extra)$/;"	f
favor	src/merge_file.h	/^	git_merge_file_favor_t favor;$/;"	m	struct:__anon59
favor	src/xdiff/xdiff.h	/^	int favor;$/;"	m	struct:s_xmparam
fbuf	src/odb_loose.c	/^	git_filebuf fbuf;$/;"	m	struct:__anon152	file:
fc	deps/zlib/deflate.h	/^    } fc;$/;"	m	struct:ct_data_s	typeref:union:ct_data_s::__anon202
fd	src/filebuf.h	/^	git_file fd;$/;"	m	struct:git_filebuf
fd	src/mwindow.h	/^	int fd;$/;"	m	struct:git_mwindow_file
fd_is_open	src/filebuf.h	/^	bool fd_is_open;$/;"	m	struct:git_filebuf
fdopen	deps/zlib/zutil.h	121;"	d
fdopen	deps/zlib/zutil.h	141;"	d
fdopen	deps/zlib/zutil.h	146;"	d
fdopen	deps/zlib/zutil.h	152;"	d
feed_indexer	tests/pack/packbuilder.c	/^static int feed_indexer(void *ptr, size_t len, void *payload)$/;"	f	file:
fetch	examples/network/fetch.c	/^int fetch(git_repository *repo, int argc, char **argv)$/;"	f
fetch	src/remote.c	/^	int fetch;$/;"	m	struct:refspec_cb_data	file:
fetch_number	deps/regex/regcomp.c	/^fetch_number (re_string_t *input, re_token_t *token, reg_syntax_t syntax)$/;"	f	file:
fetch_progress	examples/network/clone.c	/^	git_transfer_progress fetch_progress;$/;"	m	struct:progress_data	file:
fetch_progress	examples/network/clone.c	/^static int fetch_progress(const git_transfer_progress *stats, void *payload)$/;"	f	file:
fetch_progress	tests/online/clone.c	/^static int fetch_progress(const git_transfer_progress *stats, void *payload)$/;"	f	file:
fetch_recurse	src/submodule.h	/^	git_submodule_recurse_t fetch_recurse;$/;"	m	struct:git_submodule
fetch_recurse_default	src/submodule.h	/^	git_submodule_recurse_t fetch_recurse_default;$/;"	m	struct:git_submodule
fetch_refspecs	tests/network/remote/remotes.c	/^static const char *fetch_refspecs[] = {$/;"	v	file:
fetch_setup_walk	src/transports/smart_protocol.c	/^static int fetch_setup_walk(git_revwalk **out, git_repository *repo)$/;"	f	file:
fetch_token	deps/regex/regcomp.c	/^fetch_token (re_token_t *result, re_string_t *input, reg_syntax_t syntax)$/;"	f	file:
fetchhead_ref_cb	tests/fetchhead/nonetwork.c	/^static int fetchhead_ref_cb(const char *name, const char *url,$/;"	f	file:
fetchhead_ref_cb_data	tests/fetchhead/nonetwork.c	/^} fetchhead_ref_cb_data; $/;"	t	typeref:struct:__anon4	file:
fetchhead_ref_parse	src/fetchhead.c	/^static int fetchhead_ref_parse($/;"	f	file:
fetchhead_ref_write	src/fetchhead.c	/^static int fetchhead_ref_write($/;"	f	file:
fetchhead_test_clone	tests/online/fetchhead.c	/^static void fetchhead_test_clone(void)$/;"	f	file:
fetchhead_test_fetch	tests/online/fetchhead.c	/^static void fetchhead_test_fetch(const char *fetchspec, const char *expected_fetchhead)$/;"	f	file:
fetchhead_vector	tests/fetchhead/nonetwork.c	/^	git_vector *fetchhead_vector;$/;"	m	struct:__anon4	file:
fi	src/iterator.c	/^	fs_iterator fi;$/;"	m	struct:__anon86	file:
field_data	deps/http-parser/http_parser.h	/^  } field_data[UF_MAX];$/;"	m	struct:http_parser_url	typeref:struct:http_parser_url::__anon196
field_set	deps/http-parser/http_parser.h	/^  uint16_t field_set;           \/* Bitmask of (1 << UF_*) values *\/$/;"	m	struct:http_parser_url
file	src/config.c	/^	git_config_backend *file;$/;"	m	struct:__anon93	file:
file	src/diff_file.h	/^	git_diff_file *file;$/;"	m	struct:__anon154
file	src/diff_tform.c	/^	git_diff_file *file;$/;"	m	struct:__anon115	file:
file	tests/checkout/index.c	/^	const char *file;$/;"	m	struct:notify_data	file:
file	tests/clar.c	/^	const char *file;$/;"	m	struct:clar_error	file:
file	tests/object/raw/write.c	/^    char *file;   \/* object store filename                     *\/$/;"	m	struct:object_data	file:
file	tests/odb/alternates.c	/^static git_filebuf file;$/;"	v	file:
file	tests/odb/loose_data.h	/^    char          *file;   \/* object store filename                     *\/$/;"	m	struct:object_data
file1	src/xdiff/xdiff.h	/^	const char *file1;	\/* label for mf1 *\/$/;"	m	struct:s_xmparam
file1	src/xdiff/xpatience.c	/^	mmfile_t *file1, *file2;$/;"	m	struct:hashmap	file:
file2	src/xdiff/xdiff.h	/^	const char *file2;	\/* label for mf2 *\/$/;"	m	struct:s_xmparam
file2	src/xdiff/xpatience.c	/^	mmfile_t *file1, *file2;$/;"	m	struct:hashmap	file:
file_cb	src/diff_patch.h	/^	git_diff_file_cb file_cb;$/;"	m	struct:git_diff_output
file_favor	include/git2/merge.h	/^	git_merge_file_favor_t file_favor;$/;"	m	struct:__anon251
file_internal	src/config.c	/^} file_internal;$/;"	t	typeref:struct:__anon93	file:
file_internal_free	src/config.c	/^static void file_internal_free(file_internal *internal)$/;"	f	file:
file_mode	include/git2/checkout.h	/^	unsigned int file_mode; \/** default is 0644 or 0755 as dictated by blob *\/$/;"	m	struct:git_checkout_opts
file_mtime	src/config_file.c	/^	time_t file_mtime;$/;"	m	struct:reader	file:
file_open_flags	include/git2/checkout.h	/^	int file_open_flags;    \/** default is O_CREAT | O_TRUNC | O_WRONLY *\/$/;"	m	struct:git_checkout_opts
file_path	src/config_file.c	/^	char  *file_path;$/;"	m	struct:__anon35	file:
file_path	src/config_file.c	/^	char *file_path;$/;"	m	struct:reader	file:
file_path_buf	tests/network/remote/local.c	/^static git_buf file_path_buf = GIT_BUF_INIT;$/;"	v	file:
file_signature	include/git2/diff.h	/^	int (*file_signature)($/;"	m	struct:__anon271
file_size	include/git2/index.h	/^	git_off_t file_size;$/;"	m	struct:git_index_entry
file_size	src/config_file.c	/^	size_t file_size;$/;"	m	struct:reader	file:
file_size	src/index.c	/^	uint32_t file_size;$/;"	m	struct:entry_long	file:
file_size	src/index.c	/^	uint32_t file_size;$/;"	m	struct:entry_short	file:
file_size	tests/index/tests.c	/^   git_off_t file_size;$/;"	m	struct:test_entry	file:
file_status	tests/diff/diff_helpers.h	/^	int file_status[10]; \/* indexed by git_delta_t value *\/$/;"	m	struct:__anon8
filemode	src/filter.c	/^	uint16_t        filemode; \/* zero if unknown *\/$/;"	m	struct:git_filter_source	file:
filemode_count	tests/status/worktree.c	/^static const int filemode_count = 8;$/;"	v	file:
filemode_paths	tests/status/worktree.c	/^static const char *filemode_paths[] = {$/;"	v	file:
filemode_statuses	tests/status/worktree.c	/^static unsigned int filemode_statuses[] = {$/;"	v	file:
filename	src/tree.c	/^	const char *filename;$/;"	m	struct:tree_key_search	file:
filename	src/tree.h	/^	char filename[1];$/;"	m	struct:git_tree_entry
filename	tests/checkout/tree.c	/^	const char *filename;$/;"	m	struct:checkout_cancel_at	file:
filename	tests/clar_libgit2.c	/^	const char *filename;$/;"	m	struct:__anon13	file:
filename	tests/object/tree/write.c	/^	const char *filename;$/;"	m	struct:__anon22	file:
filename_len	src/tree.c	/^	size_t filename_len;$/;"	m	struct:tree_key_search	file:
filename_len	src/tree.h	/^	size_t filename_len;$/;"	m	struct:git_tree_entry
filename_len	tests/clar_libgit2.c	/^	size_t filename_len;$/;"	m	struct:__anon13	file:
filename_to_oid	src/odb_loose.c	/^GIT_INLINE(int) filename_to_oid(git_oid *oid, const char *ptr)$/;"	f
filepath	tests/odb/alternates.c	/^static git_buf destpath, filepath;$/;"	v	file:
files	src/attr.c	/^	git_vector *files;$/;"	m	struct:__anon176	file:
files	src/attrcache.h	/^	git_strmap *files;	 \/* hash path to git_attr_file of rules *\/$/;"	m	struct:__anon92
files	src/config.h	/^	git_vector files;$/;"	m	struct:git_config
files	tests/diff/diff_helpers.h	/^	int files;$/;"	m	struct:__anon8
files	tests/object/tree/walk.c	/^	int files;$/;"	m	struct:treewalk_skip_data	file:
files_are_equal	tests/index/tests.c	/^static void files_are_equal(const char *a, const char *b)$/;"	f	file:
files_binary	tests/diff/diff_helpers.h	/^	int files_binary;$/;"	m	struct:__anon8
fill_conflict_hunk	src/xdiff/xmerge.c	/^static int fill_conflict_hunk(xdfenv_t *xe1, const char *name1,$/;"	f	file:
fill_hashmap	src/xdiff/xpatience.c	/^static int fill_hashmap(mmfile_t *file1, mmfile_t *file2,$/;"	f	file:
fill_index_wth_head_entries	tests/status/worktree_init.c	/^static void fill_index_wth_head_entries(git_repository *repo, git_index *index)$/;"	f	file:
fill_origin_blob	src/blame_git.c	/^static void fill_origin_blob(git_blame__origin *o, mmfile_t *file)$/;"	f	file:
fill_window	deps/zlib/deflate.c	/^local void fill_window(s)$/;"	f
filled	src/pack-objects.h	/^	    filled:1;$/;"	m	struct:git_pobject
filter	src/filter.c	/^	git_filter *filter;$/;"	m	struct:__anon87	file:
filter	src/filter.c	/^	git_filter *filter;$/;"	m	struct:__anon88	file:
filter_all	tests/diff/notify.c	/^static int filter_all($/;"	f	file:
filter_def_filter_key_check	src/filter.c	/^static int filter_def_filter_key_check(const void *key, const void *fdef)$/;"	f	file:
filter_def_name_key_check	src/filter.c	/^static int filter_def_name_key_check(const void *key, const void *fdef)$/;"	f	file:
filter_def_priority_cmp	src/filter.c	/^static int filter_def_priority_cmp(const void *a, const void *b)$/;"	f	file:
filter_def_scan_attrs	src/filter.c	/^static int filter_def_scan_attrs($/;"	f	file:
filter_def_set_attrs	src/filter.c	/^static void filter_def_set_attrs(git_filter_def *fdef)$/;"	f	file:
filter_initialize	src/filter.c	/^static int filter_initialize(git_filter_def *fdef)$/;"	f	file:
filter_list_check_attributes	src/filter.c	/^static int filter_list_check_attributes($/;"	f	file:
filter_list_new	src/filter.c	/^static int filter_list_new($/;"	f	file:
filter_list_out_buffer_from_raw	src/filter.c	/^static int filter_list_out_buffer_from_raw($/;"	f	file:
filter_name	src/filter.c	/^	const char *filter_name;$/;"	m	struct:__anon88	file:
filter_refs	src/push.c	/^static int filter_refs(git_remote *remote)$/;"	f	file:
filter_registry	src/filter.c	/^struct filter_registry {$/;"	s	file:
filter_registry_find	src/filter.c	/^static int filter_registry_find(size_t *pos, const char *name)$/;"	f	file:
filter_registry_initialize	src/filter.c	/^static int filter_registry_initialize(void)$/;"	f	file:
filter_registry_lookup	src/filter.c	/^static git_filter_def *filter_registry_lookup(size_t *pos, const char *name)$/;"	f	file:
filter_registry_shutdown	src/filter.c	/^static void filter_registry_shutdown(void)$/;"	f	file:
filter_wants	src/fetch.c	/^static int filter_wants(git_remote *remote)$/;"	f	file:
filters	include/git2/filter.h	/^GIT_EXTERN(void) git_filter_list_free(git_filter_list *filters);$/;"	v
filters	src/filter.c	/^	git_vector filters;$/;"	m	struct:filter_registry	file:
final	src/blame.h	/^	git_commit *final;$/;"	m	struct:git_blame
final_blob	src/blame.h	/^	git_blob *final_blob;$/;"	m	struct:git_blame
final_buf	src/blame.h	/^	const char *final_buf;$/;"	m	struct:git_blame
final_buf_size	src/blame.h	/^	git_off_t final_buf_size;$/;"	m	struct:git_blame
final_commit_id	include/git2/blame.h	/^	git_oid final_commit_id;$/;"	m	struct:git_blame_hunk
final_signature	include/git2/blame.h	/^	git_signature *final_signature;$/;"	m	struct:git_blame_hunk
final_start_line_number	include/git2/blame.h	/^	uint16_t final_start_line_number;$/;"	m	struct:git_blame_hunk
finalize_write	include/git2/odb_backend.h	/^	int (*finalize_write)(git_odb_stream *stream, const git_oid *oid);$/;"	m	struct:git_odb_stream
find_blob	src/notes.c	/^static int find_blob(git_oid *blob, git_tree *tree, const char *target)$/;"	f	file:
find_ceiling_dir_offset	src/repository.c	/^static int find_ceiling_dir_offset($/;"	f	file:
find_child	src/tree-cache.c	/^static git_tree_cache *find_child(const git_tree_cache *tree, const char *path)$/;"	f	file:
find_collation_sequence_value	deps/regex/regexec.c	/^find_collation_sequence_value (const unsigned char *mbs, size_t mbs_len)$/;"	f	file:
find_deltas	src/pack-objects.c	/^static int find_deltas(git_packbuilder *pb, git_pobject **list,$/;"	f	file:
find_func	src/xdiff/xdiff.h	/^	find_func_t find_func;$/;"	m	struct:s_xdemitconf
find_func_priv	src/xdiff/xdiff.h	/^	void *find_func_priv;$/;"	m	struct:s_xdemitconf
find_func_t	src/xdiff/xdiff.h	/^typedef long (*find_func_t)(const char *line, long line_len, char *buffer, long buffer_size, void *priv);$/;"	t
find_internal_file_by_level	src/config.c	/^static int find_internal_file_by_level($/;"	f	file:
find_last_in_target	src/blame_git.c	/^static int find_last_in_target(git_blame *blame, git_blame__origin *target)$/;"	f	file:
find_lcs	src/xdiff/xhistogram.c	/^static int find_lcs($/;"	f	file:
find_longest_common_sequence	src/xdiff/xpatience.c	/^static struct entry *find_longest_common_sequence(struct hashmap *map)$/;"	f	file:
find_modules	tests/generate.py	/^    def find_modules(self):$/;"	m	class:TestSuite
find_next_backend	src/config.c	/^static int find_next_backend(size_t *out, const git_config *cfg, size_t i)$/;"	f	file:
find_next_dir	src/tree.c	/^static size_t find_next_dir(const char *dirname, git_index *index, size_t start)$/;"	f	file:
find_origin	src/blame_git.c	/^static git_blame__origin* find_origin($/;"	f	file:
find_recover_state	deps/regex/regexec.c	/^find_recover_state (reg_errcode_t *err, re_match_context_t *mctx)$/;"	f
find_repo	src/repository.c	/^static int find_repo($/;"	f	file:
find_subexp_node	deps/regex/regexec.c	/^find_subexp_node (const re_dfa_t *dfa, const re_node_set *nodes,$/;"	f	file:
find_subtree_in_current_level	src/notes.c	/^static int find_subtree_in_current_level($/;"	f	file:
find_subtree_r	src/notes.c	/^static int find_subtree_r(git_tree **out, git_tree *root,$/;"	f	file:
find_tmp_path	tests/clar/sandbox.h	/^find_tmp_path(char *buffer, size_t length)$/;"	f
findopts	examples/diff.c	/^	git_diff_find_options findopts;$/;"	m	struct:opts	file:
finish_done	deps/zlib/deflate.c	/^    finish_done     \/* finish done, accept no more input or output *\/$/;"	e	enum:__anon199	file:
finish_hash	src/hash/hash_win32.h	/^	hash_win32_cng_finish_hash_fn finish_hash;$/;"	m	struct:hash_cng_prov
finish_inflate	src/odb_loose.c	/^static int finish_inflate(z_stream *s)$/;"	f	file:
finish_started	deps/zlib/deflate.c	/^    finish_started, \/* finish started, need only more output at next deflate *\/$/;"	e	enum:__anon199	file:
finished	examples/network/fetch.c	/^	int finished;$/;"	m	struct:dl_data	file:
first	deps/regex/regex_internal.h	/^  struct bin_tree_t *first;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t
first	src/win32/dir.h	/^	int first;$/;"	m	struct:__anon168
first	src/xdiff/xpatience.c	/^	} *entries, *first, *last;$/;"	m	struct:hashmap	typeref:struct:hashmap::entry	file:
first_parent	src/revwalk.h	/^		first_parent: 1;$/;"	m	struct:git_revwalk
first_tree	tests/object/tree/write.c	/^static const char *first_tree  = "181037049a54a1eb5fab404658a3a250b44335d7";$/;"	v	file:
fix_thin_pack	src/indexer.c	/^static int fix_thin_pack(git_indexer *idx, git_transfer_progress *stats)$/;"	f	file:
fixedtables	deps/zlib/inflate.c	/^local void fixedtables(state)$/;"	f
fixture_path	tests/clar/fixtures.h	/^fixture_path(const char *base, const char *fixture_name)$/;"	f
fixup_line	src/config_file.c	/^static char *fixup_line(const char *ptr, int quote_count)$/;"	f	file:
fl	include/git2/sys/filter.h	/^GIT_EXTERN(size_t) git_filter_list_length(const git_filter_list *fl);$/;"	v
flags	deps/http-parser/http_parser.h	/^  unsigned char flags : 6;    \/* F_* values from 'flags' enum; semi-public *\/$/;"	m	struct:http_parser
flags	deps/http-parser/http_parser.h	/^enum flags$/;"	g
flags	deps/zlib/inflate.h	/^    int flags;                  \/* gzip header method and flags (0 if zlib) *\/$/;"	m	struct:inflate_state
flags	include/git2/blame.h	/^	uint32_t flags;$/;"	m	struct:git_blame_options
flags	include/git2/diff.h	/^	uint32_t      flags;	   \/**< git_diff_flag_t values *\/$/;"	m	struct:__anon267
flags	include/git2/diff.h	/^	uint32_t    flags;$/;"	m	struct:__anon266
flags	include/git2/diff.h	/^	uint32_t flags;            \/**< defaults to GIT_DIFF_NORMAL *\/$/;"	m	struct:__anon268
flags	include/git2/diff.h	/^	uint32_t flags;$/;"	m	struct:__anon272
flags	include/git2/index.h	/^	unsigned short flags;$/;"	m	struct:git_index_entry
flags	include/git2/merge.h	/^	git_merge_tree_flag_t flags;$/;"	m	struct:__anon251
flags	include/git2/repository.h	/^	uint32_t    flags;$/;"	m	struct:__anon212
flags	include/git2/revparse.h	/^	unsigned int flags;$/;"	m	struct:__anon206
flags	include/git2/status.h	/^	unsigned int      flags;$/;"	m	struct:__anon261
flags	include/git2/sys/config.h	/^	unsigned int flags;$/;"	m	struct:git_config_iterator
flags	src/attr.c	/^	uint32_t flags;$/;"	m	struct:__anon176	file:
flags	src/attr_file.h	/^	unsigned int flags;$/;"	m	struct:__anon129
flags	src/branch.c	/^	unsigned int flags;$/;"	m	struct:__anon159	file:
flags	src/cache.h	/^	uint16_t   flags; \/* GIT_CACHE_STORE value *\/$/;"	m	struct:__anon90
flags	src/commit_list.h	/^			 flags : 4;$/;"	m	struct:git_commit_list_node
flags	src/diff_driver.c	/^	int flags;$/;"	m	struct:__anon40	file:
flags	src/diff_file.h	/^	uint32_t flags;$/;"	m	struct:__anon154
flags	src/diff_patch.c	/^	uint32_t flags;$/;"	m	struct:git_patch	file:
flags	src/diff_print.c	/^	uint32_t flags;$/;"	m	struct:__anon123	file:
flags	src/fileops.c	/^	uint32_t flags;$/;"	m	struct:__anon36	file:
flags	src/fileops.c	/^	uint32_t flags;$/;"	m	struct:__anon37	file:
flags	src/index.c	/^	uint16_t flags;$/;"	m	struct:entry_long	file:
flags	src/index.c	/^	uint16_t flags;$/;"	m	struct:entry_short	file:
flags	src/iterator.h	/^	unsigned int flags;$/;"	m	struct:git_iterator
flags	src/merge_file.h	/^	git_merge_file_flags_t flags;$/;"	m	struct:__anon59
flags	src/refdb_fs.c	/^	char flags;$/;"	m	struct:packref	file:
flags	src/submodule.h	/^	uint32_t flags;$/;"	m	struct:git_submodule
flags	src/transports/local.c	/^	int flags;$/;"	m	struct:__anon78	file:
flags	src/transports/smart.h	/^	int flags;$/;"	m	struct:__anon73
flags	src/userdiff.h	/^	int flags;$/;"	m	struct:__anon179
flags	src/vector.h	/^	uint32_t flags;$/;"	m	struct:git_vector
flags	src/xdiff/xdiff.h	/^	unsigned long flags;$/;"	m	struct:s_xdemitconf
flags	src/xdiff/xdiff.h	/^	unsigned long flags;$/;"	m	struct:s_xpparam
flags	src/xdiff/xprepare.c	/^	long flags;$/;"	m	struct:s_xdlclassifier	file:
flags_extended	include/git2/index.h	/^	unsigned short flags_extended;$/;"	m	struct:git_index_entry
flags_extended	src/index.c	/^	uint16_t flags_extended;$/;"	m	struct:entry_long	file:
flattened	src/diff_patch.c	/^	git_pool flattened;$/;"	m	struct:git_patch	file:
flush_buffer	src/filebuf.c	/^GIT_INLINE(int) flush_buffer(git_filebuf *file)$/;"	f
flush_mode	src/filebuf.h	/^	int flush_mode;$/;"	m	struct:git_filebuf
flush_pending	deps/zlib/deflate.c	/^local void flush_pending(strm)$/;"	f
flush_pkt	src/transports/smart_pkt.c	/^static int flush_pkt(git_pkt **out)$/;"	f	file:
fmh	src/map.h	/^	HANDLE fmh; \/* file mapping handle *\/$/;"	m	struct:__anon140
fmt_one	src/oid.c	/^GIT_INLINE(char) *fmt_one(char *str, unsigned int val)$/;"	f
fn	examples/network/git2.c	/^	git_cb fn;$/;"	m	struct:__anon3	file:
fn	src/date.c	/^	void (*fn)(struct tm *, struct tm *, int *);$/;"	m	struct:special	file:
fn	src/transport.c	/^	git_transport_cb fn;$/;"	m	struct:transport_definition	file:
fn_locate_object_short_oid	src/odb_loose.c	/^static int fn_locate_object_short_oid(void *state, git_buf *pathbuf) {$/;"	f	file:
fnm_flags	src/status.c	/^	int fnm_flags;$/;"	m	struct:status_file_info	file:
fnmatch_flags	src/pathspec.c	/^	int fnmatch_flags;$/;"	m	struct:pathspec_match_context	file:
fns	src/userdiff.h	/^	const char *fns;$/;"	m	struct:__anon179
force	src/push.h	/^	bool force;$/;"	m	struct:push_spec
force	src/refspec.h	/^	unsigned int force :1,$/;"	m	struct:git_refspec
force_create_file	tests/checkout/typechange.c	/^static void force_create_file(const char *file)$/;"	f	file:
foreach	include/git2/sys/odb_backend.h	/^	int (* foreach)($/;"	m	struct:git_odb_backend
foreach_cancel_cb	tests/pack/packbuilder.c	/^static int foreach_cancel_cb(void *buf, size_t len, void *payload)$/;"	f	file:
foreach_cb	src/odb_loose.c	/^static int foreach_cb(void *_state, git_buf *path)$/;"	f	file:
foreach_cb	src/transports/local.c	/^static int foreach_cb(void *buf, size_t len, void *payload)$/;"	f	file:
foreach_cb	tests/odb/foreach.c	/^static int foreach_cb(const git_oid *oid, void *data)$/;"	f	file:
foreach_cb	tests/pack/packbuilder.c	/^static int foreach_cb(void *buf, size_t len, void *payload)$/;"	f	file:
foreach_data	src/transports/local.c	/^typedef struct foreach_data {$/;"	s	file:
foreach_data	src/transports/local.c	/^} foreach_data;$/;"	t	typeref:struct:foreach_data	file:
foreach_object_dir_cb	src/odb_loose.c	/^static int foreach_object_dir_cb(void *_state, git_buf *path)$/;"	f	file:
foreach_state	src/odb_loose.c	/^struct foreach_state {$/;"	s	file:
foreach_stop_cb	tests/odb/foreach.c	/^static int foreach_stop_cb(const git_oid *oid, void *data)$/;"	f	file:
format	examples/diff.c	/^	git_diff_format_t format;$/;"	m	struct:opts	file:
format	examples/status.c	/^    int format;$/;"	m	struct:opts	file:
format	src/diff_print.c	/^	git_diff_format_t format;$/;"	m	struct:__anon123	file:
found	src/attr.c	/^	git_attr_assignment *found;$/;"	m	struct:__anon175	file:
found	src/clone.c	/^	bool found;$/;"	m	struct:head_info	file:
found	src/odb_loose.c	/^	int found;				\/* number of matching$/;"	m	struct:__anon153	file:
fprintf_delta	tests/diff/diff_helpers.c	/^static void fprintf_delta(FILE *fp, const git_diff_delta *delta, float progress)$/;"	f	file:
free	include/git2/odb_backend.h	/^	void (*free)(git_odb_stream *stream);$/;"	m	struct:git_odb_stream
free	include/git2/odb_backend.h	/^	void (*free)(git_odb_writepack *writepack);$/;"	m	struct:git_odb_writepack
free	include/git2/sys/config.h	/^	void (*free)(git_config_iterator *iter);$/;"	m	struct:git_config_iterator
free	include/git2/sys/config.h	/^	void (*free)(struct git_config_backend *);$/;"	m	struct:git_config_backend
free	include/git2/sys/odb_backend.h	/^	void (* free)(git_odb_backend *);$/;"	m	struct:git_odb_backend
free	include/git2/sys/refdb_backend.h	/^	void (*free)($/;"	m	struct:git_reference_iterator
free	include/git2/sys/refdb_backend.h	/^	void (*free)(git_refdb_backend *backend);$/;"	m	struct:git_refdb_backend
free	include/git2/transport.h	/^	void (*free)($/;"	m	struct:git_smart_subtransport_stream
free	include/git2/transport.h	/^	void (*free)(git_cred *cred);$/;"	m	struct:git_cred
free	include/git2/transport.h	/^	void (*free)(git_smart_subtransport *transport);$/;"	m	struct:git_smart_subtransport
free	include/git2/transport.h	/^	void (*free)(git_transport *transport);$/;"	m	struct:git_transport
free	src/iterator.h	/^	void (*free)(git_iterator *);$/;"	m	struct:__anon112
free	src/object.c	/^	void (*free)(void *self);$/;"	m	struct:__anon102	file:
free_cache_object	src/pack.c	/^static void free_cache_object(void *o)$/;"	f	file:
free_charset	deps/regex/regcomp.c	/^free_charset (re_charset_t *cset)$/;"	f	file:
free_dfa_content	deps/regex/regcomp.c	/^free_dfa_content (re_dfa_t *dfa)$/;"	f	file:
free_fail_stack_return	deps/regex/regexec.c	/^free_fail_stack_return (struct re_fail_stack_t *fs)$/;"	f	file:
free_func	deps/zlib/zlib.h	/^typedef void   (*free_func)  OF((voidpf opaque, voidpf address));$/;"	t
free_hunk	src/blame.c	/^static void free_hunk(git_blame_hunk *hunk)$/;"	f	file:
free_item	src/sortedcache.h	/^	git_sortedcache_free_item_fn free_item;$/;"	m	struct:__anon158
free_item_payload	src/sortedcache.h	/^	void         *free_item_payload;$/;"	m	struct:__anon158
free_list	src/pool.h	/^	void *free_list;     \/* optional: list of freed blocks *\/$/;"	m	struct:__anon33
free_lowest_entry	src/pack.c	/^static void free_lowest_entry(git_pack_cache *cache)$/;"	f	file:
free_oids	tests/object/raw/short.c	/^static void free_oids(int n, char **oids)$/;"	f	file:
free_refspec	src/push.c	/^static void free_refspec(push_spec *spec)$/;"	f	file:
free_refspecs	src/remote.c	/^static void free_refspecs(git_vector *vec)$/;"	f	file:
free_signature	include/git2/diff.h	/^	void (*free_signature)(void *sig, void *payload);$/;"	m	struct:__anon271
free_state	deps/regex/regex_internal.c	/^free_state (re_dfastate_t *state)$/;"	f	file:
free_token	deps/regex/regcomp.c	/^free_token (re_token_t *node)$/;"	f	file:
free_tree	deps/regex/regcomp.c	/^free_tree (UNUSED void *extra, bin_tree_t *node)$/;"	f	file:
free_unpacked	src/pack-objects.c	/^static unsigned long free_unpacked(struct unpacked *n)$/;"	f	file:
free_vars	src/config_file.c	/^static void free_vars(git_strmap *values)$/;"	f	file:
free_workarea_compile	deps/regex/regcomp.c	/^free_workarea_compile (regex_t *preg)$/;"	f	file:
freq	deps/zlib/deflate.h	/^        ush  freq;       \/* frequency count *\/$/;"	m	union:ct_data_s::__anon202
from	include/git2/revparse.h	/^	git_object *from;$/;"	m	struct:__anon206
from_hex	src/util.h	/^static signed char from_hex[] = {$/;"	v
from_prefix	src/fileops.c	/^	ssize_t from_prefix;$/;"	m	struct:__anon37	file:
fs__dotordotdot	tests/clar/fs.h	/^fs__dotordotdot(WCHAR *_tocheck)$/;"	f
fs_copy	tests/clar/fs.h	/^fs_copy(const char *_source, const char *_dest)$/;"	f
fs_copy	tests/clar/fs.h	/^fs_copy(const char *_source, const char *dest)$/;"	f
fs_copydir_helper	tests/clar/fs.h	/^fs_copydir_helper(WCHAR *_wsource, WCHAR *_wdest)$/;"	f
fs_iterator	src/iterator.c	/^struct fs_iterator {$/;"	s	file:
fs_iterator	src/iterator.c	/^typedef struct fs_iterator fs_iterator;$/;"	t	typeref:struct:fs_iterator	file:
fs_iterator__advance	src/iterator.c	/^static int fs_iterator__advance($/;"	f	file:
fs_iterator__advance_into	src/iterator.c	/^static int fs_iterator__advance_into($/;"	f	file:
fs_iterator__advance_over	src/iterator.c	/^static int fs_iterator__advance_over($/;"	f	file:
fs_iterator__alloc_frame	src/iterator.c	/^static fs_iterator_frame *fs_iterator__alloc_frame(fs_iterator *fi)$/;"	f	file:
fs_iterator__at_end	src/iterator.c	/^static int fs_iterator__at_end(git_iterator *self)$/;"	f	file:
fs_iterator__current	src/iterator.c	/^static int fs_iterator__current($/;"	f	file:
fs_iterator__entry_cmp	src/iterator.c	/^static int fs_iterator__entry_cmp(const void *i, const void *item)$/;"	f	file:
fs_iterator__expand_dir	src/iterator.c	/^static int fs_iterator__expand_dir(fs_iterator *fi)$/;"	f	file:
fs_iterator__free	src/iterator.c	/^static void fs_iterator__free(git_iterator *self)$/;"	f	file:
fs_iterator__free_frame	src/iterator.c	/^static void fs_iterator__free_frame(fs_iterator_frame *ff)$/;"	f	file:
fs_iterator__initialize	src/iterator.c	/^static int fs_iterator__initialize($/;"	f	file:
fs_iterator__pop_frame	src/iterator.c	/^static void fs_iterator__pop_frame($/;"	f	file:
fs_iterator__reset	src/iterator.c	/^static int fs_iterator__reset($/;"	f	file:
fs_iterator__seek	src/iterator.c	/^static int fs_iterator__seek(git_iterator *self, const char *prefix)$/;"	f	file:
fs_iterator__seek_frame_start	src/iterator.c	/^static void fs_iterator__seek_frame_start($/;"	f	file:
fs_iterator__update_entry	src/iterator.c	/^static int fs_iterator__update_entry(fs_iterator *fi)$/;"	f	file:
fs_iterator_frame	src/iterator.c	/^struct fs_iterator_frame {$/;"	s	file:
fs_iterator_frame	src/iterator.c	/^typedef struct fs_iterator_frame fs_iterator_frame;$/;"	t	typeref:struct:fs_iterator_frame	file:
fs_rm	tests/clar/fs.h	/^fs_rm(const char *_source)$/;"	f
fs_rm	tests/clar/fs.h	/^fs_rm(const char *source)$/;"	f
fs_rm_wait	tests/clar/fs.h	/^fs_rm_wait(WCHAR *_wpath)$/;"	f
fs_rmdir_helper	tests/clar/fs.h	/^fs_rmdir_helper(WCHAR *_wsource)$/;"	f
fs_rmdir_rmdir	tests/clar/fs.h	/^fs_rmdir_rmdir(WCHAR *_wpath)$/;"	f
fstat	src/win32/mingw-compat.h	15;"	d
fstat	src/win32/msvc-compat.h	19;"	d
fsync_object_files	src/odb_loose.c	/^	int fsync_object_files; \/** loose object file fsync flag. *\/$/;"	m	struct:loose_backend	file:
full	src/attr_file.h	/^	git_buf  full;$/;"	m	struct:__anon135
full	src/oid.c	/^	int min_length, full;$/;"	m	struct:git_oid_shorten	file:
full	src/pool.h	/^	git_pool_page *full; \/* pages with no space left *\/$/;"	m	struct:__anon33
func	deps/zlib/deflate.c	/^   compress_func func;$/;"	m	struct:config_s	file:
func_line	src/xdiff/xemit.c	/^struct func_line {$/;"	s	file:
futils__error_cannot_rmdir	src/fileops.c	/^static int futils__error_cannot_rmdir(const char *path, const char *filemsg)$/;"	f	file:
futils__rm_first_parent	src/fileops.c	/^static int futils__rm_first_parent(git_buf *path, const char *ceiling)$/;"	f	file:
futils__rmdir_data	src/fileops.c	/^} futils__rmdir_data;$/;"	t	typeref:struct:__anon36	file:
futils__rmdir_empty_parent	src/fileops.c	/^static int futils__rmdir_empty_parent(void *opaque, git_buf *path)$/;"	f	file:
futils__rmdir_recurs_foreach	src/fileops.c	/^static int futils__rmdir_recurs_foreach(void *opaque, git_buf *path)$/;"	f	file:
g_actualobject	tests/object/lookupbypath.c	/^						*g_actualobject;$/;"	v	file:
g_blame	tests/blame/getters.c	/^git_blame *g_blame;$/;"	v
g_blame	tests/blame/simple.c	/^static git_blame *g_blame;$/;"	v	file:
g_bufferblame	tests/blame/buffer.c	/^static git_blame *g_fileblame, *g_bufferblame;$/;"	v	file:
g_config	tests/config/rename.c	/^static git_config *g_config = NULL;$/;"	v	file:
g_crlf_filtered	tests/object/blob/filter.c	/^static git_buf g_crlf_filtered[CRLF_NUM_TEST_OBJECTS] = {$/;"	v	file:
g_crlf_filtered_stats	tests/object/blob/filter.c	/^static git_buf_text_stats g_crlf_filtered_stats[CRLF_NUM_TEST_OBJECTS] = {$/;"	v	file:
g_crlf_oids	tests/object/blob/filter.c	/^static git_oid g_crlf_oids[CRLF_NUM_TEST_OBJECTS];$/;"	v	file:
g_crlf_raw	tests/object/blob/filter.c	/^static const char *g_crlf_raw[CRLF_NUM_TEST_OBJECTS] = {$/;"	v	file:
g_crlf_raw_len	tests/object/blob/filter.c	/^static git_off_t g_crlf_raw_len[CRLF_NUM_TEST_OBJECTS] = {$/;"	v	file:
g_data	tests/object/cache.c	/^} g_data[] = {$/;"	v	typeref:struct:__anon21	file:
g_expected	tests/threads/refdb.c	/^static int g_expected = 0;$/;"	v	file:
g_expectedobject	tests/object/lookupbypath.c	/^static git_object *g_expectedobject,$/;"	v	file:
g_fileblame	tests/blame/buffer.c	/^static git_blame *g_fileblame, *g_bufferblame;$/;"	v	file:
g_git_oom_error	src/errors.c	/^static git_error g_git_oom_error = {$/;"	v	file:
g_head_commit	tests/object/lookupbypath.c	/^static git_commit *g_head_commit;$/;"	v	file:
g_index	tests/checkout/conflict.c	/^static git_index *g_index;$/;"	v	file:
g_index	tests/index/crlf.c	/^static git_index *g_index;$/;"	v	file:
g_obj	tests/refs/revparse.c	/^static git_object *g_obj;$/;"	v	file:
g_object	tests/checkout/tree.c	/^static git_object *g_object;$/;"	v	file:
g_options	tests/clone/empty.c	/^static git_clone_options g_options;$/;"	v	file:
g_options	tests/clone/nonetwork.c	/^static git_clone_options g_options;$/;"	v	file:
g_options	tests/online/clone.c	/^static git_clone_options g_options;$/;"	v	file:
g_options	tests/online/fetchhead.c	/^static git_clone_options g_options;$/;"	v	file:
g_opts	tests/checkout/tree.c	/^static git_checkout_opts g_opts;$/;"	v	file:
g_peel_repo	tests/refs/peel.c	/^static git_repository *g_peel_repo;$/;"	v	file:
g_ref	tests/clone/nonetwork.c	/^static git_reference* g_ref;$/;"	v	file:
g_reflog	tests/refs/reflog/drop.c	/^static git_reflog *g_reflog;$/;"	v	file:
g_remote	tests/clone/nonetwork.c	/^static git_remote* g_remote;$/;"	v	file:
g_repo	tests/attr/ignore.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/attr/repo.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/blame/buffer.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/blame/harder.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/blame/simple.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/checkout/binaryunicode.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/checkout/conflict.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/checkout/crlf.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/checkout/head.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/checkout/index.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/checkout/tree.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/checkout/typechange.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/clone/empty.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/clone/nonetwork.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/commit/parse.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/commit/write.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/config/rename.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/diff/blob.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/diff/drivers.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/diff/index.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/diff/notify.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/diff/patch.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/diff/pathspec.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/diff/rename.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/diff/submodules.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/diff/tree.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/diff/workdir.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/fetchhead/nonetwork.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/filter/blob.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/filter/crlf.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/filter/custom.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/filter/ident.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/index/addall.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/index/crlf.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/index/filemodes.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/object/blob/filter.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/object/cache.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/object/lookup.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/object/lookupbypath.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/object/peel.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/object/tag/list.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/object/tag/read.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/object/tag/write.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/object/tree/read.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/object/tree/walk.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/object/tree/write.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/online/clone.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/online/fetchhead.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/branches/remote.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/create.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/createwithlog.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/delete.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/list.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/lookup.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/overwrite.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/pack.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/peel.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/races.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/read.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/reflog/drop.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/reflog/reflog.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/rename.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/revparse.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/settargetwithlog.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/setter.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/refs/update.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/repo/iterator.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/repo/pathspec.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/repo/shallow.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/status/ignore.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/status/renames.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/status/submodules.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/stress/diff.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/submodule/lookup.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/submodule/modify.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/submodule/status.c	/^static git_repository *g_repo = NULL;$/;"	v	file:
g_repo	tests/threads/basic.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo	tests/threads/refdb.c	/^static git_repository *g_repo;$/;"	v	file:
g_repo_cloned	tests/clone/empty.c	/^static git_repository *g_repo_cloned;$/;"	v	file:
g_root_tree	tests/object/lookupbypath.c	/^static git_tree *g_root_tree;$/;"	v	file:
g_typechange_empty	tests/checkout/typechange.c	/^static bool g_typechange_empty[] = {$/;"	v	file:
g_typechange_oids	tests/checkout/typechange.c	/^static const char *g_typechange_oids[] = {$/;"	v	file:
g_umask	tests/repo/init.c	/^static mode_t g_umask = 0;$/;"	v	file:
gen_bitlen	deps/zlib/trees.c	/^local void gen_bitlen(s, desc)$/;"	f
gen_codes	deps/zlib/trees.c	/^local void gen_codes (tree, max_code, bl_count)$/;"	f
gen_pktline	src/transports/smart_protocol.c	/^static int gen_pktline(git_buf *buf, git_push *push)$/;"	f	file:
gen_proto	src/transports/git.c	/^static int gen_proto(git_buf *request, const char *cmd, const char *url)$/;"	f	file:
gen_proto	src/transports/ssh.c	/^static int gen_proto(git_buf *request, const char *cmd, const char *url)$/;"	f	file:
gen_request	src/transports/http.c	/^static int gen_request($/;"	f	file:
gen_trees_header	deps/zlib/trees.c	/^void gen_trees_header()$/;"	f
generator	tests/resources/userdiff/after/file.php	/^        $this->generator = $generator;$/;"	v
generator	tests/resources/userdiff/after/file.php	/^    protected $generator;$/;"	v
generator	tests/resources/userdiff/before/file.php	/^        $this->generator = $generator;$/;"	v
generator	tests/resources/userdiff/before/file.php	/^    protected $generator;$/;"	v
generator	tests/resources/userdiff/expected/driver/diff.php	/^         $this->generator = $generator;$/;"	v
generator	tests/resources/userdiff/expected/nodriver/diff.php	/^         $this->generator = $generator;$/;"	v
generator	tests/resources/userdiff/files/file.php	/^        $this->generator = $generator;$/;"	v
generator	tests/resources/userdiff/files/file.php	/^    protected $generator;$/;"	v
get	include/git2/sys/config.h	/^	int (*get)(const struct git_config_backend *, const char *key, const git_config_entry **entry);$/;"	m	struct:git_config_backend
get_assign	tests/attr/file.c	6;"	d	file:
get_be32	src/hash/hash_generic.c	76;"	d	file:
get_be32	src/hash/hash_generic.c	81;"	d	file:
get_binary_object_header	src/odb_loose.c	/^static size_t get_binary_object_header(obj_hdr *hdr, git_buf *obj)$/;"	f	file:
get_buf_ptr	tests/diff/submodules.c	16;"	d	file:
get_check_cert	src/remote.c	/^static int get_check_cert(int *out, git_repository *repo)$/;"	f	file:
get_commit_index	tests/revwalk/basic.c	/^static int get_commit_index(git_oid *raw_oid)$/;"	f	file:
get_crc_table	deps/zlib/crc32.c	/^const unsigned long FAR * ZEXPORT get_crc_table()$/;"	f
get_delta	src/pack-objects.c	/^static int get_delta(void **out, git_odb *odb, git_pobject *po)$/;"	f	file:
get_delta_base	src/pack.c	/^git_off_t get_delta_base($/;"	f
get_entry	src/config.c	/^static int get_entry($/;"	f	file:
get_func_line	src/xdiff/xemit.c	/^static long get_func_line(xdfenv_t *xe, xdemitconf_t const *xecfg,$/;"	f	file:
get_internal_ignores	src/ignore.c	/^static int get_internal_ignores(git_attr_file **ign, git_repository *repo)$/;"	f	file:
get_next	src/revwalk.h	/^	int (*get_next)(git_commit_list_node **, git_revwalk *);$/;"	m	struct:git_revwalk
get_object_header	src/odb_loose.c	/^static size_t get_object_header(obj_hdr *hdr, unsigned char *data)$/;"	f	file:
get_one_status	src/status.c	/^static int get_one_status(const char *path, unsigned int status, void *data)$/;"	f	file:
get_optional_config	src/remote.c	/^static int get_optional_config($/;"	f	file:
get_page_size	src/win32/map.c	/^static DWORD get_page_size(void)$/;"	f	file:
get_property	src/hash/hash_win32.h	/^	hash_win32_cng_get_property_fn get_property;$/;"	m	struct:hash_cng_prov
get_rule	tests/attr/file.c	5;"	d	file:
get_subexp	deps/regex/regexec.c	/^get_subexp (re_match_context_t *mctx, int bkref_node, int bkref_str_idx)$/;"	f	file:
get_subexp_sub	deps/regex/regexec.c	/^get_subexp_sub (re_match_context_t *mctx, const re_sub_match_top_t *sub_top,$/;"	f	file:
get_temp_file	src/transports/winhttp.c	/^static int get_temp_file(LPWSTR buffer, DWORD buffer_len_cch)$/;"	f	file:
get_verb	src/transports/http.c	/^static const char *get_verb = "GET";$/;"	v	file:
get_verb	src/transports/winhttp.c	/^static const wchar_t *get_verb = L"GET";$/;"	v	file:
gettext	deps/regex/regex_internal.h	100;"	d
gettext	deps/regex/regex_internal.h	101;"	d
gettext	deps/regex/regex_internal.h	105;"	d
gettext_noop	deps/regex/regex_internal.h	111;"	d
gf2_matrix_square	deps/zlib/crc32.c	/^local void gf2_matrix_square(square, mat)$/;"	f
gf2_matrix_times	deps/zlib/crc32.c	/^local unsigned long gf2_matrix_times(mat, vec)$/;"	f
gid	include/git2/index.h	/^	unsigned int gid;$/;"	m	struct:git_index_entry
gid	src/index.c	/^	uint32_t gid;$/;"	m	struct:entry_long	file:
gid	src/index.c	/^	uint32_t gid;$/;"	m	struct:entry_short	file:
git__DIR	src/win32/dir.h	/^} git__DIR;$/;"	t	typeref:struct:__anon168
git___compare_and_swap	src/thread-utils.h	/^GIT_INLINE(void *) git___compare_and_swap($/;"	f
git___swap	src/thread-utils.h	/^GIT_INLINE(volatile void *) git___swap($/;"	f
git__bsearch	src/util.c	/^int git__bsearch($/;"	f
git__bsearch_r	src/util.c	/^int git__bsearch_r($/;"	f
git__calloc	src/util.h	/^GIT_INLINE(void *) git__calloc(size_t nelem, size_t elsize)$/;"	f
git__closedir	src/win32/dir.c	/^int git__closedir(git__DIR *d)$/;"	f
git__compare_and_swap	src/thread-utils.h	265;"	d
git__date_parse	src/date.c	/^int git__date_parse(git_time_t *out, const char *date)$/;"	f
git__delta_apply	src/delta-apply.c	/^int git__delta_apply($/;"	f
git__delta_read_header	src/delta-apply.c	/^int git__delta_read_header($/;"	f
git__dirent	src/win32/dir.h	/^struct git__dirent {$/;"	s
git__filter_registry	src/filter.c	/^static struct filter_registry *git__filter_registry = NULL;$/;"	v	typeref:struct:filter_registry	file:
git__free	src/util.h	/^GIT_INLINE(void) git__free(void *ptr)$/;"	f
git__fromhex	src/util.h	/^GIT_INLINE(int) git__fromhex(char h)$/;"	f
git__global_state	src/global.c	/^git_global_st *git__global_state(void)$/;"	f
git__hash	src/util.c	/^uint32_t git__hash(const void *key, int len, uint32_t seed)$/;"	f
git__hash	src/util.c	/^uint32_t git__hash(const void *key, int len, unsigned int seed)$/;"	f
git__hexdump	src/util.c	/^void git__hexdump(const char *buffer, size_t len)$/;"	f
git__init_structure	src/common.h	/^GIT_INLINE(void) git__init_structure(void *structure, size_t len, unsigned int version)$/;"	f
git__insertsort_r	src/util.c	/^void git__insertsort_r($/;"	f
git__is_sizet	src/util.h	/^GIT_INLINE(int) git__is_sizet(git_off_t p)$/;"	f
git__is_uint32	src/util.h	/^GIT_INLINE(int) git__is_uint32(size_t p)$/;"	f
git__isalpha	src/util.h	/^GIT_INLINE(bool) git__isalpha(int c)$/;"	f
git__isdigit	src/util.h	/^GIT_INLINE(bool) git__isdigit(int c)$/;"	f
git__ishex	src/util.h	/^GIT_INLINE(int) git__ishex(const char *str)$/;"	f
git__isspace	src/util.h	/^GIT_INLINE(bool) git__isspace(int c)$/;"	f
git__isspace_nonlf	src/util.h	/^GIT_INLINE(bool) git__isspace_nonlf(int c)$/;"	f
git__isupper	src/util.h	/^GIT_INLINE(bool) git__isupper(int c)$/;"	f
git__iswildcard	src/util.h	/^GIT_INLINE(bool) git__iswildcard(int c)$/;"	f
git__malloc	src/util.h	/^GIT_INLINE(void *) git__malloc(size_t len)$/;"	f
git__memcmp4	src/pack.c	/^static int git__memcmp4(const void *a, const void *b) {$/;"	f	file:
git__memrchr	src/util.h	/^GIT_INLINE(const void *) git__memrchr(const void *s, int c, size_t n)$/;"	f
git__memzero	src/util.h	/^GIT_INLINE(void) git__memzero(void *data, size_t size)$/;"	f
git__mwindow_mutex	src/global.c	/^git_mutex git__mwindow_mutex;$/;"	v
git__n_inits	src/global.c	/^static git_atomic git__n_inits;$/;"	v	file:
git__n_shutdown_callbacks	src/global.c	/^git_atomic git__n_shutdown_callbacks;$/;"	v
git__next_line	src/util.h	/^GIT_INLINE(const char *) git__next_line(const char *s)$/;"	f
git__on_shutdown	src/global.c	/^void git__on_shutdown(git_global_shutdown_fn callback)$/;"	f
git__opendir	src/win32/dir.c	/^git__DIR *git__opendir(const char *dir)$/;"	f
git__parse_bool	src/util.c	/^int git__parse_bool(int *out, const char *value)$/;"	f
git__percent_decode	src/path.c	/^int git__percent_decode(git_buf *decoded_out, const char *input)$/;"	f
git__prefixcmp	src/util.c	/^int git__prefixcmp(const char *str, const char *prefix)$/;"	f
git__prefixcmp_icase	src/util.c	/^int git__prefixcmp_icase(const char *str, const char *prefix)$/;"	f
git__qsort_r	src/util.c	/^void git__qsort_r($/;"	f
git__qsort_r_glue	src/util.c	/^} git__qsort_r_glue;$/;"	t	typeref:struct:__anon106	file:
git__qsort_r_glue_cmp	src/util.c	/^static int GIT_STDLIB_CALL git__qsort_r_glue_cmp($/;"	f	file:
git__readdir	src/win32/dir.c	/^struct git__dirent *git__readdir(git__DIR *d)$/;"	f
git__readdir_ext	src/win32/dir.c	/^int git__readdir_ext($/;"	f
git__realloc	src/util.h	/^GIT_INLINE(void *) git__realloc(void *ptr, size_t size)$/;"	f
git__rewinddir	src/win32/dir.c	/^void git__rewinddir(git__DIR *d)$/;"	f
git__rotl	src/util.h	127;"	d
git__rotl	src/util.h	129;"	d
git__shutdown	src/global.c	/^static void git__shutdown(void)$/;"	f	file:
git__shutdown_callbacks	src/global.c	/^git_global_shutdown_fn git__shutdown_callbacks[MAX_SHUTDOWN_CB];$/;"	v
git__signum	src/util.h	/^GIT_INLINE(int) git__signum(int val)$/;"	f
git__size_t_bitmask	src/util.h	/^GIT_INLINE(size_t) git__size_t_bitmask(size_t v)$/;"	f
git__size_t_powerof2	src/util.h	/^GIT_INLINE(size_t) git__size_t_powerof2(size_t v)$/;"	f
git__sort_r_cmp	src/util.h	/^typedef int (*git__sort_r_cmp)(const void *a, const void *b, void *payload);$/;"	t
git__strcasecmp	src/util.c	/^int git__strcasecmp(const char *a, const char *b)$/;"	f
git__strcasesort_cmp	src/util.c	/^int git__strcasesort_cmp(const char *a, const char *b)$/;"	f
git__strcmp	src/util.c	/^int git__strcmp(const char *a, const char *b)$/;"	f
git__strcmp_cb	src/util.c	/^int git__strcmp_cb(const void *a, const void *b)$/;"	f
git__strdup	src/util.h	/^GIT_INLINE(char *) git__strdup(const char *str)$/;"	f
git__strncasecmp	src/util.c	/^int git__strncasecmp(const char *a, const char *b, size_t sz)$/;"	f
git__strncmp	src/util.c	/^int git__strncmp(const char *a, const char *b, size_t sz)$/;"	f
git__strndup	src/util.h	/^GIT_INLINE(char *) git__strndup(const char *str, size_t n)$/;"	f
git__strntolower	src/util.c	/^void git__strntolower(char *str, size_t len)$/;"	f
git__strsep	src/util.c	/^char *git__strsep(char **end, const char *sep)$/;"	f
git__strtok	src/util.c	/^char *git__strtok(char **end, const char *sep)$/;"	f
git__strtol32	src/util.c	/^int git__strtol32(int32_t *result, const char *nptr, const char **endptr, int base)$/;"	f
git__strtol64	src/util.c	/^int git__strtol64(int64_t *result, const char *nptr, const char **endptr, int base)$/;"	f
git__strtolower	src/util.c	/^void git__strtolower(char *str)$/;"	f
git__substrdup	src/util.h	/^GIT_INLINE(char *) git__substrdup(const char *start, size_t n)$/;"	f
git__suffixcmp	src/util.c	/^int git__suffixcmp(const char *str, const char *suffix)$/;"	f
git__swap	src/thread-utils.h	268;"	d
git__timer	src/util.h	/^GIT_INLINE(double) git__timer(void)$/;"	f
git__tsort	src/tsort.c	/^void git__tsort(void **dst, size_t size, git__tsort_cmp cmp)$/;"	f
git__tsort_cmp	src/util.h	/^typedef int (*git__tsort_cmp)(const void *a, const void *b);$/;"	t
git__tsort_r	src/tsort.c	/^void git__tsort_r($/;"	f
git__unescape	src/util.c	/^size_t git__unescape(char *str)$/;"	f
git__utf16_to_8	src/win32/utf-conv.c	/^int git__utf16_to_8(char *dest, size_t dest_size, const wchar_t *src)$/;"	f
git__utf8_to_16	src/win32/utf-conv.c	/^int git__utf8_to_16(wchar_t * dest, size_t dest_size, const char *src)$/;"	f
git_ack_status	src/transports/smart.h	/^enum git_ack_status {$/;"	g
git_array_alloc	src/array.h	59;"	d
git_array_clear	src/array.h	36;"	d
git_array_generic_t	src/array.h	/^typedef git_array_t(char) git_array_generic_t;$/;"	t
git_array_get	src/array.h	68;"	d
git_array_grow	src/array.h	/^GIT_INLINE(void *) git_array_grow(void *_a, size_t item_size)$/;"	f
git_array_init	src/array.h	30;"	d
git_array_init_to_size	src/array.h	33;"	d
git_array_last	src/array.h	64;"	d
git_array_pop	src/array.h	66;"	d
git_array_size	src/array.h	70;"	d
git_array_t	src/array.h	26;"	d
git_array_valid_index	src/array.h	72;"	d
git_atomic	src/thread-utils.h	/^} git_atomic;$/;"	t	typeref:struct:__anon107
git_atomic64	src/thread-utils.h	/^} git_atomic64;$/;"	t	typeref:struct:__anon108
git_atomic64_add	src/thread-utils.h	/^GIT_INLINE(int64_t) git_atomic64_add(git_atomic64 *a, int64_t addend)$/;"	f
git_atomic_add	src/thread-utils.h	/^GIT_INLINE(int) git_atomic_add(git_atomic *a, int32_t addend)$/;"	f
git_atomic_dec	src/thread-utils.h	/^GIT_INLINE(int) git_atomic_dec(git_atomic *a)$/;"	f
git_atomic_get	src/thread-utils.h	/^GIT_INLINE(int) git_atomic_get(git_atomic *a)$/;"	f
git_atomic_inc	src/thread-utils.h	/^GIT_INLINE(int) git_atomic_inc(git_atomic *a)$/;"	f
git_atomic_set	src/thread-utils.h	/^GIT_INLINE(void) git_atomic_set(git_atomic *a, int val)$/;"	f
git_atomic_ssize	src/thread-utils.h	/^typedef git_atomic git_atomic_ssize;$/;"	t
git_atomic_ssize	src/thread-utils.h	/^typedef git_atomic64 git_atomic_ssize;$/;"	t
git_atomic_ssize_add	src/thread-utils.h	31;"	d
git_atomic_ssize_add	src/thread-utils.h	37;"	d
git_attr__false	src/attr.c	/^const char *git_attr__false = "[internal]__FALSE__";$/;"	v
git_attr__true	src/attr.c	/^const char *git_attr__true  = "[internal]__TRUE__";$/;"	v
git_attr__unset	src/attr.c	/^const char *git_attr__unset = "[internal]__UNSET__";$/;"	v
git_attr_add_macro	src/attr.c	/^int git_attr_add_macro($/;"	f
git_attr_assignment	src/attr_file.h	/^} git_attr_assignment;$/;"	t	typeref:struct:__anon132
git_attr_assignment__free	src/attr_file.c	/^static void git_attr_assignment__free(git_attr_assignment *assign)$/;"	f	file:
git_attr_assignment__parse	src/attr_file.c	/^int git_attr_assignment__parse($/;"	f
git_attr_cache	src/attrcache.h	/^} git_attr_cache;$/;"	t	typeref:struct:__anon92
git_attr_cache__decide_sources	src/attr.c	/^int git_attr_cache__decide_sources($/;"	f
git_attr_cache__init	src/attr.c	/^int git_attr_cache__init(git_repository *repo)$/;"	f
git_attr_cache__insert_macro	src/attr.c	/^int git_attr_cache__insert_macro(git_repository *repo, git_attr_rule *macro)$/;"	f
git_attr_cache__internal_file	src/attr.c	/^int git_attr_cache__internal_file($/;"	f
git_attr_cache__is_cached	src/attr.c	/^bool git_attr_cache__is_cached($/;"	f
git_attr_cache__lookup_macro	src/attr.c	/^git_attr_rule *git_attr_cache__lookup_macro($/;"	f
git_attr_cache__push_file	src/attr.c	/^int git_attr_cache__push_file($/;"	f
git_attr_cache_flush	src/attr.c	/^void git_attr_cache_flush($/;"	f
git_attr_file	src/attr_file.h	/^} git_attr_file;$/;"	t	typeref:struct:__anon133
git_attr_file__clear_rules	src/attr_file.c	/^void git_attr_file__clear_rules(git_attr_file *file)$/;"	f
git_attr_file__foreach_matching_rule	src/attr_file.h	113;"	d
git_attr_file__free	src/attr_file.c	/^void git_attr_file__free(git_attr_file *file)$/;"	f
git_attr_file__lookup_one	src/attr_file.c	/^int git_attr_file__lookup_one($/;"	f
git_attr_file__name_hash	src/attr_file.c	/^uint32_t git_attr_file__name_hash(const char *name)$/;"	f
git_attr_file__new	src/attr_file.c	/^int git_attr_file__new($/;"	f
git_attr_file__new_and_load	src/attr_file.c	/^int git_attr_file__new_and_load($/;"	f
git_attr_file__parse_buffer	src/attr_file.c	/^int git_attr_file__parse_buffer($/;"	f
git_attr_file_parser	src/attr.h	/^typedef int (*git_attr_file_parser)($/;"	t
git_attr_file_source	src/attr_file.h	/^} git_attr_file_source;$/;"	t	typeref:enum:__anon136
git_attr_fnmatch	src/attr_file.h	/^} git_attr_fnmatch;$/;"	t	typeref:struct:__anon129
git_attr_fnmatch__match	src/attr_file.c	/^bool git_attr_fnmatch__match($/;"	f
git_attr_fnmatch__parse	src/attr_file.c	/^int git_attr_fnmatch__parse($/;"	f
git_attr_foreach	src/attr.c	/^int git_attr_foreach($/;"	f
git_attr_foreach_cb	include/git2/attr.h	/^typedef int (*git_attr_foreach_cb)(const char *name, const char *value, void *payload);$/;"	t
git_attr_get	src/attr.c	/^int git_attr_get($/;"	f
git_attr_get_many	src/attr.c	/^int git_attr_get_many($/;"	f
git_attr_name	src/attr_file.h	/^} git_attr_name;$/;"	t	typeref:struct:__anon131
git_attr_path	src/attr_file.h	/^} git_attr_path;$/;"	t	typeref:struct:__anon135
git_attr_path__free	src/attr_file.c	/^void git_attr_path__free(git_attr_path *info)$/;"	f
git_attr_path__init	src/attr_file.c	/^int git_attr_path__init($/;"	f
git_attr_rule	src/attr_file.h	/^} git_attr_rule;$/;"	t	typeref:struct:__anon130
git_attr_rule__clear	src/attr_file.c	/^static void git_attr_rule__clear(git_attr_rule *rule)$/;"	f	file:
git_attr_rule__free	src/attr_file.c	/^void git_attr_rule__free(git_attr_rule *rule)$/;"	f
git_attr_rule__lookup_assignment	src/attr_file.c	/^git_attr_assignment *git_attr_rule__lookup_assignment($/;"	f
git_attr_rule__match	src/attr_file.c	/^bool git_attr_rule__match($/;"	f
git_attr_t	include/git2/attr.h	/^} git_attr_t;$/;"	t	typeref:enum:__anon215
git_attr_value	src/attr.c	/^git_attr_t git_attr_value(const char *attr)$/;"	f
git_bitvec	src/bitvec.h	/^} git_bitvec;$/;"	t	typeref:struct:__anon162
git_bitvec_clear	src/bitvec.h	/^GIT_INLINE(void) git_bitvec_clear(git_bitvec *bv)$/;"	f
git_bitvec_free	src/bitvec.h	/^GIT_INLINE(void) git_bitvec_free(git_bitvec *bv)$/;"	f
git_bitvec_get	src/bitvec.h	/^GIT_INLINE(bool) git_bitvec_get(git_bitvec *bv, size_t bit)$/;"	f
git_bitvec_init	src/bitvec.h	/^GIT_INLINE(int) git_bitvec_init(git_bitvec *bv, size_t capacity)$/;"	f
git_bitvec_set	src/bitvec.h	/^GIT_INLINE(void) git_bitvec_set(git_bitvec *bv, size_t bit, bool on)$/;"	f
git_blame	include/git2/blame.h	/^typedef struct git_blame git_blame;$/;"	t	typeref:struct:git_blame
git_blame	src/blame.h	/^struct git_blame {$/;"	s
git_blame__alloc	src/blame.c	/^git_blame* git_blame__alloc($/;"	f
git_blame__entry	src/blame.h	/^typedef struct git_blame__entry {$/;"	s
git_blame__entry	src/blame.h	/^} git_blame__entry;$/;"	t	typeref:struct:git_blame__entry
git_blame__free_entry	src/blame_git.c	/^void git_blame__free_entry(git_blame__entry *ent)$/;"	f
git_blame__get_origin	src/blame_git.c	/^int git_blame__get_origin($/;"	f
git_blame__like_git	src/blame_git.c	/^void git_blame__like_git(git_blame *blame, uint32_t opt)$/;"	f
git_blame__origin	src/blame.h	/^typedef struct git_blame__origin {$/;"	s
git_blame__origin	src/blame.h	/^} git_blame__origin;$/;"	t	typeref:struct:git_blame__origin
git_blame_buffer	src/blame.c	/^int git_blame_buffer($/;"	f
git_blame_file	src/blame.c	/^int git_blame_file($/;"	f
git_blame_flag_t	include/git2/blame.h	/^} git_blame_flag_t;$/;"	t	typeref:enum:__anon232
git_blame_free	src/blame.c	/^void git_blame_free(git_blame *blame)$/;"	f
git_blame_get_hunk_byindex	src/blame.c	/^const git_blame_hunk *git_blame_get_hunk_byindex(git_blame *blame, uint32_t index)$/;"	f
git_blame_get_hunk_byline	src/blame.c	/^const git_blame_hunk *git_blame_get_hunk_byline(git_blame *blame, uint32_t lineno)$/;"	f
git_blame_get_hunk_count	src/blame.c	/^uint32_t git_blame_get_hunk_count(git_blame *blame)$/;"	f
git_blame_hunk	include/git2/blame.h	/^typedef struct git_blame_hunk {$/;"	s
git_blame_hunk	include/git2/blame.h	/^} git_blame_hunk;$/;"	t	typeref:struct:git_blame_hunk
git_blame_options	include/git2/blame.h	/^typedef struct git_blame_options {$/;"	s
git_blame_options	include/git2/blame.h	/^} git_blame_options;$/;"	t	typeref:struct:git_blame_options
git_blob	include/git2/types.h	/^typedef struct git_blob git_blob;$/;"	t	typeref:struct:git_blob
git_blob	src/blob.h	/^struct git_blob {$/;"	s
git_blob__create_from_paths	src/blob.c	/^int git_blob__create_from_paths($/;"	f
git_blob__free	src/blob.c	/^void git_blob__free(void *blob)$/;"	f
git_blob__getbuf	src/blob.c	/^int git_blob__getbuf(git_buf *buffer, git_blob *blob)$/;"	f
git_blob__parse	src/blob.c	/^int git_blob__parse(void *blob, git_odb_object *odb_obj)$/;"	f
git_blob_chunk_cb	include/git2/blob.h	/^typedef int (*git_blob_chunk_cb)(char *content, size_t max_length, void *payload);$/;"	t
git_blob_create_frombuffer	src/blob.c	/^int git_blob_create_frombuffer($/;"	f
git_blob_create_fromchunks	src/blob.c	/^int git_blob_create_fromchunks($/;"	f
git_blob_create_fromdisk	src/blob.c	/^int git_blob_create_fromdisk($/;"	f
git_blob_create_fromworkdir	src/blob.c	/^int git_blob_create_fromworkdir($/;"	f
git_blob_filtered_content	src/blob.c	/^int git_blob_filtered_content($/;"	f
git_blob_free	src/object_api.c	/^void git_blob_free(git_blob *obj)$/;"	f
git_blob_id	src/object_api.c	/^const git_oid *git_blob_id(const git_blob *obj)$/;"	f
git_blob_is_binary	src/blob.c	/^int git_blob_is_binary(git_blob *blob)$/;"	f
git_blob_lookup	src/object_api.c	/^int git_blob_lookup(git_blob **out, git_repository *repo, const git_oid *id)$/;"	f
git_blob_lookup_prefix	src/object_api.c	/^int git_blob_lookup_prefix(git_blob **out, git_repository *repo, const git_oid *id, size_t len)$/;"	f
git_blob_owner	src/object_api.c	/^git_repository *git_blob_owner(const git_blob *obj)$/;"	f
git_blob_rawcontent	src/blob.c	/^const void *git_blob_rawcontent(const git_blob *blob)$/;"	f
git_blob_rawsize	src/blob.c	/^git_off_t git_blob_rawsize(const git_blob *blob)$/;"	f
git_bom_t	src/buf_text.h	/^} git_bom_t;$/;"	t	typeref:enum:__anon138
git_branch_create	src/branch.c	/^int git_branch_create($/;"	f
git_branch_delete	src/branch.c	/^int git_branch_delete(git_reference *branch)$/;"	f
git_branch_is_head	src/branch.c	/^int git_branch_is_head($/;"	f
git_branch_iterator	include/git2/branch.h	/^typedef struct git_branch_iterator git_branch_iterator;$/;"	t	typeref:struct:git_branch_iterator
git_branch_iterator_free	src/branch.c	/^void git_branch_iterator_free(git_branch_iterator *_iter)$/;"	f
git_branch_iterator_new	src/branch.c	/^int git_branch_iterator_new($/;"	f
git_branch_lookup	src/branch.c	/^int git_branch_lookup($/;"	f
git_branch_move	src/branch.c	/^int git_branch_move($/;"	f
git_branch_name	src/branch.c	/^int git_branch_name(const char **out, git_reference *ref)$/;"	f
git_branch_next	src/branch.c	/^int git_branch_next(git_reference **out, git_branch_t *out_type, git_branch_iterator *_iter)$/;"	f
git_branch_remote_name	src/branch.c	/^int git_branch_remote_name(git_buf *buf, git_repository *repo, const char *refname)$/;"	f
git_branch_set_upstream	src/branch.c	/^int git_branch_set_upstream(git_reference *branch, const char *upstream_name)$/;"	f
git_branch_t	include/git2/types.h	/^} git_branch_t;$/;"	t	typeref:enum:__anon237
git_branch_upstream	src/branch.c	/^int git_branch_upstream($/;"	f
git_branch_upstream_name	src/branch.c	/^int git_branch_upstream_name($/;"	f
git_buf	include/git2/buffer.h	/^} git_buf;$/;"	t	typeref:struct:__anon214
git_buf_PUTS	src/buffer.h	125;"	d
git_buf__initbuf	src/buffer.c	/^char git_buf__initbuf[1];$/;"	v
git_buf__oom	src/buffer.c	/^char git_buf__oom[1];$/;"	v
git_buf_attach	src/buffer.c	/^void git_buf_attach(git_buf *buf, char *ptr, size_t asize)$/;"	f
git_buf_clear	src/buffer.c	/^void git_buf_clear(git_buf *buf)$/;"	f
git_buf_cmp	src/buffer.c	/^int git_buf_cmp(const git_buf *a, const git_buf *b)$/;"	f
git_buf_consume	src/buffer.c	/^void git_buf_consume(git_buf *buf, const char *end)$/;"	f
git_buf_copy_cstr	src/buffer.c	/^void git_buf_copy_cstr(char *data, size_t datasize, const git_buf *buf)$/;"	f
git_buf_cstr	src/buffer.h	/^GIT_INLINE(const char *) git_buf_cstr(const git_buf *buf)$/;"	f
git_buf_detach	src/buffer.c	/^char *git_buf_detach(git_buf *buf)$/;"	f
git_buf_find	src/buffer.h	/^GIT_INLINE(ssize_t) git_buf_find(const git_buf *buf, char ch)$/;"	f
git_buf_free	src/buffer.c	/^void git_buf_free(git_buf *buf)$/;"	f
git_buf_grow	src/buffer.c	/^int git_buf_grow(git_buf *buffer, size_t target_size)$/;"	f
git_buf_init	src/buffer.c	/^void git_buf_init(git_buf *buf, size_t initial_size)$/;"	f
git_buf_is_allocated	src/buffer.h	/^GIT_INLINE(bool) git_buf_is_allocated(const git_buf *buf)$/;"	f
git_buf_join	src/buffer.c	/^int git_buf_join($/;"	f
git_buf_join_n	src/buffer.c	/^int git_buf_join_n(git_buf *buf, char separator, int nbuf, ...)$/;"	f
git_buf_joinpath	src/buffer.h	/^GIT_INLINE(int) git_buf_joinpath(git_buf *buf, const char *a, const char *b)$/;"	f
git_buf_len	src/buffer.h	/^GIT_INLINE(size_t) git_buf_len(const git_buf *buf)$/;"	f
git_buf_oom	src/buffer.h	/^GIT_INLINE(bool) git_buf_oom(const git_buf *buf)$/;"	f
git_buf_printf	src/buffer.c	/^int git_buf_printf(git_buf *buf, const char *format, ...)$/;"	f
git_buf_put	src/buffer.c	/^int git_buf_put(git_buf *buf, const char *data, size_t len)$/;"	f
git_buf_put_base64	src/buffer.c	/^int git_buf_put_base64(git_buf *buf, const char *data, size_t len)$/;"	f
git_buf_putc	src/buffer.c	/^int git_buf_putc(git_buf *buf, char c)$/;"	f
git_buf_puts	src/buffer.c	/^int git_buf_puts(git_buf *buf, const char *string)$/;"	f
git_buf_rfind	src/buffer.h	/^GIT_INLINE(ssize_t) git_buf_rfind(const git_buf *buf, char ch)$/;"	f
git_buf_rfind_next	src/buffer.h	/^GIT_INLINE(ssize_t) git_buf_rfind_next(const git_buf *buf, char ch)$/;"	f
git_buf_rtrim	src/buffer.c	/^void git_buf_rtrim(git_buf *buf)$/;"	f
git_buf_rtruncate_at_char	src/buffer.c	/^void git_buf_rtruncate_at_char(git_buf *buf, char separator)$/;"	f
git_buf_sanitize	src/buffer.c	/^void git_buf_sanitize(git_buf *buf)$/;"	f
git_buf_set	src/buffer.c	/^int git_buf_set(git_buf *buf, const void *data, size_t len)$/;"	f
git_buf_sets	src/buffer.c	/^int git_buf_sets(git_buf *buf, const char *string)$/;"	f
git_buf_shorten	src/buffer.c	/^void git_buf_shorten(git_buf *buf, size_t amount)$/;"	f
git_buf_splice	src/buffer.c	/^int git_buf_splice($/;"	f
git_buf_swap	src/buffer.c	/^void git_buf_swap(git_buf *buf_a, git_buf *buf_b)$/;"	f
git_buf_text_common_prefix	src/buf_text.c	/^int git_buf_text_common_prefix(git_buf *buf, const git_strarray *strings)$/;"	f
git_buf_text_contains_nul	src/buf_text.c	/^bool git_buf_text_contains_nul(const git_buf *buf)$/;"	f
git_buf_text_crlf_to_lf	src/buf_text.c	/^int git_buf_text_crlf_to_lf(git_buf *tgt, const git_buf *src)$/;"	f
git_buf_text_detect_bom	src/buf_text.c	/^int git_buf_text_detect_bom(git_bom_t *bom, const git_buf *buf, size_t offset)$/;"	f
git_buf_text_gather_stats	src/buf_text.c	/^bool git_buf_text_gather_stats($/;"	f
git_buf_text_is_binary	src/buf_text.c	/^bool git_buf_text_is_binary(const git_buf *buf)$/;"	f
git_buf_text_lf_to_crlf	src/buf_text.c	/^int git_buf_text_lf_to_crlf(git_buf *tgt, const git_buf *src)$/;"	f
git_buf_text_puts_escape_regex	src/buf_text.h	/^GIT_INLINE(int) git_buf_text_puts_escape_regex(git_buf *buf, const char *string)$/;"	f
git_buf_text_puts_escaped	src/buf_text.c	/^int git_buf_text_puts_escaped($/;"	f
git_buf_text_stats	src/buf_text.h	/^} git_buf_text_stats;$/;"	t	typeref:struct:__anon139
git_buf_text_unescape	src/buf_text.c	/^void git_buf_text_unescape(git_buf *buf)$/;"	f
git_buf_truncate	src/buffer.c	/^void git_buf_truncate(git_buf *buf, size_t len)$/;"	f
git_buf_try_grow	src/buffer.c	/^int git_buf_try_grow($/;"	f
git_buf_vec	src/hash.h	/^} git_buf_vec;$/;"	t	typeref:struct:__anon119
git_buf_vprintf	src/buffer.c	/^int git_buf_vprintf(git_buf *buf, const char *format, va_list ap)$/;"	f
git_cache	src/cache.h	/^} git_cache;$/;"	t	typeref:struct:__anon91
git_cache__current_storage	src/cache.c	/^git_atomic_ssize git_cache__current_storage = {0};$/;"	v
git_cache__enabled	src/cache.c	/^bool git_cache__enabled = true;$/;"	v
git_cache__max_object_size	src/cache.c	/^static size_t git_cache__max_object_size[8] = {$/;"	v	file:
git_cache__max_storage	src/cache.c	/^ssize_t git_cache__max_storage = (256 * 1024 * 1024);$/;"	v
git_cache_clear	src/cache.c	/^void git_cache_clear(git_cache *cache)$/;"	f
git_cache_dump_stats	src/cache.c	/^void git_cache_dump_stats(git_cache *cache)$/;"	f
git_cache_free	src/cache.c	/^void git_cache_free(git_cache *cache)$/;"	f
git_cache_get_any	src/cache.c	/^void *git_cache_get_any(git_cache *cache, const git_oid *oid)$/;"	f
git_cache_get_parsed	src/cache.c	/^git_object *git_cache_get_parsed(git_cache *cache, const git_oid *oid)$/;"	f
git_cache_get_raw	src/cache.c	/^git_odb_object *git_cache_get_raw(git_cache *cache, const git_oid *oid)$/;"	f
git_cache_init	src/cache.c	/^int git_cache_init(git_cache *cache)$/;"	f
git_cache_set_max_object_size	src/cache.c	/^int git_cache_set_max_object_size(git_otype type, size_t size)$/;"	f
git_cache_size	src/cache.h	/^GIT_INLINE(size_t) git_cache_size(git_cache *cache)$/;"	f
git_cache_store_parsed	src/cache.c	/^void *git_cache_store_parsed(git_cache *cache, git_object *entry)$/;"	f
git_cache_store_raw	src/cache.c	/^void *git_cache_store_raw(git_cache *cache, git_odb_object *entry)$/;"	f
git_cached_obj	src/cache.h	/^} git_cached_obj;$/;"	t	typeref:struct:__anon90
git_cached_obj_decref	src/cache.c	/^void git_cached_obj_decref(void *_obj)$/;"	f
git_cached_obj_incref	src/cache.h	/^GIT_INLINE(void) git_cached_obj_incref(void *_obj)$/;"	f
git_cb	examples/network/common.h	/^typedef int (*git_cb)(git_repository *, int , char **);$/;"	t
git_checkout_head	src/checkout.c	/^int git_checkout_head($/;"	f
git_checkout_index	src/checkout.c	/^int git_checkout_index($/;"	f
git_checkout_iterator	src/checkout.c	/^int git_checkout_iterator($/;"	f
git_checkout_notify_cb	include/git2/checkout.h	/^typedef int (*git_checkout_notify_cb)($/;"	t
git_checkout_notify_t	include/git2/checkout.h	/^} git_checkout_notify_t;$/;"	t	typeref:enum:__anon224
git_checkout_opts	include/git2/checkout.h	/^typedef struct git_checkout_opts {$/;"	s
git_checkout_opts	include/git2/checkout.h	/^} git_checkout_opts;$/;"	t	typeref:struct:git_checkout_opts
git_checkout_progress_cb	include/git2/checkout.h	/^typedef void (*git_checkout_progress_cb)($/;"	t
git_checkout_strategy_t	include/git2/checkout.h	/^} git_checkout_strategy_t;$/;"	t	typeref:enum:__anon223
git_checkout_tree	src/checkout.c	/^int git_checkout_tree($/;"	f
git_clone	src/clone.c	/^int git_clone($/;"	f
git_clone_into	src/clone.c	/^int git_clone_into(git_repository *repo, git_remote *remote, const git_checkout_opts *co_opts, const char *branch, const git_signature *signature)$/;"	f
git_clone_options	include/git2/clone.h	/^typedef struct git_clone_options {$/;"	s
git_clone_options	include/git2/clone.h	/^} git_clone_options;$/;"	t	typeref:struct:git_clone_options
git_commit	include/git2/types.h	/^typedef struct git_commit git_commit;$/;"	t	typeref:struct:git_commit
git_commit	src/commit.h	/^struct git_commit {$/;"	s
git_commit__free	src/commit.c	/^void git_commit__free(void *_commit)$/;"	f
git_commit__parse	src/commit.c	/^int git_commit__parse(void *_commit, git_odb_object *odb_obj)$/;"	f
git_commit_amend	src/commit.c	/^int git_commit_amend($/;"	f
git_commit_create	src/commit.c	/^int git_commit_create($/;"	f
git_commit_create_from_callback	src/commit.c	/^int git_commit_create_from_callback($/;"	f
git_commit_create_from_ids	src/commit.c	/^int git_commit_create_from_ids($/;"	f
git_commit_create_v	src/commit.c	/^int git_commit_create_v($/;"	f
git_commit_free	src/object_api.c	/^void git_commit_free(git_commit *obj)$/;"	f
git_commit_id	src/object_api.c	/^const git_oid *git_commit_id(const git_commit *obj)$/;"	f
git_commit_list	src/commit_list.h	/^typedef struct git_commit_list {$/;"	s
git_commit_list	src/commit_list.h	/^} git_commit_list;$/;"	t	typeref:struct:git_commit_list
git_commit_list_alloc_node	src/commit_list.c	/^git_commit_list_node *git_commit_list_alloc_node(git_revwalk *walk)$/;"	f
git_commit_list_free	src/commit_list.c	/^void git_commit_list_free(git_commit_list **list_p)$/;"	f
git_commit_list_insert	src/commit_list.c	/^git_commit_list *git_commit_list_insert(git_commit_list_node *item, git_commit_list **list_p)$/;"	f
git_commit_list_insert_by_date	src/commit_list.c	/^git_commit_list *git_commit_list_insert_by_date(git_commit_list_node *item, git_commit_list **list_p)$/;"	f
git_commit_list_node	src/commit_list.h	/^typedef struct git_commit_list_node {$/;"	s
git_commit_list_node	src/commit_list.h	/^} git_commit_list_node;$/;"	t	typeref:struct:git_commit_list_node
git_commit_list_parse	src/commit_list.c	/^int git_commit_list_parse(git_revwalk *walk, git_commit_list_node *commit)$/;"	f
git_commit_list_pop	src/commit_list.c	/^git_commit_list_node *git_commit_list_pop(git_commit_list **stack)$/;"	f
git_commit_list_time_cmp	src/commit_list.c	/^int git_commit_list_time_cmp(const void *a, const void *b)$/;"	f
git_commit_lookup	src/object_api.c	/^int git_commit_lookup(git_commit **out, git_repository *repo, const git_oid *id)$/;"	f
git_commit_lookup_prefix	src/object_api.c	/^int git_commit_lookup_prefix(git_commit **out, git_repository *repo, const git_oid *id, size_t len)$/;"	f
git_commit_message	src/commit.c	/^const char *git_commit_message(const git_commit *commit)$/;"	f
git_commit_nth_gen_ancestor	src/commit.c	/^int git_commit_nth_gen_ancestor($/;"	f
git_commit_owner	src/object_api.c	/^git_repository *git_commit_owner(const git_commit *obj)$/;"	f
git_commit_parent	src/commit.c	/^int git_commit_parent($/;"	f
git_commit_parent_callback	include/git2/sys/commit.h	/^typedef const git_oid *(*git_commit_parent_callback)(size_t idx, void *payload);$/;"	t
git_commit_parent_id	src/commit.c	/^const git_oid *git_commit_parent_id($/;"	f
git_commit_summary	src/commit.c	/^const char *git_commit_summary(git_commit *commit)$/;"	f
git_commit_tree	src/commit.c	/^int git_commit_tree(git_tree **tree_out, const git_commit *commit)$/;"	f
git_cond	src/thread-utils.h	188;"	d
git_cond	src/thread-utils.h	58;"	d
git_cond_broadcast	src/thread-utils.h	193;"	d
git_cond_broadcast	src/thread-utils.h	63;"	d
git_cond_free	src/thread-utils.h	190;"	d
git_cond_free	src/thread-utils.h	60;"	d
git_cond_init	src/thread-utils.h	189;"	d
git_cond_init	src/thread-utils.h	59;"	d
git_cond_signal	src/thread-utils.h	192;"	d
git_cond_signal	src/thread-utils.h	62;"	d
git_cond_wait	src/thread-utils.h	191;"	d
git_cond_wait	src/thread-utils.h	61;"	d
git_config	include/git2/types.h	/^typedef struct git_config git_config;$/;"	t	typeref:struct:git_config
git_config	src/config.h	/^struct git_config {$/;"	s
git_config__add_internal	src/config.c	/^static int git_config__add_internal($/;"	f	file:
git_config__get_bool_force	src/config.c	/^int git_config__get_bool_force($/;"	f
git_config__get_int_force	src/config.c	/^int git_config__get_int_force($/;"	f
git_config__get_string_force	src/config.c	/^const char *git_config__get_string_force($/;"	f
git_config__global_location	src/config.c	/^int git_config__global_location(git_buf *buf)$/;"	f
git_config__lookup_entry	src/config.c	/^int git_config__lookup_entry($/;"	f
git_config__normalize_name	src/config.c	/^int git_config__normalize_name(const char *in, char **out)$/;"	f
git_config_add_backend	src/config.c	/^int git_config_add_backend($/;"	f
git_config_add_file_ondisk	src/config.c	/^int git_config_add_file_ondisk($/;"	f
git_config_backend	include/git2/sys/config.h	/^struct git_config_backend {$/;"	s
git_config_backend	include/git2/types.h	/^typedef struct git_config_backend git_config_backend;$/;"	t	typeref:struct:git_config_backend
git_config_backend_foreach_match	src/config.c	/^int git_config_backend_foreach_match($/;"	f
git_config_delete_entry	src/config.c	/^int git_config_delete_entry(git_config *cfg, const char *name)$/;"	f
git_config_delete_multivar	src/config.c	/^int git_config_delete_multivar(git_config *cfg, const char *name, const char *regexp)$/;"	f
git_config_entry	include/git2/config.h	/^} git_config_entry;$/;"	t	typeref:struct:__anon218
git_config_file__ondisk	src/config_file.c	/^int git_config_file__ondisk(git_config_backend **out, const char *path)$/;"	f
git_config_file_delete	src/config_file.h	/^GIT_INLINE(int) git_config_file_delete($/;"	f
git_config_file_foreach	src/config_file.h	/^GIT_INLINE(int) git_config_file_foreach($/;"	f
git_config_file_foreach_match	src/config_file.h	/^GIT_INLINE(int) git_config_file_foreach_match($/;"	f
git_config_file_free	src/config_file.h	/^GIT_INLINE(void) git_config_file_free(git_config_backend *cfg)$/;"	f
git_config_file_get_string	src/config_file.h	/^GIT_INLINE(int) git_config_file_get_string($/;"	f
git_config_file_iter	src/config_file.c	/^typedef struct git_config_file_iter {$/;"	s	file:
git_config_file_iter	src/config_file.c	/^} git_config_file_iter;$/;"	t	typeref:struct:git_config_file_iter	file:
git_config_file_normalize_section	src/config_file.c	/^int git_config_file_normalize_section(char *start, char *end)$/;"	f
git_config_file_open	src/config_file.h	/^GIT_INLINE(int) git_config_file_open(git_config_backend *cfg, unsigned int level)$/;"	f
git_config_file_set_string	src/config_file.h	/^GIT_INLINE(int) git_config_file_set_string($/;"	f
git_config_find_global	src/config.c	/^int git_config_find_global(git_buf *path)$/;"	f
git_config_find_system	src/config.c	/^int git_config_find_system(git_buf *path)$/;"	f
git_config_find_xdg	src/config.c	/^int git_config_find_xdg(git_buf *path)$/;"	f
git_config_foreach	src/config.c	/^int git_config_foreach($/;"	f
git_config_foreach_cb	include/git2/config.h	/^typedef int  (*git_config_foreach_cb)(const git_config_entry *, void *);$/;"	t
git_config_foreach_match	src/config.c	/^int git_config_foreach_match($/;"	f
git_config_free	src/config.c	/^void git_config_free(git_config *cfg)$/;"	f
git_config_get_bool	src/config.c	/^int git_config_get_bool(int *out, const git_config *cfg, const char *name)$/;"	f
git_config_get_entry	src/config.c	/^int git_config_get_entry($/;"	f
git_config_get_int32	src/config.c	/^int git_config_get_int32(int32_t *out, const git_config *cfg, const char *name)$/;"	f
git_config_get_int64	src/config.c	/^int git_config_get_int64(int64_t *out, const git_config *cfg, const char *name)$/;"	f
git_config_get_mapped	src/config.c	/^int git_config_get_mapped($/;"	f
git_config_get_multivar_foreach	src/config.c	/^int git_config_get_multivar_foreach($/;"	f
git_config_get_string	src/config.c	/^int git_config_get_string($/;"	f
git_config_iterator	include/git2/config.h	/^typedef struct git_config_iterator git_config_iterator;$/;"	t	typeref:struct:git_config_iterator
git_config_iterator	include/git2/sys/config.h	/^struct git_config_iterator {$/;"	s
git_config_iterator_free	src/config.c	/^void git_config_iterator_free(git_config_iterator *iter)$/;"	f
git_config_iterator_glob_new	src/config.c	/^int git_config_iterator_glob_new(git_config_iterator **out, const git_config *cfg, const char *regexp)$/;"	f
git_config_iterator_new	src/config.c	/^int git_config_iterator_new(git_config_iterator **out, const git_config *cfg)$/;"	f
git_config_level_t	include/git2/config.h	/^} git_config_level_t;$/;"	t	typeref:enum:__anon217
git_config_lookup_map_value	src/config.c	/^int git_config_lookup_map_value($/;"	f
git_config_multivar_iterator_new	src/config.c	/^int git_config_multivar_iterator_new(git_config_iterator **out, const git_config *cfg, const char *name, const char *regexp)$/;"	f
git_config_new	src/config.c	/^int git_config_new(git_config **out)$/;"	f
git_config_next	src/config.c	/^int git_config_next(git_config_entry **entry, git_config_iterator *iter)$/;"	f
git_config_open_default	src/config.c	/^int git_config_open_default(git_config **out)$/;"	f
git_config_open_global	src/config.c	/^int git_config_open_global(git_config **cfg_out, git_config *cfg)$/;"	f
git_config_open_level	src/config.c	/^int git_config_open_level($/;"	f
git_config_open_ondisk	src/config.c	/^int git_config_open_ondisk(git_config **out, const char *path)$/;"	f
git_config_parse_bool	src/config.c	/^int git_config_parse_bool(int *out, const char *value)$/;"	f
git_config_parse_int32	src/config.c	/^int git_config_parse_int32(int32_t *out, const char *value)$/;"	f
git_config_parse_int64	src/config.c	/^int git_config_parse_int64(int64_t *out, const char *value)$/;"	f
git_config_refresh	src/config.c	/^int git_config_refresh(git_config *cfg)$/;"	f
git_config_rename_section	src/config.c	/^int git_config_rename_section($/;"	f
git_config_set_bool	src/config.c	/^int git_config_set_bool(git_config *cfg, const char *name, int value)$/;"	f
git_config_set_int32	src/config.c	/^int git_config_set_int32(git_config *cfg, const char *name, int32_t value)$/;"	f
git_config_set_int64	src/config.c	/^int git_config_set_int64(git_config *cfg, const char *name, int64_t value)$/;"	f
git_config_set_multivar	src/config.c	/^int git_config_set_multivar(git_config *cfg, const char *name, const char *regexp, const char *value)$/;"	f
git_config_set_string	src/config.c	/^int git_config_set_string(git_config *cfg, const char *name, const char *value)$/;"	f
git_cred	include/git2/transport.h	/^struct git_cred {$/;"	s
git_cred	include/git2/transport.h	/^typedef struct git_cred git_cred;$/;"	t	typeref:struct:git_cred
git_cred_acquire_cb	include/git2/transport.h	/^typedef int (*git_cred_acquire_cb)($/;"	t
git_cred_default	include/git2/transport.h	/^typedef struct git_cred git_cred_default;$/;"	t	typeref:struct:git_cred
git_cred_default_new	src/transports/cred.c	/^int git_cred_default_new(git_cred **cred)$/;"	f
git_cred_has_username	src/transports/cred.c	/^int git_cred_has_username(git_cred *cred)$/;"	f
git_cred_sign_callback	include/git2/transport.h	/^typedef int (*git_cred_sign_callback)(void *, ...);$/;"	t
git_cred_ssh_custom	include/git2/transport.h	/^typedef struct git_cred_ssh_custom {$/;"	s
git_cred_ssh_custom	include/git2/transport.h	/^} git_cred_ssh_custom;$/;"	t	typeref:struct:git_cred_ssh_custom
git_cred_ssh_custom_new	src/transports/cred.c	/^int git_cred_ssh_custom_new($/;"	f
git_cred_ssh_key	include/git2/transport.h	/^typedef struct git_cred_ssh_key {$/;"	s
git_cred_ssh_key	include/git2/transport.h	/^} git_cred_ssh_key;$/;"	t	typeref:struct:git_cred_ssh_key
git_cred_ssh_key_from_agent	src/transports/cred.c	/^int git_cred_ssh_key_from_agent(git_cred **cred, const char *username) {$/;"	f
git_cred_ssh_key_new	src/transports/cred.c	/^int git_cred_ssh_key_new($/;"	f
git_cred_userpass	src/transports/cred_helpers.c	/^int git_cred_userpass($/;"	f
git_cred_userpass_payload	include/git2/cred_helpers.h	/^typedef struct git_cred_userpass_payload {$/;"	s
git_cred_userpass_payload	include/git2/cred_helpers.h	/^} git_cred_userpass_payload;$/;"	t	typeref:struct:git_cred_userpass_payload
git_cred_userpass_plaintext	include/git2/transport.h	/^} git_cred_userpass_plaintext;$/;"	t	typeref:struct:__anon243
git_cred_userpass_plaintext_new	src/transports/cred.c	/^int git_cred_userpass_plaintext_new($/;"	f
git_credtype_t	include/git2/transport.h	/^} git_credtype_t;$/;"	t	typeref:enum:__anon242
git_crlf_filter_new	src/crlf.c	/^git_filter *git_crlf_filter_new(void)$/;"	f
git_crlf_t	src/filter.h	/^} git_crlf_t;$/;"	t	typeref:enum:__anon109
git_cvar_cached	src/repository.h	/^} git_cvar_cached;$/;"	t	typeref:enum:__anon52
git_cvar_map	include/git2/config.h	/^} git_cvar_map;$/;"	t	typeref:struct:__anon220
git_cvar_t	include/git2/config.h	/^} git_cvar_t;$/;"	t	typeref:enum:__anon219
git_cvar_value	src/repository.h	/^} git_cvar_value;$/;"	t	typeref:enum:__anon53
git_delta	src/delta.h	/^GIT_INLINE(void *) git_delta($/;"	f
git_delta_create	src/delta.c	/^git_delta_create($/;"	f
git_delta_create_index	src/delta.c	/^git_delta_create_index(const void *buf, unsigned long bufsize)$/;"	f
git_delta_free_index	src/delta.c	/^void git_delta_free_index(struct git_delta_index *index)$/;"	f
git_delta_get_hdr_size	src/delta.h	/^GIT_INLINE(unsigned long) git_delta_get_hdr_size($/;"	f
git_delta_index	src/delta.c	/^struct git_delta_index {$/;"	s	file:
git_delta_sizeof_index	src/delta.c	/^unsigned long git_delta_sizeof_index(struct git_delta_index *index)$/;"	f
git_delta_t	include/git2/diff.h	/^} git_delta_t;$/;"	t	typeref:enum:__anon265
git_diff	include/git2/diff.h	/^typedef struct git_diff git_diff;$/;"	t	typeref:struct:git_diff
git_diff	src/diff.h	/^struct git_diff {$/;"	s
git_diff__from_iterators	src/diff.c	/^int git_diff__from_iterators($/;"	f
git_diff__oid_for_file	src/diff.c	/^int git_diff__oid_for_file($/;"	f
git_diff__paired_foreach	src/diff.c	/^int git_diff__paired_foreach($/;"	f
git_diff_addref	src/diff.c	/^void git_diff_addref(git_diff *diff)$/;"	f
git_diff_blob_to_buffer	src/diff_patch.c	/^int git_diff_blob_to_buffer($/;"	f
git_diff_blobs	src/diff_patch.c	/^int git_diff_blobs($/;"	f
git_diff_buffers	src/diff_patch.c	/^int git_diff_buffers($/;"	f
git_diff_delta	include/git2/diff.h	/^} git_diff_delta;$/;"	t	typeref:struct:__anon267
git_diff_delta__casecmp	src/diff.c	/^int git_diff_delta__casecmp(const void *a, const void *b)$/;"	f
git_diff_delta__cmp	src/diff.c	/^int git_diff_delta__cmp(const void *a, const void *b)$/;"	f
git_diff_delta__format_file_header	src/diff_print.c	/^int git_diff_delta__format_file_header($/;"	f
git_diff_delta__i2w_casecmp	src/diff.c	/^int git_diff_delta__i2w_casecmp(const void *a, const void *b)$/;"	f
git_diff_delta__i2w_cmp	src/diff.c	/^int git_diff_delta__i2w_cmp(const void *a, const void *b)$/;"	f
git_diff_delta__path	src/diff.c	/^const char *git_diff_delta__path(const git_diff_delta *delta)$/;"	f
git_diff_delta__should_skip	src/diff.c	/^bool git_diff_delta__should_skip($/;"	f
git_diff_driver	src/diff_driver.c	/^struct git_diff_driver {$/;"	s	file:
git_diff_driver	src/diff_driver.h	/^typedef struct git_diff_driver git_diff_driver;$/;"	t	typeref:struct:git_diff_driver
git_diff_driver_builtin	src/diff_driver.c	/^static int git_diff_driver_builtin($/;"	f	file:
git_diff_driver_content_is_binary	src/diff_driver.c	/^int git_diff_driver_content_is_binary($/;"	f
git_diff_driver_definition	src/userdiff.h	/^} git_diff_driver_definition;$/;"	t	typeref:struct:__anon179
git_diff_driver_free	src/diff_driver.c	/^void git_diff_driver_free(git_diff_driver *driver)$/;"	f
git_diff_driver_load	src/diff_driver.c	/^static int git_diff_driver_load($/;"	f	file:
git_diff_driver_lookup	src/diff_driver.c	/^int git_diff_driver_lookup($/;"	f
git_diff_driver_pattern	src/diff_driver.c	/^} git_diff_driver_pattern;$/;"	t	typeref:struct:__anon40	file:
git_diff_driver_registry	src/diff_driver.c	/^struct git_diff_driver_registry {$/;"	s	file:
git_diff_driver_registry	src/diff_driver.h	/^typedef struct git_diff_driver_registry git_diff_driver_registry;$/;"	t	typeref:struct:git_diff_driver_registry
git_diff_driver_registry_free	src/diff_driver.c	/^void git_diff_driver_registry_free(git_diff_driver_registry *reg)$/;"	f
git_diff_driver_registry_new	src/diff_driver.c	/^git_diff_driver_registry *git_diff_driver_registry_new()$/;"	f
git_diff_driver_t	src/diff_driver.c	/^} git_diff_driver_t;$/;"	t	typeref:enum:__anon39	file:
git_diff_driver_update_options	src/diff_driver.c	/^void git_diff_driver_update_options($/;"	f
git_diff_file	include/git2/diff.h	/^} git_diff_file;$/;"	t	typeref:struct:__anon266
git_diff_file__resolve_zero_size	src/diff.h	/^GIT_INLINE(int) git_diff_file__resolve_zero_size($/;"	f
git_diff_file_cb	include/git2/diff.h	/^typedef int (*git_diff_file_cb)($/;"	t
git_diff_file_content	src/diff_file.h	/^} git_diff_file_content;$/;"	t	typeref:struct:__anon154
git_diff_file_content__clear	src/diff_file.c	/^void git_diff_file_content__clear(git_diff_file_content *fc)$/;"	f
git_diff_file_content__init_from_diff	src/diff_file.c	/^int git_diff_file_content__init_from_diff($/;"	f
git_diff_file_content__init_from_src	src/diff_file.c	/^int git_diff_file_content__init_from_src($/;"	f
git_diff_file_content__load	src/diff_file.c	/^int git_diff_file_content__load(git_diff_file_content *fc)$/;"	f
git_diff_file_content__unload	src/diff_file.c	/^void git_diff_file_content__unload(git_diff_file_content *fc)$/;"	f
git_diff_file_content_src	src/diff_file.h	/^} git_diff_file_content_src;$/;"	t	typeref:struct:__anon155
git_diff_find_context_clear	src/diff_driver.c	/^void git_diff_find_context_clear(git_diff_find_context_payload *payload)$/;"	f
git_diff_find_context_fn	src/diff_driver.h	/^typedef long (*git_diff_find_context_fn)($/;"	t
git_diff_find_context_init	src/diff_driver.c	/^void git_diff_find_context_init($/;"	f
git_diff_find_context_line	src/diff_driver.h	/^typedef int (*git_diff_find_context_line)($/;"	t
git_diff_find_context_payload	src/diff_driver.h	/^} git_diff_find_context_payload;$/;"	t	typeref:struct:__anon161
git_diff_find_options	include/git2/diff.h	/^} git_diff_find_options;$/;"	t	typeref:struct:__anon272
git_diff_find_similar	src/diff_tform.c	/^int git_diff_find_similar($/;"	f
git_diff_find_similar__calc_similarity	src/diff_tform.c	/^int git_diff_find_similar__calc_similarity($/;"	f
git_diff_find_similar__hashsig_for_buf	src/diff_tform.c	/^int git_diff_find_similar__hashsig_for_buf($/;"	f
git_diff_find_similar__hashsig_for_file	src/diff_tform.c	/^int git_diff_find_similar__hashsig_for_file($/;"	f
git_diff_find_similar__hashsig_free	src/diff_tform.c	/^void git_diff_find_similar__hashsig_free(void *sig, void *payload)$/;"	f
git_diff_find_t	include/git2/diff.h	/^} git_diff_find_t;$/;"	t	typeref:enum:__anon270
git_diff_flag_t	include/git2/diff.h	/^} git_diff_flag_t;$/;"	t	typeref:enum:__anon264
git_diff_foreach	src/diff_patch.c	/^int git_diff_foreach($/;"	f
git_diff_format_t	include/git2/diff.h	/^} git_diff_format_t;$/;"	t	typeref:enum:__anon273
git_diff_free	src/diff.c	/^void git_diff_free(git_diff *diff)$/;"	f
git_diff_get_delta	src/diff.c	/^const git_diff_delta *git_diff_get_delta(const git_diff *diff, size_t idx)$/;"	f
git_diff_hunk	include/git2/diff.h	/^struct git_diff_hunk {$/;"	s
git_diff_hunk	include/git2/diff.h	/^typedef struct git_diff_hunk git_diff_hunk;$/;"	t	typeref:struct:git_diff_hunk
git_diff_hunk_cb	include/git2/diff.h	/^typedef int (*git_diff_hunk_cb)($/;"	t
git_diff_index_to_workdir	src/diff.c	/^int git_diff_index_to_workdir($/;"	f
git_diff_is_sorted_icase	src/diff.c	/^int git_diff_is_sorted_icase(const git_diff *diff)$/;"	f
git_diff_line	include/git2/diff.h	/^struct git_diff_line {$/;"	s
git_diff_line	include/git2/diff.h	/^typedef struct git_diff_line git_diff_line;$/;"	t	typeref:struct:git_diff_line
git_diff_line_cb	include/git2/diff.h	/^typedef int (*git_diff_line_cb)($/;"	t
git_diff_line_t	include/git2/diff.h	/^} git_diff_line_t;$/;"	t	typeref:enum:__anon269
git_diff_merge	src/diff_tform.c	/^int git_diff_merge(git_diff *onto, const git_diff *from)$/;"	f
git_diff_notify_cb	include/git2/diff.h	/^typedef int (*git_diff_notify_cb)($/;"	t
git_diff_num_deltas	src/diff.c	/^size_t git_diff_num_deltas(const git_diff *diff)$/;"	f
git_diff_num_deltas_of_type	src/diff.c	/^size_t git_diff_num_deltas_of_type(const git_diff *diff, git_delta_t type)$/;"	f
git_diff_option_t	include/git2/diff.h	/^} git_diff_option_t;$/;"	t	typeref:enum:__anon263
git_diff_options	include/git2/diff.h	/^} git_diff_options;$/;"	t	typeref:struct:__anon268
git_diff_options_init	src/diff.c	/^int git_diff_options_init(git_diff_options *options, unsigned int version)$/;"	f
git_diff_output	src/diff_patch.h	/^struct git_diff_output {$/;"	s
git_diff_output	src/diff_patch.h	/^typedef struct git_diff_output git_diff_output;$/;"	t	typeref:struct:git_diff_output
git_diff_print	src/diff_print.c	/^int git_diff_print($/;"	f
git_diff_similarity_metric	include/git2/diff.h	/^} git_diff_similarity_metric;$/;"	t	typeref:struct:__anon271
git_diff_status_char	src/diff_print.c	/^char git_diff_status_char(git_delta_t status)$/;"	f
git_diff_tree_to_index	src/diff.c	/^int git_diff_tree_to_index($/;"	f
git_diff_tree_to_tree	src/diff.c	/^int git_diff_tree_to_tree($/;"	f
git_diff_tree_to_workdir	src/diff.c	/^int git_diff_tree_to_workdir($/;"	f
git_diff_tree_to_workdir_with_index	src/diff.c	/^int git_diff_tree_to_workdir_with_index($/;"	f
git_direction	include/git2/net.h	/^} git_direction;$/;"	t	typeref:enum:__anon274
git_error	include/git2/errors.h	/^} git_error;$/;"	t	typeref:struct:__anon226
git_error_code	include/git2/errors.h	/^} git_error_code;$/;"	t	typeref:enum:__anon225
git_error_state	src/common.h	/^} git_error_state;$/;"	t	typeref:struct:__anon114
git_error_t	include/git2/errors.h	/^} git_error_t;$/;"	t	typeref:enum:__anon227
git_feature_t	include/git2/common.h	/^} git_feature_t;$/;"	t	typeref:enum:__anon233
git_fetch_download_pack	src/fetch.c	/^int git_fetch_download_pack(git_remote *remote)$/;"	f
git_fetch_negotiate	src/fetch.c	/^int git_fetch_negotiate(git_remote *remote)$/;"	f
git_fetchhead_ref	src/fetchhead.h	/^struct git_fetchhead_ref {$/;"	s
git_fetchhead_ref	src/fetchhead.h	/^typedef struct git_fetchhead_ref git_fetchhead_ref;$/;"	t	typeref:struct:git_fetchhead_ref
git_fetchhead_ref_cmp	src/fetchhead.c	/^int git_fetchhead_ref_cmp(const void *a, const void *b)$/;"	f
git_fetchhead_ref_create	src/fetchhead.c	/^int git_fetchhead_ref_create($/;"	f
git_fetchhead_ref_free	src/fetchhead.c	/^void git_fetchhead_ref_free(git_fetchhead_ref *fetchhead_ref)$/;"	f
git_fetchhead_write	src/fetchhead.c	/^int git_fetchhead_write(git_repository *repo, git_vector *fetchhead_refs)$/;"	f
git_file	src/posix.h	/^typedef int git_file;$/;"	t
git_filebuf	src/filebuf.h	/^struct git_filebuf {$/;"	s
git_filebuf	src/filebuf.h	/^typedef struct git_filebuf git_filebuf;$/;"	t	typeref:struct:git_filebuf
git_filebuf_cleanup	src/filebuf.c	/^void git_filebuf_cleanup(git_filebuf *file)$/;"	f
git_filebuf_commit	src/filebuf.c	/^int git_filebuf_commit(git_filebuf *file)$/;"	f
git_filebuf_commit_at	src/filebuf.c	/^int git_filebuf_commit_at(git_filebuf *file, const char *path)$/;"	f
git_filebuf_flush	src/filebuf.c	/^int git_filebuf_flush(git_filebuf *file)$/;"	f
git_filebuf_hash	src/filebuf.c	/^int git_filebuf_hash(git_oid *oid, git_filebuf *file)$/;"	f
git_filebuf_open	src/filebuf.c	/^int git_filebuf_open(git_filebuf *file, const char *path, int flags, mode_t mode)$/;"	f
git_filebuf_printf	src/filebuf.c	/^int git_filebuf_printf(git_filebuf *file, const char *format, ...)$/;"	f
git_filebuf_reserve	src/filebuf.c	/^int git_filebuf_reserve(git_filebuf *file, void **buffer, size_t len)$/;"	f
git_filebuf_stats	src/filebuf.c	/^int git_filebuf_stats(time_t *mtime, size_t *size, git_filebuf *file)$/;"	f
git_filebuf_write	src/filebuf.c	/^int git_filebuf_write(git_filebuf *file, const void *buff, size_t len)$/;"	f
git_filemode_t	include/git2/types.h	/^} git_filemode_t;$/;"	t	typeref:enum:__anon238
git_filter	include/git2/filter.h	/^typedef struct git_filter git_filter;$/;"	t	typeref:struct:git_filter
git_filter	include/git2/sys/filter.h	/^struct git_filter {$/;"	s
git_filter_apply_fn	include/git2/sys/filter.h	/^typedef int (*git_filter_apply_fn)($/;"	t
git_filter_check_fn	include/git2/sys/filter.h	/^typedef int (*git_filter_check_fn)($/;"	t
git_filter_cleanup_fn	include/git2/sys/filter.h	/^typedef void (*git_filter_cleanup_fn)($/;"	t
git_filter_def	src/filter.c	/^} git_filter_def;$/;"	t	typeref:struct:__anon88	file:
git_filter_entry	src/filter.c	/^} git_filter_entry;$/;"	t	typeref:struct:__anon87	file:
git_filter_free	src/filter.c	/^void git_filter_free(git_filter *filter)$/;"	f
git_filter_init_fn	include/git2/sys/filter.h	/^typedef int (*git_filter_init_fn)(git_filter *self);$/;"	t
git_filter_list	include/git2/filter.h	/^typedef struct git_filter_list git_filter_list;$/;"	t	typeref:struct:git_filter_list
git_filter_list	src/filter.c	/^struct git_filter_list {$/;"	s	file:
git_filter_list_apply_to_blob	src/filter.c	/^int git_filter_list_apply_to_blob($/;"	f
git_filter_list_apply_to_data	src/filter.c	/^int git_filter_list_apply_to_data($/;"	f
git_filter_list_apply_to_file	src/filter.c	/^int git_filter_list_apply_to_file($/;"	f
git_filter_list_free	src/filter.c	/^void git_filter_list_free(git_filter_list *fl)$/;"	f
git_filter_list_length	src/filter.c	/^size_t git_filter_list_length(const git_filter_list *fl)$/;"	f
git_filter_list_load	src/filter.c	/^int git_filter_list_load($/;"	f
git_filter_list_new	src/filter.c	/^int git_filter_list_new($/;"	f
git_filter_list_push	src/filter.c	/^int git_filter_list_push($/;"	f
git_filter_lookup	src/filter.c	/^git_filter *git_filter_lookup(const char *name)$/;"	f
git_filter_mode_t	include/git2/filter.h	/^} git_filter_mode_t;$/;"	t	typeref:enum:__anon231
git_filter_register	src/filter.c	/^int git_filter_register($/;"	f
git_filter_shutdown_fn	include/git2/sys/filter.h	/^typedef void (*git_filter_shutdown_fn)(git_filter *self);$/;"	t
git_filter_source	include/git2/sys/filter.h	/^typedef struct git_filter_source git_filter_source;$/;"	t	typeref:struct:git_filter_source
git_filter_source	src/filter.c	/^struct git_filter_source {$/;"	s	file:
git_filter_source_filemode	src/filter.c	/^uint16_t git_filter_source_filemode(const git_filter_source *src)$/;"	f
git_filter_source_id	src/filter.c	/^const git_oid *git_filter_source_id(const git_filter_source *src)$/;"	f
git_filter_source_mode	src/filter.c	/^git_filter_mode_t git_filter_source_mode(const git_filter_source *src)$/;"	f
git_filter_source_path	src/filter.c	/^const char *git_filter_source_path(const git_filter_source *src)$/;"	f
git_filter_source_repo	src/filter.c	/^git_repository *git_filter_source_repo(const git_filter_source *src)$/;"	f
git_filter_unregister	src/filter.c	/^int git_filter_unregister(const char *name)$/;"	f
git_futils_canonical_mode	src/fileops.c	/^mode_t git_futils_canonical_mode(mode_t raw_mode)$/;"	f
git_futils_cp	src/fileops.c	/^int git_futils_cp(const char *from, const char *to, mode_t filemode)$/;"	f
git_futils_cp_r	src/fileops.c	/^int git_futils_cp_r($/;"	f
git_futils_cpdir_flags	src/fileops.h	/^} git_futils_cpdir_flags;$/;"	t	typeref:enum:__anon46
git_futils_creat_locked	src/fileops.c	/^int git_futils_creat_locked(const char *path, const mode_t mode)$/;"	f
git_futils_creat_locked_withpath	src/fileops.c	/^int git_futils_creat_locked_withpath(const char *path, const mode_t dirmode, const mode_t mode)$/;"	f
git_futils_creat_withpath	src/fileops.c	/^int git_futils_creat_withpath(const char *path, const mode_t dirmode, const mode_t mode)$/;"	f
git_futils_fake_symlink	src/fileops.c	/^int git_futils_fake_symlink(const char *old, const char *new)$/;"	f
git_futils_filesize	src/fileops.c	/^git_off_t git_futils_filesize(git_file fd)$/;"	f
git_futils_filestamp	src/fileops.h	/^} git_futils_filestamp;$/;"	t	typeref:struct:__anon47
git_futils_filestamp_check	src/fileops.c	/^int git_futils_filestamp_check($/;"	f
git_futils_filestamp_set	src/fileops.c	/^void git_futils_filestamp_set($/;"	f
git_futils_mkdir	src/fileops.c	/^int git_futils_mkdir($/;"	f
git_futils_mkdir_flags	src/fileops.h	/^} git_futils_mkdir_flags;$/;"	t	typeref:enum:__anon44
git_futils_mkdir_r	src/fileops.c	/^int git_futils_mkdir_r(const char *path, const char *base, const mode_t mode)$/;"	f
git_futils_mkpath2file	src/fileops.c	/^int git_futils_mkpath2file(const char *file_path, const mode_t mode)$/;"	f
git_futils_mktmp	src/fileops.c	/^int git_futils_mktmp(git_buf *path_out, const char *filename, mode_t mode)$/;"	f
git_futils_mmap_free	src/fileops.c	/^void git_futils_mmap_free(git_map *out)$/;"	f
git_futils_mmap_ro	src/fileops.c	/^int git_futils_mmap_ro(git_map *out, git_file fd, git_off_t begin, size_t len)$/;"	f
git_futils_mmap_ro_file	src/fileops.c	/^int git_futils_mmap_ro_file(git_map *out, const char *path)$/;"	f
git_futils_mv_withpath	src/fileops.c	/^int git_futils_mv_withpath(const char *from, const char *to, const mode_t dirmode)$/;"	f
git_futils_open_ro	src/fileops.c	/^int git_futils_open_ro(const char *path)$/;"	f
git_futils_readbuffer	src/fileops.c	/^int git_futils_readbuffer(git_buf *buf, const char *path)$/;"	f
git_futils_readbuffer_fd	src/fileops.c	/^int git_futils_readbuffer_fd(git_buf *buf, git_file fd, size_t len)$/;"	f
git_futils_readbuffer_updated	src/fileops.c	/^int git_futils_readbuffer_updated($/;"	f
git_futils_rmdir_flags	src/fileops.h	/^} git_futils_rmdir_flags;$/;"	t	typeref:enum:__anon45
git_futils_rmdir_r	src/fileops.c	/^int git_futils_rmdir_r($/;"	f
git_futils_writebuffer	src/fileops.c	/^int git_futils_writebuffer($/;"	f
git_global_shutdown_fn	src/global.h	/^typedef void (*git_global_shutdown_fn)(void);$/;"	t
git_global_st	src/global.h	/^} git_global_st;$/;"	t	typeref:struct:__anon164
git_graph_ahead_behind	src/graph.c	/^int git_graph_ahead_behind(size_t *ahead, size_t *behind, git_repository *repo,$/;"	f
git_graph_descendant_of	src/graph.c	/^int git_graph_descendant_of(git_repository *repo, const git_oid *commit, const git_oid *ancestor)$/;"	f
git_has_win32_version	src/win32/version.h	/^GIT_INLINE(int) git_has_win32_version(int major, int minor, int service_pack)$/;"	f
git_hash_buf	src/hash.c	/^int git_hash_buf(git_oid *out, const void *data, size_t len)$/;"	f
git_hash_ctx	src/hash.h	/^typedef struct git_hash_ctx git_hash_ctx;$/;"	t	typeref:struct:git_hash_ctx
git_hash_ctx	src/hash/hash_generic.h	/^struct git_hash_ctx {$/;"	s
git_hash_ctx	src/hash/hash_openssl.h	/^struct git_hash_ctx {$/;"	s
git_hash_ctx	src/hash/hash_win32.h	/^struct git_hash_ctx {$/;"	s
git_hash_ctx_cleanup	src/hash/hash_generic.h	21;"	d
git_hash_ctx_cleanup	src/hash/hash_openssl.h	21;"	d
git_hash_ctx_cleanup	src/hash/hash_win32.c	/^void git_hash_ctx_cleanup(git_hash_ctx *ctx)$/;"	f
git_hash_ctx_init	src/hash/hash_generic.h	20;"	d
git_hash_ctx_init	src/hash/hash_openssl.h	20;"	d
git_hash_ctx_init	src/hash/hash_win32.c	/^int git_hash_ctx_init(git_hash_ctx *ctx)$/;"	f
git_hash_final	src/hash/hash_generic.c	/^int git_hash_final(git_oid *out, git_hash_ctx *ctx)$/;"	f
git_hash_final	src/hash/hash_openssl.h	/^GIT_INLINE(int) git_hash_final(git_oid *out, git_hash_ctx *ctx)$/;"	f
git_hash_final	src/hash/hash_win32.c	/^int git_hash_final(git_oid *out, git_hash_ctx *ctx)$/;"	f
git_hash_global_init	src/hash/hash_generic.h	19;"	d
git_hash_global_init	src/hash/hash_openssl.h	19;"	d
git_hash_global_init	src/hash/hash_win32.c	/^int git_hash_global_init(void)$/;"	f
git_hash_global_shutdown	src/hash/hash_win32.c	/^static void git_hash_global_shutdown(void)$/;"	f	file:
git_hash_init	src/hash/hash_generic.c	/^int git_hash_init(git_hash_ctx *ctx)$/;"	f
git_hash_init	src/hash/hash_openssl.h	/^GIT_INLINE(int) git_hash_init(git_hash_ctx *ctx)$/;"	f
git_hash_init	src/hash/hash_win32.c	/^int git_hash_init(git_hash_ctx *ctx)$/;"	f
git_hash_prov	src/hash.h	/^typedef struct git_hash_prov git_hash_prov;$/;"	t	typeref:struct:git_hash_prov
git_hash_prov	src/hash/hash_win32.h	/^struct git_hash_prov {$/;"	s
git_hash_update	src/hash/hash_generic.c	/^int git_hash_update(git_hash_ctx *ctx, const void *data, size_t len)$/;"	f
git_hash_update	src/hash/hash_openssl.h	/^GIT_INLINE(int) git_hash_update(git_hash_ctx *ctx, const void *data, size_t len)$/;"	f
git_hash_update	src/hash/hash_win32.c	/^int git_hash_update(git_hash_ctx *ctx, const void *data, size_t len)$/;"	f
git_hash_vec	src/hash.c	/^int git_hash_vec(git_oid *out, git_buf_vec *vec, size_t n)$/;"	f
git_hashsig	src/hashsig.c	/^struct git_hashsig {$/;"	s	file:
git_hashsig	src/hashsig.h	/^typedef struct git_hashsig git_hashsig;$/;"	t	typeref:struct:git_hashsig
git_hashsig_compare	src/hashsig.c	/^int git_hashsig_compare(const git_hashsig *a, const git_hashsig *b)$/;"	f
git_hashsig_create	src/hashsig.c	/^int git_hashsig_create($/;"	f
git_hashsig_create_fromfile	src/hashsig.c	/^int git_hashsig_create_fromfile($/;"	f
git_hashsig_free	src/hashsig.c	/^void git_hashsig_free(git_hashsig *sig)$/;"	f
git_hashsig_option_t	src/hashsig.h	/^} git_hashsig_option_t;$/;"	t	typeref:enum:__anon113
git_headlist_cb	include/git2/net.h	/^typedef int (*git_headlist_cb)(git_remote_head *rhead, void *payload);$/;"	t
git_ident_filter_new	src/ident.c	/^git_filter *git_ident_filter_new(void)$/;"	f
git_ignore__check_pathspec_for_exact_ignores	src/ignore.c	/^int git_ignore__check_pathspec_for_exact_ignores($/;"	f
git_ignore__for_path	src/ignore.c	/^int git_ignore__for_path($/;"	f
git_ignore__free	src/ignore.c	/^void git_ignore__free(git_ignores *ignores)$/;"	f
git_ignore__lookup	src/ignore.c	/^int git_ignore__lookup($/;"	f
git_ignore__pop_dir	src/ignore.c	/^int git_ignore__pop_dir(git_ignores *ign)$/;"	f
git_ignore__push_dir	src/ignore.c	/^int git_ignore__push_dir(git_ignores *ign, const char *dir)$/;"	f
git_ignore_add_rule	src/ignore.c	/^int git_ignore_add_rule($/;"	f
git_ignore_clear_internal_rules	src/ignore.c	/^int git_ignore_clear_internal_rules($/;"	f
git_ignore_path_is_ignored	src/ignore.c	/^int git_ignore_path_is_ignored($/;"	f
git_ignores	src/ignore.h	/^} git_ignores;$/;"	t	typeref:struct:__anon174
git_index	include/git2/types.h	/^typedef struct git_index git_index;$/;"	t	typeref:struct:git_index
git_index	src/index.h	/^struct git_index {$/;"	s
git_index__find	src/index.c	/^int git_index__find($/;"	f
git_index__prefix_position	src/index.c	/^size_t git_index__prefix_position(git_index *index, const char *path)$/;"	f
git_index__set_ignore_case	src/index.c	/^void git_index__set_ignore_case(git_index *index, bool ignore_case)$/;"	f
git_index_add	src/index.c	/^int git_index_add(git_index *index, const git_index_entry *source_entry)$/;"	f
git_index_add_all	src/index.c	/^int git_index_add_all($/;"	f
git_index_add_bypath	src/index.c	/^int git_index_add_bypath(git_index *index, const char *path)$/;"	f
git_index_add_option_t	include/git2/index.h	/^} git_index_add_option_t;$/;"	t	typeref:enum:__anon230
git_index_caps	src/index.c	/^int git_index_caps(const git_index *index)$/;"	f
git_index_clear	src/index.c	/^void git_index_clear(git_index *index)$/;"	f
git_index_conflict_add	src/index.c	/^int git_index_conflict_add(git_index *index,$/;"	f
git_index_conflict_cleanup	src/index.c	/^void git_index_conflict_cleanup(git_index *index)$/;"	f
git_index_conflict_get	src/index.c	/^int git_index_conflict_get($/;"	f
git_index_conflict_iterator	include/git2/types.h	/^typedef struct git_index_conflict_iterator git_index_conflict_iterator;$/;"	t	typeref:struct:git_index_conflict_iterator
git_index_conflict_iterator	src/index.h	/^struct git_index_conflict_iterator {$/;"	s
git_index_conflict_iterator_free	src/index.c	/^void git_index_conflict_iterator_free(git_index_conflict_iterator *iterator)$/;"	f
git_index_conflict_iterator_new	src/index.c	/^int git_index_conflict_iterator_new($/;"	f
git_index_conflict_next	src/index.c	/^int git_index_conflict_next($/;"	f
git_index_conflict_remove	src/index.c	/^int git_index_conflict_remove(git_index *index, const char *path)$/;"	f
git_index_entry	include/git2/index.h	/^typedef struct git_index_entry {$/;"	s
git_index_entry	include/git2/index.h	/^} git_index_entry;$/;"	t	typeref:struct:git_index_entry
git_index_entry__cmp	src/index.c	/^int git_index_entry__cmp(const void *a, const void *b)$/;"	f
git_index_entry__cmp_icase	src/index.c	/^int git_index_entry__cmp_icase(const void *a, const void *b)$/;"	f
git_index_entry__init_from_stat	src/index.c	/^void git_index_entry__init_from_stat($/;"	f
git_index_entry_stage	src/index.c	/^int git_index_entry_stage(const git_index_entry *entry)$/;"	f
git_index_entrycount	src/index.c	/^size_t git_index_entrycount(const git_index *index)$/;"	f
git_index_find	src/index.c	/^int git_index_find(size_t *at_pos, git_index *index, const char *path)$/;"	f
git_index_free	src/index.c	/^void git_index_free(git_index *index)$/;"	f
git_index_get_byindex	src/index.c	/^const git_index_entry *git_index_get_byindex($/;"	f
git_index_get_bypath	src/index.c	/^const git_index_entry *git_index_get_bypath($/;"	f
git_index_has_conflicts	src/index.c	/^int git_index_has_conflicts(const git_index *index)$/;"	f
git_index_matched_path_cb	include/git2/index.h	/^typedef int (*git_index_matched_path_cb)($/;"	t
git_index_name_add	src/index.c	/^int git_index_name_add(git_index *index,$/;"	f
git_index_name_clear	src/index.c	/^void git_index_name_clear(git_index *index)$/;"	f
git_index_name_entry	include/git2/sys/index.h	/^typedef struct git_index_name_entry {$/;"	s
git_index_name_entry	include/git2/sys/index.h	/^} git_index_name_entry;$/;"	t	typeref:struct:git_index_name_entry
git_index_name_entrycount	src/index.c	/^unsigned int git_index_name_entrycount(git_index *index)$/;"	f
git_index_name_get_byindex	src/index.c	/^const git_index_name_entry *git_index_name_get_byindex($/;"	f
git_index_new	src/index.c	/^int git_index_new(git_index **out)$/;"	f
git_index_open	src/index.c	/^int git_index_open(git_index **index_out, const char *index_path)$/;"	f
git_index_owner	src/index.c	/^git_repository *git_index_owner(const git_index *index)$/;"	f
git_index_path	src/index.c	/^const char * git_index_path(git_index *index)$/;"	f
git_index_read	src/index.c	/^int git_index_read(git_index *index, int force)$/;"	f
git_index_read_tree	src/index.c	/^int git_index_read_tree(git_index *index, const git_tree *tree)$/;"	f
git_index_remove	src/index.c	/^int git_index_remove(git_index *index, const char *path, int stage)$/;"	f
git_index_remove_all	src/index.c	/^int git_index_remove_all($/;"	f
git_index_remove_bypath	src/index.c	/^int git_index_remove_bypath(git_index *index, const char *path)$/;"	f
git_index_remove_directory	src/index.c	/^int git_index_remove_directory(git_index *index, const char *dir, int stage)$/;"	f
git_index_reuc_add	src/index.c	/^int git_index_reuc_add(git_index *index, const char *path,$/;"	f
git_index_reuc_clear	src/index.c	/^void git_index_reuc_clear(git_index *index)$/;"	f
git_index_reuc_entry	include/git2/sys/index.h	/^typedef struct git_index_reuc_entry {$/;"	s
git_index_reuc_entry	include/git2/sys/index.h	/^} git_index_reuc_entry;$/;"	t	typeref:struct:git_index_reuc_entry
git_index_reuc_entrycount	src/index.c	/^unsigned int git_index_reuc_entrycount(git_index *index)$/;"	f
git_index_reuc_find	src/index.c	/^int git_index_reuc_find(size_t *at_pos, git_index *index, const char *path)$/;"	f
git_index_reuc_get_byindex	src/index.c	/^const git_index_reuc_entry *git_index_reuc_get_byindex($/;"	f
git_index_reuc_get_bypath	src/index.c	/^const git_index_reuc_entry *git_index_reuc_get_bypath($/;"	f
git_index_reuc_remove	src/index.c	/^int git_index_reuc_remove(git_index *index, size_t position)$/;"	f
git_index_set_caps	src/index.c	/^int git_index_set_caps(git_index *index, int caps)$/;"	f
git_index_time	include/git2/index.h	/^} git_index_time;$/;"	t	typeref:struct:__anon228
git_index_update_all	src/index.c	/^int git_index_update_all($/;"	f
git_index_write	src/index.c	/^int git_index_write(git_index *index)$/;"	f
git_index_write_tree	src/index.c	/^int git_index_write_tree(git_oid *oid, git_index *index)$/;"	f
git_index_write_tree_to	src/index.c	/^int git_index_write_tree_to(git_oid *oid, git_index *index, git_repository *repo)$/;"	f
git_indexcap_t	include/git2/index.h	/^} git_indexcap_t;$/;"	t	typeref:enum:__anon229
git_indexer	include/git2/indexer.h	/^typedef struct git_indexer git_indexer;$/;"	t	typeref:struct:git_indexer
git_indexer	src/indexer.c	/^struct git_indexer {$/;"	s	file:
git_indexer_append	src/indexer.c	/^int git_indexer_append(git_indexer *idx, const void *data, size_t size, git_transfer_progress *stats)$/;"	f
git_indexer_commit	src/indexer.c	/^int git_indexer_commit(git_indexer *idx, git_transfer_progress *stats)$/;"	f
git_indexer_free	src/indexer.c	/^void git_indexer_free(git_indexer *idx)$/;"	f
git_indexer_hash	src/indexer.c	/^const git_oid *git_indexer_hash(const git_indexer *idx)$/;"	f
git_indexer_new	src/indexer.c	/^int git_indexer_new($/;"	f
git_iterator	src/iterator.h	/^struct git_iterator {$/;"	s
git_iterator	src/iterator.h	/^typedef struct git_iterator git_iterator;$/;"	t	typeref:struct:git_iterator
git_iterator_advance	src/iterator.h	/^GIT_INLINE(int) git_iterator_advance($/;"	f
git_iterator_advance_into	src/iterator.h	/^GIT_INLINE(int) git_iterator_advance_into($/;"	f
git_iterator_advance_into_or_over	src/iterator.h	/^GIT_INLINE(int) git_iterator_advance_into_or_over($/;"	f
git_iterator_at_end	src/iterator.h	/^GIT_INLINE(int) git_iterator_at_end(git_iterator *iter)$/;"	f
git_iterator_callbacks	src/iterator.h	/^} git_iterator_callbacks;$/;"	t	typeref:struct:__anon112
git_iterator_cmp	src/iterator.c	/^int git_iterator_cmp(git_iterator *iter, const char *path_prefix)$/;"	f
git_iterator_current	src/iterator.h	/^GIT_INLINE(int) git_iterator_current($/;"	f
git_iterator_current_is_ignored	src/iterator.c	/^bool git_iterator_current_is_ignored(git_iterator *iter)$/;"	f
git_iterator_current_parent_tree	src/iterator.c	/^int git_iterator_current_parent_tree($/;"	f
git_iterator_current_tree_entry	src/iterator.c	/^int git_iterator_current_tree_entry($/;"	f
git_iterator_current_workdir_path	src/iterator.c	/^int git_iterator_current_workdir_path(git_buf **path, git_iterator *iter)$/;"	f
git_iterator_flag_t	src/iterator.h	/^} git_iterator_flag_t;$/;"	t	typeref:enum:__anon111
git_iterator_flags	src/iterator.h	/^GIT_INLINE(git_iterator_flag_t) git_iterator_flags(git_iterator *iter)$/;"	f
git_iterator_for_filesystem	src/iterator.c	/^int git_iterator_for_filesystem($/;"	f
git_iterator_for_index	src/iterator.c	/^int git_iterator_for_index($/;"	f
git_iterator_for_nothing	src/iterator.c	/^int git_iterator_for_nothing($/;"	f
git_iterator_for_tree	src/iterator.c	/^int git_iterator_for_tree($/;"	f
git_iterator_for_workdir	src/iterator.h	/^GIT_INLINE(int) git_iterator_for_workdir($/;"	f
git_iterator_for_workdir_ext	src/iterator.c	/^int git_iterator_for_workdir_ext($/;"	f
git_iterator_free	src/iterator.c	/^void git_iterator_free(git_iterator *iter)$/;"	f
git_iterator_get_index	src/iterator.c	/^git_index *git_iterator_get_index(git_iterator *iter)$/;"	f
git_iterator_ignore_case	src/iterator.h	/^GIT_INLINE(bool) git_iterator_ignore_case(git_iterator *iter)$/;"	f
git_iterator_owner	src/iterator.h	/^GIT_INLINE(git_repository *) git_iterator_owner(git_iterator *iter)$/;"	f
git_iterator_reset	src/iterator.h	/^GIT_INLINE(int) git_iterator_reset($/;"	f
git_iterator_seek	src/iterator.h	/^GIT_INLINE(int) git_iterator_seek($/;"	f
git_iterator_set_ignore_case	src/iterator.c	/^int git_iterator_set_ignore_case(git_iterator *iter, bool ignore_case)$/;"	f
git_iterator_type	src/iterator.h	/^GIT_INLINE(git_iterator_type_t) git_iterator_type(git_iterator *iter)$/;"	f
git_iterator_type_t	src/iterator.h	/^} git_iterator_type_t;$/;"	t	typeref:enum:__anon110
git_libgit2_features	src/settings.c	/^int git_libgit2_features()$/;"	f
git_libgit2_opt_t	include/git2/common.h	/^} git_libgit2_opt_t;$/;"	t	typeref:enum:__anon234
git_libgit2_opts	src/settings.c	/^int git_libgit2_opts(int key, ...)$/;"	f
git_libgit2_version	src/settings.c	/^void git_libgit2_version(int *major, int *minor, int *rev)$/;"	f
git_map	src/map.h	/^} git_map;$/;"	t	typeref:struct:__anon140
git_merge	src/merge.c	/^int git_merge($/;"	f
git_merge__bases_many	src/merge.c	/^int git_merge__bases_many(git_commit_list **out, git_revwalk *walk, git_commit_list_node *one, git_vector *twos)$/;"	f
git_merge__indexes	src/merge.c	/^int git_merge__indexes(git_repository *repo, git_index *index_new)$/;"	f
git_merge__setup	src/merge.c	/^int git_merge__setup($/;"	f
git_merge_base	src/merge.c	/^int git_merge_base(git_oid *out, git_repository *repo, const git_oid *one, const git_oid *two)$/;"	f
git_merge_base_many	src/merge.c	/^int git_merge_base_many(git_oid *out, git_repository *repo, size_t length, const git_oid input_array[])$/;"	f
git_merge_commits	src/merge.c	/^int git_merge_commits($/;"	f
git_merge_diff	src/merge.h	/^} git_merge_diff;$/;"	t	typeref:struct:__anon144
git_merge_diff_list	src/merge.h	/^} git_merge_diff_list;$/;"	t	typeref:struct:__anon143
git_merge_diff_list__alloc	src/merge.c	/^git_merge_diff_list *git_merge_diff_list__alloc(git_repository *repo)$/;"	f
git_merge_diff_list__find_differences	src/merge.c	/^int git_merge_diff_list__find_differences($/;"	f
git_merge_diff_list__find_renames	src/merge.c	/^int git_merge_diff_list__find_renames($/;"	f
git_merge_diff_list__free	src/merge.c	/^void git_merge_diff_list__free(git_merge_diff_list *diff_list)$/;"	f
git_merge_diff_type_t	src/merge.h	/^} git_merge_diff_type_t;$/;"	t	typeref:enum:__anon142
git_merge_file_favor_t	include/git2/merge.h	/^} git_merge_file_favor_t;$/;"	t	typeref:enum:__anon250
git_merge_file_flags_t	src/merge_file.h	/^} git_merge_file_flags_t;$/;"	t	typeref:enum:__anon57
git_merge_file_input	src/merge_file.h	/^} git_merge_file_input;$/;"	t	typeref:struct:__anon55
git_merge_file_input_free	src/merge_file.h	/^GIT_INLINE(void) git_merge_file_input_free(git_merge_file_input *input)$/;"	f
git_merge_file_input_from_diff_file	src/merge_file.c	/^int git_merge_file_input_from_diff_file($/;"	f
git_merge_file_input_from_index_entry	src/merge_file.c	/^int git_merge_file_input_from_index_entry($/;"	f
git_merge_file_options	src/merge_file.h	/^} git_merge_file_options;$/;"	t	typeref:struct:__anon59
git_merge_file_result	src/merge_file.h	/^} git_merge_file_result;$/;"	t	typeref:struct:__anon56
git_merge_file_result_free	src/merge_file.h	/^GIT_INLINE(void) git_merge_file_result_free(git_merge_file_result *filediff)$/;"	f
git_merge_file_style_t	src/merge_file.h	/^} git_merge_file_style_t;$/;"	t	typeref:enum:__anon58
git_merge_files	src/merge_file.c	/^int git_merge_files($/;"	f
git_merge_flags_t	include/git2/merge.h	/^} git_merge_flags_t;$/;"	t	typeref:enum:__anon252
git_merge_head	include/git2/types.h	/^typedef struct git_merge_head git_merge_head;$/;"	t	typeref:struct:git_merge_head
git_merge_head	src/merge.h	/^struct git_merge_head {$/;"	s
git_merge_head_free	src/merge.c	/^void git_merge_head_free(git_merge_head *head)$/;"	f
git_merge_head_from_fetchhead	src/merge.c	/^int git_merge_head_from_fetchhead($/;"	f
git_merge_head_from_id	src/merge.c	/^int git_merge_head_from_id($/;"	f
git_merge_head_from_ref	src/merge.c	/^int git_merge_head_from_ref($/;"	f
git_merge_opts	include/git2/merge.h	/^} git_merge_opts;$/;"	t	typeref:struct:__anon253
git_merge_result	include/git2/types.h	/^typedef struct git_merge_result git_merge_result;$/;"	t	typeref:struct:git_merge_result
git_merge_result	src/merge.h	/^struct git_merge_result {$/;"	s
git_merge_result_fastforward_id	src/merge.c	/^int git_merge_result_fastforward_id(git_oid *out, git_merge_result *merge_result)$/;"	f
git_merge_result_free	src/merge.c	/^void git_merge_result_free(git_merge_result *merge_result)$/;"	f
git_merge_result_is_fastforward	src/merge.c	/^int git_merge_result_is_fastforward(git_merge_result *merge_result)$/;"	f
git_merge_result_is_uptodate	src/merge.c	/^int git_merge_result_is_uptodate(git_merge_result *merge_result)$/;"	f
git_merge_tree_flag_t	include/git2/merge.h	/^} git_merge_tree_flag_t;$/;"	t	typeref:enum:__anon249
git_merge_tree_opts	include/git2/merge.h	/^} git_merge_tree_opts;$/;"	t	typeref:struct:__anon251
git_merge_trees	src/merge.c	/^int git_merge_trees($/;"	f
git_message_prettify	src/message.c	/^int git_message_prettify(git_buf *message_out, const char *message, int strip_comments)$/;"	f
git_mutex	src/thread-utils.h	181;"	d
git_mutex	src/thread-utils.h	51;"	d
git_mutex_free	src/thread-utils.h	185;"	d
git_mutex_free	src/thread-utils.h	55;"	d
git_mutex_init	src/thread-utils.h	182;"	d
git_mutex_init	src/thread-utils.h	52;"	d
git_mutex_lock	src/thread-utils.h	183;"	d
git_mutex_lock	src/thread-utils.h	53;"	d
git_mutex_unlock	src/thread-utils.h	184;"	d
git_mutex_unlock	src/thread-utils.h	54;"	d
git_mwindow	src/mwindow.h	/^typedef struct git_mwindow {$/;"	s
git_mwindow	src/mwindow.h	/^} git_mwindow;$/;"	t	typeref:struct:git_mwindow
git_mwindow__mapped_limit	src/mwindow.c	/^size_t git_mwindow__mapped_limit = DEFAULT_MAPPED_LIMIT;$/;"	v
git_mwindow__window_size	src/mwindow.c	/^size_t git_mwindow__window_size = DEFAULT_WINDOW_SIZE;$/;"	v
git_mwindow_close	src/mwindow.c	/^void git_mwindow_close(git_mwindow **window)$/;"	f
git_mwindow_close_lru	src/mwindow.c	/^static int git_mwindow_close_lru(git_mwindow_file *mwf)$/;"	f	file:
git_mwindow_contains	src/mwindow.c	/^int git_mwindow_contains(git_mwindow *win, git_off_t offset)$/;"	f
git_mwindow_ctl	src/mwindow.h	/^typedef struct git_mwindow_ctl {$/;"	s
git_mwindow_ctl	src/mwindow.h	/^} git_mwindow_ctl;$/;"	t	typeref:struct:git_mwindow_ctl
git_mwindow_file	src/mwindow.h	/^typedef struct git_mwindow_file {$/;"	s
git_mwindow_file	src/mwindow.h	/^} git_mwindow_file;$/;"	t	typeref:struct:git_mwindow_file
git_mwindow_file_deregister	src/mwindow.c	/^void git_mwindow_file_deregister(git_mwindow_file *mwf)$/;"	f
git_mwindow_file_register	src/mwindow.c	/^int git_mwindow_file_register(git_mwindow_file *mwf)$/;"	f
git_mwindow_free_all	src/mwindow.c	/^void git_mwindow_free_all(git_mwindow_file *mwf)$/;"	f
git_mwindow_open	src/mwindow.c	/^unsigned char *git_mwindow_open($/;"	f
git_mwindow_scan_lru	src/mwindow.c	/^static void git_mwindow_scan_lru($/;"	f	file:
git_note	include/git2/types.h	/^typedef struct git_note git_note;$/;"	t	typeref:struct:git_note
git_note	src/notes.h	/^struct git_note {$/;"	s
git_note_create	src/notes.c	/^int git_note_create($/;"	f
git_note_default_ref	src/notes.c	/^int git_note_default_ref(const char **out, git_repository *repo)$/;"	f
git_note_foreach	src/notes.c	/^int git_note_foreach($/;"	f
git_note_foreach_cb	include/git2/notes.h	/^typedef int (*git_note_foreach_cb)($/;"	t
git_note_free	src/notes.c	/^void git_note_free(git_note *note)$/;"	f
git_note_id	src/notes.c	/^const git_oid * git_note_id(const git_note *note)$/;"	f
git_note_iterator	include/git2/notes.h	/^typedef struct git_iterator git_note_iterator;$/;"	t	typeref:struct:git_iterator
git_note_iterator_free	src/notes.c	/^void git_note_iterator_free(git_note_iterator *it)$/;"	f
git_note_iterator_new	src/notes.c	/^int git_note_iterator_new($/;"	f
git_note_message	src/notes.c	/^const char * git_note_message(const git_note *note)$/;"	f
git_note_next	src/notes.c	/^int git_note_next($/;"	f
git_note_read	src/notes.c	/^int git_note_read(git_note **out, git_repository *repo,$/;"	f
git_note_remove	src/notes.c	/^int git_note_remove(git_repository *repo, const char *notes_ref,$/;"	f
git_object	include/git2/types.h	/^typedef struct git_object git_object;$/;"	t	typeref:struct:git_object
git_object	src/object.h	/^struct git_object {$/;"	s
git_object__free	src/object.c	/^void git_object__free(void *obj)$/;"	f
git_object__from_odb_object	src/object.c	/^int git_object__from_odb_object($/;"	f
git_object__size	src/object.c	/^size_t git_object__size(git_otype type)$/;"	f
git_object_def	src/object.c	/^} git_object_def;$/;"	t	typeref:struct:__anon102	file:
git_object_dup	src/object.c	/^int git_object_dup(git_object **dest, git_object *source)$/;"	f
git_object_free	src/object.c	/^void git_object_free(git_object *object)$/;"	f
git_object_id	src/object.c	/^const git_oid *git_object_id(const git_object *obj)$/;"	f
git_object_lookup	src/object.c	/^int git_object_lookup(git_object **object_out, git_repository *repo, const git_oid *id, git_otype type) {$/;"	f
git_object_lookup_bypath	src/object.c	/^int git_object_lookup_bypath($/;"	f
git_object_lookup_prefix	src/object.c	/^int git_object_lookup_prefix($/;"	f
git_object_owner	src/object.c	/^git_repository *git_object_owner(const git_object *obj)$/;"	f
git_object_peel	src/object.c	/^int git_object_peel($/;"	f
git_object_string2type	src/object.c	/^git_otype git_object_string2type(const char *str)$/;"	f
git_object_type	src/object.c	/^git_otype git_object_type(const git_object *obj)$/;"	f
git_object_type2string	src/object.c	/^const char *git_object_type2string(git_otype type)$/;"	f
git_object_typeisloose	src/object.c	/^int git_object_typeisloose(git_otype type)$/;"	f
git_objects_table	src/object.c	/^static git_object_def git_objects_table[] = {$/;"	v	file:
git_odb	include/git2/types.h	/^typedef struct git_odb git_odb;$/;"	t	typeref:struct:git_odb
git_odb	src/odb.h	/^struct git_odb {$/;"	s
git_odb__error_ambiguous	src/odb.c	/^int git_odb__error_ambiguous(const char *message)$/;"	f
git_odb__error_notfound	src/odb.c	/^int git_odb__error_notfound(const char *message, const git_oid *oid)$/;"	f
git_odb__error_unsupported_in_backend	src/odb.c	/^static int git_odb__error_unsupported_in_backend(const char *action)$/;"	f	file:
git_odb__format_object_header	src/odb.c	/^int git_odb__format_object_header(char *hdr, size_t n, size_t obj_len, git_otype obj_type)$/;"	f
git_odb__hashfd	src/odb.c	/^int git_odb__hashfd(git_oid *out, git_file fd, size_t size, git_otype type)$/;"	f
git_odb__hashfd_filtered	src/odb.c	/^int git_odb__hashfd_filtered($/;"	f
git_odb__hashlink	src/odb.c	/^int git_odb__hashlink(git_oid *out, const char *path)$/;"	f
git_odb__hashobj	src/odb.c	/^int git_odb__hashobj(git_oid *id, git_rawobj *obj)$/;"	f
git_odb__read_header_or_object	src/odb.c	/^int git_odb__read_header_or_object($/;"	f
git_odb_add_alternate	src/odb.c	/^int git_odb_add_alternate(git_odb *odb, git_odb_backend *backend, int priority)$/;"	f
git_odb_add_backend	src/odb.c	/^int git_odb_add_backend(git_odb *odb, git_odb_backend *backend, int priority)$/;"	f
git_odb_add_disk_alternate	src/odb.c	/^int git_odb_add_disk_alternate(git_odb *odb, const char *path)$/;"	f
git_odb_backend	include/git2/sys/odb_backend.h	/^struct git_odb_backend {$/;"	s
git_odb_backend	include/git2/types.h	/^typedef struct git_odb_backend git_odb_backend;$/;"	t	typeref:struct:git_odb_backend
git_odb_backend_loose	src/odb_loose.c	/^int git_odb_backend_loose($/;"	f
git_odb_backend_malloc	src/odb.c	/^void *git_odb_backend_malloc(git_odb_backend *backend, size_t len)$/;"	f
git_odb_backend_one_pack	src/odb_pack.c	/^int git_odb_backend_one_pack(git_odb_backend **backend_out, const char *idx)$/;"	f
git_odb_backend_pack	src/odb_pack.c	/^int git_odb_backend_pack(git_odb_backend **backend_out, const char *objects_dir)$/;"	f
git_odb_exists	src/odb.c	/^int git_odb_exists(git_odb *db, const git_oid *id)$/;"	f
git_odb_foreach	src/odb.c	/^int git_odb_foreach(git_odb *db, git_odb_foreach_cb cb, void *payload)$/;"	f
git_odb_foreach_cb	include/git2/odb.h	/^typedef int (*git_odb_foreach_cb)(const git_oid *id, void *payload);$/;"	t
git_odb_free	src/odb.c	/^void git_odb_free(git_odb *db)$/;"	f
git_odb_get_backend	src/odb.c	/^int git_odb_get_backend(git_odb_backend **out, git_odb *odb, size_t pos)$/;"	f
git_odb_hash	src/odb.c	/^int git_odb_hash(git_oid *id, const void *data, size_t len, git_otype type)$/;"	f
git_odb_hashfile	src/odb.c	/^int git_odb_hashfile(git_oid *out, const char *path, git_otype type)$/;"	f
git_odb_new	src/odb.c	/^int git_odb_new(git_odb **out)$/;"	f
git_odb_num_backends	src/odb.c	/^size_t git_odb_num_backends(git_odb *odb)$/;"	f
git_odb_object	include/git2/types.h	/^typedef struct git_odb_object git_odb_object;$/;"	t	typeref:struct:git_odb_object
git_odb_object	src/odb.h	/^struct git_odb_object {$/;"	s
git_odb_object__free	src/odb.c	/^void git_odb_object__free(void *object)$/;"	f
git_odb_object_data	src/odb.c	/^const void *git_odb_object_data(git_odb_object *object)$/;"	f
git_odb_object_dup	src/odb.c	/^int git_odb_object_dup(git_odb_object **dest, git_odb_object *source)$/;"	f
git_odb_object_free	src/odb.c	/^void git_odb_object_free(git_odb_object *object)$/;"	f
git_odb_object_id	src/odb.c	/^const git_oid *git_odb_object_id(git_odb_object *object)$/;"	f
git_odb_object_size	src/odb.c	/^size_t git_odb_object_size(git_odb_object *object)$/;"	f
git_odb_object_type	src/odb.c	/^git_otype git_odb_object_type(git_odb_object *object)$/;"	f
git_odb_open	src/odb.c	/^int git_odb_open(git_odb **out, const char *objects_dir)$/;"	f
git_odb_open_rstream	src/odb.c	/^int git_odb_open_rstream(git_odb_stream **stream, git_odb *db, const git_oid *oid)$/;"	f
git_odb_open_wstream	src/odb.c	/^int git_odb_open_wstream($/;"	f
git_odb_read	src/odb.c	/^int git_odb_read(git_odb_object **out, git_odb *db, const git_oid *id)$/;"	f
git_odb_read_header	src/odb.c	/^int git_odb_read_header(size_t *len_p, git_otype *type_p, git_odb *db, const git_oid *id)$/;"	f
git_odb_read_prefix	src/odb.c	/^int git_odb_read_prefix($/;"	f
git_odb_refresh	src/odb.c	/^int git_odb_refresh(struct git_odb *db)$/;"	f
git_odb_stream	include/git2/odb_backend.h	/^struct git_odb_stream {$/;"	s
git_odb_stream	include/git2/types.h	/^typedef struct git_odb_stream git_odb_stream;$/;"	t	typeref:struct:git_odb_stream
git_odb_stream__invalid_length	src/odb.c	/^static int git_odb_stream__invalid_length($/;"	f	file:
git_odb_stream_finalize_write	src/odb.c	/^int git_odb_stream_finalize_write(git_oid *out, git_odb_stream *stream)$/;"	f
git_odb_stream_free	src/odb.c	/^void git_odb_stream_free(git_odb_stream *stream)$/;"	f
git_odb_stream_read	src/odb.c	/^int git_odb_stream_read(git_odb_stream *stream, char *buffer, size_t len)$/;"	f
git_odb_stream_t	include/git2/odb_backend.h	/^} git_odb_stream_t;$/;"	t	typeref:enum:__anon255
git_odb_stream_write	src/odb.c	/^int git_odb_stream_write(git_odb_stream *stream, const char *buffer, size_t len)$/;"	f
git_odb_write	src/odb.c	/^int git_odb_write($/;"	f
git_odb_write_pack	src/odb.c	/^int git_odb_write_pack(struct git_odb_writepack **out, git_odb *db, git_transfer_progress_callback progress_cb, void *progress_payload)$/;"	f
git_odb_writepack	include/git2/odb_backend.h	/^struct git_odb_writepack {$/;"	s
git_odb_writepack	include/git2/types.h	/^typedef struct git_odb_writepack git_odb_writepack;$/;"	t	typeref:struct:git_odb_writepack
git_off_t	include/git2/types.h	/^typedef __int64 git_off_t;$/;"	t
git_offmap	src/offmap.h	/^typedef khash_t(off) git_offmap;$/;"	t
git_offmap_alloc	src/offmap.h	25;"	d
git_offmap_clear	src/offmap.h	27;"	d
git_offmap_delete	src/offmap.h	57;"	d
git_offmap_delete_at	src/offmap.h	38;"	d
git_offmap_exists	src/offmap.h	34;"	d
git_offmap_foreach	src/offmap.h	62;"	d
git_offmap_foreach_value	src/offmap.h	63;"	d
git_offmap_free	src/offmap.h	26;"	d
git_offmap_insert	src/offmap.h	40;"	d
git_offmap_insert2	src/offmap.h	47;"	d
git_offmap_lookup_index	src/offmap.h	31;"	d
git_offmap_num_entries	src/offmap.h	29;"	d
git_offmap_set_value_at	src/offmap.h	37;"	d
git_offmap_valid_index	src/offmap.h	32;"	d
git_offmap_value_at	src/offmap.h	36;"	d
git_oid	include/git2/oid.h	/^typedef struct git_oid {$/;"	s
git_oid	include/git2/oid.h	/^} git_oid;$/;"	t	typeref:struct:git_oid
git_oid__cmp	src/oid.h	/^GIT_INLINE(int) git_oid__cmp(const git_oid *a, const git_oid *b)$/;"	f
git_oid__hashcmp	src/oid.h	/^GIT_INLINE(int) git_oid__hashcmp(const unsigned char *sha1, const unsigned char *sha2)$/;"	f
git_oid__parse	src/oid.c	/^int git_oid__parse($/;"	f
git_oid__writebuf	src/oid.c	/^void git_oid__writebuf(git_buf *buf, const char *header, const git_oid *oid)$/;"	f
git_oid_allocfmt	src/oid.c	/^char *git_oid_allocfmt(const git_oid *oid)$/;"	f
git_oid_cmp	src/oid.c	/^int git_oid_cmp(const git_oid *a, const git_oid *b)$/;"	f
git_oid_cpy	src/oid.c	/^void git_oid_cpy(git_oid *out, const git_oid *src)$/;"	f
git_oid_equal	src/oid.c	/^int git_oid_equal(const git_oid *a, const git_oid *b)$/;"	f
git_oid_fmt	src/oid.c	/^void git_oid_fmt(char *str, const git_oid *oid)$/;"	f
git_oid_fromraw	src/oid.c	/^void git_oid_fromraw(git_oid *out, const unsigned char *raw)$/;"	f
git_oid_fromstr	src/oid.c	/^int git_oid_fromstr(git_oid *out, const char *str)$/;"	f
git_oid_fromstrn	src/oid.c	/^int git_oid_fromstrn(git_oid *out, const char *str, size_t length)$/;"	f
git_oid_fromstrp	src/oid.c	/^int git_oid_fromstrp(git_oid *out, const char *str)$/;"	f
git_oid_iszero	src/oid.c	/^int git_oid_iszero(const git_oid *oid_a)$/;"	f
git_oid_ncmp	src/oid.c	/^int git_oid_ncmp(const git_oid *oid_a, const git_oid *oid_b, size_t len)$/;"	f
git_oid_nfmt	src/oid.c	/^void git_oid_nfmt(char *str, size_t n, const git_oid *oid)$/;"	f
git_oid_pathfmt	src/oid.c	/^void git_oid_pathfmt(char *str, const git_oid *oid)$/;"	f
git_oid_shorten	include/git2/oid.h	/^typedef struct git_oid_shorten git_oid_shorten;$/;"	t	typeref:struct:git_oid_shorten
git_oid_shorten	src/oid.c	/^struct git_oid_shorten {$/;"	s	file:
git_oid_shorten_add	src/oid.c	/^int git_oid_shorten_add(git_oid_shorten *os, const char *text_oid)$/;"	f
git_oid_shorten_free	src/oid.c	/^void git_oid_shorten_free(git_oid_shorten *os)$/;"	f
git_oid_shorten_new	src/oid.c	/^git_oid_shorten *git_oid_shorten_new(size_t min_length)$/;"	f
git_oid_strcmp	src/oid.c	/^int git_oid_strcmp(const git_oid *oid_a, const char *str)$/;"	f
git_oid_streq	src/oid.c	/^int git_oid_streq(const git_oid *oid_a, const char *str)$/;"	f
git_oid_tostr	src/oid.c	/^char *git_oid_tostr(char *out, size_t n, const git_oid *oid)$/;"	f
git_oidmap	src/oidmap.h	/^typedef khash_t(oid) git_oidmap;$/;"	t
git_oidmap_alloc	src/oidmap.h	32;"	d
git_oidmap_free	src/oidmap.h	33;"	d
git_oidmap_hash	src/oidmap.h	/^GIT_INLINE(khint_t) git_oidmap_hash(const git_oid *oid)$/;"	f
git_online_cpus	src/thread-utils.c	/^int git_online_cpus(void)$/;"	f
git_otype	include/git2/types.h	/^} git_otype;$/;"	t	typeref:enum:__anon235
git_pack_cache	src/pack.h	/^} git_pack_cache;$/;"	t	typeref:struct:__anon32
git_pack_cache_entry	src/pack.h	/^typedef struct git_pack_cache_entry {$/;"	s
git_pack_cache_entry	src/pack.h	/^} git_pack_cache_entry;$/;"	t	typeref:struct:git_pack_cache_entry
git_pack_entry	src/pack.h	/^struct git_pack_entry {$/;"	s
git_pack_entry_find	src/pack.c	/^int git_pack_entry_find($/;"	f
git_pack_file	src/pack.h	/^struct git_pack_file {$/;"	s
git_pack_foreach_entry	src/pack.c	/^int git_pack_foreach_entry($/;"	f
git_pack_header	src/pack.h	/^struct git_pack_header {$/;"	s
git_pack_idx_header	src/pack.h	/^struct git_pack_idx_header {$/;"	s
git_packbuilder	include/git2/types.h	/^typedef struct git_packbuilder git_packbuilder;$/;"	t	typeref:struct:git_packbuilder
git_packbuilder	src/pack-objects.h	/^struct git_packbuilder {$/;"	s
git_packbuilder__cache_lock	src/pack-objects.c	56;"	d	file:
git_packbuilder__cache_unlock	src/pack-objects.c	57;"	d	file:
git_packbuilder__progress_lock	src/pack-objects.c	58;"	d	file:
git_packbuilder__progress_unlock	src/pack-objects.c	59;"	d	file:
git_packbuilder_foreach	src/pack-objects.c	/^int git_packbuilder_foreach(git_packbuilder *pb, int (*cb)(void *buf, size_t size, void *payload), void *payload)$/;"	f
git_packbuilder_foreach_cb	include/git2/pack.h	/^typedef int (*git_packbuilder_foreach_cb)(void *buf, size_t size, void *payload);$/;"	t
git_packbuilder_free	src/pack-objects.c	/^void git_packbuilder_free(git_packbuilder *pb)$/;"	f
git_packbuilder_hash	src/pack-objects.c	/^const git_oid *git_packbuilder_hash(git_packbuilder *pb)$/;"	f
git_packbuilder_insert	src/pack-objects.c	/^int git_packbuilder_insert(git_packbuilder *pb, const git_oid *oid,$/;"	f
git_packbuilder_insert_commit	src/pack-objects.c	/^int git_packbuilder_insert_commit(git_packbuilder *pb, const git_oid *oid)$/;"	f
git_packbuilder_insert_tree	src/pack-objects.c	/^int git_packbuilder_insert_tree(git_packbuilder *pb, const git_oid *oid)$/;"	f
git_packbuilder_new	src/pack-objects.c	/^int git_packbuilder_new(git_packbuilder **out, git_repository *repo)$/;"	f
git_packbuilder_object_count	src/pack-objects.c	/^uint32_t git_packbuilder_object_count(git_packbuilder *pb)$/;"	f
git_packbuilder_progress	include/git2/pack.h	/^typedef int (*git_packbuilder_progress)($/;"	t
git_packbuilder_set_callbacks	src/pack-objects.c	/^int git_packbuilder_set_callbacks(git_packbuilder *pb, git_packbuilder_progress progress_cb, void *progress_cb_payload)$/;"	f
git_packbuilder_set_threads	src/pack-objects.c	/^unsigned int git_packbuilder_set_threads(git_packbuilder *pb, unsigned int n)$/;"	f
git_packbuilder_stage_t	include/git2/pack.h	/^} git_packbuilder_stage_t;$/;"	t	typeref:enum:__anon204
git_packbuilder_write	src/pack-objects.c	/^int git_packbuilder_write($/;"	f
git_packbuilder_write_buf	src/pack-objects.c	/^int git_packbuilder_write_buf(git_buf *buf, git_packbuilder *pb)$/;"	f
git_packbuilder_written	src/pack-objects.c	/^uint32_t git_packbuilder_written(git_packbuilder *pb)$/;"	f
git_packfile__object_header	src/pack.c	/^size_t git_packfile__object_header(unsigned char *hdr, size_t size, git_otype type)$/;"	f
git_packfile_alloc	src/pack.c	/^int git_packfile_alloc(struct git_pack_file **pack_out, const char *path)$/;"	f
git_packfile_free	src/pack.c	/^void git_packfile_free(struct git_pack_file *p)$/;"	f
git_packfile_resolve_header	src/pack.c	/^int git_packfile_resolve_header($/;"	f
git_packfile_stream	src/pack.h	/^typedef struct git_packfile_stream {$/;"	s
git_packfile_stream	src/pack.h	/^} git_packfile_stream;$/;"	t	typeref:struct:git_packfile_stream
git_packfile_stream_free	src/pack.c	/^void git_packfile_stream_free(git_packfile_stream *obj)$/;"	f
git_packfile_stream_open	src/pack.c	/^int git_packfile_stream_open(git_packfile_stream *obj, struct git_pack_file *p, git_off_t curpos)$/;"	f
git_packfile_stream_read	src/pack.c	/^ssize_t git_packfile_stream_read(git_packfile_stream *obj, void *buffer, size_t len)$/;"	f
git_packfile_unpack	src/pack.c	/^int git_packfile_unpack($/;"	f
git_packfile_unpack_header	src/pack.c	/^int git_packfile_unpack_header($/;"	f
git_patch	include/git2/patch.h	/^typedef struct git_patch git_patch;$/;"	t	typeref:struct:git_patch
git_patch	src/diff_patch.c	/^struct git_patch {$/;"	s	file:
git_patch__diff	src/diff_patch.c	/^git_diff *git_patch__diff(git_patch *patch)$/;"	f
git_patch__driver	src/diff_patch.c	/^git_diff_driver *git_patch__driver(git_patch *patch)$/;"	f
git_patch__invoke_callbacks	src/diff_patch.c	/^int git_patch__invoke_callbacks($/;"	f
git_patch__new_data	src/diff_patch.c	/^void git_patch__new_data($/;"	f
git_patch__old_data	src/diff_patch.c	/^void git_patch__old_data($/;"	f
git_patch_free	src/diff_patch.c	/^void git_patch_free(git_patch *patch)$/;"	f
git_patch_from_blob_and_buffer	src/diff_patch.c	/^int git_patch_from_blob_and_buffer($/;"	f
git_patch_from_blobs	src/diff_patch.c	/^int git_patch_from_blobs($/;"	f
git_patch_from_buffers	src/diff_patch.c	/^int git_patch_from_buffers($/;"	f
git_patch_from_diff	src/diff_patch.c	/^int git_patch_from_diff($/;"	f
git_patch_get_delta	src/diff_patch.c	/^const git_diff_delta *git_patch_get_delta(git_patch *patch)$/;"	f
git_patch_get_hunk	src/diff_patch.c	/^int git_patch_get_hunk($/;"	f
git_patch_get_line_in_hunk	src/diff_patch.c	/^int git_patch_get_line_in_hunk($/;"	f
git_patch_line_stats	src/diff_patch.c	/^int git_patch_line_stats($/;"	f
git_patch_num_hunks	src/diff_patch.c	/^size_t git_patch_num_hunks(git_patch *patch)$/;"	f
git_patch_num_lines_in_hunk	src/diff_patch.c	/^int git_patch_num_lines_in_hunk(git_patch *patch, size_t hunk_idx)$/;"	f
git_patch_print	src/diff_print.c	/^int git_patch_print($/;"	f
git_patch_size	src/diff_patch.c	/^size_t git_patch_size($/;"	f
git_patch_to_buf	src/diff_print.c	/^int git_patch_to_buf($/;"	f
git_path_apply_relative	src/path.c	/^int git_path_apply_relative(git_buf *target, const char *relpath)$/;"	f
git_path_basename	src/path.c	/^char *git_path_basename(const char *path)$/;"	f
git_path_basename_offset	src/path.c	/^size_t git_path_basename_offset(git_buf *buffer)$/;"	f
git_path_basename_r	src/path.c	/^int git_path_basename_r(git_buf *buffer, const char *path)$/;"	f
git_path_cmp	src/path.c	/^int git_path_cmp($/;"	f
git_path_contains	src/path.c	/^bool git_path_contains(git_buf *dir, const char *item)$/;"	f
git_path_contains_dir	src/path.c	/^bool git_path_contains_dir(git_buf *base, const char *subdir)$/;"	f
git_path_contains_file	src/path.c	/^bool git_path_contains_file(git_buf *base, const char *file)$/;"	f
git_path_direach	src/path.c	/^int git_path_direach($/;"	f
git_path_dirload	src/path.c	/^int git_path_dirload($/;"	f
git_path_dirload_with_stat	src/path.c	/^int git_path_dirload_with_stat($/;"	f
git_path_dirname	src/path.c	/^char *git_path_dirname(const char *path)$/;"	f
git_path_dirname_r	src/path.c	/^int git_path_dirname_r(git_buf *buffer, const char *path)$/;"	f
git_path_equal_or_prefixed	src/path.h	/^GIT_INLINE(int) git_path_equal_or_prefixed($/;"	f
git_path_exists	src/path.c	/^bool git_path_exists(const char *path)$/;"	f
git_path_find_dir	src/path.c	/^int git_path_find_dir(git_buf *dir, const char *path, const char *base)$/;"	f
git_path_fromurl	src/path.c	/^int git_path_fromurl(git_buf *local_path_out, const char *file_url)$/;"	f
git_path_has_non_ascii	src/path.c	/^bool git_path_has_non_ascii(const char *path, size_t pathlen)$/;"	f
git_path_iconv	src/path.c	/^int git_path_iconv(git_path_iconv_t *ic, char **in, size_t *inlen)$/;"	f
git_path_iconv_clear	src/path.c	/^void git_path_iconv_clear(git_path_iconv_t *ic)$/;"	f
git_path_iconv_init_precompose	src/path.c	/^int git_path_iconv_init_precompose(git_path_iconv_t *ic)$/;"	f
git_path_iconv_t	src/path.h	/^} git_path_iconv_t;$/;"	t	typeref:struct:__anon128
git_path_is_dot_or_dotdot	src/path.h	/^GIT_INLINE(int) git_path_is_dot_or_dotdot(const char *name)$/;"	f
git_path_is_dot_or_dotdotW	src/path.h	/^GIT_INLINE(int) git_path_is_dot_or_dotdotW(const wchar_t *name)$/;"	f
git_path_is_empty_dir	src/path.c	/^bool git_path_is_empty_dir(const char *path)$/;"	f
git_path_isdir	src/path.c	/^bool git_path_isdir(const char *path)$/;"	f
git_path_isfile	src/path.c	/^bool git_path_isfile(const char *path)$/;"	f
git_path_join_unrooted	src/path.c	/^int git_path_join_unrooted($/;"	f
git_path_lstat	src/path.c	/^int git_path_lstat(const char *path, struct stat *st)$/;"	f
git_path_mkposix	src/path.h	/^GIT_INLINE(void) git_path_mkposix(char *path)$/;"	f
git_path_mkposix	src/path.h	119;"	d
git_path_prettify	src/path.c	/^int git_path_prettify(git_buf *path_out, const char *path, const char *base)$/;"	f
git_path_prettify_dir	src/path.c	/^int git_path_prettify_dir(git_buf *path_out, const char *path, const char *base)$/;"	f
git_path_resolve_relative	src/path.c	/^int git_path_resolve_relative(git_buf *path, size_t ceiling)$/;"	f
git_path_root	src/path.c	/^int git_path_root(const char *path)$/;"	f
git_path_set_error	src/path.c	/^int git_path_set_error(int errno_value, const char *path, const char *action)$/;"	f
git_path_string_to_dir	src/path.c	/^void git_path_string_to_dir(char* path, size_t size)$/;"	f
git_path_to_dir	src/path.c	/^int git_path_to_dir(git_buf *path)$/;"	f
git_path_topdir	src/path.c	/^const char *git_path_topdir(const char *path)$/;"	f
git_path_walk_up	src/path.c	/^int git_path_walk_up($/;"	f
git_path_with_stat	src/path.h	/^} git_path_with_stat;$/;"	t	typeref:struct:__anon126
git_path_with_stat_cmp	src/path.c	/^int git_path_with_stat_cmp(const void *a, const void *b)$/;"	f
git_path_with_stat_cmp_icase	src/path.c	/^int git_path_with_stat_cmp_icase(const void *a, const void *b)$/;"	f
git_pathspec	include/git2/pathspec.h	/^typedef struct git_pathspec git_pathspec;$/;"	t	typeref:struct:git_pathspec
git_pathspec	src/pathspec.h	/^struct git_pathspec {$/;"	s
git_pathspec__clear	src/pathspec.c	/^void git_pathspec__clear(git_pathspec *ps)$/;"	f
git_pathspec__init	src/pathspec.c	/^int git_pathspec__init(git_pathspec *ps, const git_strarray *paths)$/;"	f
git_pathspec__match	src/pathspec.c	/^bool git_pathspec__match($/;"	f
git_pathspec__match_at	src/pathspec.c	/^static int git_pathspec__match_at($/;"	f	file:
git_pathspec__vfree	src/pathspec.c	/^void git_pathspec__vfree(git_vector *vspec)$/;"	f
git_pathspec__vinit	src/pathspec.c	/^int git_pathspec__vinit($/;"	f
git_pathspec_flag_t	include/git2/pathspec.h	/^} git_pathspec_flag_t;$/;"	t	typeref:enum:__anon216
git_pathspec_free	src/pathspec.c	/^void git_pathspec_free(git_pathspec *ps)$/;"	f
git_pathspec_is_empty	src/pathspec.c	/^bool git_pathspec_is_empty(const git_strarray *pathspec)$/;"	f
git_pathspec_match_diff	src/pathspec.c	/^int git_pathspec_match_diff($/;"	f
git_pathspec_match_index	src/pathspec.c	/^int git_pathspec_match_index($/;"	f
git_pathspec_match_list	include/git2/pathspec.h	/^typedef struct git_pathspec_match_list git_pathspec_match_list;$/;"	t	typeref:struct:git_pathspec_match_list
git_pathspec_match_list	src/pathspec.h	/^struct git_pathspec_match_list {$/;"	s
git_pathspec_match_list_diff_entry	src/pathspec.c	/^const git_diff_delta *git_pathspec_match_list_diff_entry($/;"	f
git_pathspec_match_list_entry	src/pathspec.c	/^const char *git_pathspec_match_list_entry($/;"	f
git_pathspec_match_list_entrycount	src/pathspec.c	/^size_t git_pathspec_match_list_entrycount($/;"	f
git_pathspec_match_list_failed_entry	src/pathspec.c	/^const char * git_pathspec_match_list_failed_entry($/;"	f
git_pathspec_match_list_failed_entrycount	src/pathspec.c	/^size_t git_pathspec_match_list_failed_entrycount($/;"	f
git_pathspec_match_list_free	src/pathspec.c	/^void git_pathspec_match_list_free(git_pathspec_match_list *m)$/;"	f
git_pathspec_match_tree	src/pathspec.c	/^int git_pathspec_match_tree($/;"	f
git_pathspec_match_workdir	src/pathspec.c	/^int git_pathspec_match_workdir($/;"	f
git_pathspec_matches_path	src/pathspec.c	/^int git_pathspec_matches_path($/;"	f
git_pathspec_new	src/pathspec.c	/^int git_pathspec_new(git_pathspec **out, const git_strarray *pathspec)$/;"	f
git_pathspec_prefix	src/pathspec.c	/^char *git_pathspec_prefix(const git_strarray *pathspec)$/;"	f
git_pathspec_string_array_t	src/pathspec.h	/^typedef git_array_t(char *) git_pathspec_string_array_t;$/;"	t
git_pkt	src/transports/smart.h	/^} git_pkt;$/;"	t	typeref:struct:__anon64
git_pkt_ack	src/transports/smart.h	/^} git_pkt_ack;$/;"	t	typeref:struct:__anon66
git_pkt_buffer_done	src/transports/smart_pkt.c	/^int git_pkt_buffer_done(git_buf *buf)$/;"	f
git_pkt_buffer_flush	src/transports/smart_pkt.c	/^int git_pkt_buffer_flush(git_buf *buf)$/;"	f
git_pkt_buffer_have	src/transports/smart_pkt.c	/^int git_pkt_buffer_have(git_oid *oid, git_buf *buf)$/;"	f
git_pkt_buffer_wants	src/transports/smart_pkt.c	/^int git_pkt_buffer_wants($/;"	f
git_pkt_cmd	src/transports/smart.h	/^struct git_pkt_cmd {$/;"	s
git_pkt_comment	src/transports/smart.h	/^} git_pkt_comment;$/;"	t	typeref:struct:__anon67
git_pkt_data	src/transports/smart.h	/^} git_pkt_data;$/;"	t	typeref:struct:__anon68
git_pkt_err	src/transports/smart.h	/^} git_pkt_err;$/;"	t	typeref:struct:__anon69
git_pkt_free	src/transports/smart_pkt.c	/^void git_pkt_free(git_pkt *pkt)$/;"	f
git_pkt_ng	src/transports/smart.h	/^} git_pkt_ng;$/;"	t	typeref:struct:__anon71
git_pkt_ok	src/transports/smart.h	/^} git_pkt_ok;$/;"	t	typeref:struct:__anon70
git_pkt_parse_line	src/transports/smart_pkt.c	/^int git_pkt_parse_line($/;"	f
git_pkt_progress	src/transports/smart.h	/^typedef git_pkt_data git_pkt_progress;$/;"	t
git_pkt_ref	src/transports/smart.h	/^} git_pkt_ref;$/;"	t	typeref:struct:__anon65
git_pkt_type	src/transports/smart.h	/^enum git_pkt_type {$/;"	g
git_pkt_unpack	src/transports/smart.h	/^} git_pkt_unpack;$/;"	t	typeref:struct:__anon72
git_pobject	src/pack-objects.h	/^typedef struct git_pobject {$/;"	s
git_pobject	src/pack-objects.h	/^} git_pobject;$/;"	t	typeref:struct:git_pobject
git_pool	src/pool.h	/^} git_pool;$/;"	t	typeref:struct:__anon33
git_pool__full_pages	src/pool.c	/^uint32_t git_pool__full_pages(git_pool *pool)$/;"	f
git_pool__open_pages	src/pool.c	/^uint32_t git_pool__open_pages(git_pool *pool)$/;"	f
git_pool__ptr_in_pool	src/pool.c	/^bool git_pool__ptr_in_pool(git_pool *pool, void *ptr)$/;"	f
git_pool__suggest_items_per_page	src/pool.c	/^uint32_t git_pool__suggest_items_per_page(uint32_t item_size)$/;"	f
git_pool__system_page_size	src/pool.c	/^uint32_t git_pool__system_page_size(void)$/;"	f
git_pool_clear	src/pool.c	/^void git_pool_clear(git_pool *pool)$/;"	f
git_pool_free	src/pool.c	/^void git_pool_free(git_pool *pool, void *ptr)$/;"	f
git_pool_free_array	src/pool.c	/^void git_pool_free_array(git_pool *pool, size_t count, void **ptrs)$/;"	f
git_pool_init	src/pool.c	/^int git_pool_init($/;"	f
git_pool_malloc	src/pool.c	/^void *git_pool_malloc(git_pool *pool, uint32_t items)$/;"	f
git_pool_mallocz	src/pool.h	/^GIT_INLINE(void *) git_pool_mallocz(git_pool *pool, uint32_t items)$/;"	f
git_pool_page	src/pool.c	/^struct git_pool_page {$/;"	s	file:
git_pool_page	src/pool.h	/^typedef struct git_pool_page git_pool_page;$/;"	t	typeref:struct:git_pool_page
git_pool_strcat	src/pool.c	/^char *git_pool_strcat(git_pool *pool, const char *a, const char *b)$/;"	f
git_pool_strdup	src/pool.c	/^char *git_pool_strdup(git_pool *pool, const char *str)$/;"	f
git_pool_strdup_safe	src/pool.c	/^char *git_pool_strdup_safe(git_pool *pool, const char *str)$/;"	f
git_pool_strndup	src/pool.c	/^char *git_pool_strndup(git_pool *pool, const char *str, size_t n)$/;"	f
git_pool_swap	src/pool.c	/^void git_pool_swap(git_pool *a, git_pool *b)$/;"	f
git_pqueue	src/pqueue.h	/^typedef git_vector git_pqueue;$/;"	t
git_pqueue_clear	src/pqueue.h	35;"	d
git_pqueue_free	src/pqueue.h	34;"	d
git_pqueue_get	src/pqueue.h	37;"	d
git_pqueue_init	src/pqueue.c	/^int git_pqueue_init($/;"	f
git_pqueue_insert	src/pqueue.c	/^int git_pqueue_insert(git_pqueue *pq, void *item)$/;"	f
git_pqueue_pop	src/pqueue.c	/^void *git_pqueue_pop(git_pqueue *pq)$/;"	f
git_pqueue_size	src/pqueue.h	36;"	d
git_push	include/git2/types.h	/^typedef struct git_push git_push;$/;"	t	typeref:struct:git_push
git_push	src/push.h	/^struct git_push {$/;"	s
git_push_add_refspec	src/push.c	/^int git_push_add_refspec(git_push *push, const char *refspec)$/;"	f
git_push_finish	src/push.c	/^int git_push_finish(git_push *push)$/;"	f
git_push_free	src/push.c	/^void git_push_free(git_push *push)$/;"	f
git_push_new	src/push.c	/^int git_push_new(git_push **out, git_remote *remote)$/;"	f
git_push_options	include/git2/push.h	/^} git_push_options;$/;"	t	typeref:struct:__anon254
git_push_set_callbacks	src/push.c	/^int git_push_set_callbacks($/;"	f
git_push_set_options	src/push.c	/^int git_push_set_options(git_push *push, const git_push_options *opts)$/;"	f
git_push_status_foreach	src/push.c	/^int git_push_status_foreach(git_push *push,$/;"	f
git_push_status_free	src/push.c	/^void git_push_status_free(push_status *status)$/;"	f
git_push_transfer_progress	include/git2/push.h	/^typedef int (*git_push_transfer_progress)($/;"	t
git_push_unpack_ok	src/push.c	/^int git_push_unpack_ok(git_push *push)$/;"	f
git_push_update_tips	src/push.c	/^int git_push_update_tips($/;"	f
git_rawobj	src/odb.h	/^} git_rawobj;$/;"	t	typeref:struct:__anon38
git_ref_t	include/git2/types.h	/^} git_ref_t;$/;"	t	typeref:enum:__anon236
git_refcache	src/refdb_fs.h	/^} git_refcache;$/;"	t	typeref:struct:__anon172
git_refcount	src/util.h	/^} git_refcount;$/;"	t	typeref:struct:__anon31
git_refcount_freeptr	src/util.h	/^typedef void (*git_refcount_freeptr)(void *r);$/;"	t
git_refdb	include/git2/types.h	/^typedef struct git_refdb git_refdb;$/;"	t	typeref:struct:git_refdb
git_refdb	src/refdb.h	/^struct git_refdb {$/;"	s
git_refdb__free	src/refdb.c	/^void git_refdb__free(git_refdb *db)$/;"	f
git_refdb_backend	include/git2/sys/refdb_backend.h	/^struct git_refdb_backend {$/;"	s
git_refdb_backend	include/git2/types.h	/^typedef struct git_refdb_backend git_refdb_backend;$/;"	t	typeref:struct:git_refdb_backend
git_refdb_backend_fs	src/refdb_fs.c	/^int git_refdb_backend_fs($/;"	f
git_refdb_compress	src/refdb.c	/^int git_refdb_compress(git_refdb *db)$/;"	f
git_refdb_delete	src/refdb.c	/^int git_refdb_delete(struct git_refdb *db, const char *ref_name, const git_oid *old_id, const char *old_target)$/;"	f
git_refdb_ensure_log	src/refdb.c	/^int git_refdb_ensure_log(git_refdb *db, const char *refname)$/;"	f
git_refdb_exists	src/refdb.c	/^int git_refdb_exists(int *exists, git_refdb *refdb, const char *ref_name)$/;"	f
git_refdb_free	src/refdb.c	/^void git_refdb_free(git_refdb *db)$/;"	f
git_refdb_has_log	src/refdb.c	/^int git_refdb_has_log(git_refdb *db, const char *refname)$/;"	f
git_refdb_iterator	src/refdb.c	/^int git_refdb_iterator(git_reference_iterator **out, git_refdb *db, const char *glob)$/;"	f
git_refdb_iterator_free	src/refdb.c	/^void git_refdb_iterator_free(git_reference_iterator *iter)$/;"	f
git_refdb_iterator_next	src/refdb.c	/^int git_refdb_iterator_next(git_reference **out, git_reference_iterator *iter)$/;"	f
git_refdb_iterator_next_name	src/refdb.c	/^int git_refdb_iterator_next_name(const char **out, git_reference_iterator *iter)$/;"	f
git_refdb_lookup	src/refdb.c	/^int git_refdb_lookup(git_reference **out, git_refdb *db, const char *ref_name)$/;"	f
git_refdb_new	src/refdb.c	/^int git_refdb_new(git_refdb **out, git_repository *repo)$/;"	f
git_refdb_open	src/refdb.c	/^int git_refdb_open(git_refdb **out, git_repository *repo)$/;"	f
git_refdb_reflog_read	src/refdb.c	/^int git_refdb_reflog_read(git_reflog **out, git_refdb *db,  const char *name)$/;"	f
git_refdb_rename	src/refdb.c	/^int git_refdb_rename($/;"	f
git_refdb_set_backend	src/refdb.c	/^int git_refdb_set_backend(git_refdb *db, git_refdb_backend *backend)$/;"	f
git_refdb_write	src/refdb.c	/^int git_refdb_write(git_refdb *db, git_reference *ref, int force, const git_signature *who, const char *message, const git_oid *old_id, const char *old_target)$/;"	f
git_reference	include/git2/types.h	/^typedef struct git_reference git_reference;$/;"	t	typeref:struct:git_reference
git_reference	src/refs.h	/^struct git_reference {$/;"	s
git_reference__alloc	src/refs.c	/^git_reference *git_reference__alloc($/;"	f
git_reference__alloc_symbolic	src/refs.c	/^git_reference *git_reference__alloc_symbolic($/;"	f
git_reference__is_branch	src/refs.c	/^int git_reference__is_branch(const char *ref_name)$/;"	f
git_reference__is_note	src/refs.c	/^int git_reference__is_note(const char *ref_name)$/;"	f
git_reference__is_remote	src/refs.c	/^int git_reference__is_remote(const char *ref_name)$/;"	f
git_reference__is_tag	src/refs.c	/^int git_reference__is_tag(const char *ref_name)$/;"	f
git_reference__is_valid_name	src/refs.c	/^int git_reference__is_valid_name(const char *refname, unsigned int flags)$/;"	f
git_reference__normalize_name	src/refs.c	/^int git_reference__normalize_name($/;"	f
git_reference__normalize_name_lax	src/refs.c	/^int git_reference__normalize_name_lax($/;"	f
git_reference__set_name	src/refs.c	/^git_reference *git_reference__set_name($/;"	f
git_reference__update_terminal	src/refs.c	/^int git_reference__update_terminal($/;"	f
git_reference_cmp	src/refs.c	/^int git_reference_cmp(git_reference *ref1, git_reference *ref2)$/;"	f
git_reference_create	src/refs.c	/^int git_reference_create($/;"	f
git_reference_create_matching	src/refs.c	/^int git_reference_create_matching($/;"	f
git_reference_delete	src/refs.c	/^int git_reference_delete(git_reference *ref)$/;"	f
git_reference_dwim	src/refs.c	/^int git_reference_dwim(git_reference **out, git_repository *repo, const char *refname)$/;"	f
git_reference_ensure_log	src/refs.c	/^int git_reference_ensure_log(git_repository *repo, const char *refname)$/;"	f
git_reference_foreach	src/refs.c	/^int git_reference_foreach($/;"	f
git_reference_foreach_cb	include/git2/refs.h	/^typedef int (*git_reference_foreach_cb)(git_reference *reference, void *payload);$/;"	t
git_reference_foreach_glob	src/refs.c	/^int git_reference_foreach_glob($/;"	f
git_reference_foreach_name	src/refs.c	/^int git_reference_foreach_name($/;"	f
git_reference_foreach_name_cb	include/git2/refs.h	/^typedef int (*git_reference_foreach_name_cb)(const char *name, void *payload);$/;"	t
git_reference_free	src/refs.c	/^void git_reference_free(git_reference *reference)$/;"	f
git_reference_has_log	src/refs.c	/^int git_reference_has_log(git_repository *repo, const char *refname)$/;"	f
git_reference_is_branch	src/refs.c	/^int git_reference_is_branch(git_reference *ref)$/;"	f
git_reference_is_note	src/refs.c	/^int git_reference_is_note(git_reference *ref)$/;"	f
git_reference_is_remote	src/refs.c	/^int git_reference_is_remote(git_reference *ref)$/;"	f
git_reference_is_tag	src/refs.c	/^int git_reference_is_tag(git_reference *ref)$/;"	f
git_reference_is_valid_name	src/refs.c	/^int git_reference_is_valid_name(const char *refname)$/;"	f
git_reference_iterator	include/git2/sys/refdb_backend.h	/^struct git_reference_iterator {$/;"	s
git_reference_iterator	include/git2/types.h	/^typedef struct git_reference_iterator  git_reference_iterator;$/;"	t	typeref:struct:git_reference_iterator
git_reference_iterator_free	src/refs.c	/^void git_reference_iterator_free(git_reference_iterator *iter)$/;"	f
git_reference_iterator_glob_new	src/refs.c	/^int git_reference_iterator_glob_new($/;"	f
git_reference_iterator_new	src/refs.c	/^int git_reference_iterator_new(git_reference_iterator **out, git_repository *repo)$/;"	f
git_reference_list	src/refs.c	/^int git_reference_list($/;"	f
git_reference_lookup	src/refs.c	/^int git_reference_lookup(git_reference **ref_out,$/;"	f
git_reference_lookup_resolved	src/refs.c	/^int git_reference_lookup_resolved($/;"	f
git_reference_name	src/refs.c	/^const char *git_reference_name(const git_reference *ref)$/;"	f
git_reference_name_to_id	src/refs.c	/^int git_reference_name_to_id($/;"	f
git_reference_next	src/refs.c	/^int git_reference_next(git_reference **out, git_reference_iterator *iter)$/;"	f
git_reference_next_name	src/refs.c	/^int git_reference_next_name(const char **out, git_reference_iterator *iter)$/;"	f
git_reference_normalize_name	src/refs.c	/^int git_reference_normalize_name($/;"	f
git_reference_normalize_t	include/git2/refs.h	/^} git_reference_normalize_t;$/;"	t	typeref:enum:__anon208
git_reference_owner	src/refs.c	/^git_repository *git_reference_owner(const git_reference *ref)$/;"	f
git_reference_peel	src/refs.c	/^int git_reference_peel($/;"	f
git_reference_remove	src/refs.c	/^int git_reference_remove(git_repository *repo, const char *name)$/;"	f
git_reference_rename	src/refs.c	/^int git_reference_rename($/;"	f
git_reference_resolve	src/refs.c	/^int git_reference_resolve(git_reference **ref_out, const git_reference *ref)$/;"	f
git_reference_set_target	src/refs.c	/^int git_reference_set_target($/;"	f
git_reference_shorthand	src/refs.c	/^const char *git_reference_shorthand(git_reference *ref)$/;"	f
git_reference_symbolic_create	src/refs.c	/^int git_reference_symbolic_create($/;"	f
git_reference_symbolic_create_matching	src/refs.c	/^int git_reference_symbolic_create_matching($/;"	f
git_reference_symbolic_set_target	src/refs.c	/^int git_reference_symbolic_set_target($/;"	f
git_reference_symbolic_target	src/refs.c	/^const char *git_reference_symbolic_target(const git_reference *ref)$/;"	f
git_reference_target	src/refs.c	/^const git_oid *git_reference_target(const git_reference *ref)$/;"	f
git_reference_target_peel	src/refs.c	/^const git_oid *git_reference_target_peel(const git_reference *ref)$/;"	f
git_reference_type	src/refs.c	/^git_ref_t git_reference_type(const git_reference *ref)$/;"	f
git_reflog	include/git2/types.h	/^typedef struct git_reflog git_reflog;$/;"	t	typeref:struct:git_reflog
git_reflog	src/reflog.h	/^struct git_reflog {$/;"	s
git_reflog_append	src/reflog.c	/^int git_reflog_append(git_reflog *reflog, const git_oid *new_oid, const git_signature *committer, const char *msg)$/;"	f
git_reflog_delete	src/reflog.c	/^int git_reflog_delete(git_repository *repo, const char *name)$/;"	f
git_reflog_drop	src/reflog.c	/^int git_reflog_drop(git_reflog *reflog, size_t idx, int rewrite_previous_entry)$/;"	f
git_reflog_entry	include/git2/types.h	/^typedef struct git_reflog_entry git_reflog_entry;$/;"	t	typeref:struct:git_reflog_entry
git_reflog_entry	src/reflog.h	/^struct git_reflog_entry {$/;"	s
git_reflog_entry__alloc	src/reflog.c	/^git_reflog_entry *git_reflog_entry__alloc(void)$/;"	f
git_reflog_entry__free	src/reflog.c	/^void git_reflog_entry__free(git_reflog_entry *entry)$/;"	f
git_reflog_entry_byindex	src/reflog.c	/^const git_reflog_entry * git_reflog_entry_byindex(git_reflog *reflog, size_t idx)$/;"	f
git_reflog_entry_committer	src/reflog.c	/^const git_signature * git_reflog_entry_committer(const git_reflog_entry *entry)$/;"	f
git_reflog_entry_id_new	src/reflog.c	/^const git_oid * git_reflog_entry_id_new(const git_reflog_entry *entry)$/;"	f
git_reflog_entry_id_old	src/reflog.c	/^const git_oid * git_reflog_entry_id_old(const git_reflog_entry *entry)$/;"	f
git_reflog_entry_message	src/reflog.c	/^const char * git_reflog_entry_message(const git_reflog_entry *entry)$/;"	f
git_reflog_entrycount	src/reflog.c	/^size_t git_reflog_entrycount(git_reflog *reflog)$/;"	f
git_reflog_free	src/reflog.c	/^void git_reflog_free(git_reflog *reflog)$/;"	f
git_reflog_read	src/reflog.c	/^int git_reflog_read(git_reflog **reflog, git_repository *repo,  const char *name)$/;"	f
git_reflog_rename	src/reflog.c	/^int git_reflog_rename(git_repository *repo, const char *old_name, const char *new_name)$/;"	f
git_reflog_write	src/reflog.c	/^int git_reflog_write(git_reflog *reflog)$/;"	f
git_refspec	include/git2/types.h	/^typedef struct git_refspec git_refspec;$/;"	t	typeref:struct:git_refspec
git_refspec	src/refspec.h	/^struct git_refspec {$/;"	s
git_refspec__dwim_one	src/refspec.c	/^int git_refspec__dwim_one(git_vector *out, git_refspec *spec, git_vector *refs)$/;"	f
git_refspec__free	src/refspec.c	/^void git_refspec__free(git_refspec *refspec)$/;"	f
git_refspec__parse	src/refspec.c	/^int git_refspec__parse(git_refspec *refspec, const char *input, bool is_fetch)$/;"	f
git_refspec__serialize	src/refspec.c	/^int git_refspec__serialize(git_buf *out, const git_refspec *refspec)$/;"	f
git_refspec_direction	src/refspec.c	/^git_direction git_refspec_direction(const git_refspec *spec)$/;"	f
git_refspec_dst	src/refspec.c	/^const char *git_refspec_dst(const git_refspec *refspec)$/;"	f
git_refspec_dst_matches	src/refspec.c	/^int git_refspec_dst_matches(const git_refspec *refspec, const char *refname)$/;"	f
git_refspec_force	src/refspec.c	/^int git_refspec_force(const git_refspec *refspec)$/;"	f
git_refspec_is_wildcard	src/refspec.c	/^int git_refspec_is_wildcard(const git_refspec *spec)$/;"	f
git_refspec_rtransform	src/refspec.c	/^int git_refspec_rtransform(git_buf *out, const git_refspec *spec, const char *name)$/;"	f
git_refspec_src	src/refspec.c	/^const char *git_refspec_src(const git_refspec *refspec)$/;"	f
git_refspec_src_matches	src/refspec.c	/^int git_refspec_src_matches(const git_refspec *refspec, const char *refname)$/;"	f
git_refspec_string	src/refspec.c	/^const char *git_refspec_string(const git_refspec *refspec)$/;"	f
git_refspec_transform	src/refspec.c	/^int git_refspec_transform(git_buf *out, const git_refspec *spec, const char *name)$/;"	f
git_remote	include/git2/types.h	/^typedef struct git_remote git_remote;$/;"	t	typeref:struct:git_remote
git_remote	src/remote.h	/^struct git_remote {$/;"	s
git_remote__get_http_proxy	src/remote.c	/^int git_remote__get_http_proxy(git_remote *remote, bool use_ssl, char **proxy_url)$/;"	f
git_remote__matching_dst_refspec	src/remote.c	/^git_refspec *git_remote__matching_dst_refspec(git_remote *remote, const char *refname)$/;"	f
git_remote__matching_refspec	src/remote.c	/^git_refspec *git_remote__matching_refspec(git_remote *remote, const char *refname)$/;"	f
git_remote__urlfordirection	src/remote.c	/^const char* git_remote__urlfordirection(git_remote *remote, int direction)$/;"	f
git_remote_add_fetch	src/remote.c	/^int git_remote_add_fetch(git_remote *remote, const char *refspec)$/;"	f
git_remote_add_push	src/remote.c	/^int git_remote_add_push(git_remote *remote, const char *refspec)$/;"	f
git_remote_autotag	src/remote.c	/^git_remote_autotag_option_t git_remote_autotag(const git_remote *remote)$/;"	f
git_remote_autotag_option_t	include/git2/remote.h	/^} git_remote_autotag_option_t;$/;"	t	typeref:enum:__anon248
git_remote_callbacks	include/git2/remote.h	/^struct git_remote_callbacks {$/;"	s
git_remote_callbacks	include/git2/types.h	/^typedef struct git_remote_callbacks git_remote_callbacks;$/;"	t	typeref:struct:git_remote_callbacks
git_remote_check_cert	src/remote.c	/^void git_remote_check_cert(git_remote *remote, int check)$/;"	f
git_remote_clear_refspecs	src/remote.c	/^void git_remote_clear_refspecs(git_remote *remote)$/;"	f
git_remote_completion_type	include/git2/remote.h	/^typedef enum git_remote_completion_type {$/;"	g
git_remote_completion_type	include/git2/remote.h	/^} git_remote_completion_type;$/;"	t	typeref:enum:git_remote_completion_type
git_remote_connect	src/remote.c	/^int git_remote_connect(git_remote *remote, git_direction direction)$/;"	f
git_remote_connected	src/remote.c	/^int git_remote_connected(const git_remote *remote)$/;"	f
git_remote_create	src/remote.c	/^int git_remote_create(git_remote **out, git_repository *repo, const char *name, const char *url)$/;"	f
git_remote_create_inmemory	src/remote.c	/^int git_remote_create_inmemory(git_remote **out, git_repository *repo, const char *fetch, const char *url)$/;"	f
git_remote_create_with_fetchspec	src/remote.c	/^int git_remote_create_with_fetchspec(git_remote **out, git_repository *repo, const char *name, const char *url, const char *fetch)$/;"	f
git_remote_disconnect	src/remote.c	/^void git_remote_disconnect(git_remote *remote)$/;"	f
git_remote_download	src/remote.c	/^int git_remote_download(git_remote *remote)$/;"	f
git_remote_dup	src/remote.c	/^int git_remote_dup(git_remote **dest, git_remote *source)$/;"	f
git_remote_fetch	src/remote.c	/^int git_remote_fetch($/;"	f
git_remote_free	src/remote.c	/^void git_remote_free(git_remote *remote)$/;"	f
git_remote_get_fetch_refspecs	src/remote.c	/^int git_remote_get_fetch_refspecs(git_strarray *array, const git_remote *remote)$/;"	f
git_remote_get_push_refspecs	src/remote.c	/^int git_remote_get_push_refspecs(git_strarray *array, const git_remote *remote)$/;"	f
git_remote_get_refspec	src/remote.c	/^const git_refspec *git_remote_get_refspec(const git_remote *remote, size_t n)$/;"	f
git_remote_head	include/git2/net.h	/^struct git_remote_head {$/;"	s
git_remote_head	include/git2/types.h	/^typedef struct git_remote_head git_remote_head;$/;"	t	typeref:struct:git_remote_head
git_remote_is_valid_name	src/remote.c	/^int git_remote_is_valid_name($/;"	f
git_remote_list	src/remote.c	/^int git_remote_list(git_strarray *remotes_list, git_repository *repo)$/;"	f
git_remote_load	src/remote.c	/^int git_remote_load(git_remote **out, git_repository *repo, const char *name)$/;"	f
git_remote_ls	src/remote.c	/^int git_remote_ls(const git_remote_head ***out, size_t *size, git_remote *remote)$/;"	f
git_remote_name	src/remote.c	/^const char *git_remote_name(const git_remote *remote)$/;"	f
git_remote_owner	src/remote.c	/^git_repository *git_remote_owner(const git_remote *remote)$/;"	f
git_remote_pushurl	src/remote.c	/^const char *git_remote_pushurl(const git_remote *remote)$/;"	f
git_remote_refspec_count	src/remote.c	/^size_t git_remote_refspec_count(const git_remote *remote)$/;"	f
git_remote_rename	src/remote.c	/^int git_remote_rename($/;"	f
git_remote_rename_problem_cb	include/git2/remote.h	/^typedef int (*git_remote_rename_problem_cb)(const char *problematic_refspec, void *payload);$/;"	t
git_remote_save	src/remote.c	/^int git_remote_save(const git_remote *remote)$/;"	f
git_remote_set_autotag	src/remote.c	/^void git_remote_set_autotag(git_remote *remote, git_remote_autotag_option_t value)$/;"	f
git_remote_set_callbacks	src/remote.c	/^int git_remote_set_callbacks(git_remote *remote, const git_remote_callbacks *callbacks)$/;"	f
git_remote_set_fetch_refspecs	src/remote.c	/^int git_remote_set_fetch_refspecs(git_remote *remote, git_strarray *array)$/;"	f
git_remote_set_push_refspecs	src/remote.c	/^int git_remote_set_push_refspecs(git_remote *remote, git_strarray *array)$/;"	f
git_remote_set_pushurl	src/remote.c	/^int git_remote_set_pushurl(git_remote *remote, const char* url)$/;"	f
git_remote_set_transport	src/remote.c	/^int git_remote_set_transport(git_remote *remote, git_transport *transport)$/;"	f
git_remote_set_update_fetchhead	src/remote.c	/^void git_remote_set_update_fetchhead(git_remote *remote, int value)$/;"	f
git_remote_set_url	src/remote.c	/^int git_remote_set_url(git_remote *remote, const char* url)$/;"	f
git_remote_stats	src/remote.c	/^const git_transfer_progress* git_remote_stats(git_remote *remote)$/;"	f
git_remote_stop	src/remote.c	/^void git_remote_stop(git_remote *remote)$/;"	f
git_remote_supported_url	src/transport.c	/^int git_remote_supported_url(const char* url)$/;"	f
git_remote_update_fetchhead	src/remote.c	/^int git_remote_update_fetchhead(git_remote *remote)$/;"	f
git_remote_update_tips	src/remote.c	/^int git_remote_update_tips($/;"	f
git_remote_url	src/remote.c	/^const char *git_remote_url(const git_remote *remote)$/;"	f
git_remote_valid_url	src/transport.c	/^int git_remote_valid_url(const char *url)$/;"	f
git_remote_write_fetchhead	src/remote.c	/^static int git_remote_write_fetchhead(git_remote *remote, git_refspec *spec, git_vector *update_heads)$/;"	f	file:
git_repository	include/git2/types.h	/^typedef struct git_repository git_repository;$/;"	t	typeref:struct:git_repository
git_repository	src/repository.h	/^struct git_repository {$/;"	s
git_repository__cleanup	src/repository.c	/^void git_repository__cleanup(git_repository *repo)$/;"	f
git_repository__cleanup_files	src/repository.c	/^int git_repository__cleanup_files(git_repository *repo, const char *files[], size_t files_len)$/;"	f
git_repository__cvar	src/config_cache.c	/^int git_repository__cvar(int *out, git_repository *repo, git_cvar_cached cvar)$/;"	f
git_repository__cvar_cache_clear	src/config_cache.c	/^void git_repository__cvar_cache_clear(git_repository *repo)$/;"	f
git_repository__ensure_not_bare	src/repository.h	/^GIT_INLINE(int) git_repository__ensure_not_bare($/;"	f
git_repository_attr_cache	src/repository.h	/^GIT_INLINE(git_attr_cache *) git_repository_attr_cache(git_repository *repo)$/;"	f
git_repository_config	src/repository.c	/^int git_repository_config(git_config **out, git_repository *repo)$/;"	f
git_repository_config__weakptr	src/repository.c	/^int git_repository_config__weakptr(git_config **out, git_repository *repo)$/;"	f
git_repository_detach_head	src/repository.c	/^int git_repository_detach_head($/;"	f
git_repository_discover	src/repository.c	/^int git_repository_discover($/;"	f
git_repository_driver_registry	src/diff_driver.c	/^static git_diff_driver_registry *git_repository_driver_registry($/;"	f	file:
git_repository_fetchhead_foreach	src/fetchhead.c	/^int git_repository_fetchhead_foreach(git_repository *repo,$/;"	f
git_repository_fetchhead_foreach_cb	include/git2/repository.h	/^typedef int (*git_repository_fetchhead_foreach_cb)(const char *ref_name,$/;"	t
git_repository_free	src/repository.c	/^void git_repository_free(git_repository *repo)$/;"	f
git_repository_get_namespace	src/repository.c	/^const char *git_repository_get_namespace(git_repository *repo)$/;"	f
git_repository_hashfile	src/repository.c	/^int git_repository_hashfile($/;"	f
git_repository_head	src/repository.c	/^int git_repository_head(git_reference **head_out, git_repository *repo)$/;"	f
git_repository_head_detached	src/repository.c	/^int git_repository_head_detached(git_repository *repo)$/;"	f
git_repository_head_tree	src/repository.c	/^int git_repository_head_tree(git_tree **tree, git_repository *repo)$/;"	f
git_repository_head_unborn	src/repository.c	/^int git_repository_head_unborn(git_repository *repo)$/;"	f
git_repository_index	src/repository.c	/^int git_repository_index(git_index **out, git_repository *repo)$/;"	f
git_repository_index__weakptr	src/repository.c	/^int git_repository_index__weakptr(git_index **out, git_repository *repo)$/;"	f
git_repository_init	src/repository.c	/^int git_repository_init($/;"	f
git_repository_init_ext	src/repository.c	/^int git_repository_init_ext($/;"	f
git_repository_init_flag_t	include/git2/repository.h	/^} git_repository_init_flag_t;$/;"	t	typeref:enum:__anon210
git_repository_init_mode_t	include/git2/repository.h	/^} git_repository_init_mode_t;$/;"	t	typeref:enum:__anon211
git_repository_init_options	include/git2/repository.h	/^} git_repository_init_options;$/;"	t	typeref:struct:__anon212
git_repository_is_bare	src/repository.c	/^int git_repository_is_bare(git_repository *repo)$/;"	f
git_repository_is_empty	src/repository.c	/^int git_repository_is_empty(git_repository *repo)$/;"	f
git_repository_is_shallow	src/repository.c	/^int git_repository_is_shallow(git_repository *repo)$/;"	f
git_repository_mergehead_foreach	src/merge.c	/^int git_repository_mergehead_foreach($/;"	f
git_repository_mergehead_foreach_cb	include/git2/repository.h	/^typedef int (*git_repository_mergehead_foreach_cb)(const git_oid *oid,$/;"	t
git_repository_message	src/repository.c	/^int git_repository_message(git_buf *out, git_repository *repo)$/;"	f
git_repository_message_remove	src/repository.c	/^int git_repository_message_remove(git_repository *repo)$/;"	f
git_repository_new	src/repository.c	/^int git_repository_new(git_repository **out)$/;"	f
git_repository_odb	src/repository.c	/^int git_repository_odb(git_odb **out, git_repository *repo)$/;"	f
git_repository_odb__weakptr	src/repository.c	/^int git_repository_odb__weakptr(git_odb **out, git_repository *repo)$/;"	f
git_repository_open	src/repository.c	/^int git_repository_open(git_repository **repo_out, const char *path)$/;"	f
git_repository_open_bare	src/repository.c	/^int git_repository_open_bare($/;"	f
git_repository_open_ext	src/repository.c	/^int git_repository_open_ext($/;"	f
git_repository_open_flag_t	include/git2/repository.h	/^} git_repository_open_flag_t;$/;"	t	typeref:enum:__anon209
git_repository_path	src/repository.c	/^const char *git_repository_path(git_repository *repo)$/;"	f
git_repository_refdb	src/repository.c	/^int git_repository_refdb(git_refdb **out, git_repository *repo)$/;"	f
git_repository_refdb__weakptr	src/repository.c	/^int git_repository_refdb__weakptr(git_refdb **out, git_repository *repo)$/;"	f
git_repository_reinit_filesystem	src/repository.c	/^int git_repository_reinit_filesystem(git_repository *repo, int recurse)$/;"	f
git_repository_set_config	src/repository.c	/^void git_repository_set_config(git_repository *repo, git_config *config)$/;"	f
git_repository_set_head	src/repository.c	/^int git_repository_set_head($/;"	f
git_repository_set_head_detached	src/repository.c	/^int git_repository_set_head_detached($/;"	f
git_repository_set_index	src/repository.c	/^void git_repository_set_index(git_repository *repo, git_index *index)$/;"	f
git_repository_set_namespace	src/repository.c	/^int git_repository_set_namespace(git_repository *repo, const char *namespace)$/;"	f
git_repository_set_odb	src/repository.c	/^void git_repository_set_odb(git_repository *repo, git_odb *odb)$/;"	f
git_repository_set_refdb	src/repository.c	/^void git_repository_set_refdb(git_repository *repo, git_refdb *refdb)$/;"	f
git_repository_set_workdir	src/repository.c	/^int git_repository_set_workdir($/;"	f
git_repository_state	src/repository.c	/^int git_repository_state(git_repository *repo)$/;"	f
git_repository_state_cleanup	src/repository.c	/^int git_repository_state_cleanup(git_repository *repo)$/;"	f
git_repository_state_t	include/git2/repository.h	/^} git_repository_state_t;$/;"	t	typeref:enum:__anon213
git_repository_workdir	src/repository.c	/^const char *git_repository_workdir(git_repository *repo)$/;"	f
git_repository_wrap_odb	src/repository.c	/^int git_repository_wrap_odb(git_repository **repo_out, git_odb *odb)$/;"	f
git_reset	src/reset.c	/^int git_reset($/;"	f
git_reset_default	src/reset.c	/^int git_reset_default($/;"	f
git_reset_t	include/git2/reset.h	/^} git_reset_t;$/;"	t	typeref:enum:__anon246
git_revert	src/revert.c	/^int git_revert($/;"	f
git_revert_commit	src/revert.c	/^int git_revert_commit($/;"	f
git_revert_opts	include/git2/revert.h	/^} git_revert_opts;$/;"	t	typeref:struct:__anon257
git_revparse	src/revparse.c	/^int git_revparse($/;"	f
git_revparse_ext	src/revparse.c	/^int git_revparse_ext($/;"	f
git_revparse_mode_t	include/git2/revparse.h	/^} git_revparse_mode_t;$/;"	t	typeref:enum:__anon205
git_revparse_single	src/revparse.c	/^int git_revparse_single(git_object **out, git_repository *repo, const char *spec)$/;"	f
git_revspec	include/git2/revparse.h	/^} git_revspec;$/;"	t	typeref:struct:__anon206
git_revwalk	include/git2/types.h	/^typedef struct git_revwalk git_revwalk;$/;"	t	typeref:struct:git_revwalk
git_revwalk	src/revwalk.h	/^struct git_revwalk {$/;"	s
git_revwalk__commit_lookup	src/revwalk.c	/^git_commit_list_node *git_revwalk__commit_lookup($/;"	f
git_revwalk_free	src/revwalk.c	/^void git_revwalk_free(git_revwalk *walk)$/;"	f
git_revwalk_hide	src/revwalk.c	/^int git_revwalk_hide(git_revwalk *walk, const git_oid *oid)$/;"	f
git_revwalk_hide_glob	src/revwalk.c	/^int git_revwalk_hide_glob(git_revwalk *walk, const char *glob)$/;"	f
git_revwalk_hide_head	src/revwalk.c	/^int git_revwalk_hide_head(git_revwalk *walk)$/;"	f
git_revwalk_hide_ref	src/revwalk.c	/^int git_revwalk_hide_ref(git_revwalk *walk, const char *refname)$/;"	f
git_revwalk_new	src/revwalk.c	/^int git_revwalk_new(git_revwalk **revwalk_out, git_repository *repo)$/;"	f
git_revwalk_next	src/revwalk.c	/^int git_revwalk_next(git_oid *oid, git_revwalk *walk)$/;"	f
git_revwalk_push	src/revwalk.c	/^int git_revwalk_push(git_revwalk *walk, const git_oid *oid)$/;"	f
git_revwalk_push_glob	src/revwalk.c	/^int git_revwalk_push_glob(git_revwalk *walk, const char *glob)$/;"	f
git_revwalk_push_head	src/revwalk.c	/^int git_revwalk_push_head(git_revwalk *walk)$/;"	f
git_revwalk_push_range	src/revwalk.c	/^int git_revwalk_push_range(git_revwalk *walk, const char *range)$/;"	f
git_revwalk_push_ref	src/revwalk.c	/^int git_revwalk_push_ref(git_revwalk *walk, const char *refname)$/;"	f
git_revwalk_repository	src/revwalk.c	/^git_repository *git_revwalk_repository(git_revwalk *walk)$/;"	f
git_revwalk_reset	src/revwalk.c	/^void git_revwalk_reset(git_revwalk *walk)$/;"	f
git_revwalk_simplify_first_parent	src/revwalk.c	/^void git_revwalk_simplify_first_parent(git_revwalk *walk)$/;"	f
git_revwalk_sorting	src/revwalk.c	/^void git_revwalk_sorting(git_revwalk *walk, unsigned int sort_mode)$/;"	f
git_rwlock	src/thread-utils.h	196;"	d
git_rwlock	src/thread-utils.h	74;"	d
git_rwlock_free	src/thread-utils.h	202;"	d
git_rwlock_free	src/thread-utils.h	80;"	d
git_rwlock_init	src/thread-utils.h	197;"	d
git_rwlock_init	src/thread-utils.h	75;"	d
git_rwlock_rdlock	src/thread-utils.h	198;"	d
git_rwlock_rdlock	src/thread-utils.h	76;"	d
git_rwlock_rdunlock	src/thread-utils.h	199;"	d
git_rwlock_rdunlock	src/thread-utils.h	77;"	d
git_rwlock_wrlock	src/thread-utils.h	200;"	d
git_rwlock_wrlock	src/thread-utils.h	78;"	d
git_rwlock_wrunlock	src/thread-utils.h	201;"	d
git_rwlock_wrunlock	src/thread-utils.h	79;"	d
git_signature	include/git2/types.h	/^typedef struct git_signature {$/;"	s
git_signature	include/git2/types.h	/^} git_signature;$/;"	t	typeref:struct:git_signature
git_signature__parse	src/signature.c	/^int git_signature__parse(git_signature *sig, const char **buffer_out,$/;"	f
git_signature__writebuf	src/signature.c	/^void git_signature__writebuf(git_buf *buf, const char *header, const git_signature *sig)$/;"	f
git_signature_default	src/signature.c	/^int git_signature_default(git_signature **out, git_repository *repo)$/;"	f
git_signature_dup	src/signature.c	/^int git_signature_dup(git_signature **dest, const git_signature *source)$/;"	f
git_signature_free	src/signature.c	/^void git_signature_free(git_signature *sig)$/;"	f
git_signature_new	src/signature.c	/^int git_signature_new(git_signature **sig_out, const char *name, const char *email, git_time_t time, int offset)$/;"	f
git_signature_now	src/signature.c	/^int git_signature_now(git_signature **sig_out, const char *name, const char *email)$/;"	f
git_smart__cancel	src/transports/smart.c	/^static void git_smart__cancel(git_transport *transport)$/;"	f	file:
git_smart__close	src/transports/smart.c	/^static int git_smart__close(git_transport *transport)$/;"	f	file:
git_smart__connect	src/transports/smart.c	/^static int git_smart__connect($/;"	f	file:
git_smart__detect_caps	src/transports/smart_protocol.c	/^int git_smart__detect_caps(git_pkt_ref *pkt, transport_smart_caps *caps)$/;"	f
git_smart__download_pack	src/transports/smart_protocol.c	/^int git_smart__download_pack($/;"	f
git_smart__free	src/transports/smart.c	/^static void git_smart__free(git_transport *transport)$/;"	f	file:
git_smart__get_push_stream	src/transports/smart.c	/^int git_smart__get_push_stream(transport_smart *t, git_smart_subtransport_stream **stream)$/;"	f
git_smart__is_connected	src/transports/smart.c	/^static int git_smart__is_connected(git_transport *transport)$/;"	f	file:
git_smart__ls	src/transports/smart.c	/^static int git_smart__ls(const git_remote_head ***out, size_t *size, git_transport *transport)$/;"	f	file:
git_smart__negotiate_fetch	src/transports/smart_protocol.c	/^int git_smart__negotiate_fetch(git_transport *transport, git_repository *repo, const git_remote_head * const *wants, size_t count)$/;"	f
git_smart__negotiation_step	src/transports/smart.c	/^int git_smart__negotiation_step(git_transport *transport, void *data, size_t len)$/;"	f
git_smart__push	src/transports/smart_protocol.c	/^int git_smart__push(git_transport *transport, git_push *push)$/;"	f
git_smart__read_flags	src/transports/smart.c	/^static int git_smart__read_flags(git_transport *transport, int *flags)$/;"	f	file:
git_smart__recv_cb	src/transports/smart.c	/^static int git_smart__recv_cb(gitno_buffer *buf)$/;"	f	file:
git_smart__reset_stream	src/transports/smart.c	/^GIT_INLINE(int) git_smart__reset_stream(transport_smart *t, bool close_subtransport)$/;"	f
git_smart__set_callbacks	src/transports/smart.c	/^static int git_smart__set_callbacks($/;"	f	file:
git_smart__store_refs	src/transports/smart_protocol.c	/^int git_smart__store_refs(transport_smart *t, int flushes)$/;"	f
git_smart__update_heads	src/transports/smart.c	/^int git_smart__update_heads(transport_smart *t)$/;"	f
git_smart_service_t	include/git2/transport.h	/^} git_smart_service_t;$/;"	t	typeref:enum:__anon245
git_smart_subtransport	include/git2/transport.h	/^struct git_smart_subtransport {$/;"	s
git_smart_subtransport	include/git2/transport.h	/^typedef struct git_smart_subtransport git_smart_subtransport;$/;"	t	typeref:struct:git_smart_subtransport
git_smart_subtransport_cb	include/git2/transport.h	/^typedef int (*git_smart_subtransport_cb)($/;"	t
git_smart_subtransport_definition	include/git2/transport.h	/^typedef struct git_smart_subtransport_definition {$/;"	s
git_smart_subtransport_definition	include/git2/transport.h	/^} git_smart_subtransport_definition;$/;"	t	typeref:struct:git_smart_subtransport_definition
git_smart_subtransport_git	src/transports/git.c	/^int git_smart_subtransport_git(git_smart_subtransport **out, git_transport *owner)$/;"	f
git_smart_subtransport_http	src/transports/http.c	/^int git_smart_subtransport_http(git_smart_subtransport **out, git_transport *owner)$/;"	f
git_smart_subtransport_http	src/transports/winhttp.c	/^int git_smart_subtransport_http(git_smart_subtransport **out, git_transport *owner)$/;"	f
git_smart_subtransport_ssh	src/transports/ssh.c	/^int git_smart_subtransport_ssh($/;"	f
git_smart_subtransport_stream	include/git2/transport.h	/^struct git_smart_subtransport_stream {$/;"	s
git_smart_subtransport_stream	include/git2/transport.h	/^typedef struct git_smart_subtransport_stream git_smart_subtransport_stream;$/;"	t	typeref:struct:git_smart_subtransport_stream
git_sortedcache	src/sortedcache.h	/^} git_sortedcache;$/;"	t	typeref:struct:__anon158
git_sortedcache_clear	src/sortedcache.c	/^int git_sortedcache_clear(git_sortedcache *sc, bool wlock)$/;"	f
git_sortedcache_copy	src/sortedcache.c	/^int git_sortedcache_copy($/;"	f
git_sortedcache_entry	src/sortedcache.c	/^void *git_sortedcache_entry(git_sortedcache *sc, size_t pos)$/;"	f
git_sortedcache_entrycount	src/sortedcache.c	/^size_t git_sortedcache_entrycount(const git_sortedcache *sc)$/;"	f
git_sortedcache_free	src/sortedcache.c	/^void git_sortedcache_free(git_sortedcache *sc)$/;"	f
git_sortedcache_free_item_fn	src/sortedcache.h	/^typedef void (*git_sortedcache_free_item_fn)(void *payload, void *item);$/;"	t
git_sortedcache_incref	src/sortedcache.c	/^void git_sortedcache_incref(git_sortedcache *sc)$/;"	f
git_sortedcache_lockandload	src/sortedcache.c	/^int git_sortedcache_lockandload(git_sortedcache *sc, git_buf *buf)$/;"	f
git_sortedcache_lookup	src/sortedcache.c	/^void *git_sortedcache_lookup(const git_sortedcache *sc, const char *key)$/;"	f
git_sortedcache_lookup_index	src/sortedcache.c	/^int git_sortedcache_lookup_index($/;"	f
git_sortedcache_new	src/sortedcache.c	/^int git_sortedcache_new($/;"	f
git_sortedcache_path	src/sortedcache.c	/^const char *git_sortedcache_path(git_sortedcache *sc)$/;"	f
git_sortedcache_remove	src/sortedcache.c	/^int git_sortedcache_remove(git_sortedcache *sc, size_t pos)$/;"	f
git_sortedcache_rlock	src/sortedcache.c	/^int git_sortedcache_rlock(git_sortedcache *sc)$/;"	f
git_sortedcache_runlock	src/sortedcache.c	/^void git_sortedcache_runlock(git_sortedcache *sc)$/;"	f
git_sortedcache_updated	src/sortedcache.c	/^void git_sortedcache_updated(git_sortedcache *sc)$/;"	f
git_sortedcache_upsert	src/sortedcache.c	/^int git_sortedcache_upsert(void **out, git_sortedcache *sc, const char *key)$/;"	f
git_sortedcache_wlock	src/sortedcache.c	/^int git_sortedcache_wlock(git_sortedcache *sc)$/;"	f
git_sortedcache_wunlock	src/sortedcache.c	/^void git_sortedcache_wunlock(git_sortedcache *sc)$/;"	f
git_ssh_extract_url_parts	src/transports/ssh.c	/^static int git_ssh_extract_url_parts($/;"	f	file:
git_stash_cb	include/git2/stash.h	/^typedef int (*git_stash_cb)($/;"	t
git_stash_drop	src/stash.c	/^int git_stash_drop($/;"	f
git_stash_flags	include/git2/stash.h	/^} git_stash_flags;$/;"	t	typeref:enum:__anon256
git_stash_foreach	src/stash.c	/^int git_stash_foreach($/;"	f
git_stash_save	src/stash.c	/^int git_stash_save($/;"	f
git_status_byindex	src/status.c	/^const git_status_entry *git_status_byindex(git_status_list *status, size_t i)$/;"	f
git_status_cb	include/git2/status.h	/^typedef int (*git_status_cb)($/;"	t
git_status_entry	include/git2/status.h	/^} git_status_entry;$/;"	t	typeref:struct:__anon262
git_status_file	src/status.c	/^int git_status_file($/;"	f
git_status_foreach	src/status.c	/^int git_status_foreach(git_repository *repo, git_status_cb cb, void *payload)$/;"	f
git_status_foreach_ext	src/status.c	/^int git_status_foreach_ext($/;"	f
git_status_list	include/git2/types.h	/^typedef struct git_status_list git_status_list;$/;"	t	typeref:struct:git_status_list
git_status_list	src/status.h	/^struct git_status_list {$/;"	s
git_status_list_alloc	src/status.c	/^static git_status_list *git_status_list_alloc(git_index *index)$/;"	f	file:
git_status_list_entrycount	src/status.c	/^size_t git_status_list_entrycount(git_status_list *status)$/;"	f
git_status_list_free	src/status.c	/^void git_status_list_free(git_status_list *status)$/;"	f
git_status_list_new	src/status.c	/^int git_status_list_new($/;"	f
git_status_opt_t	include/git2/status.h	/^} git_status_opt_t;$/;"	t	typeref:enum:__anon260
git_status_options	include/git2/status.h	/^} git_status_options;$/;"	t	typeref:struct:__anon261
git_status_should_ignore	src/status.c	/^int git_status_should_ignore($/;"	f
git_status_show_t	include/git2/status.h	/^} git_status_show_t;$/;"	t	typeref:enum:__anon259
git_status_t	include/git2/status.h	/^} git_status_t;$/;"	t	typeref:enum:__anon258
git_strarray	include/git2/strarray.h	/^typedef struct git_strarray {$/;"	s
git_strarray	include/git2/strarray.h	/^} git_strarray;$/;"	t	typeref:struct:git_strarray
git_strarray_copy	src/util.c	/^int git_strarray_copy(git_strarray *tgt, const git_strarray *src)$/;"	f
git_strarray_free	src/util.c	/^void git_strarray_free(git_strarray *array)$/;"	f
git_stream	src/transports/git.c	/^} git_stream;$/;"	t	typeref:struct:__anon74	file:
git_stream_alloc	src/transports/git.c	/^static int git_stream_alloc($/;"	f	file:
git_stream_free	src/transports/git.c	/^static void git_stream_free(git_smart_subtransport_stream *stream)$/;"	f	file:
git_stream_read	src/transports/git.c	/^static int git_stream_read($/;"	f	file:
git_stream_write	src/transports/git.c	/^static int git_stream_write($/;"	f	file:
git_strmap	src/strmap.h	/^typedef khash_t(str) git_strmap;$/;"	t
git_strmap_alloc	src/strmap.h	25;"	d
git_strmap_begin	src/strmap.h	67;"	d
git_strmap_clear	src/strmap.h	27;"	d
git_strmap_delete	src/strmap.h	59;"	d
git_strmap_delete_at	src/strmap.h	40;"	d
git_strmap_end	src/strmap.h	68;"	d
git_strmap_exists	src/strmap.h	34;"	d
git_strmap_foreach	src/strmap.h	64;"	d
git_strmap_foreach_value	src/strmap.h	65;"	d
git_strmap_free	src/strmap.h	26;"	d
git_strmap_has_data	src/strmap.h	35;"	d
git_strmap_insert	src/strmap.h	42;"	d
git_strmap_insert2	src/strmap.h	49;"	d
git_strmap_iter	src/strmap.h	/^typedef khiter_t git_strmap_iter;$/;"	t
git_strmap_key	src/strmap.h	37;"	d
git_strmap_lookup_index	src/strmap.h	31;"	d
git_strmap_next	src/strmap.c	/^int git_strmap_next($/;"	f
git_strmap_num_entries	src/strmap.h	29;"	d
git_strmap_set_value_at	src/strmap.h	39;"	d
git_strmap_valid_index	src/strmap.h	32;"	d
git_strmap_value_at	src/strmap.h	38;"	d
git_submodule	include/git2/types.h	/^typedef struct git_submodule git_submodule;$/;"	t	typeref:struct:git_submodule
git_submodule	src/submodule.h	/^struct git_submodule {$/;"	s
git_submodule__open	src/submodule.c	/^static int git_submodule__open($/;"	f	file:
git_submodule__status	src/submodule.c	/^int git_submodule__status($/;"	f
git_submodule_add_finalize	src/submodule.c	/^int git_submodule_add_finalize(git_submodule *sm)$/;"	f
git_submodule_add_setup	src/submodule.c	/^int git_submodule_add_setup($/;"	f
git_submodule_add_to_index	src/submodule.c	/^int git_submodule_add_to_index(git_submodule *sm, int write_index)$/;"	f
git_submodule_branch	src/submodule.c	/^const char *git_submodule_branch(git_submodule *submodule)$/;"	f
git_submodule_config_free	src/submodule.c	/^void git_submodule_config_free(git_repository *repo)$/;"	f
git_submodule_fetch_recurse_submodules	src/submodule.c	/^git_submodule_recurse_t git_submodule_fetch_recurse_submodules($/;"	f
git_submodule_foreach	src/submodule.c	/^int git_submodule_foreach($/;"	f
git_submodule_free	src/submodule.c	/^void git_submodule_free(git_submodule *sm)$/;"	f
git_submodule_head_id	src/submodule.c	/^const git_oid *git_submodule_head_id(git_submodule *submodule)$/;"	f
git_submodule_ignore	src/submodule.c	/^git_submodule_ignore_t git_submodule_ignore(git_submodule *submodule)$/;"	f
git_submodule_ignore_t	include/git2/types.h	/^} git_submodule_ignore_t;$/;"	t	typeref:enum:__anon240
git_submodule_ignore_to_str	src/submodule.c	/^const char *git_submodule_ignore_to_str(git_submodule_ignore_t ignore)$/;"	f
git_submodule_index_id	src/submodule.c	/^const git_oid *git_submodule_index_id(git_submodule *submodule)$/;"	f
git_submodule_init	src/submodule.c	/^int git_submodule_init(git_submodule *submodule, int overwrite)$/;"	f
git_submodule_location	src/submodule.c	/^int git_submodule_location(unsigned int *location, git_submodule *sm)$/;"	f
git_submodule_lookup	src/submodule.c	/^int git_submodule_lookup($/;"	f
git_submodule_name	src/submodule.c	/^const char *git_submodule_name(git_submodule *submodule)$/;"	f
git_submodule_open	src/submodule.c	/^int git_submodule_open(git_repository **subrepo, git_submodule *sm)$/;"	f
git_submodule_open_bare	src/submodule.c	/^int git_submodule_open_bare(git_repository **subrepo, git_submodule *sm)$/;"	f
git_submodule_owner	src/submodule.c	/^git_repository *git_submodule_owner(git_submodule *submodule)$/;"	f
git_submodule_parse_ignore	src/submodule.c	/^int git_submodule_parse_ignore(git_submodule_ignore_t *out, const char *value)$/;"	f
git_submodule_parse_recurse	src/submodule.c	/^int git_submodule_parse_recurse(git_submodule_recurse_t *out, const char *value)$/;"	f
git_submodule_parse_update	src/submodule.c	/^int git_submodule_parse_update(git_submodule_update_t *out, const char *value)$/;"	f
git_submodule_path	src/submodule.c	/^const char *git_submodule_path(git_submodule *submodule)$/;"	f
git_submodule_recurse_t	include/git2/types.h	/^} git_submodule_recurse_t;$/;"	t	typeref:enum:__anon241
git_submodule_recurse_to_str	src/submodule.c	/^const char *git_submodule_recurse_to_str(git_submodule_recurse_t recurse)$/;"	f
git_submodule_reload	src/submodule.c	/^int git_submodule_reload(git_submodule *submodule)$/;"	f
git_submodule_reload_all	src/submodule.c	/^int git_submodule_reload_all(git_repository *repo)$/;"	f
git_submodule_save	src/submodule.c	/^int git_submodule_save(git_submodule *submodule)$/;"	f
git_submodule_set_fetch_recurse_submodules	src/submodule.c	/^git_submodule_recurse_t git_submodule_set_fetch_recurse_submodules($/;"	f
git_submodule_set_ignore	src/submodule.c	/^git_submodule_ignore_t git_submodule_set_ignore($/;"	f
git_submodule_set_update	src/submodule.c	/^git_submodule_update_t git_submodule_set_update($/;"	f
git_submodule_set_url	src/submodule.c	/^int git_submodule_set_url(git_submodule *submodule, const char *url)$/;"	f
git_submodule_status	src/submodule.c	/^int git_submodule_status(unsigned int *status, git_submodule *sm)$/;"	f
git_submodule_status_t	include/git2/submodule.h	/^} git_submodule_status_t;$/;"	t	typeref:enum:__anon207
git_submodule_sync	src/submodule.c	/^int git_submodule_sync(git_submodule *submodule)$/;"	f
git_submodule_update	src/submodule.c	/^git_submodule_update_t git_submodule_update(git_submodule *submodule)$/;"	f
git_submodule_update_t	include/git2/types.h	/^} git_submodule_update_t;$/;"	t	typeref:enum:__anon239
git_submodule_update_to_str	src/submodule.c	/^const char *git_submodule_update_to_str(git_submodule_update_t update)$/;"	f
git_submodule_url	src/submodule.c	/^const char *git_submodule_url(git_submodule *submodule)$/;"	f
git_submodule_wd_id	src/submodule.c	/^const git_oid *git_submodule_wd_id(git_submodule *submodule)$/;"	f
git_subtransport	src/transports/git.c	/^} git_subtransport;$/;"	t	typeref:struct:__anon75	file:
git_subtransport_definition	src/transport.c	/^static git_smart_subtransport_definition git_subtransport_definition = { git_smart_subtransport_git, 0 };$/;"	v	file:
git_sysdir__dir_guess	src/sysdir.c	/^static git_sysdir_guess_cb git_sysdir__dir_guess[GIT_SYSDIR__MAX] = {$/;"	v	file:
git_sysdir__dirs	src/sysdir.c	/^static git_buf git_sysdir__dirs[GIT_SYSDIR__MAX] =$/;"	v	file:
git_sysdir__dirs_shutdown_set	src/sysdir.c	/^static int git_sysdir__dirs_shutdown_set = 0;$/;"	v	file:
git_sysdir_check_selector	src/sysdir.c	/^static int git_sysdir_check_selector(git_sysdir_t which)$/;"	f	file:
git_sysdir_find_global_file	src/sysdir.c	/^int git_sysdir_find_global_file(git_buf *path, const char *filename)$/;"	f
git_sysdir_find_in_dirlist	src/sysdir.c	/^static int git_sysdir_find_in_dirlist($/;"	f	file:
git_sysdir_find_system_file	src/sysdir.c	/^int git_sysdir_find_system_file(git_buf *path, const char *filename)$/;"	f
git_sysdir_find_template_dir	src/sysdir.c	/^int git_sysdir_find_template_dir(git_buf *path)$/;"	f
git_sysdir_find_xdg_file	src/sysdir.c	/^int git_sysdir_find_xdg_file(git_buf *path, const char *filename)$/;"	f
git_sysdir_get	src/sysdir.c	/^int git_sysdir_get(const git_buf **out, git_sysdir_t which)$/;"	f
git_sysdir_get_str	src/sysdir.c	/^int git_sysdir_get_str($/;"	f
git_sysdir_global_init	src/sysdir.c	/^int git_sysdir_global_init(void)$/;"	f
git_sysdir_global_shutdown	src/sysdir.c	/^void git_sysdir_global_shutdown(void)$/;"	f
git_sysdir_guess_cb	src/sysdir.c	/^typedef int (*git_sysdir_guess_cb)(git_buf *out);$/;"	t	file:
git_sysdir_guess_global_dirs	src/sysdir.c	/^static int git_sysdir_guess_global_dirs(git_buf *out)$/;"	f	file:
git_sysdir_guess_system_dirs	src/sysdir.c	/^static int git_sysdir_guess_system_dirs(git_buf *out)$/;"	f	file:
git_sysdir_guess_template_dirs	src/sysdir.c	/^static int git_sysdir_guess_template_dirs(git_buf *out)$/;"	f	file:
git_sysdir_guess_xdg_dirs	src/sysdir.c	/^static int git_sysdir_guess_xdg_dirs(git_buf *out)$/;"	f	file:
git_sysdir_set	src/sysdir.c	/^int git_sysdir_set(git_sysdir_t which, const char *search_path)$/;"	f
git_sysdir_t	src/sysdir.h	/^} git_sysdir_t;$/;"	t	typeref:enum:__anon141
git_tag	include/git2/types.h	/^typedef struct git_tag git_tag;$/;"	t	typeref:struct:git_tag
git_tag	src/tag.h	/^struct git_tag {$/;"	s
git_tag__free	src/tag.c	/^void git_tag__free(void *_tag)$/;"	f
git_tag__parse	src/tag.c	/^int git_tag__parse(void *_tag, git_odb_object *odb_obj)$/;"	f
git_tag_annotation_create	src/tag.c	/^int git_tag_annotation_create($/;"	f
git_tag_create	src/tag.c	/^int git_tag_create($/;"	f
git_tag_create__internal	src/tag.c	/^static int git_tag_create__internal($/;"	f	file:
git_tag_create_frombuffer	src/tag.c	/^int git_tag_create_frombuffer(git_oid *oid, git_repository *repo, const char *buffer, int allow_ref_overwrite)$/;"	f
git_tag_create_lightweight	src/tag.c	/^int git_tag_create_lightweight($/;"	f
git_tag_delete	src/tag.c	/^int git_tag_delete(git_repository *repo, const char *tag_name)$/;"	f
git_tag_foreach	src/tag.c	/^int git_tag_foreach(git_repository *repo, git_tag_foreach_cb cb, void *cb_data)$/;"	f
git_tag_foreach_cb	include/git2/tag.h	/^typedef int (*git_tag_foreach_cb)(const char *name, git_oid *oid, void *payload);$/;"	t
git_tag_free	src/object_api.c	/^void git_tag_free(git_tag *obj)$/;"	f
git_tag_id	src/object_api.c	/^const git_oid *git_tag_id(const git_tag *obj)$/;"	f
git_tag_list	src/tag.c	/^int git_tag_list(git_strarray *tag_names, git_repository *repo)$/;"	f
git_tag_list_match	src/tag.c	/^int git_tag_list_match(git_strarray *tag_names, const char *pattern, git_repository *repo)$/;"	f
git_tag_lookup	src/object_api.c	/^int git_tag_lookup(git_tag **out, git_repository *repo, const git_oid *id)$/;"	f
git_tag_lookup_prefix	src/object_api.c	/^int git_tag_lookup_prefix(git_tag **out, git_repository *repo, const git_oid *id, size_t len)$/;"	f
git_tag_message	src/tag.c	/^const char *git_tag_message(const git_tag *t)$/;"	f
git_tag_name	src/tag.c	/^const char *git_tag_name(const git_tag *t)$/;"	f
git_tag_owner	src/object_api.c	/^git_repository *git_tag_owner(const git_tag *obj)$/;"	f
git_tag_peel	src/tag.c	/^int git_tag_peel(git_object **tag_target, const git_tag *tag)$/;"	f
git_tag_tagger	src/tag.c	/^const git_signature *git_tag_tagger(const git_tag *t)$/;"	f
git_tag_target	src/tag.c	/^int git_tag_target(git_object **target, const git_tag *t)$/;"	f
git_tag_target_id	src/tag.c	/^const git_oid *git_tag_target_id(const git_tag *t)$/;"	f
git_tag_target_type	src/tag.c	/^git_otype git_tag_target_type(const git_tag *t)$/;"	f
git_thread	src/thread-utils.h	174;"	d
git_thread	src/thread-utils.h	43;"	d
git_thread_create	src/thread-utils.h	175;"	d
git_thread_create	src/thread-utils.h	44;"	d
git_thread_exit	src/thread-utils.h	177;"	d
git_thread_exit	src/thread-utils.h	47;"	d
git_thread_join	src/thread-utils.h	178;"	d
git_thread_join	src/thread-utils.h	48;"	d
git_thread_kill	src/thread-utils.h	176;"	d
git_thread_kill	src/thread-utils.h	46;"	d
git_threads_init	src/global.c	/^int git_threads_init(void)$/;"	f
git_threads_shutdown	src/global.c	/^void git_threads_shutdown(void)$/;"	f
git_time	include/git2/types.h	/^typedef struct git_time {$/;"	s
git_time	include/git2/types.h	/^} git_time;$/;"	t	typeref:struct:git_time
git_time_t	include/git2/types.h	/^typedef __time64_t git_time_t;$/;"	t
git_trace	src/trace.h	40;"	d
git_trace	src/trace.h	50;"	d
git_trace__data	src/trace.c	/^struct git_trace_data git_trace__data = {0};$/;"	v	typeref:struct:git_trace_data
git_trace__write_fmt	src/trace.h	/^GIT_INLINE(void) git_trace__write_fmt($/;"	f
git_trace_callback	include/git2/trace.h	/^typedef void (*git_trace_callback)(git_trace_level_t level, const char *msg);$/;"	t
git_trace_data	src/trace.h	/^struct git_trace_data {$/;"	s
git_trace_level	src/trace.h	39;"	d
git_trace_level	src/trace.h	49;"	d
git_trace_level_t	include/git2/trace.h	/^} git_trace_level_t;$/;"	t	typeref:enum:__anon247
git_trace_set	src/trace.c	/^int git_trace_set(git_trace_level_t level, git_trace_callback callback)$/;"	f
git_transfer_progress	include/git2/types.h	/^typedef struct git_transfer_progress {$/;"	s
git_transfer_progress	include/git2/types.h	/^} git_transfer_progress;$/;"	t	typeref:struct:git_transfer_progress
git_transfer_progress_callback	include/git2/types.h	/^typedef int (*git_transfer_progress_callback)(const git_transfer_progress *stats, void *payload);$/;"	t
git_transport	include/git2/transport.h	/^struct git_transport {$/;"	s
git_transport	include/git2/transport.h	/^typedef struct git_transport git_transport;$/;"	t	typeref:struct:git_transport
git_transport_cb	include/git2/transport.h	/^typedef int (*git_transport_cb)(git_transport **out, git_remote *owner, void *param);$/;"	t
git_transport_dummy	src/transport.c	/^int git_transport_dummy(git_transport **transport, git_remote *owner, void *param)$/;"	f
git_transport_flags_t	include/git2/transport.h	/^} git_transport_flags_t;$/;"	t	typeref:enum:__anon244
git_transport_local	src/transports/local.c	/^int git_transport_local(git_transport **out, git_remote *owner, void *param)$/;"	f
git_transport_message_cb	include/git2/transport.h	/^typedef int (*git_transport_message_cb)(const char *str, int len, void *data);$/;"	t
git_transport_new	src/transport.c	/^int git_transport_new(git_transport **out, git_remote *owner, const char *url)$/;"	f
git_transport_register	src/transport.c	/^int git_transport_register($/;"	f
git_transport_smart	src/transports/smart.c	/^int git_transport_smart(git_transport **out, git_remote *owner, void *param)$/;"	f
git_transport_unregister	src/transport.c	/^int git_transport_unregister($/;"	f
git_tree	include/git2/types.h	/^typedef struct git_tree git_tree;$/;"	t	typeref:struct:git_tree
git_tree	src/tree.h	/^struct git_tree {$/;"	s
git_tree__free	src/tree.c	/^void git_tree__free(void *_tree)$/;"	f
git_tree__parse	src/tree.c	/^int git_tree__parse(void *_tree, git_odb_object *odb_obj)$/;"	f
git_tree__prefix_position	src/tree.c	/^int git_tree__prefix_position(const git_tree *tree, const char *path)$/;"	f
git_tree__write_index	src/tree.c	/^int git_tree__write_index($/;"	f
git_tree_cache	src/tree-cache.h	/^struct git_tree_cache {$/;"	s
git_tree_cache	src/tree-cache.h	/^typedef struct git_tree_cache git_tree_cache;$/;"	t	typeref:struct:git_tree_cache
git_tree_cache_free	src/tree-cache.c	/^void git_tree_cache_free(git_tree_cache *tree)$/;"	f
git_tree_cache_get	src/tree-cache.c	/^const git_tree_cache *git_tree_cache_get(const git_tree_cache *tree, const char *path)$/;"	f
git_tree_cache_invalidate_path	src/tree-cache.c	/^void git_tree_cache_invalidate_path(git_tree_cache *tree, const char *path)$/;"	f
git_tree_cache_read	src/tree-cache.c	/^int git_tree_cache_read(git_tree_cache **tree, const char *buffer, size_t buffer_size)$/;"	f
git_tree_entry	include/git2/types.h	/^typedef struct git_tree_entry git_tree_entry;$/;"	t	typeref:struct:git_tree_entry
git_tree_entry	src/tree.h	/^struct git_tree_entry {$/;"	s
git_tree_entry__is_tree	src/tree.h	/^GIT_INLINE(bool) git_tree_entry__is_tree(const struct git_tree_entry *e)$/;"	f
git_tree_entry_byid	src/tree.c	/^const git_tree_entry *git_tree_entry_byid($/;"	f
git_tree_entry_byindex	src/tree.c	/^const git_tree_entry *git_tree_entry_byindex($/;"	f
git_tree_entry_byname	src/tree.c	/^const git_tree_entry *git_tree_entry_byname($/;"	f
git_tree_entry_bypath	src/tree.c	/^int git_tree_entry_bypath($/;"	f
git_tree_entry_cmp	src/tree.c	/^int git_tree_entry_cmp(const git_tree_entry *e1, const git_tree_entry *e2)$/;"	f
git_tree_entry_dup	src/tree.c	/^int git_tree_entry_dup(git_tree_entry **dest, const git_tree_entry *source)$/;"	f
git_tree_entry_filemode	src/tree.c	/^git_filemode_t git_tree_entry_filemode(const git_tree_entry *entry)$/;"	f
git_tree_entry_filemode_raw	src/tree.c	/^git_filemode_t git_tree_entry_filemode_raw(const git_tree_entry *entry)$/;"	f
git_tree_entry_free	src/tree.c	/^void git_tree_entry_free(git_tree_entry *entry)$/;"	f
git_tree_entry_icmp	src/tree.c	/^int git_tree_entry_icmp(const git_tree_entry *e1, const git_tree_entry *e2)$/;"	f
git_tree_entry_id	src/tree.c	/^const git_oid *git_tree_entry_id(const git_tree_entry *entry)$/;"	f
git_tree_entry_name	src/tree.c	/^const char *git_tree_entry_name(const git_tree_entry *entry)$/;"	f
git_tree_entry_to_object	src/tree.c	/^int git_tree_entry_to_object($/;"	f
git_tree_entry_type	src/tree.c	/^git_otype git_tree_entry_type(const git_tree_entry *entry)$/;"	f
git_tree_entrycount	src/tree.c	/^size_t git_tree_entrycount(const git_tree *tree)$/;"	f
git_tree_free	src/object_api.c	/^void git_tree_free(git_tree *obj)$/;"	f
git_tree_id	src/object_api.c	/^const git_oid *git_tree_id(const git_tree *obj)$/;"	f
git_tree_lookup	src/object_api.c	/^int git_tree_lookup(git_tree **out, git_repository *repo, const git_oid *id)$/;"	f
git_tree_lookup_prefix	src/object_api.c	/^int git_tree_lookup_prefix(git_tree **out, git_repository *repo, const git_oid *id, size_t len)$/;"	f
git_tree_owner	src/object_api.c	/^git_repository *git_tree_owner(const git_tree *obj)$/;"	f
git_tree_walk	src/tree.c	/^int git_tree_walk($/;"	f
git_treebuilder	include/git2/types.h	/^typedef struct git_treebuilder git_treebuilder;$/;"	t	typeref:struct:git_treebuilder
git_treebuilder	src/tree.h	/^struct git_treebuilder {$/;"	s
git_treebuilder_clear	src/tree.c	/^void git_treebuilder_clear(git_treebuilder *bld)$/;"	f
git_treebuilder_create	src/tree.c	/^int git_treebuilder_create(git_treebuilder **builder_p, const git_tree *source)$/;"	f
git_treebuilder_entrycount	src/tree.c	/^unsigned int git_treebuilder_entrycount(git_treebuilder *bld)$/;"	f
git_treebuilder_filter	src/tree.c	/^void git_treebuilder_filter($/;"	f
git_treebuilder_filter_cb	include/git2/tree.h	/^typedef int (*git_treebuilder_filter_cb)($/;"	t
git_treebuilder_free	src/tree.c	/^void git_treebuilder_free(git_treebuilder *bld)$/;"	f
git_treebuilder_get	src/tree.c	/^const git_tree_entry *git_treebuilder_get(git_treebuilder *bld, const char *filename)$/;"	f
git_treebuilder_insert	src/tree.c	/^int git_treebuilder_insert($/;"	f
git_treebuilder_remove	src/tree.c	/^int git_treebuilder_remove(git_treebuilder *bld, const char *filename)$/;"	f
git_treebuilder_write	src/tree.c	/^int git_treebuilder_write(git_oid *oid, git_repository *repo, git_treebuilder *bld)$/;"	f
git_treewalk_cb	include/git2/tree.h	/^typedef int (*git_treewalk_cb)($/;"	t
git_treewalk_mode	include/git2/tree.h	/^} git_treewalk_mode;$/;"	t	typeref:enum:__anon222
git_vector	src/vector.h	/^typedef struct git_vector {$/;"	s
git_vector	src/vector.h	/^} git_vector;$/;"	t	typeref:struct:git_vector
git_vector_bsearch	src/vector.h	/^GIT_INLINE(int) git_vector_bsearch(size_t *at_pos, git_vector *v, const void *key)$/;"	f
git_vector_bsearch2	src/vector.c	/^int git_vector_bsearch2($/;"	f
git_vector_clear	src/vector.c	/^void git_vector_clear(git_vector *v)$/;"	f
git_vector_cmp	src/vector.h	/^typedef int (*git_vector_cmp)(const void *, const void *);$/;"	t
git_vector_detach	src/vector.c	/^void **git_vector_detach(size_t *size, size_t *asize, git_vector *v)$/;"	f
git_vector_dup	src/vector.c	/^int git_vector_dup(git_vector *v, const git_vector *src, git_vector_cmp cmp)$/;"	f
git_vector_foreach	src/vector.h	76;"	d
git_vector_free	src/vector.c	/^void git_vector_free(git_vector *v)$/;"	f
git_vector_free_deep	src/vector.c	/^void git_vector_free_deep(git_vector *v)$/;"	f
git_vector_get	src/vector.h	/^GIT_INLINE(void *) git_vector_get(const git_vector *v, size_t position)$/;"	f
git_vector_init	src/vector.c	/^int git_vector_init(git_vector *v, size_t initial_size, git_vector_cmp cmp)$/;"	f
git_vector_insert	src/vector.c	/^int git_vector_insert(git_vector *v, void *element)$/;"	f
git_vector_insert_sorted	src/vector.c	/^int git_vector_insert_sorted($/;"	f
git_vector_is_sorted	src/vector.h	95;"	d
git_vector_last	src/vector.h	/^GIT_INLINE(void *) git_vector_last(const git_vector *v)$/;"	f
git_vector_length	src/vector.h	/^GIT_INLINE(size_t) git_vector_length(const git_vector *v)$/;"	f
git_vector_pop	src/vector.c	/^void git_vector_pop(git_vector *v)$/;"	f
git_vector_remove	src/vector.c	/^int git_vector_remove(git_vector *v, size_t idx)$/;"	f
git_vector_remove_matching	src/vector.c	/^void git_vector_remove_matching($/;"	f
git_vector_resize_to	src/vector.c	/^int git_vector_resize_to(git_vector *v, size_t new_length)$/;"	f
git_vector_rforeach	src/vector.h	79;"	d
git_vector_search	src/vector.c	/^int git_vector_search(size_t *at_pos, const git_vector *v, const void *entry)$/;"	f
git_vector_search2	src/vector.c	/^int git_vector_search2($/;"	f
git_vector_set	src/vector.c	/^int git_vector_set(void **old, git_vector *v, size_t position, void *value)$/;"	f
git_vector_set_cmp	src/vector.h	/^GIT_INLINE(void) git_vector_set_cmp(git_vector *v, git_vector_cmp cmp)$/;"	f
git_vector_set_sorted	src/vector.h	98;"	d
git_vector_sort	src/vector.c	/^void git_vector_sort(git_vector *v)$/;"	f
git_vector_swap	src/vector.c	/^void git_vector_swap(git_vector *a, git_vector *b)$/;"	f
git_vector_uniq	src/vector.c	/^void git_vector_uniq(git_vector *v, void  (*git_free_cb)(void *))$/;"	f
git_win32__expand_path	src/win32/findfile.c	/^int git_win32__expand_path(struct git_win32__path *s_root, const wchar_t *templ)$/;"	f
git_win32__find_file	src/win32/findfile.c	/^int git_win32__find_file($/;"	f
git_win32__find_global_dirs	src/win32/findfile.c	/^int git_win32__find_global_dirs(git_buf *out)$/;"	f
git_win32__find_system_dirs	src/win32/findfile.c	/^int git_win32__find_system_dirs(git_buf *out, const wchar_t *subdir)$/;"	f
git_win32__find_xdg_dirs	src/win32/findfile.c	/^int git_win32__find_xdg_dirs(git_buf *out)$/;"	f
git_win32__path	src/win32/findfile.h	/^struct git_win32__path {$/;"	s
git_win32_get_error_message	src/win32/error.c	/^char *git_win32_get_error_message(DWORD error_code)$/;"	f
git_win32_path	src/win32/utf-conv.h	/^typedef wchar_t git_win32_path[GIT_WIN_PATH_UTF16];$/;"	t
git_win32_path_as_utf8	src/win32/utf-conv.h	/^typedef char git_win32_path_as_utf8[GIT_WIN_PATH_UTF8];$/;"	t
git_win32_path_from_c	src/win32/utf-conv.h	/^GIT_INLINE(int) git_win32_path_from_c(git_win32_path dest, const char *src)$/;"	f
git_win32_path_to_c	src/win32/utf-conv.h	/^GIT_INLINE(int) git_win32_path_to_c(git_win32_path_as_utf8 dest, const wchar_t *src)$/;"	f
git_xdiff	src/diff_xdiff.c	/^static int git_xdiff(git_diff_output *output, git_patch *patch)$/;"	f	file:
git_xdiff_cb	src/diff_xdiff.c	/^static int git_xdiff_cb(void *priv, mmbuffer_t *bufs, int len)$/;"	f	file:
git_xdiff_info	src/diff_xdiff.c	/^} git_xdiff_info;$/;"	t	typeref:struct:__anon51	file:
git_xdiff_init	src/diff_xdiff.c	/^void git_xdiff_init(git_xdiff_output *xo, const git_diff_options *opts)$/;"	f
git_xdiff_output	src/diff_xdiff.h	/^} git_xdiff_output;$/;"	t	typeref:struct:__anon103
git_xdiff_parse_hunk	src/diff_xdiff.c	/^static int git_xdiff_parse_hunk(git_diff_hunk *hunk, const char *header)$/;"	f	file:
git_xdiff_scan_int	src/diff_xdiff.c	/^static int git_xdiff_scan_int(const char **str, int *value)$/;"	f	file:
git_zstream	src/zstream.h	/^} git_zstream;$/;"	t	typeref:struct:__anon173
git_zstream_deflatebuf	src/zstream.c	/^int git_zstream_deflatebuf(git_buf *out, const void *in, size_t in_len)$/;"	f
git_zstream_done	src/zstream.c	/^bool git_zstream_done(git_zstream *zstream)$/;"	f
git_zstream_free	src/zstream.c	/^void git_zstream_free(git_zstream *zstream)$/;"	f
git_zstream_get_output	src/zstream.c	/^int git_zstream_get_output(void *out, size_t *out_len, git_zstream *zstream)$/;"	f
git_zstream_init	src/zstream.c	/^int git_zstream_init(git_zstream *zstream)$/;"	f
git_zstream_reset	src/zstream.c	/^void git_zstream_reset(git_zstream *zstream)$/;"	f
git_zstream_set_input	src/zstream.c	/^int git_zstream_set_input(git_zstream *zstream, const void *in, size_t in_len)$/;"	f
git_zstream_suggest_output_len	src/zstream.c	/^size_t git_zstream_suggest_output_len(git_zstream *zstream)$/;"	f
gitdir	examples/init.c	/^	const char *gitdir;$/;"	m	struct:opts	file:
giterr__check_version	src/common.h	/^GIT_INLINE(int) giterr__check_version(const void *structure, unsigned int expected_max, const char *name)$/;"	f
giterr_capture	src/errors.c	/^int giterr_capture(git_error_state *state, int error_code)$/;"	f
giterr_clear	src/errors.c	/^void giterr_clear(void)$/;"	f
giterr_detach	src/errors.c	/^int giterr_detach(git_error *cpy)$/;"	f
giterr_last	src/errors.c	/^const git_error *giterr_last(void)$/;"	f
giterr_restore	src/errors.c	/^int giterr_restore(git_error_state *state)$/;"	f
giterr_set	src/errors.c	/^void giterr_set(int error_class, const char *string, ...)$/;"	f
giterr_set_after_callback	src/common.h	106;"	d
giterr_set_after_callback	src/common.h	109;"	d
giterr_set_after_callback_function	src/common.h	/^GIT_INLINE(int) giterr_set_after_callback_function($/;"	f
giterr_set_oom	src/errors.c	/^void giterr_set_oom(void)$/;"	f
giterr_set_regex	src/errors.c	/^int giterr_set_regex(const regex_t *regex, int error_code)$/;"	f
giterr_set_str	src/errors.c	/^void giterr_set_str(int error_class, const char *string)$/;"	f
giterr_system_last	src/errors.c	/^int giterr_system_last(void)$/;"	f
giterr_system_set	src/errors.c	/^void giterr_system_set(int code)$/;"	f
gitno__close	src/netops.c	/^static int gitno__close(GIT_SOCKET s)$/;"	f	file:
gitno__recv	src/netops.c	/^static int gitno__recv(gitno_buffer *buf)$/;"	f	file:
gitno__recv_ssl	src/netops.c	/^static int gitno__recv_ssl(gitno_buffer *buf)$/;"	f	file:
gitno_buffer	src/netops.h	/^struct gitno_buffer {$/;"	s
gitno_buffer	src/netops.h	/^typedef struct gitno_buffer gitno_buffer;$/;"	t	typeref:struct:gitno_buffer
gitno_buffer_setup	src/netops.c	/^void gitno_buffer_setup(gitno_socket *socket, gitno_buffer *buf, char *data, size_t len)$/;"	f
gitno_buffer_setup_callback	src/netops.c	/^void gitno_buffer_setup_callback($/;"	f
gitno_close	src/netops.c	/^int gitno_close(gitno_socket *s)$/;"	f
gitno_connect	src/netops.c	/^int gitno_connect(gitno_socket *s_out, const char *host, const char *port, int flags)$/;"	f
gitno_connection_data	src/netops.h	/^typedef struct gitno_connection_data {$/;"	s
gitno_connection_data	src/netops.h	/^} gitno_connection_data;$/;"	t	typeref:struct:gitno_connection_data
gitno_connection_data_free_ptrs	src/netops.c	/^void gitno_connection_data_free_ptrs(gitno_connection_data *d)$/;"	f
gitno_connection_data_from_url	src/netops.c	/^int gitno_connection_data_from_url($/;"	f
gitno_consume	src/netops.c	/^void gitno_consume(gitno_buffer *buf, const char *ptr)$/;"	f
gitno_consume_n	src/netops.c	/^void gitno_consume_n(gitno_buffer *buf, size_t cons)$/;"	f
gitno_extract_url_parts	src/netops.c	/^int gitno_extract_url_parts($/;"	f
gitno_recv	src/netops.c	/^int gitno_recv(gitno_buffer *buf)$/;"	f
gitno_select_in	src/netops.c	/^int gitno_select_in(gitno_buffer *buf, long int sec, long int usec)$/;"	f
gitno_send	src/netops.c	/^int gitno_send(gitno_socket *socket, const char *msg, size_t len, int flags)$/;"	f
gitno_send_ssl	src/netops.c	/^static int gitno_send_ssl(gitno_ssl *ssl, const char *msg, size_t len, int flags)$/;"	f	file:
gitno_socket	src/netops.h	/^struct gitno_socket {$/;"	s
gitno_socket	src/netops.h	/^typedef struct gitno_socket gitno_socket;$/;"	t	typeref:struct:gitno_socket
gitno_ssl	src/netops.h	/^struct gitno_ssl {$/;"	s
gitno_ssl	src/netops.h	/^typedef struct gitno_ssl gitno_ssl;$/;"	t	typeref:struct:gitno_ssl
gitno_ssl_teardown	src/netops.c	/^static int gitno_ssl_teardown(gitno_ssl *ssl)$/;"	f	file:
glob	src/refdb_fs.c	/^	char *glob;$/;"	m	struct:__anon148	file:
global_drivers	src/diff_driver.c	/^static git_diff_driver global_drivers[3] = {$/;"	v	file:
good_length	deps/zlib/deflate.c	/^   ush good_length; \/* reduce lazy search above this match length *\/$/;"	m	struct:config_s	file:
good_match	deps/zlib/deflate.h	/^    uInt good_match;$/;"	m	struct:internal_state
group_nodes_into_DFAstates	deps/regex/regexec.c	/^group_nodes_into_DFAstates (const re_dfa_t *dfa, const re_dfastate_t *state,$/;"	f	file:
guilty	src/blame.h	/^	bool guilty;$/;"	m	struct:git_blame__entry
gzFile	deps/zlib/zlib.h	/^typedef voidp gzFile;       \/* opaque gzip file descriptor *\/$/;"	t
gz_header	deps/zlib/zlib.h	/^} gz_header;$/;"	t	typeref:struct:gz_header_s
gz_header_s	deps/zlib/zlib.h	/^typedef struct gz_header_s {$/;"	s
gz_headerp	deps/zlib/zlib.h	/^typedef gz_header FAR *gz_headerp;$/;"	t
gzhead	deps/zlib/deflate.h	/^    gz_headerp  gzhead;  \/* gzip header information to write *\/$/;"	m	struct:internal_state
gzindex	deps/zlib/deflate.h	/^    uInt   gzindex;      \/* where in extra, name, or comment *\/$/;"	m	struct:internal_state
gzoffset	deps/zlib/zlib.h	1578;"	d
gzopen	deps/zlib/zlib.h	1575;"	d
gzseek	deps/zlib/zlib.h	1576;"	d
gztell	deps/zlib/zlib.h	1577;"	d
h	src/win32/dir.h	/^	HANDLE h;$/;"	m	struct:__anon168
h_C	deps/http-parser/http_parser.c	/^  , h_C$/;"	e	enum:header_states	file:
h_CO	deps/http-parser/http_parser.c	/^  , h_CO$/;"	e	enum:header_states	file:
h_CON	deps/http-parser/http_parser.c	/^  , h_CON$/;"	e	enum:header_states	file:
h_connection	deps/http-parser/http_parser.c	/^  , h_connection$/;"	e	enum:header_states	file:
h_connection_close	deps/http-parser/http_parser.c	/^  , h_connection_close$/;"	e	enum:header_states	file:
h_connection_keep_alive	deps/http-parser/http_parser.c	/^  , h_connection_keep_alive$/;"	e	enum:header_states	file:
h_content_length	deps/http-parser/http_parser.c	/^  , h_content_length$/;"	e	enum:header_states	file:
h_general	deps/http-parser/http_parser.c	/^  { h_general = 0$/;"	e	enum:header_states	file:
h_matching_connection	deps/http-parser/http_parser.c	/^  , h_matching_connection$/;"	e	enum:header_states	file:
h_matching_connection_close	deps/http-parser/http_parser.c	/^  , h_matching_connection_close$/;"	e	enum:header_states	file:
h_matching_connection_keep_alive	deps/http-parser/http_parser.c	/^  , h_matching_connection_keep_alive$/;"	e	enum:header_states	file:
h_matching_content_length	deps/http-parser/http_parser.c	/^  , h_matching_content_length$/;"	e	enum:header_states	file:
h_matching_proxy_connection	deps/http-parser/http_parser.c	/^  , h_matching_proxy_connection$/;"	e	enum:header_states	file:
h_matching_transfer_encoding	deps/http-parser/http_parser.c	/^  , h_matching_transfer_encoding$/;"	e	enum:header_states	file:
h_matching_transfer_encoding_chunked	deps/http-parser/http_parser.c	/^  , h_matching_transfer_encoding_chunked$/;"	e	enum:header_states	file:
h_matching_upgrade	deps/http-parser/http_parser.c	/^  , h_matching_upgrade$/;"	e	enum:header_states	file:
h_transfer_encoding	deps/http-parser/http_parser.c	/^  , h_transfer_encoding$/;"	e	enum:header_states	file:
h_transfer_encoding_chunked	deps/http-parser/http_parser.c	/^  , h_transfer_encoding_chunked$/;"	e	enum:header_states	file:
h_upgrade	deps/http-parser/http_parser.c	/^  , h_upgrade$/;"	e	enum:header_states	file:
ha	src/xdiff/xdiffi.h	/^	unsigned long const *ha;$/;"	m	struct:s_diffdata
ha	src/xdiff/xprepare.c	/^	unsigned long ha;$/;"	m	struct:s_xdlclass	file:
ha	src/xdiff/xtypes.h	/^	unsigned long *ha;$/;"	m	struct:s_xdfile
ha	src/xdiff/xtypes.h	/^	unsigned long ha;$/;"	m	struct:s_xrecord
hack_index	tests/merge/workdir/dirty.c	/^static void hack_index(char *files[])$/;"	f	file:
halt	deps/regex/regex_internal.h	/^  unsigned int halt : 1;$/;"	m	struct:re_dfastate_t
handle	src/hash/hash_win32.h	/^	HANDLE \/* BCRYPT_ALG_HANDLE *\/ handle;$/;"	m	struct:hash_cng_prov
handle	src/hash/hash_win32.h	/^	HCRYPTPROV handle;$/;"	m	struct:hash_cryptoapi_prov
handle_at_syntax	src/revparse.c	/^static int handle_at_syntax(git_object **out, git_reference **ref, const char *spec, size_t identifier_len, git_repository* repo, const char *curly_braces_content)$/;"	f	file:
handle_caret_curly_syntax	src/revparse.c	/^static int handle_caret_curly_syntax(git_object **out, git_object *obj, const char *curly_braces_content)$/;"	f	file:
handle_caret_parent_syntax	src/revparse.c	/^static int handle_caret_parent_syntax(git_object **out, git_object *obj, int n)$/;"	f	file:
handle_colon_syntax	src/revparse.c	/^static int handle_colon_syntax($/;"	f	file:
handle_grep_syntax	src/revparse.c	/^static int handle_grep_syntax(git_object **out, git_repository *repo, const git_oid *spec_oid, const char *pattern)$/;"	f	file:
handle_linear_syntax	src/revparse.c	/^static int handle_linear_syntax(git_object **out, git_object *obj, int n)$/;"	f	file:
handle_matched_item	src/diff.c	/^static int handle_matched_item($/;"	f	file:
handle_unmatched_new_item	src/diff.c	/^static int handle_unmatched_new_item($/;"	f	file:
handle_unmatched_old_item	src/diff.c	/^static int handle_unmatched_old_item($/;"	f	file:
has_backref	deps/regex/regex_internal.h	/^  unsigned int has_backref : 1;$/;"	m	struct:re_dfastate_t
has_cache	src/pack.h	/^	unsigned pack_local:1, pack_keep:1, has_cache:1;$/;"	m	struct:git_pack_file
has_common	src/xdiff/xhistogram.c	/^		     has_common;$/;"	m	struct:histindex	file:
has_constraint	deps/regex/regex_internal.h	/^  unsigned int has_constraint : 1;$/;"	m	struct:re_dfastate_t
has_cr_in_index	src/crlf.c	/^static int has_cr_in_index(const git_filter_source *src)$/;"	f	file:
has_dir_name	src/index.c	/^static int has_dir_name(git_index *index,$/;"	f	file:
has_file_name	src/index.c	/^static int has_file_name(git_index *index,$/;"	f	file:
has_large_page_alloc	src/pool.h	/^	unsigned has_large_page_alloc : 1; \/* are any pages > page_size *\/$/;"	m	struct:__anon33
has_log	include/git2/sys/refdb_backend.h	/^	int (*has_log)(git_refdb_backend *backend, const char *refname);$/;"	m	struct:git_refdb_backend
has_matches	src/xdiff/xpatience.c	/^	unsigned long has_matches;$/;"	m	struct:hashmap	file:
has_mb_node	deps/regex/regex_internal.h	/^  unsigned int has_mb_node : 1;$/;"	m	struct:re_dfa_t
has_multi_item_alloc	src/pool.h	/^	unsigned has_multi_item_alloc : 1; \/* was items ever > 1 in malloc *\/$/;"	m	struct:__anon33
has_plural_match	deps/regex/regex_internal.h	/^  unsigned int has_plural_match : 1;$/;"	m	struct:re_dfa_t
has_reflog	src/refdb_fs.c	/^static int has_reflog(git_repository *repo, const char *name)$/;"	f	file:
has_regex	src/config.c	/^	int has_regex;$/;"	m	struct:__anon94	file:
has_string_alloc	src/pool.h	/^	unsigned has_string_alloc : 1; \/* was the strdup function used *\/$/;"	m	struct:__anon33
hash	deps/regex/regex_internal.h	/^  unsigned int hash;$/;"	m	struct:re_dfastate_t
hash	src/delta.c	/^	struct index_entry *hash[GIT_FLEX_ARRAY];$/;"	m	struct:git_delta_index	typeref:struct:git_delta_index::index_entry	file:
hash	src/indexer.c	/^	git_oid hash;$/;"	m	struct:git_indexer	file:
hash	src/pack-objects.h	/^	unsigned int hash; \/* name hint hash *\/$/;"	m	struct:git_pobject
hash	src/xdiff/xpatience.c	/^		unsigned long hash;$/;"	m	struct:hashmap::entry	file:
hash__block	src/hash/hash_generic.c	/^static void hash__block(git_hash_ctx *ctx, const unsigned int *data)$/;"	f	file:
hash_and_save	src/indexer.c	/^static int hash_and_save(git_indexer *idx, git_rawobj *obj, git_off_t entry_start)$/;"	f	file:
hash_bits	deps/zlib/deflate.h	/^    uInt  hash_bits;      \/* log2(hash_size) *\/$/;"	m	struct:internal_state
hash_cng_ctx	src/hash/hash_win32.h	/^struct hash_cng_ctx {$/;"	s
hash_cng_final	src/hash/hash_win32.c	/^GIT_INLINE(int) hash_cng_final(git_oid *out, git_hash_ctx *ctx)$/;"	f
hash_cng_init	src/hash/hash_win32.c	/^GIT_INLINE(int) hash_cng_init(git_hash_ctx *ctx)$/;"	f
hash_cng_prov	src/hash/hash_win32.h	/^struct hash_cng_prov {$/;"	s
hash_cng_prov_init	src/hash/hash_win32.c	/^GIT_INLINE(int) hash_cng_prov_init(void)$/;"	f
hash_cng_prov_shutdown	src/hash/hash_win32.c	/^GIT_INLINE(void) hash_cng_prov_shutdown(void)$/;"	f
hash_cng_update	src/hash/hash_win32.c	/^GIT_INLINE(int) hash_cng_update(git_hash_ctx *ctx, const void *data, size_t len)$/;"	f
hash_cryptoapi_ctx	src/hash/hash_win32.h	/^struct hash_cryptoapi_ctx {$/;"	s
hash_cryptoapi_final	src/hash/hash_win32.c	/^GIT_INLINE(int) hash_cryptoapi_final(git_oid *out, git_hash_ctx *ctx)$/;"	f
hash_cryptoapi_init	src/hash/hash_win32.c	/^GIT_INLINE(int) hash_cryptoapi_init(git_hash_ctx *ctx)$/;"	f
hash_cryptoapi_prov	src/hash/hash_win32.h	/^struct hash_cryptoapi_prov {$/;"	s
hash_cryptoapi_prov_init	src/hash/hash_win32.c	/^GIT_INLINE(int) hash_cryptoapi_prov_init()$/;"	f
hash_cryptoapi_prov_shutdown	src/hash/hash_win32.c	/^GIT_INLINE(void) hash_cryptoapi_prov_shutdown(void)$/;"	f
hash_cryptoapi_update	src/hash/hash_win32.c	/^GIT_INLINE(int) hash_cryptoapi_update(git_hash_ctx *ctx, const void *data, size_t len)$/;"	f
hash_ctx	include/git2/odb_backend.h	/^	void *hash_ctx;$/;"	m	struct:git_odb_stream
hash_ctx	src/indexer.c	/^	git_hash_ctx hash_ctx;$/;"	m	struct:git_indexer	file:
hash_ctx_cng_cleanup	src/hash/hash_win32.c	/^GIT_INLINE(void) hash_ctx_cng_cleanup(git_hash_ctx *ctx)$/;"	f
hash_ctx_cng_init	src/hash/hash_win32.c	/^GIT_INLINE(int) hash_ctx_cng_init(git_hash_ctx *ctx)$/;"	f
hash_ctx_cryptoapi_cleanup	src/hash/hash_win32.c	/^GIT_INLINE(void) hash_ctx_cryptoapi_cleanup(git_hash_ctx *ctx)$/;"	f
hash_ctx_cryptoapi_init	src/hash/hash_win32.c	/^GIT_INLINE(int) hash_ctx_cryptoapi_init(git_hash_ctx *ctx)$/;"	f
hash_data	src/hash/hash_win32.h	/^	hash_win32_cng_hash_data_fn hash_data;$/;"	m	struct:hash_cng_prov
hash_handle	src/hash/hash_win32.h	/^	HANDLE \/* BCRYPT_HASH_HANDLE *\/ hash_handle;$/;"	m	struct:hash_cng_ctx
hash_handle	src/hash/hash_win32.h	/^	HCRYPTHASH hash_handle;$/;"	m	struct:hash_cryptoapi_ctx
hash_header	src/indexer.c	/^static void hash_header(git_hash_ctx *ctx, git_off_t len, git_otype type)$/;"	f	file:
hash_header	src/odb.c	/^static void hash_header(git_hash_ctx *ctx, size_t size, git_otype type)$/;"	f	file:
hash_mask	deps/zlib/deflate.h	/^    uInt  hash_mask;      \/* hash_size-1 *\/$/;"	m	struct:internal_state
hash_mask	src/delta.c	/^	unsigned int hash_mask;$/;"	m	struct:git_delta_index	file:
hash_object	src/hash/hash_win32.h	/^	PBYTE hash_object;$/;"	m	struct:hash_cng_ctx
hash_object_fail	tests/object/raw/hash.c	/^static void hash_object_fail(git_oid *oid, git_rawobj *obj)$/;"	f	file:
hash_object_pass	tests/object/raw/hash.c	/^static void hash_object_pass(git_oid *oid, git_rawobj *obj)$/;"	f	file:
hash_object_size	src/hash/hash_win32.h	/^	DWORD hash_object_size;$/;"	m	struct:hash_cng_prov
hash_object_stream	src/indexer.c	/^static int hash_object_stream(git_indexer*idx, git_packfile_stream *stream)$/;"	f	file:
hash_partially	src/indexer.c	/^static void hash_partially(git_indexer *idx, const uint8_t *data, size_t size)$/;"	f	file:
hash_prov	src/hash/hash_win32.c	/^static struct git_hash_prov hash_prov = {0};$/;"	v	typeref:struct:git_hash_prov	file:
hash_shift	deps/zlib/deflate.h	/^    uInt  hash_shift;$/;"	m	struct:internal_state
hash_size	deps/zlib/deflate.h	/^    uInt  hash_size;      \/* number of elements in hash table *\/$/;"	m	struct:internal_state
hash_win32_cng_close_algorithm_provider_fn	src/hash/hash_win32.h	/^typedef NTSTATUS (WINAPI *hash_win32_cng_close_algorithm_provider_fn)($/;"	t
hash_win32_cng_create_hash_fn	src/hash/hash_win32.h	/^typedef NTSTATUS (WINAPI *hash_win32_cng_create_hash_fn)($/;"	t
hash_win32_cng_destroy_hash_fn	src/hash/hash_win32.h	/^typedef NTSTATUS (WINAPI *hash_win32_cng_destroy_hash_fn)($/;"	t
hash_win32_cng_finish_hash_fn	src/hash/hash_win32.h	/^typedef NTSTATUS (WINAPI *hash_win32_cng_finish_hash_fn)($/;"	t
hash_win32_cng_get_property_fn	src/hash/hash_win32.h	/^typedef NTSTATUS (WINAPI *hash_win32_cng_get_property_fn)($/;"	t
hash_win32_cng_hash_data_fn	src/hash/hash_win32.h	/^typedef NTSTATUS (WINAPI *hash_win32_cng_hash_data_fn)($/;"	t
hash_win32_cng_open_algorithm_provider_fn	src/hash/hash_win32.h	/^typedef NTSTATUS (WINAPI *hash_win32_cng_open_algorithm_provider_fn)($/;"	t
hash_win32_prov_type	src/hash/hash_win32.h	/^enum hash_win32_prov_type {$/;"	g
hashmap	src/xdiff/xpatience.c	/^struct hashmap {$/;"	s	file:
hashsig_add_hashes	src/hashsig.c	/^static int hashsig_add_hashes($/;"	f	file:
hashsig_alloc	src/hashsig.c	/^static git_hashsig *hashsig_alloc(git_hashsig_option_t opts)$/;"	f	file:
hashsig_cmp	src/hashsig.c	/^typedef int (*hashsig_cmp)(const void *a, const void *b, void *);$/;"	t	file:
hashsig_cmp_max	src/hashsig.c	/^static int hashsig_cmp_max(const void *a, const void *b, void *payload)$/;"	f	file:
hashsig_cmp_min	src/hashsig.c	/^static int hashsig_cmp_min(const void *a, const void *b, void *payload)$/;"	f	file:
hashsig_finalize_hashes	src/hashsig.c	/^static int hashsig_finalize_hashes(git_hashsig *sig)$/;"	f	file:
hashsig_heap	src/hashsig.c	/^} hashsig_heap;$/;"	t	typeref:struct:__anon100	file:
hashsig_heap_compare	src/hashsig.c	/^static int hashsig_heap_compare(const hashsig_heap *a, const hashsig_heap *b)$/;"	f	file:
hashsig_heap_down	src/hashsig.c	/^static void hashsig_heap_down(hashsig_heap *h, int el)$/;"	f	file:
hashsig_heap_init	src/hashsig.c	/^static void hashsig_heap_init(hashsig_heap *h, hashsig_cmp cmp)$/;"	f	file:
hashsig_heap_insert	src/hashsig.c	/^static void hashsig_heap_insert(hashsig_heap *h, hashsig_t val)$/;"	f	file:
hashsig_heap_sort	src/hashsig.c	/^static void hashsig_heap_sort(hashsig_heap *h)$/;"	f	file:
hashsig_heap_up	src/hashsig.c	/^static void hashsig_heap_up(hashsig_heap *h, int el)$/;"	f	file:
hashsig_in_progress	src/hashsig.c	/^} hashsig_in_progress;$/;"	t	typeref:struct:__anon101	file:
hashsig_in_progress_init	src/hashsig.c	/^static void hashsig_in_progress_init($/;"	f	file:
hashsig_state	src/hashsig.c	/^typedef uint64_t hashsig_state;$/;"	t	file:
hashsig_t	src/hashsig.c	/^typedef uint32_t hashsig_t;$/;"	t	file:
have	deps/zlib/inflate.h	/^    unsigned have;              \/* number of code lengths in lens[] *\/$/;"	m	struct:inflate_state
have_delta	src/indexer.c	/^		have_delta :1;$/;"	m	struct:git_indexer	file:
have_refs	src/transports/local.c	/^		have_refs : 1;$/;"	m	struct:__anon78	file:
have_refs	src/transports/smart.h	/^		have_refs : 1,$/;"	m	struct:__anon73
have_regex	src/config.c	/^	int have_regex;$/;"	m	struct:__anon96	file:
have_stream	src/indexer.c	/^		have_stream :1,$/;"	m	struct:git_indexer	file:
havedict	deps/zlib/inflate.h	/^    int havedict;               \/* true if dictionary provided *\/$/;"	m	struct:inflate_state
hbits	src/xdiff/xprepare.c	/^	unsigned int hbits;$/;"	m	struct:s_xdlclassifier	file:
hbits	src/xdiff/xtypes.h	/^	unsigned int hbits;$/;"	m	struct:s_xdfile
hcrc	deps/zlib/zlib.h	/^    int     hcrc;       \/* true if there was or will be a header crc *\/$/;"	m	struct:gz_header_s
hdr	src/indexer.c	/^	struct git_pack_header hdr;$/;"	m	struct:git_indexer	typeref:struct:git_indexer::git_pack_header	file:
hdr_entries	src/pack.h	/^	uint32_t hdr_entries;$/;"	m	struct:git_pack_header
hdr_signature	src/pack.h	/^	uint32_t hdr_signature;$/;"	m	struct:git_pack_header
hdr_sz	src/delta-apply.c	/^static int hdr_sz($/;"	f	file:
hdr_version	src/pack.h	/^	uint32_t hdr_version;$/;"	m	struct:git_pack_header
head	deps/zlib/deflate.h	/^    Posf *head; \/* Heads of the hash chains or NIL. *\/$/;"	m	struct:internal_state
head	deps/zlib/inflate.h	/^    gz_headerp head;            \/* where to save gzip header information *\/$/;"	m	struct:inflate_state
head	include/git2/merge.h	/^	git_merge_head *head);$/;"	v
head	src/iterator.c	/^	tree_iterator_frame *head, *root;$/;"	m	struct:__anon84	file:
head	src/transports/smart.h	/^	git_remote_head head;$/;"	m	struct:__anon65
head	src/xdiff/xtypes.h	/^	chanode_t *head, *tail;$/;"	m	struct:s_chastore
head	tests/commit/write.c	/^static git_reference *head, *branch;$/;"	v	file:
head2idx	src/status.h	/^	git_diff *head2idx;$/;"	m	struct:git_status_list
head_info	src/clone.c	/^struct head_info {$/;"	s	file:
head_oid	src/submodule.h	/^	git_oid head_oid;$/;"	m	struct:git_submodule
head_old	tests/commit/write.c	/^static char *head_old;$/;"	v	file:
head_to_index	include/git2/status.h	/^	git_diff_delta *head_to_index;$/;"	m	struct:__anon262
head_tracker_sym_ref_name	tests/refs/read.c	/^static const char *head_tracker_sym_ref_name = "HEAD_TRACKER";$/;"	v	file:
header	include/git2/diff.h	/^	char   header[128];   \/** Header text, NUL-byte terminated *\/$/;"	m	struct:git_diff_hunk
header	tests/commit/parse.c	/^	const char *header;$/;"	m	struct:__anon14	file:
header	tests/commit/parse.c	/^	const char *header;$/;"	m	struct:__anon15	file:
header	tests/commit/parse.c	/^	const char *header;$/;"	m	struct:__anon16	file:
header_len	include/git2/diff.h	/^	size_t header_len;    \/** Number of bytes in header text *\/$/;"	m	struct:git_diff_hunk
header_size	src/diff_patch.c	/^	size_t content_size, context_size, header_size;$/;"	m	struct:git_patch	file:
header_state	deps/http-parser/http_parser.h	/^  unsigned char header_state; \/* enum header_state from http_parser.c *\/$/;"	m	struct:http_parser
header_states	deps/http-parser/http_parser.c	/^enum header_states$/;"	g	file:
heads	src/transports/smart.h	/^	git_vector heads;$/;"	m	struct:__anon73
heap	deps/zlib/deflate.h	/^    int heap[2*L_CODES+1];      \/* heap used to build the Huffman trees *\/$/;"	m	struct:internal_state
heap_len	deps/zlib/deflate.h	/^    int heap_len;               \/* number of elements in the heap *\/$/;"	m	struct:internal_state
heap_max	deps/zlib/deflate.h	/^    int heap_max;               \/* element of largest frequency *\/$/;"	m	struct:internal_state
hello_id	tests/object/raw/hash.c	/^static char *hello_id = "22596363b3de40b06f981fb85d82312e8c0ed511";$/;"	v	file:
hello_text	tests/object/raw/hash.c	/^static char *hello_text = "hello world\\n";$/;"	v	file:
heur_min	src/xdiff/xdiffi.h	/^	long heur_min;$/;"	m	struct:s_xdalgoenv
hex2c	src/netops.c	664;"	d	file:
hide	examples/log.c	/^	int hide;$/;"	m	struct:log_state	file:
hide	src/revwalk.c	/^	int hide;$/;"	m	struct:push_cb_data	file:
high_water	deps/zlib/deflate.h	/^    ulg high_water;$/;"	m	struct:internal_state
histindex	src/xdiff/xhistogram.c	/^struct histindex {$/;"	s	file:
histogram_diff	src/xdiff/xhistogram.c	/^static int histogram_diff($/;"	f	file:
hold	deps/zlib/inflate.h	/^    unsigned long hold;         \/* input bit accumulator *\/$/;"	m	struct:inflate_state
home_values	tests/core/env.c	/^static char *home_values[] = {$/;"	v	file:
homing_search_cmp	src/tree.c	/^static int homing_search_cmp(const void *key, const void *array_member)$/;"	f	file:
host	src/netops.h	/^	char *host;$/;"	m	struct:gitno_connection_data
host	src/transports/smart.h	/^	char *host;$/;"	m	struct:git_pkt_cmd
host	tests/network/urlparse.c	/^static char *host, *port, *path, *user, *pass;$/;"	v	file:
hsize	src/xdiff/xprepare.c	/^	long hsize;$/;"	m	struct:s_xdlclassifier	file:
htonl	src/bswap.h	84;"	d
htonl	src/bswap.h	86;"	d
htons	src/bswap.h	93;"	d
htons	src/bswap.h	95;"	d
http_action	src/transports/http.c	/^static int http_action($/;"	f	file:
http_authmechanism_t	src/transports/http.c	/^} http_authmechanism_t;$/;"	t	typeref:enum:__anon79	file:
http_body_is_final	deps/http-parser/http_parser.c	/^http_body_is_final(const struct http_parser *parser) {$/;"	f
http_cb	deps/http-parser/http_parser.h	/^typedef int (*http_cb) (http_parser*);$/;"	t
http_close	src/transports/http.c	/^static int http_close(git_smart_subtransport *subtransport)$/;"	f	file:
http_connect	src/transports/http.c	/^static int http_connect(http_subtransport *t)$/;"	f	file:
http_data_cb	deps/http-parser/http_parser.h	/^typedef int (*http_data_cb) (http_parser*, const char *at, size_t length);$/;"	t
http_errno	deps/http-parser/http_parser.h	/^  unsigned char http_errno : 7;$/;"	m	struct:http_parser
http_errno	deps/http-parser/http_parser.h	/^enum http_errno {$/;"	g
http_errno_description	deps/http-parser/http_parser.c	/^http_errno_description(enum http_errno err) {$/;"	f
http_errno_name	deps/http-parser/http_parser.c	/^http_errno_name(enum http_errno err) {$/;"	f
http_free	src/transports/http.c	/^static void http_free(git_smart_subtransport *subtransport)$/;"	f	file:
http_host_state	deps/http-parser/http_parser.c	/^enum http_host_state$/;"	g	file:
http_major	deps/http-parser/http_parser.h	/^  unsigned short http_major;$/;"	m	struct:http_parser
http_message_needs_eof	deps/http-parser/http_parser.c	/^http_message_needs_eof (const http_parser *parser)$/;"	f
http_method	deps/http-parser/http_parser.h	/^enum http_method$/;"	g
http_method_str	deps/http-parser/http_parser.c	/^http_method_str (enum http_method m)$/;"	f
http_minor	deps/http-parser/http_parser.h	/^  unsigned short http_minor;$/;"	m	struct:http_parser
http_parse_host	deps/http-parser/http_parser.c	/^http_parse_host(const char * buf, struct http_parser_url *u, int found_at) {$/;"	f	file:
http_parse_host_char	deps/http-parser/http_parser.c	/^http_parse_host_char(enum http_host_state s, const char ch) {$/;"	f	file:
http_parser	deps/http-parser/http_parser.h	/^struct http_parser {$/;"	s
http_parser	deps/http-parser/http_parser.h	/^typedef struct http_parser http_parser;$/;"	t	typeref:struct:http_parser
http_parser_execute	deps/http-parser/http_parser.c	/^size_t http_parser_execute (http_parser *parser,$/;"	f
http_parser_h	deps/http-parser/http_parser.h	22;"	d
http_parser_init	deps/http-parser/http_parser.c	/^http_parser_init (http_parser *parser, enum http_parser_type t)$/;"	f
http_parser_parse_url	deps/http-parser/http_parser.c	/^http_parser_parse_url(const char *buf, size_t buflen, int is_connect,$/;"	f
http_parser_pause	deps/http-parser/http_parser.c	/^http_parser_pause(http_parser *parser, int paused) {$/;"	f
http_parser_settings	deps/http-parser/http_parser.h	/^struct http_parser_settings {$/;"	s
http_parser_settings	deps/http-parser/http_parser.h	/^typedef struct http_parser_settings http_parser_settings;$/;"	t	typeref:struct:http_parser_settings
http_parser_type	deps/http-parser/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	g
http_parser_url	deps/http-parser/http_parser.h	/^struct http_parser_url {$/;"	s
http_parser_url_fields	deps/http-parser/http_parser.h	/^enum http_parser_url_fields$/;"	g
http_receivepack	src/transports/http.c	/^static int http_receivepack($/;"	f	file:
http_receivepack_ls	src/transports/http.c	/^static int http_receivepack_ls($/;"	f	file:
http_should_keep_alive	deps/http-parser/http_parser.c	/^http_should_keep_alive (const http_parser *parser)$/;"	f
http_stream	src/transports/http.c	/^} http_stream;$/;"	t	typeref:struct:__anon80	file:
http_stream_alloc	src/transports/http.c	/^static int http_stream_alloc(http_subtransport *t,$/;"	f	file:
http_stream_free	src/transports/http.c	/^static void http_stream_free(git_smart_subtransport_stream *stream)$/;"	f	file:
http_stream_read	src/transports/http.c	/^static int http_stream_read($/;"	f	file:
http_stream_write_chunked	src/transports/http.c	/^static int http_stream_write_chunked($/;"	f	file:
http_stream_write_single	src/transports/http.c	/^static int http_stream_write_single($/;"	f	file:
http_strerror_tab	deps/http-parser/http_parser.c	/^} http_strerror_tab[] = {$/;"	v	typeref:struct:__anon197	file:
http_subtransport	src/transports/http.c	/^} http_subtransport;$/;"	t	typeref:struct:__anon81	file:
http_subtransport_definition	src/transport.c	/^static git_smart_subtransport_definition http_subtransport_definition = { git_smart_subtransport_http, 1 };$/;"	v	file:
http_uploadpack	src/transports/http.c	/^static int http_uploadpack($/;"	f	file:
http_uploadpack_ls	src/transports/http.c	/^static int http_uploadpack_ls($/;"	f	file:
hunk	src/diff_patch.c	/^	git_diff_hunk hunk;$/;"	m	struct:diff_patch_hunk	file:
hunk	src/diff_xdiff.c	/^	git_diff_hunk hunk;$/;"	m	struct:__anon51	file:
hunk_byfinalline_search_cmp	src/blame.c	/^static int hunk_byfinalline_search_cmp(const void *key, const void *entry)$/;"	f	file:
hunk_cb	src/diff_patch.h	/^	git_diff_hunk_cb hunk_cb;$/;"	m	struct:git_diff_output
hunk_cmp	src/blame.c	/^static int hunk_cmp(const void *_a, const void *_b)$/;"	f	file:
hunk_ends_at_or_before_line	src/blame.c	/^static bool hunk_ends_at_or_before_line(git_blame_hunk *hunk, size_t line)$/;"	f	file:
hunk_from_entry	src/blame.c	/^static git_blame_hunk* hunk_from_entry(git_blame__entry *e)$/;"	f	file:
hunk_is_bufferblame	src/blame.c	/^static bool hunk_is_bufferblame(git_blame_hunk *hunk)$/;"	f	file:
hunk_message	tests/blame/blame_helpers.c	/^void hunk_message(size_t idx, const git_blame_hunk *hunk, const char *fmt, ...)$/;"	f
hunk_new_lines	tests/diff/diff_helpers.h	/^	int hunk_new_lines;$/;"	m	struct:__anon8
hunk_old_lines	tests/diff/diff_helpers.h	/^	int hunk_old_lines;$/;"	m	struct:__anon8
hunk_starts_at_or_after_line	src/blame.c	/^static bool hunk_starts_at_or_after_line(git_blame_hunk *hunk, size_t line)$/;"	f	file:
hunks	src/blame.h	/^	git_vector hunks;$/;"	m	struct:git_blame
hunks	tests/diff/diff_helpers.h	/^	int hunks;$/;"	m	struct:__anon8
i	src/config.c	/^	size_t i;$/;"	m	struct:__anon94	file:
i	tests/merge/workdir/setup.c	/^	unsigned int i;$/;"	m	struct:merge_head_cb_data	file:
i	tests/resources/userdiff/after/file.php	/^        $i = 0;$/;"	v
i	tests/resources/userdiff/before/file.php	/^        $i = 0;$/;"	v
i	tests/resources/userdiff/files/file.php	/^        $i = 0;$/;"	v
i0	src/xdiff/xmerge.c	/^	long i0;$/;"	m	struct:s_xdmerge	file:
i1	src/xdiff/xdiffi.c	/^	long i1, i2;$/;"	m	struct:s_xdpsplit	file:
i1	src/xdiff/xdiffi.h	/^	long i1, i2;$/;"	m	struct:s_xdchange
i1	src/xdiff/xmerge.c	/^	long i1, i2;$/;"	m	struct:s_xdmerge	file:
i2	src/xdiff/xdiffi.c	/^	long i1, i2;$/;"	m	struct:s_xdpsplit	file:
i2	src/xdiff/xdiffi.h	/^	long i1, i2;$/;"	m	struct:s_xdchange
i2	src/xdiff/xmerge.c	/^	long i1, i2;$/;"	m	struct:s_xdmerge	file:
ic	tests/core/iconv.c	/^static git_path_iconv_t ic;$/;"	v	file:
icase	deps/regex/regex_internal.h	/^  unsigned char icase;$/;"	m	struct:re_string_t
icase_paths	tests/status/worktree.c	/^static const char *icase_paths[] = { "B", "c", "g", "H" };$/;"	v	file:
icase_statuses	tests/status/worktree.c	/^static unsigned int icase_statuses[] = {$/;"	v	file:
icurr	src/xdiff/xtypes.h	/^	long icurr;$/;"	m	struct:s_chanode
id	include/git2/diff.h	/^	git_oid     id;$/;"	m	struct:__anon266
id	include/git2/index.h	/^	git_oid id;$/;"	m	struct:git_index_entry
id	include/git2/oid.h	/^	unsigned char id[GIT_OID_RAWSZ];$/;"	m	struct:git_oid
id	include/git2/oid.h	/^GIT_EXTERN(char *) git_oid_allocfmt(const git_oid *id);$/;"	v
id	include/git2/oid.h	/^GIT_EXTERN(int) git_oid_iszero(const git_oid *id);$/;"	v
id	src/notes.h	/^	git_oid id;$/;"	m	struct:git_note
id	src/pack-objects.h	/^	git_oid id;$/;"	m	struct:git_pobject
id	tests/core/oid.c	/^static git_oid id;$/;"	v	file:
id	tests/object/raw/write.c	/^    char *id;     \/* object id (sha1)                          *\/$/;"	m	struct:object_data	file:
id	tests/odb/loose_data.h	/^    char          *id;     \/* object id (sha1)                          *\/$/;"	m	struct:object_data
id_abbrev	include/git2/diff.h	/^	uint16_t    id_abbrev;       \/**< default 'core.abbrev' or 7 if unset *\/$/;"	m	struct:__anon268
ident_apply	src/ident.c	/^static int ident_apply($/;"	f	file:
ident_find_id	src/ident.c	/^static int ident_find_id($/;"	f	file:
ident_insert_id	src/ident.c	/^static int ident_insert_id($/;"	f	file:
ident_remove_id	src/ident.c	/^static int ident_remove_id($/;"	f	file:
idm	tests/core/oid.c	/^static git_oid idm;$/;"	v	file:
idp	tests/core/oid.c	/^static git_oid idp;$/;"	v	file:
idx	deps/regex/regex_internal.h	/^    int idx;			\/* for BACK_REF *\/$/;"	m	union:__anon184::__anon185
idx	deps/regex/regex_internal.h	/^  int idx;$/;"	m	struct:re_fail_stack_ent_t
idx	include/git2/indexer.h	/^GIT_EXTERN(const git_oid *) git_indexer_hash(const git_indexer *idx);$/;"	v
idx	include/git2/indexer.h	/^GIT_EXTERN(void) git_indexer_free(git_indexer *idx);$/;"	v
idx	src/diff_tform.c	/^	size_t   idx;$/;"	m	struct:__anon116	file:
idx	src/diff_tform.c	/^	size_t idx;$/;"	m	struct:__anon115	file:
idx	src/xdiff/xprepare.c	/^	long idx;$/;"	m	struct:s_xdlclass	file:
idx	tests/diff/rename.c	/^	size_t idx;$/;"	m	struct:rename_expected	file:
idx	tests/fetchhead/nonetwork.c	/^	size_t idx;$/;"	m	struct:__anon4	file:
idx2wd	src/status.h	/^	git_diff *idx2wd;$/;"	m	struct:git_status_list
idx_cache	src/pack.h	/^	git_oidmap *idx_cache;$/;"	m	struct:git_pack_file
idx_signature	src/pack.h	/^	uint32_t idx_signature;$/;"	m	struct:git_pack_idx_header
idx_version	src/pack.h	/^	uint32_t idx_version;$/;"	m	struct:git_pack_idx_header
ign_global	src/ignore.h	/^	git_vector ign_global;$/;"	m	struct:__anon174
ign_internal	src/ignore.h	/^	git_attr_file *ign_internal;$/;"	m	struct:__anon174
ign_path	src/ignore.h	/^	git_vector ign_path;$/;"	m	struct:__anon174
ignore	src/submodule.h	/^	git_submodule_ignore_t ignore;$/;"	m	struct:git_submodule
ignore_case	src/ignore.h	/^	int ignore_case;$/;"	m	struct:__anon174
ignore_case	src/index.h	/^	unsigned int ignore_case:1;$/;"	m	struct:git_index
ignore_cert_errors	include/git2/clone.h	/^	int ignore_cert_errors;$/;"	m	struct:git_clone_options
ignore_ch	src/hashsig.c	/^	uint8_t ignore_ch[256];$/;"	m	struct:__anon101	file:
ignore_default	src/submodule.h	/^	git_submodule_ignore_t ignore_default;$/;"	m	struct:git_submodule
ignore_lookup_in_rules	src/ignore.c	/^static bool ignore_lookup_in_rules($/;"	f	file:
ignore_prefix	src/diff.c	/^	git_buf ignore_prefix;$/;"	m	struct:__anon34	file:
ignore_submodules	include/git2/diff.h	/^	git_submodule_ignore_t ignore_submodules; \/**< submodule ignore rule *\/$/;"	m	struct:__anon268
ignored	tests/checkout/typechange.c	/^	int ignored;$/;"	m	struct:__anon5	file:
ignores	src/iterator.c	/^	git_ignores ignores;$/;"	m	struct:__anon86	file:
ignores	tests/index/addall.c	/^	size_t ignores;$/;"	m	struct:__anon7	file:
imaxabs	include/git2/inttypes.h	273;"	d
imaxdiv	include/git2/inttypes.h	/^imaxdiv_t __cdecl imaxdiv(intmax_t numer, intmax_t denom)$/;"	f
imaxdiv_t	include/git2/inttypes.h	/^} imaxdiv_t;$/;"	t	typeref:struct:__anon221
in	src/zstream.h	/^	const char *in;$/;"	m	struct:__anon173
in_degree	src/commit_list.h	/^	unsigned short in_degree;$/;"	m	struct:git_commit_list_node
in_func	deps/zlib/zlib.h	/^typedef unsigned (*in_func) OF((void FAR *, unsigned char FAR * FAR *));$/;"	t
in_len	src/zstream.h	/^	size_t in_len;$/;"	m	struct:__anon173
inbuf	src/indexer.c	/^	char inbuf[GIT_OID_RAWSZ];$/;"	m	struct:git_indexer	file:
inbuf_len	src/indexer.c	/^	size_t inbuf_len;$/;"	m	struct:git_indexer	file:
include_changed	src/stash.c	/^	bool include_changed;$/;"	m	struct:stash_update_rules	file:
include_ignored	src/stash.c	/^	bool include_ignored;$/;"	m	struct:stash_update_rules	file:
include_tag	src/transports/smart.h	/^		include_tag:1,$/;"	m	struct:transport_smart_caps
include_untracked	src/stash.c	/^	bool include_untracked;$/;"	m	struct:stash_update_rules	file:
included	src/config_file.c	/^	int included; \/* whether this is part of [include] *\/$/;"	m	struct:cvar_t	file:
included_path	src/config_file.c	/^static int included_path(git_buf *out, const char *dir, const char *path)$/;"	f	file:
index	deps/http-parser/http_parser.h	/^  unsigned char index;        \/* index into current matcher *\/$/;"	m	struct:http_parser
index	include/git2/index.h	/^GIT_EXTERN(const char *) git_index_path(git_index *index);$/;"	v
index	include/git2/index.h	/^GIT_EXTERN(git_repository *) git_index_owner(const git_index *index);$/;"	v
index	include/git2/index.h	/^GIT_EXTERN(int) git_index_caps(const git_index *index);$/;"	v
index	include/git2/index.h	/^GIT_EXTERN(int) git_index_has_conflicts(const git_index *index);$/;"	v
index	include/git2/index.h	/^GIT_EXTERN(int) git_index_write(git_index *index);$/;"	v
index	include/git2/index.h	/^GIT_EXTERN(size_t) git_index_entrycount(const git_index *index);$/;"	v
index	include/git2/index.h	/^GIT_EXTERN(void) git_index_clear(git_index *index);$/;"	v
index	include/git2/index.h	/^GIT_EXTERN(void) git_index_conflict_cleanup(git_index *index);$/;"	v
index	include/git2/index.h	/^GIT_EXTERN(void) git_index_free(git_index *index);$/;"	v
index	include/git2/sys/index.h	/^GIT_EXTERN(unsigned int) git_index_name_entrycount(git_index *index);$/;"	v
index	include/git2/sys/index.h	/^GIT_EXTERN(unsigned int) git_index_reuc_entrycount(git_index *index);$/;"	v
index	include/git2/sys/index.h	/^GIT_EXTERN(void) git_index_name_clear(git_index *index);$/;"	v
index	include/git2/sys/index.h	/^GIT_EXTERN(void) git_index_reuc_clear(git_index *index);$/;"	v
index	src/attr.c	/^	git_index *index;$/;"	m	struct:__anon176	file:
index	src/checkout.c	/^	git_index *index;$/;"	m	struct:__anon121	file:
index	src/index.h	/^	git_index *index;$/;"	m	struct:git_index_conflict_iterator
index	src/iterator.c	/^	git_index *index;$/;"	m	struct:__anon85	file:
index	src/iterator.c	/^	size_t index;$/;"	m	struct:fs_iterator_frame	file:
index	src/merge.h	/^	git_index *index;$/;"	m	struct:git_merge_result
index	src/pack-objects.c	/^	struct git_delta_index *index;$/;"	m	struct:unpacked	typeref:struct:unpacked::git_delta_index	file:
index	tests/index/tests.c	/^   size_t index;$/;"	m	struct:test_entry	file:
index_adds	tests/index/addall.c	/^	size_t index_adds;$/;"	m	struct:__anon7	file:
index_apply_to_all	src/index.c	/^static int index_apply_to_all($/;"	f	file:
index_blob_lines	src/blame.c	/^static int index_blob_lines(git_blame *blame)$/;"	f	file:
index_cb	examples/network/index-pack.c	/^static int index_cb(const git_transfer_progress *stats, void *data)$/;"	f	file:
index_cmp	src/index.c	/^static int index_cmp(const void *a, const void *b)$/;"	f	file:
index_cmp_path	src/index.c	/^static int index_cmp_path(const void *a, const void *b)$/;"	f	file:
index_conflict__get_byindex	src/index.c	/^static int index_conflict__get_byindex($/;"	f	file:
index_conflict_data_eq_merge_diff	tests/merge/merge_helpers.c	/^static int index_conflict_data_eq_merge_diff(const struct merge_index_conflict_data *expected, git_merge_diff *actual)$/;"	f	file:
index_conflict_to_reuc	src/index.c	/^static int index_conflict_to_reuc(git_index *index, const char *path)$/;"	f	file:
index_conflicts_match	src/index.c	/^static int index_conflicts_match(const git_vector *v, size_t idx)$/;"	f	file:
index_create_mode	src/index.c	/^static unsigned int index_create_mode(unsigned int mode)$/;"	f	file:
index_dels	tests/index/addall.c	/^	size_t index_dels;$/;"	m	struct:__anon7	file:
index_delta2status	src/status.c	/^static unsigned int index_delta2status(const git_diff_delta *head2idx)$/;"	f	file:
index_entries_free	src/index.c	/^static void index_entries_free(git_vector *entries)$/;"	f	file:
index_entry	src/delta.c	/^struct index_entry {$/;"	s	file:
index_entry_cmp	src/merge.c	/^GIT_INLINE(int) index_entry_cmp(const git_index_entry *a, const git_index_entry *b)$/;"	f
index_entry_count	tests/index/tests.c	/^static const size_t index_entry_count = 109;$/;"	v	file:
index_entry_count_2	tests/index/tests.c	/^static const size_t index_entry_count_2 = 1437;$/;"	v	file:
index_entry_dup	src/index.c	/^static git_index_entry *index_entry_dup(const git_index_entry *source_entry)$/;"	f	file:
index_entry_dup	src/merge.c	/^GIT_INLINE(int) index_entry_dup($/;"	f
index_entry_eq_merge_index_entry	tests/merge/merge_helpers.c	/^static int index_entry_eq_merge_index_entry(const struct merge_index_entry *expected, const git_index_entry *actual)$/;"	f	file:
index_entry_free	src/index.c	/^static void index_entry_free(git_index_entry *entry)$/;"	f	file:
index_entry_init	src/index.c	/^static int index_entry_init($/;"	f	file:
index_entry_init	tests/reset/hard.c	/^static void index_entry_init(git_index *index, int side, git_oid *oid)$/;"	f	file:
index_entry_reuc_free	src/index.c	/^static void index_entry_reuc_free(git_index_reuc_entry *reuc)$/;"	f	file:
index_entry_reuc_init	src/index.c	/^static int index_entry_reuc_init(git_index_reuc_entry **reuc_out,$/;"	f	file:
index_entry_similarity_calc	src/merge.c	/^static int index_entry_similarity_calc($/;"	f	file:
index_entry_similarity_exact	src/merge.c	/^static int index_entry_similarity_exact($/;"	f	file:
index_entry_similarity_inexact	src/merge.c	/^static int index_entry_similarity_inexact($/;"	f	file:
index_error_invalid	src/index.c	/^static int index_error_invalid(const char *message)$/;"	f	file:
index_extension	src/index.c	/^struct index_extension {$/;"	s	file:
index_file_path	src/index.h	/^	char *index_file_path;$/;"	m	struct:git_index
index_free	src/index.c	/^static void index_free(git_index *index)$/;"	f	file:
index_from_diff_list	src/merge.c	/^int index_from_diff_list(git_index **out, git_merge_diff_list *diff_list)$/;"	f
index_header	src/index.c	/^struct index_header {$/;"	s	file:
index_icmp	src/index.c	/^static int index_icmp(const void *a, const void *b)$/;"	f	file:
index_icmp_path	src/index.c	/^static int index_icmp_path(const void *a, const void *b)$/;"	f	file:
index_insert	src/index.c	/^static int index_insert(git_index *index, git_index_entry *entry, int replace)$/;"	f	file:
index_isrch	src/index.c	/^static int index_isrch(const void *key, const void *array_member)$/;"	f	file:
index_isrch_path	src/index.c	/^static int index_isrch_path(const void *path, const void *array_member)$/;"	f	file:
index_iterator	src/iterator.c	/^} index_iterator;$/;"	t	typeref:struct:__anon85	file:
index_iterator__advance	src/iterator.c	/^static int index_iterator__advance($/;"	f	file:
index_iterator__advance_into	src/iterator.c	/^static int index_iterator__advance_into($/;"	f	file:
index_iterator__at_end	src/iterator.c	/^static int index_iterator__at_end(git_iterator *self)$/;"	f	file:
index_iterator__at_tree	src/iterator.c	722;"	d	file:
index_iterator__current	src/iterator.c	/^static int index_iterator__current($/;"	f	file:
index_iterator__first_prefix_tree	src/iterator.c	/^static int index_iterator__first_prefix_tree(index_iterator *ii)$/;"	f	file:
index_iterator__free	src/iterator.c	/^static void index_iterator__free(git_iterator *self)$/;"	f	file:
index_iterator__index_entry	src/iterator.c	/^static const git_index_entry *index_iterator__index_entry(index_iterator *ii)$/;"	f	file:
index_iterator__next_prefix_tree	src/iterator.c	/^static void index_iterator__next_prefix_tree(index_iterator *ii)$/;"	f	file:
index_iterator__reset	src/iterator.c	/^static int index_iterator__reset($/;"	f	file:
index_iterator__seek	src/iterator.c	/^static int index_iterator__seek(git_iterator *self, const char *prefix)$/;"	f	file:
index_iterator__skip_conflicts	src/iterator.c	/^static const git_index_entry *index_iterator__skip_conflicts(index_iterator *ii)$/;"	f	file:
index_iterator_test	tests/diff/iterator.c	/^static void index_iterator_test($/;"	f	file:
index_map	src/pack.h	/^	git_map index_map;$/;"	m	struct:git_pack_file
index_merge_mode	src/index.c	/^static unsigned int index_merge_mode($/;"	f	file:
index_mods	tests/index/addall.c	/^	size_t index_mods;$/;"	m	struct:__anon7	file:
index_oid	src/submodule.h	/^	git_oid index_oid;$/;"	m	struct:git_submodule
index_pack	examples/network/index-pack.c	/^int index_pack(git_repository *repo, int argc, char **argv)$/;"	f
index_path	src/indexer.c	/^static int index_path(git_buf *path, git_indexer *idx, const char *suffix)$/;"	f	file:
index_reuc_insert	src/index.c	/^static int index_reuc_insert($/;"	f	file:
index_srch	src/index.c	/^static int index_srch(const void *key, const void *array_member)$/;"	f	file:
index_srch_path	src/index.c	/^static int index_srch_path(const void *path, const void *array_member)$/;"	f	file:
index_status_cb	tests/index/addall.c	/^static int index_status_cb($/;"	f	file:
index_status_counts	tests/index/addall.c	/^} index_status_counts;$/;"	t	typeref:struct:__anon7	file:
index_to_workdir	include/git2/status.h	/^	git_diff_delta *index_to_workdir;$/;"	m	struct:__anon262
index_version	src/pack.h	/^	int index_version;$/;"	m	struct:git_pack_file
indexed_deltas	include/git2/types.h	/^	unsigned int indexed_deltas;$/;"	m	struct:git_transfer_progress
indexed_objects	include/git2/types.h	/^	unsigned int indexed_objects;$/;"	m	struct:git_transfer_progress
indexer	src/odb_pack.c	/^	git_indexer *indexer;$/;"	m	struct:pack_writepack	file:
indexer	src/pack-objects.c	/^	git_indexer *indexer;$/;"	m	struct:pack_write_context	file:
inflate	deps/zlib/inflate.c	/^int ZEXPORT inflate(strm, flush)$/;"	f
inflateBackInit	deps/zlib/zlib.h	1555;"	d
inflateCopy	deps/zlib/inflate.c	/^int ZEXPORT inflateCopy(dest, source)$/;"	f
inflateEnd	deps/zlib/inflate.c	/^int ZEXPORT inflateEnd(strm)$/;"	f
inflateGetHeader	deps/zlib/inflate.c	/^int ZEXPORT inflateGetHeader(strm, head)$/;"	f
inflateInit	deps/zlib/zlib.h	1548;"	d
inflateInit2	deps/zlib/zlib.h	1553;"	d
inflateInit2_	deps/zlib/inflate.c	/^int ZEXPORT inflateInit2_(strm, windowBits, version, stream_size)$/;"	f
inflateInit_	deps/zlib/inflate.c	/^int ZEXPORT inflateInit_(strm, version, stream_size)$/;"	f
inflateMark	deps/zlib/inflate.c	/^long ZEXPORT inflateMark(strm)$/;"	f
inflatePrime	deps/zlib/inflate.c	/^int ZEXPORT inflatePrime(strm, bits, value)$/;"	f
inflateReset	deps/zlib/inflate.c	/^int ZEXPORT inflateReset(strm)$/;"	f
inflateReset2	deps/zlib/inflate.c	/^int ZEXPORT inflateReset2(strm, windowBits)$/;"	f
inflateSetDictionary	deps/zlib/inflate.c	/^int ZEXPORT inflateSetDictionary(strm, dictionary, dictLength)$/;"	f
inflateSync	deps/zlib/inflate.c	/^int ZEXPORT inflateSync(strm)$/;"	f
inflateSyncPoint	deps/zlib/inflate.c	/^int ZEXPORT inflateSyncPoint(strm)$/;"	f
inflateUndermine	deps/zlib/inflate.c	/^int ZEXPORT inflateUndermine(strm, subvert)$/;"	f
inflate_buffer	src/odb_loose.c	/^static int inflate_buffer(void *in, size_t inlen, void *out, size_t outlen)$/;"	f	file:
inflate_copyright	deps/zlib/inftrees.c	/^const char inflate_copyright[] =$/;"	v
inflate_disk_obj	src/odb_loose.c	/^static int inflate_disk_obj(git_rawobj *out, git_buf *obj)$/;"	f	file:
inflate_fast	deps/zlib/inffast.c	/^void ZLIB_INTERNAL inflate_fast(strm, start)$/;"	f
inflate_mode	deps/zlib/inflate.h	/^} inflate_mode;$/;"	t	typeref:enum:__anon198
inflate_packlike_loose_disk_obj	src/odb_loose.c	/^static int inflate_packlike_loose_disk_obj(git_rawobj *out, git_buf *obj)$/;"	f	file:
inflate_state	deps/zlib/inflate.h	/^struct inflate_state {$/;"	s
inflate_table	deps/zlib/inftrees.c	/^int ZLIB_INTERNAL inflate_table(type, lens, codes, table, bits, work)$/;"	f
inflate_tail	src/odb_loose.c	/^static void *inflate_tail(z_stream *s, void *hb, size_t used, obj_hdr *hdr)$/;"	f	file:
init_array	examples/add.c	/^void init_array(git_strarray *array, int argc, char **argv)$/;"	f
init_block	deps/zlib/trees.c	/^local void init_block(s)$/;"	f
init_dfa	deps/regex/regcomp.c	/^init_dfa (re_dfa_t *dfa, size_t pat_len)$/;"	f	file:
init_error	src/global.c	/^int init_error = 0;$/;"	v
init_fake_wstream	src/odb.c	/^static int init_fake_wstream(git_odb_stream **stream_p, git_odb_backend *backend, size_t size, git_otype type)$/;"	f	file:
init_filter	src/win32/dir.c	/^static int init_filter(char *filter, size_t n, const char *dir)$/;"	f	file:
init_linked_repo	tests/odb/alternates.c	/^static void init_linked_repo(const char *path, const char *alternate)$/;"	f	file:
init_node	deps/regex/regex_internal.h	/^  int init_node;$/;"	m	struct:re_dfa_t
init_once	src/global.c	/^static void init_once(void)$/;"	f	file:
init_one_submodule	tests/submodule/modify.c	/^static int init_one_submodule($/;"	f	file:
init_state	deps/regex/regex_internal.h	/^  re_dfastate_t *init_state;$/;"	m	struct:re_dfa_t
init_state_begbuf	deps/regex/regex_internal.h	/^  re_dfastate_t *init_state_begbuf;$/;"	m	struct:re_dfa_t
init_state_nl	deps/regex/regex_internal.h	/^  re_dfastate_t *init_state_nl;$/;"	m	struct:re_dfa_t
init_state_word	deps/regex/regex_internal.h	/^  re_dfastate_t *init_state_word;$/;"	m	struct:re_dfa_t
init_stream	src/odb_loose.c	/^static void init_stream(z_stream *s, void *out, size_t len)$/;"	f	file:
init_word_char	deps/regex/regcomp.c	/^init_word_char (re_dfa_t *dfa)$/;"	f	file:
initial_commit	examples/init.c	/^	int initial_commit;$/;"	m	struct:opts	file:
initial_head	include/git2/repository.h	/^	const char *initial_head;$/;"	m	struct:__anon212
initialize	include/git2/sys/filter.h	/^	git_filter_init_fn     initialize;$/;"	m	struct:git_filter
initialize	tests/clar.c	/^	struct clar_func initialize;$/;"	m	struct:clar_suite	typeref:struct:clar_suite::clar_func	file:
initialize	tests/reset/default.c	/^static void initialize(const char *repo_name)$/;"	f	file:
initialized	src/attrcache.h	/^	int initialized;$/;"	m	struct:__anon92
initialized	src/filter.c	/^	int initialized;$/;"	m	struct:__anon88	file:
inject_object	src/indexer.c	/^static int inject_object(git_indexer *idx, git_oid *id)$/;"	f	file:
inline	deps/regex/regex_internal.h	135;"	d
inline	deps/regex/regex_internal.h	137;"	d
ino	include/git2/index.h	/^	unsigned int ino;$/;"	m	struct:git_index_entry
ino	src/fileops.h	/^	unsigned int ino;$/;"	m	struct:__anon47
ino	src/index.c	/^	uint32_t ino;$/;"	m	struct:entry_long	file:
ino	src/index.c	/^	uint32_t ino;$/;"	m	struct:entry_short	file:
input	deps/regex/regex_internal.h	/^  re_string_t input;$/;"	m	struct:__anon189
ins_h	deps/zlib/deflate.h	/^    uInt  ins_h;          \/* hash index of string to be inserted *\/$/;"	m	struct:internal_state
insert_delete_side_of_split	src/diff_tform.c	/^static int insert_delete_side_of_split($/;"	f	file:
insert_note_in_tree_eexists_cb	src/notes.c	/^static int insert_note_in_tree_eexists_cb(git_tree **out,$/;"	f	file:
insert_note_in_tree_enotfound_cb	src/notes.c	/^static int insert_note_in_tree_enotfound_cb(git_tree **out,$/;"	f	file:
insert_record	src/xdiff/xpatience.c	/^static void insert_record(int line, struct hashmap *map, int pass)$/;"	f	file:
insert_sequential_oids	tests/object/raw/short.c	/^static int insert_sequential_oids($/;"	f	file:
insert_strings	tests/core/strmap.c	/^static void insert_strings(git_strmap *table, int count)$/;"	f	file:
int16_t	deps/http-parser/http_parser.h	/^typedef __int16 int16_t;$/;"	t
int16_t	include/git2/stdint.h	/^   typedef signed __int16    int16_t;$/;"	t
int16_t	include/git2/stdint.h	/^   typedef signed short      int16_t;$/;"	t
int32_t	deps/http-parser/http_parser.h	/^typedef __int32 int32_t;$/;"	t
int32_t	include/git2/stdint.h	/^   typedef signed __int32    int32_t;$/;"	t
int32_t	include/git2/stdint.h	/^   typedef signed int        int32_t;$/;"	t
int64_t	deps/http-parser/http_parser.h	/^typedef __int64 int64_t;$/;"	t
int64_t	include/git2/stdint.h	/^typedef signed __int64       int64_t;$/;"	t
int8_t	deps/http-parser/http_parser.h	/^typedef __int8 int8_t;$/;"	t
int8_t	include/git2/stdint.h	/^   typedef signed __int8     int8_t;$/;"	t
int8_t	include/git2/stdint.h	/^   typedef signed char       int8_t;$/;"	t
int_fast16_t	include/git2/stdint.h	/^typedef int16_t   int_fast16_t;$/;"	t
int_fast32_t	include/git2/stdint.h	/^typedef int32_t   int_fast32_t;$/;"	t
int_fast64_t	include/git2/stdint.h	/^typedef int64_t   int_fast64_t;$/;"	t
int_fast8_t	include/git2/stdint.h	/^typedef int8_t    int_fast8_t;$/;"	t
int_least16_t	include/git2/stdint.h	/^typedef int16_t   int_least16_t;$/;"	t
int_least32_t	include/git2/stdint.h	/^typedef int32_t   int_least32_t;$/;"	t
int_least64_t	include/git2/stdint.h	/^typedef int64_t   int_least64_t;$/;"	t
int_least8_t	include/git2/stdint.h	/^typedef int8_t    int_least8_t;$/;"	t
interesting	src/graph.c	/^static int interesting(git_pqueue *list, git_commit_list *roots)$/;"	f	file:
interesting	src/merge.c	/^static int interesting(git_pqueue *list)$/;"	f	file:
interhunk_lines	include/git2/diff.h	/^	uint16_t    interhunk_lines;  \/**< defaults to 0 *\/$/;"	m	struct:__anon268
interhunkctxlen	src/xdiff/xdiff.h	/^	long interhunkctxlen;$/;"	m	struct:s_xdemitconf
internal_function	deps/regex/regex_internal.h	426;"	d
internal_function	deps/regex/regex_internal.h	428;"	d
internal_state	deps/zlib/deflate.h	/^typedef struct internal_state {$/;"	s
internal_state	deps/zlib/zlib.h	/^    struct internal_state {int dummy;};$/;"	s
internal_state	deps/zlib/zutil.c	/^struct internal_state      {int dummy;}; \/* for buggy compilers *\/$/;"	s	file:
interrupt_cb	tests/refs/foreachglob.c	/^static int interrupt_cb(const char *reference_name, void *payload)$/;"	f	file:
intf	deps/zlib/zconf.h	/^typedef int   FAR intf;$/;"	t
intmax_t	include/git2/stdint.h	/^typedef int64_t   intmax_t;$/;"	t
intptr_t	include/git2/stdint.h	/^   typedef _W64 signed int   intptr_t;$/;"	t
intptr_t	include/git2/stdint.h	/^   typedef signed __int64    intptr_t;$/;"	t
inuse_cnt	src/mwindow.h	/^	size_t inuse_cnt;$/;"	m	struct:git_mwindow
inveclosure	deps/regex/regex_internal.h	/^  re_node_set inveclosure;$/;"	m	struct:re_dfastate_t
inveclosures	deps/regex/regex_internal.h	/^  re_node_set *inveclosures;$/;"	m	struct:re_dfa_t
invokes	tests/stash/foreach.c	/^	int invokes;$/;"	m	struct:callback_data	file:
is_all_caps_and_underscore	src/refs.c	/^static bool is_all_caps_and_underscore(const char *name, size_t len)$/;"	f	file:
is_alternate	src/odb.c	/^	bool is_alternate;$/;"	m	struct:__anon117	file:
is_bare	src/repository.h	/^	unsigned is_bare:1;$/;"	m	struct:git_repository
is_blank	deps/regex/regex_internal.h	/^is_blank (int c)$/;"	f
is_boundary	src/blame.h	/^	bool is_boundary;$/;"	m	struct:git_blame__entry
is_chmod_supported	src/repository.c	/^static bool is_chmod_supported(const char *file_path)$/;"	f	file:
is_connected	include/git2/transport.h	/^	int (*is_connected)(git_transport *transport);$/;"	m	struct:git_transport
is_date	src/date.c	/^static int is_date(int year, int month, int day, struct tm *now_tm, time_t now, struct tm *tm)$/;"	f	file:
is_dir	src/attr_file.h	/^	int      is_dir;$/;"	m	struct:__anon135
is_dirty_cb	src/stash.c	/^static int is_dirty_cb(const char *path, unsigned int status, void *payload)$/;"	f	file:
is_fastforward	src/merge.h	/^	bool is_fastforward;$/;"	m	struct:git_merge_result
is_filesystem_case_insensitive	src/repository.c	/^static bool is_filesystem_case_insensitive(const char *gitdir_path)$/;"	f	file:
is_ignored	src/iterator.c	/^	int is_ignored;$/;"	m	struct:__anon86	file:
is_index_extended	src/index.c	/^static bool is_index_extended(git_index *index)$/;"	f	file:
is_integer	examples/common.c	/^int is_integer(int *out, const char *str, int allow_negative)$/;"	f
is_merge	src/fetchhead.h	/^	unsigned int is_merge;$/;"	m	struct:git_fetchhead_ref
is_multiline_var	src/config_file.c	/^static int is_multiline_var(const char *str)$/;"	f	file:
is_prefixed	examples/common.c	/^size_t is_prefixed(const char *str, const char *pfx)$/;"	f
is_rename_source	src/diff_tform.c	/^static bool is_rename_source($/;"	f	file:
is_rename_target	src/diff_tform.c	/^static bool is_rename_target($/;"	f	file:
is_uptodate	src/merge.h	/^	bool is_uptodate;$/;"	m	struct:git_merge_result
is_utf8	deps/regex/regex_internal.h	/^  unsigned char is_utf8;$/;"	m	struct:re_string_t
is_utf8	deps/regex/regex_internal.h	/^  unsigned int is_utf8 : 1;$/;"	m	struct:re_dfa_t
is_valid_ref_char	src/refs.c	/^static int is_valid_ref_char(char ch)$/;"	f	file:
is_valid_tmp_path	tests/clar/sandbox.h	/^is_valid_tmp_path(const char *path)$/;"	f
is_zlib_compressed_data	src/odb_loose.c	/^static int is_zlib_compressed_data(unsigned char *data)$/;"	f	file:
isblank	deps/regex/regex_internal.h	70;"	d
isize	src/xdiff/xtypes.h	/^	long isize, nsize;$/;"	m	struct:s_chastore
it	include/git2/notes.h	/^GIT_EXTERN(void) git_note_iterator_free(git_note_iterator *it);$/;"	v
item	src/commit_list.h	/^	git_commit_list_node *item;$/;"	m	struct:git_commit_list
item_path_offset	src/sortedcache.h	/^	size_t       item_path_offset;$/;"	m	struct:__anon158
item_size	src/pool.h	/^	uint32_t item_size;  \/* size of single alloc unit in bytes *\/$/;"	m	struct:__anon33
items	src/pool.h	/^	uint32_t items;$/;"	m	struct:__anon33
items	src/sortedcache.h	/^	git_vector   items;$/;"	m	struct:__anon158
iter	include/git2/branch.h	/^GIT_EXTERN(void) git_branch_iterator_free(git_branch_iterator *iter);$/;"	v
iter	include/git2/config.h	/^GIT_EXTERN(void) git_config_iterator_free(git_config_iterator *iter);$/;"	v
iter	include/git2/refs.h	/^GIT_EXTERN(void) git_reference_iterator_free(git_reference_iterator *iter);$/;"	v
iter	src/branch.c	/^	git_reference_iterator *iter;$/;"	m	struct:__anon159	file:
iter	src/config.c	/^	git_config_iterator *iter;$/;"	m	struct:__anon96	file:
iter	src/config_file.c	/^	git_strmap_iter iter;$/;"	m	struct:git_config_file_iter	file:
iter_load_loose_paths	src/refdb_fs.c	/^static int iter_load_loose_paths(refdb_fs_backend *backend, refdb_fs_iter *iter)$/;"	f	file:
iterate_over_patch	tests/diff/diffiter.c	/^static void iterate_over_patch(git_patch *patch, diff_expects *exp)$/;"	f	file:
iterate_refs	tests/threads/refdb.c	/^static void *iterate_refs(void *arg)$/;"	f	file:
iterator	include/git2/index.h	/^	git_index_conflict_iterator *iterator);$/;"	v
iterator	include/git2/sys/config.h	/^	int (*iterator)(git_config_iterator **, struct git_config_backend *);$/;"	m	struct:git_config_backend
iterator	include/git2/sys/refdb_backend.h	/^	int (*iterator)($/;"	m	struct:git_refdb_backend
iterator__clear_entry	src/iterator.c	/^GIT_INLINE(void) iterator__clear_entry(const git_index_entry **entry)$/;"	f
iterator__do_autoexpand	src/iterator.c	48;"	d	file:
iterator__dont_autoexpand	src/iterator.c	47;"	d	file:
iterator__end	src/iterator.c	53;"	d	file:
iterator__flag	src/iterator.c	44;"	d	file:
iterator__has_been_accessed	src/iterator.c	51;"	d	file:
iterator__ignore_case	src/iterator.c	45;"	d	file:
iterator__include_trees	src/iterator.c	46;"	d	file:
iterator__past_end	src/iterator.c	54;"	d	file:
iterator__reset_range	src/iterator.c	/^static int iterator__reset_range($/;"	f	file:
iterator__update_ignore_case	src/iterator.c	/^static int iterator__update_ignore_case($/;"	f	file:
iterator_flags	src/refdb_fs.c	/^	git_iterator_flag_t iterator_flags;$/;"	m	struct:refdb_fs_backend	file:
iterator_rand	src/revwalk.h	/^	git_commit_list *iterator_rand;$/;"	m	struct:git_revwalk
iterator_reverse	src/revwalk.h	/^	git_commit_list *iterator_reverse;$/;"	m	struct:git_revwalk
iterator_time	src/revwalk.h	/^	git_pqueue iterator_time;$/;"	m	struct:git_revwalk
iterator_topo	src/revwalk.h	/^	git_commit_list *iterator_topo;$/;"	m	struct:git_revwalk
junk_obj	tests/object/raw/data.h	/^static git_rawobj junk_obj = {$/;"	v
kcalloc	src/khash.h	163;"	d
kcalloc	src/offmap.h	14;"	d
kcalloc	src/oidmap.h	14;"	d
kcalloc	src/strmap.h	13;"	d
key	src/attr_file.h	/^	char *key;				\/* cache "source#path" this was loaded from *\/$/;"	m	struct:__anon133
key	src/sortedcache.c	/^	const char *key;$/;"	m	struct:sortedcache_magic_key	file:
key_shift	src/xdiff/xhistogram.c	/^		     key_shift,$/;"	m	struct:histindex	file:
kfree	src/khash.h	172;"	d
kfree	src/offmap.h	16;"	d
kfree	src/oidmap.h	16;"	d
kfree	src/strmap.h	15;"	d
kh_begin	src/khash.h	511;"	d
kh_clear	src/khash.h	437;"	d
kh_cstr_t	src/khash.h	/^typedef const char *kh_cstr_t;$/;"	t
kh_del	src/khash.h	474;"	d
kh_destroy	src/khash.h	430;"	d
kh_end	src/khash.h	518;"	d
kh_exist	src/khash.h	482;"	d
kh_foreach	src/khash.h	541;"	d
kh_foreach_value	src/khash.h	555;"	d
kh_get	src/khash.h	466;"	d
kh_init	src/khash.h	423;"	d
kh_inline	src/khash.h	134;"	d
kh_inline	src/khash.h	136;"	d
kh_int64_hash_equal	src/khash.h	373;"	d
kh_int64_hash_func	src/khash.h	369;"	d
kh_int_hash_equal	src/khash.h	363;"	d
kh_int_hash_func	src/khash.h	359;"	d
kh_int_hash_func2	src/khash.h	406;"	d
kh_key	src/khash.h	490;"	d
kh_n_buckets	src/khash.h	532;"	d
kh_put	src/khash.h	457;"	d
kh_resize	src/khash.h	445;"	d
kh_size	src/khash.h	525;"	d
kh_str_hash_equal	src/khash.h	394;"	d
kh_str_hash_func	src/khash.h	390;"	d
kh_val	src/khash.h	499;"	d
kh_value	src/khash.h	504;"	d
khash_t	src/khash.h	416;"	d
khint32_t	src/khash.h	/^typedef unsigned int khint32_t;$/;"	t
khint32_t	src/khash.h	/^typedef unsigned long khint32_t;$/;"	t
khint64_t	src/khash.h	/^typedef unsigned long khint64_t;$/;"	t
khint64_t	src/khash.h	/^typedef unsigned long long khint64_t;$/;"	t
khint_t	src/khash.h	/^typedef khint32_t khint_t;$/;"	t
khiter_t	src/khash.h	/^typedef khint_t khiter_t;$/;"	t
klass	include/git2/errors.h	/^	int klass;$/;"	m	struct:__anon226
kmalloc	src/khash.h	166;"	d
kmalloc	src/offmap.h	13;"	d
kmalloc	src/oidmap.h	13;"	d
kmalloc	src/strmap.h	12;"	d
krealloc	src/khash.h	169;"	d
krealloc	src/offmap.h	15;"	d
krealloc	src/oidmap.h	15;"	d
krealloc	src/strmap.h	14;"	d
kroundup32	src/khash.h	159;"	d
l_buf	deps/zlib/deflate.h	/^    uchf *l_buf;          \/* buffer for literals or lengths *\/$/;"	m	struct:internal_state
l_desc	deps/zlib/deflate.h	/^    struct tree_desc_s l_desc;               \/* desc. for literal tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s
label	src/merge_file.h	/^	const char *label;$/;"	m	struct:__anon55
last	deps/zlib/inflate.h	/^    int last;                   \/* true if processing last block *\/$/;"	m	struct:inflate_state
last	src/xdiff/xpatience.c	/^	} *entries, *first, *last;$/;"	m	struct:hashmap	typeref:struct:hashmap::entry	file:
last_bytes	src/transports/smart_protocol.c	/^	size_t last_bytes;$/;"	m	struct:push_packbuilder_payload	file:
last_cb	src/transports/http.c	/^	enum last_cb last_cb;$/;"	m	struct:__anon81	typeref:enum:__anon81::last_cb	file:
last_cb	src/transports/http.c	/^enum last_cb {$/;"	g	file:
last_eob_len	deps/zlib/deflate.h	/^    int last_eob_len;   \/* bit length of EOB code for last block *\/$/;"	m	struct:internal_state
last_error	src/filebuf.h	/^	int last_error;$/;"	m	struct:git_filebuf
last_error	src/global.h	/^	git_error *last_error;$/;"	m	struct:__anon164
last_error	tests/clar.c	/^	struct clar_error *last_error;$/;"	m	struct:__anon23	typeref:struct:__anon23::clar_error	file:
last_fired_bytes	src/transports/smart_protocol.c	/^	size_t last_fired_bytes;$/;"	m	struct:network_packetsize_payload	file:
last_flush	deps/zlib/deflate.h	/^    int   last_flush;    \/* value of flush param for previous deflate call *\/$/;"	m	struct:internal_state
last_found	src/odb_pack.c	/^	struct git_pack_file *last_found;$/;"	m	struct:pack_backend	typeref:struct:pack_backend::git_pack_file	file:
last_lit	deps/zlib/deflate.h	/^    uInt last_lit;      \/* running index in l_buf *\/$/;"	m	struct:internal_state
last_node	deps/regex/regex_internal.h	/^  int last_node;$/;"	m	struct:__anon189
last_node	deps/regex/regex_internal.h	/^  int last_node;$/;"	m	struct:__anon190
last_progress_report_time	src/pack-objects.h	/^	double last_progress_report_time; \/* the time progress was last reported *\/$/;"	m	struct:git_packbuilder
last_progress_report_time	src/transports/smart_protocol.c	/^	double last_progress_report_time;$/;"	m	struct:push_packbuilder_payload	file:
last_str_idx	deps/regex/regex_internal.h	/^  int last_str_idx;$/;"	m	struct:__anon190
last_usage	src/pack.h	/^	size_t last_usage; \/* enough? *\/$/;"	m	struct:git_pack_cache_entry
last_used	src/mwindow.h	/^	size_t last_used;$/;"	m	struct:git_mwindow
lasts	deps/regex/regex_internal.h	/^  re_sub_match_last_t **lasts;$/;"	m	struct:__anon188
leave_dir_cb	src/iterator.c	/^	int (*leave_dir_cb)(fs_iterator *self);$/;"	m	struct:fs_iterator	file:
left	deps/regex/regex_internal.h	/^  struct bin_tree_t *left;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t
len	deps/http-parser/http_parser.h	/^    uint16_t len;               \/* Length of run in buffer *\/$/;"	m	struct:http_parser_url::__anon196
len	deps/regex/regex_internal.h	/^  int len;$/;"	m	struct:re_string_t
len	deps/zlib/deflate.h	/^        ush  len;        \/* length of bit string *\/$/;"	m	union:ct_data_s::__anon203
len	src/hash.h	/^	size_t len;$/;"	m	struct:__anon119
len	src/map.h	/^	size_t len; \/* data length			*\/$/;"	m	struct:__anon140
len	src/merge_file.h	/^	size_t len;$/;"	m	struct:__anon56
len	src/netops.h	/^	size_t len;$/;"	m	struct:gitno_buffer
len	src/odb.h	/^	size_t len;			\/**< Total number of bytes in data. *\/$/;"	m	struct:__anon38
len	src/transports/smart.h	/^	int len;$/;"	m	struct:__anon68
len	src/transports/smart.h	/^	int len;$/;"	m	struct:__anon69
len	src/win32/findfile.h	/^	DWORD len;$/;"	m	struct:git_win32__path
len	src/xdiff/xemit.c	/^	long len;$/;"	m	struct:func_line	file:
len	tests/diff/rename.c	/^	size_t len;$/;"	m	struct:rename_expected	file:
len	tests/merge/workdir/setup.c	/^	unsigned int len;$/;"	m	struct:merge_head_cb_data	file:
len1	src/xdiff/xprepare.c	/^	long len1, len2;$/;"	m	struct:s_xdlclass	file:
len2	src/xdiff/xprepare.c	/^	long len1, len2;$/;"	m	struct:s_xdlclass	file:
lenbits	deps/zlib/inflate.h	/^    unsigned lenbits;           \/* index bits for lencode *\/$/;"	m	struct:inflate_state
lencode	deps/zlib/inflate.h	/^    code const FAR *lencode;    \/* starting table for length\/literal codes *\/$/;"	m	struct:inflate_state
lenfix	deps/zlib/inffixed.h	/^    static const code lenfix[512] = {$/;"	v
length	deps/zlib/inflate.h	/^    unsigned length;            \/* literal or length of data to copy *\/$/;"	m	struct:inflate_state
length	src/attr_file.h	/^	size_t length;$/;"	m	struct:__anon129
length	src/bitvec.h	/^	size_t length;$/;"	m	struct:__anon162
length	src/date.c	/^	int length;$/;"	m	struct:typelen	file:
length	src/tsort.c	/^	ssize_t length;$/;"	m	struct:tsort_run	file:
length	src/vector.h	/^	size_t length;$/;"	m	struct:git_vector
lens	deps/zlib/inflate.h	/^    unsigned short lens[320];   \/* temporary storage for code lengths *\/$/;"	m	struct:inflate_state
level	deps/zlib/deflate.h	/^    int level;    \/* compression level (1..9) *\/$/;"	m	struct:internal_state
level	include/git2/config.h	/^	git_config_level_t level;$/;"	m	struct:__anon218
level	src/config.c	/^	git_config_level_t level;$/;"	m	struct:__anon93	file:
level	src/config_file.c	/^	git_config_level_t level;$/;"	m	struct:__anon35	file:
level	src/trace.h	/^	git_trace_level_t level;$/;"	m	struct:git_trace_data
level	src/xdiff/xdiff.h	/^	int level;$/;"	m	struct:s_xmparam
lf	src/buf_text.h	/^	unsigned int nul, cr, lf, crlf; \/* NUL, CR, LF and CRLF counts *\/$/;"	m	struct:__anon139
libc_freeres_fn	deps/regex/regcomp.c	/^libc_freeres_fn (free_mem)$/;"	f
limit	examples/log.c	/^	int skip, limit;$/;"	m	struct:log_options	file:
limited_states	deps/regex/regex_internal.h	/^  re_dfastate_t **limited_states;$/;"	m	struct:__anon190
limits	deps/regex/regex_internal.h	/^  re_node_set limits;$/;"	m	struct:__anon190
line	src/diff_driver.h	/^	git_buf line;$/;"	m	struct:__anon161
line	src/diff_print.c	/^	git_diff_line line;$/;"	m	struct:__anon123	file:
line	src/xdiff/xprepare.c	/^	char const *line;$/;"	m	struct:s_xdlclass	file:
line	tests/commit/parse.c	/^	const char *line;$/;"	m	struct:__anon14	file:
line1	src/xdiff/xpatience.c	/^		unsigned long line1, line2;$/;"	m	struct:hashmap::entry	file:
line2	src/xdiff/xpatience.c	/^		unsigned long line1, line2;$/;"	m	struct:hashmap::entry	file:
line_adds	tests/diff/diff_helpers.h	/^	int line_adds;$/;"	m	struct:__anon8
line_contains_alnum	src/xdiff/xmerge.c	/^static int line_contains_alnum(const char *ptr, long size)$/;"	f	file:
line_count	src/diff_patch.c	/^	size_t line_count;$/;"	m	struct:diff_patch_hunk	file:
line_ctxt	tests/diff/diff_helpers.h	/^	int line_ctxt;$/;"	m	struct:__anon8
line_dels	tests/diff/diff_helpers.h	/^	int line_dels;$/;"	m	struct:__anon8
line_ending	src/crlf.c	/^static const char *line_ending(struct crlf_attrs *ca)$/;"	f	file:
line_index	src/blame.h	/^	git_array_t(size_t) line_index;$/;"	m	struct:git_blame
line_length_without_trailing_spaces	src/message.c	/^static size_t line_length_without_trailing_spaces(const char *line, size_t len)$/;"	f	file:
line_map	src/xdiff/xhistogram.c	/^	  **line_map; \/* map of line to record chain *\/$/;"	m	struct:histindex	typeref:struct:histindex::record	file:
line_map_size	src/xdiff/xhistogram.c	/^		     line_map_size;$/;"	m	struct:histindex	file:
line_number	src/config_file.c	/^	int line_number;$/;"	m	struct:reader	file:
line_number	tests/clar.c	/^	int line_number;$/;"	m	struct:clar_error	file:
line_start	src/diff_patch.c	/^	size_t line_start;$/;"	m	struct:diff_patch_hunk	file:
lines	tests/diff/diff_helpers.h	/^	int lines;$/;"	m	struct:__anon8
lines_contain_alnum	src/xdiff/xmerge.c	/^static int lines_contain_alnum(xdfenv_t *xe, int i, int chg)$/;"	f	file:
lines_in_hunk	include/git2/blame.h	/^	uint16_t lines_in_hunk;$/;"	m	struct:git_blame_hunk
link_nfa_nodes	deps/regex/regcomp.c	/^link_nfa_nodes (void *extra, bin_tree_t *node)$/;"	f	file:
list	src/pack-objects.c	/^	git_pobject **list;$/;"	m	struct:thread_params	file:
list_expectations	tests/notes/notes.c	/^list_expectations[] = {$/;"	v	typeref:struct:__anon12	file:
list_size	src/pack-objects.c	/^	unsigned int list_size;$/;"	m	struct:thread_params	file:
lit_bufsize	deps/zlib/deflate.h	/^    uInt  lit_bufsize;$/;"	m	struct:internal_state
ll_find_deltas	src/pack-objects.c	/^static int ll_find_deltas(git_packbuilder *pb, git_pobject **list,$/;"	f	file:
ll_find_deltas	src/pack-objects.c	1221;"	d	file:
lm_init	deps/zlib/deflate.c	/^local void lm_init (s)$/;"	f
lno	src/blame.h	/^	int lno;$/;"	m	struct:git_blame__entry
load	tests/generate.py	/^    def load(self, force = False):$/;"	m	class:TestSuite
load_alternates	src/odb.c	/^static int load_alternates(git_odb *odb, const char *objects_dir, int alternate_depth)$/;"	f	file:
load_attr_blob_from_index	src/attr.c	/^static int load_attr_blob_from_index($/;"	f	file:
load_attr_file	src/attr.c	/^static int load_attr_file($/;"	f	file:
load_attr_from_cache	src/attr.c	/^static int load_attr_from_cache($/;"	f	file:
load_blob	src/blame.c	/^static int load_blob(git_blame *blame)$/;"	f	file:
load_cache	tests/generate.py	/^    def load_cache(self):$/;"	m	class:TestSuite
load_config	src/repository.c	/^static int load_config($/;"	f	file:
load_config_data	src/repository.c	/^static int load_config_data(git_repository *repo)$/;"	f	file:
load_submodule_config	src/submodule.c	/^static int load_submodule_config(git_repository *repo)$/;"	f	file:
load_submodule_config_from_head	src/submodule.c	/^static int load_submodule_config_from_head($/;"	f	file:
load_submodule_config_from_index	src/submodule.c	/^static int load_submodule_config_from_index($/;"	f	file:
load_workdir	src/repository.c	/^static int load_workdir(git_repository *repo, git_buf *parent_path)$/;"	f	file:
local	deps/zlib/adler32.c	10;"	d	file:
local	deps/zlib/crc32.c	31;"	d	file:
local	deps/zlib/zutil.h	33;"	d
local	include/git2/net.h	/^	int local; \/* available locally *\/$/;"	m	struct:git_remote_head
local_cancel	src/transports/local.c	/^static void local_cancel(git_transport *transport)$/;"	f	file:
local_cleanup	tests/clar.c	/^	void (*local_cleanup)(void *);$/;"	m	struct:__anon23	file:
local_cleanup_payload	tests/clar.c	/^	void *local_cleanup_payload;$/;"	m	struct:__anon23	file:
local_close	src/transports/local.c	/^static int local_close(git_transport *transport)$/;"	f	file:
local_connect	src/transports/local.c	/^static int local_connect($/;"	f	file:
local_download_pack	src/transports/local.c	/^static int local_download_pack($/;"	f	file:
local_free	src/transports/local.c	/^static void local_free(git_transport *transport)$/;"	f	file:
local_is_connected	src/transports/local.c	/^static int local_is_connected(git_transport *transport)$/;"	f	file:
local_ls	src/transports/local.c	/^static int local_ls(const git_remote_head ***out, size_t *size, git_transport *transport)$/;"	f	file:
local_negotiate_fetch	src/transports/local.c	/^static int local_negotiate_fetch($/;"	f	file:
local_objects	include/git2/types.h	/^	unsigned int local_objects;$/;"	m	struct:git_transfer_progress
local_push	src/transports/local.c	/^static int local_push($/;"	f	file:
local_push_copy_object	src/transports/local.c	/^static int local_push_copy_object($/;"	f	file:
local_push_update_remote_ref	src/transports/local.c	/^static int local_push_update_remote_ref($/;"	f	file:
local_read_flags	src/transports/local.c	/^static int local_read_flags(git_transport *transport, int *flags)$/;"	f	file:
local_transport_definition	src/transport.c	/^static transport_definition local_transport_definition = { "file:\/\/", 1, git_transport_local, NULL };$/;"	v	file:
locate_object	src/odb_loose.c	/^static int locate_object($/;"	f	file:
locate_object_short_oid	src/odb_loose.c	/^static int locate_object_short_oid($/;"	f	file:
location	src/transports/http.c	/^	char *location;$/;"	m	struct:__anon81	file:
lock	src/cache.h	/^	git_mutex   lock;$/;"	m	struct:__anon91
lock	src/pack.h	/^	git_mutex lock; \/* protect updates to mwf and index_map *\/$/;"	m	struct:git_pack_file
lock	src/pack.h	/^	git_mutex lock;$/;"	m	struct:__anon32
lock	src/sortedcache.h	/^	git_rwlock   lock;$/;"	m	struct:__anon158
lock_file	src/filebuf.c	/^static int lock_file(git_filebuf *file, int flags, mode_t mode)$/;"	f	file:
lock_reflog	src/refdb_fs.c	/^static int lock_reflog(git_filebuf *file, refdb_fs_backend *backend, const char *refname)$/;"	f	file:
log_options	examples/log.c	/^struct log_options {$/;"	s	file:
log_signature	src/refs.c	/^static int log_signature(git_signature **out, git_repository *repo)$/;"	f	file:
log_state	examples/log.c	/^struct log_state {$/;"	s	file:
loid	include/git2/net.h	/^	git_oid loid;$/;"	m	struct:git_remote_head
loid	src/push.h	/^	git_oid loid;$/;"	m	struct:push_spec
long_entry_size	src/index.c	29;"	d	file:
longest_match	deps/zlib/deflate.c	/^local uInt longest_match(s, cur_match)$/;"	f
longname	tests/status/status_data.h	/^static const char *longname = "\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97\\xe5\\x8f\\x97";$/;"	v
lookahead	deps/zlib/deflate.h	/^    uInt lookahead;              \/* number of valid bytes ahead in window *\/$/;"	m	struct:internal_state
looks_like_a_branch	src/repository.c	/^static bool looks_like_a_branch(const char *refname)$/;"	f	file:
looks_like_network_computer_name	src/path.c	/^static bool looks_like_network_computer_name(const char *path, int pos)$/;"	f	file:
lookup	include/git2/sys/refdb_backend.h	/^	int (*lookup)($/;"	m	struct:git_refdb_backend
lookup_head_remote	src/submodule.c	/^static int lookup_head_remote(git_buf *url, git_repository *repo)$/;"	f	file:
loose	src/refdb_fs.c	/^	git_vector loose;$/;"	m	struct:__anon148	file:
loose_backend	src/odb_loose.c	/^typedef struct loose_backend {$/;"	s	file:
loose_backend	src/odb_loose.c	/^} loose_backend;$/;"	t	typeref:struct:loose_backend	file:
loose_backend__exists	src/odb_loose.c	/^static int loose_backend__exists(git_odb_backend *backend, const git_oid *oid)$/;"	f	file:
loose_backend__foreach	src/odb_loose.c	/^static int loose_backend__foreach(git_odb_backend *_backend, git_odb_foreach_cb cb, void *data)$/;"	f	file:
loose_backend__free	src/odb_loose.c	/^static void loose_backend__free(git_odb_backend *_backend)$/;"	f	file:
loose_backend__read	src/odb_loose.c	/^static int loose_backend__read(void **buffer_p, size_t *len_p, git_otype *type_p, git_odb_backend *backend, const git_oid *oid)$/;"	f	file:
loose_backend__read_header	src/odb_loose.c	/^static int loose_backend__read_header(size_t *len_p, git_otype *type_p, git_odb_backend *backend, const git_oid *oid)$/;"	f	file:
loose_backend__read_prefix	src/odb_loose.c	/^static int loose_backend__read_prefix($/;"	f	file:
loose_backend__stream	src/odb_loose.c	/^static int loose_backend__stream(git_odb_stream **stream_out, git_odb_backend *_backend, size_t length, git_otype type)$/;"	f	file:
loose_backend__stream_free	src/odb_loose.c	/^static void loose_backend__stream_free(git_odb_stream *_stream)$/;"	f	file:
loose_backend__stream_fwrite	src/odb_loose.c	/^static int loose_backend__stream_fwrite(git_odb_stream *_stream, const git_oid *oid)$/;"	f	file:
loose_backend__stream_write	src/odb_loose.c	/^static int loose_backend__stream_write(git_odb_stream *_stream, const char *data, size_t len)$/;"	f	file:
loose_backend__write	src/odb_loose.c	/^static int loose_backend__write(git_odb_backend *_backend, const git_oid *oid, const void *data, size_t len, git_otype type)$/;"	f	file:
loose_commit	src/refdb_fs.c	/^static int loose_commit(git_filebuf *file, const git_reference *ref)$/;"	f	file:
loose_locate_object_state	src/odb_loose.c	/^} loose_locate_object_state;$/;"	t	typeref:struct:__anon153	file:
loose_lock	src/refdb_fs.c	/^static int loose_lock(git_filebuf *file, refdb_fs_backend *backend, const char *name)$/;"	f	file:
loose_lookup	src/refdb_fs.c	/^static int loose_lookup($/;"	f	file:
loose_lookup_to_packfile	src/refdb_fs.c	/^static int loose_lookup_to_packfile(refdb_fs_backend *backend, const char *name)$/;"	f	file:
loose_objects	tests/odb/pack_data.h	/^static const char *loose_objects[] = {$/;"	v
loose_parse_oid	src/refdb_fs.c	/^static int loose_parse_oid($/;"	f	file:
loose_parse_symbolic	src/refdb_fs.c	/^static const char *loose_parse_symbolic(git_buf *file_content)$/;"	f	file:
loose_pos	src/refdb_fs.c	/^	size_t loose_pos;$/;"	m	struct:__anon148	file:
loose_readbuffer	src/refdb_fs.c	/^static int loose_readbuffer(git_buf *buf, const char *base, const char *path)$/;"	f	file:
loose_tag_ref_name	tests/refs/pack.c	/^static const char *loose_tag_ref_name = "refs\/tags\/e90810b";$/;"	v	file:
loose_tag_ref_name	tests/refs/read.c	/^static const char *loose_tag_ref_name = "refs\/tags\/e90810b";$/;"	v	file:
loose_tag_ref_name	tests/refs/rename.c	/^static const char *loose_tag_ref_name = "refs\/tags\/e90810b";$/;"	v	file:
loose_writestream	src/odb_loose.c	/^} loose_writestream;$/;"	t	typeref:struct:__anon152	file:
lower_subexp	deps/regex/regcomp.c	/^lower_subexp (reg_errcode_t *err, regex_t *preg, bin_tree_t *node)$/;"	f	file:
lower_subexps	deps/regex/regcomp.c	/^lower_subexps (void *extra, bin_tree_t *node)$/;"	f	file:
lref	src/push.h	/^	char *lref;$/;"	m	struct:push_spec
lru_counter	src/repository.h	/^	unsigned int lru_counter;$/;"	m	struct:git_repository
ls	include/git2/transport.h	/^	int (*ls)($/;"	m	struct:git_transport
ls_remote	examples/network/ls-remote.c	/^int ls_remote(git_repository *repo, int argc, char **argv)$/;"	f
ls_to_vector	src/remote.c	/^static int ls_to_vector(git_vector *out, git_remote *remote)$/;"	f	file:
lseek	src/win32/mingw-compat.h	13;"	d
lseek	src/win32/msvc-compat.h	17;"	d
m	include/git2/pathspec.h	/^	const git_pathspec_match_list *m);$/;"	v
m	include/git2/pathspec.h	/^GIT_EXTERN(void) git_pathspec_match_list_free(git_pathspec_match_list *m);$/;"	v
macros	src/attrcache.h	/^	git_strmap *macros;	 \/* hash name to vector<git_attr_assignment> *\/$/;"	m	struct:__anon92
main	examples/add.c	/^int main (int argc, char** argv)$/;"	f
main	examples/blame.c	/^int main(int argc, char *argv[])$/;"	f
main	examples/cat-file.c	/^int main(int argc, char *argv[])$/;"	f
main	examples/diff.c	/^int main(int argc, char *argv[])$/;"	f
main	examples/general.c	/^int main (int argc, char** argv)$/;"	f
main	examples/init.c	/^int main(int argc, char *argv[])$/;"	f
main	examples/log.c	/^int main(int argc, char *argv[])$/;"	f
main	examples/network/git2.c	/^int main(int argc, char **argv)$/;"	f
main	examples/rev-list.c	/^int main (int argc, char **argv)$/;"	f
main	examples/rev-parse.c	/^int main(int argc, char *argv[])$/;"	f
main	examples/showindex.c	/^int main (int argc, char** argv)$/;"	f
main	examples/status.c	/^int main(int argc, char *argv[])$/;"	f
main	tests/main.c	/^int __cdecl main(int argc, char *argv[])$/;"	f
mainline	include/git2/revert.h	/^	unsigned int mainline;$/;"	m	struct:__anon257
make_crc_table	deps/zlib/crc32.c	/^local void make_crc_table()$/;"	f
make_gitlink_dir	tests/repo/open.c	/^static void make_gitlink_dir(const char *dir, const char *linktext)$/;"	f	file:
make_head_unborn	tests/repo/repo_helpers.c	/^void make_head_unborn(git_repository* repo, const char *target)$/;"	f
make_odb_dir	tests/object/raw/write.c	/^static void make_odb_dir(void)$/;"	f	file:
make_origin	src/blame_git.c	/^static int make_origin(git_blame__origin **out, git_commit *commit, const char *path)$/;"	f	file:
makefixed	deps/zlib/inflate.c	/^void makefixed()$/;"	f
manipulate_note_in_tree_r	src/notes.c	/^static int manipulate_note_in_tree_r($/;"	f	file:
map	src/cache.h	/^	git_oidmap *map;$/;"	m	struct:__anon91
map	src/diff_file.h	/^	git_map map;$/;"	m	struct:__anon154
map	src/path.h	/^	iconv_t map;$/;"	m	struct:__anon128
map	src/sortedcache.h	/^	git_strmap   *map;$/;"	m	struct:__anon158
map_count	src/config_cache.c	/^	size_t map_count;$/;"	m	struct:map_data	file:
map_data	src/config_cache.c	/^struct map_data {$/;"	s	file:
map_notascii	deps/regex/regex_internal.h	/^  unsigned char map_notascii;$/;"	m	struct:re_string_t
map_notascii	deps/regex/regex_internal.h	/^  unsigned int map_notascii : 1;$/;"	m	struct:re_dfa_t
map_value	include/git2/config.h	/^	int map_value;$/;"	m	struct:__anon220
mapped	src/mwindow.h	/^	size_t mapped;$/;"	m	struct:git_mwindow_ctl
maps	src/config_cache.c	/^	git_cvar_map *maps;$/;"	m	struct:map_data	file:
mark_opt_subexp	deps/regex/regcomp.c	/^mark_opt_subexp (void *extra, bin_tree_t *node)$/;"	f	file:
mark_parents	src/graph.c	/^static int mark_parents(git_revwalk *walk, git_commit_list_node *one,$/;"	f	file:
mark_uninteresting	src/revwalk.c	/^static int mark_uninteresting(git_commit_list_node *commit)$/;"	f	file:
marker_size	src/xdiff/xdiff.h	/^	int marker_size;$/;"	m	struct:s_xmparam
master_tip	tests/refs/settargetwithlog.c	/^static const char *master_tip = "a65fedf39aefe402d3bb6e24df4d4f5fe4547750";$/;"	v	file:
match	src/attr_file.h	/^	git_attr_fnmatch match;$/;"	m	struct:__anon130
match	src/xdiff/xpatience.c	/^static int match(struct hashmap *map, int line1, int line2)$/;"	f	file:
match_alpha	src/date.c	/^static size_t match_alpha(const char *date, struct tm *tm, int *offset)$/;"	f	file:
match_available	deps/zlib/deflate.h	/^    int match_available;         \/* set if previous match exists *\/$/;"	m	struct:internal_state
match_ctx_add_entry	deps/regex/regexec.c	/^match_ctx_add_entry (re_match_context_t *mctx, int node, int str_idx, int from,$/;"	f	file:
match_ctx_add_sublast	deps/regex/regexec.c	/^match_ctx_add_sublast (re_sub_match_top_t *subtop, int node, int str_idx)$/;"	f	file:
match_ctx_add_subtop	deps/regex/regexec.c	/^match_ctx_add_subtop (re_match_context_t *mctx, int node, int str_idx)$/;"	f	file:
match_ctx_clean	deps/regex/regexec.c	/^match_ctx_clean (re_match_context_t *mctx)$/;"	f	file:
match_ctx_free	deps/regex/regexec.c	/^match_ctx_free (re_match_context_t *mctx)$/;"	f	file:
match_ctx_init	deps/regex/regexec.c	/^match_ctx_init (re_match_context_t *mctx, int eflags, int n)$/;"	f	file:
match_digit	src/date.c	/^static size_t match_digit(const char *date, struct tm *tm, int *offset, int *tm_gmt)$/;"	f	file:
match_host	src/netops.c	/^static int match_host(const char *pattern, const char *host)$/;"	f	file:
match_int_arg	examples/common.c	/^int match_int_arg($/;"	f
match_int_internal	examples/common.c	/^static int match_int_internal($/;"	f	file:
match_last	deps/regex/regex_internal.h	/^  int match_last;$/;"	m	struct:__anon189
match_length	deps/zlib/deflate.h	/^    uInt match_length;           \/* length of best match *\/$/;"	m	struct:internal_state
match_line	src/diff_driver.h	/^	git_diff_find_context_line match_line;$/;"	m	struct:__anon161
match_multi_number	src/date.c	/^static size_t match_multi_number(unsigned long num, char c, const char *date, char *end, struct tm *tm)$/;"	f	file:
match_numeric_arg	examples/common.c	/^static const char *match_numeric_arg(struct args_info *args, const char *opt)$/;"	f	file:
match_object_header_date	src/date.c	/^static int match_object_header_date(const char *date, git_time_t *timestamp, int *offset)$/;"	f	file:
match_start	deps/zlib/deflate.h	/^    uInt match_start;            \/* start of matching string *\/$/;"	m	struct:internal_state
match_str_arg	examples/common.c	/^int match_str_arg($/;"	f
match_string	src/date.c	/^static size_t match_string(const char *date, const char *str)$/;"	f	file:
match_tz	src/date.c	/^static size_t match_tz(const char *date, int *offp)$/;"	f	file:
match_uint16_arg	examples/common.c	/^int match_uint16_arg($/;"	f
match_with_parent	examples/log.c	/^static int match_with_parent(git_commit *commit, int i, git_diff_options *opts)$/;"	f	file:
matched_pathspec	tests/diff/diff_helpers.h	/^	const char *matched_pathspec;$/;"	m	struct:__anon9
matches	deps/zlib/deflate.h	/^    uInt matches;       \/* number of string matches in current block *\/$/;"	m	struct:internal_state
matches	src/pathspec.h	/^	git_array_t(void *) matches;$/;"	m	struct:git_pathspec_match_list
matches	tests/object/tag/list.c	/^static const struct pattern_match_t matches[] = {$/;"	v	typeref:struct:pattern_match_t	file:
matching	src/refspec.h	/^		matching :1;$/;"	m	struct:git_refspec
max	src/util.h	20;"	d
maxRetries	tests/resources/userdiff/after/file.php	/^        $this->maxRetries = $maxRetries + 1;$/;"	v
maxRetries	tests/resources/userdiff/after/file.php	/^    protected $maxRetries;$/;"	v
maxRetries	tests/resources/userdiff/before/file.php	/^        $this->maxRetries = $maxRetries;$/;"	v
maxRetries	tests/resources/userdiff/before/file.php	/^    protected $maxRetries;$/;"	v
maxRetries	tests/resources/userdiff/expected/driver/diff.php	/^     protected $maxRetries;$/;"	v
maxRetries	tests/resources/userdiff/expected/nodriver/diff.php	/^     protected $maxRetries;$/;"	v
maxRetries	tests/resources/userdiff/files/file.php	/^        $this->maxRetries = $maxRetries + 1;$/;"	v
maxRetries	tests/resources/userdiff/files/file.php	/^    protected $maxRetries;$/;"	v
max_chain	deps/zlib/deflate.c	/^   ush max_chain;$/;"	m	struct:config_s	file:
max_chain_length	deps/zlib/deflate.h	/^    uInt max_chain_length;$/;"	m	struct:internal_state
max_chain_length	src/xdiff/xhistogram.c	/^	unsigned int max_chain_length,$/;"	m	struct:histindex	file:
max_code	deps/zlib/deflate.h	/^    int     max_code;            \/* largest code with non zero frequency *\/$/;"	m	struct:tree_desc_s
max_delta_cache_size	src/pack-objects.h	/^	uint64_t max_delta_cache_size;$/;"	m	struct:git_packbuilder
max_insert_length	deps/zlib/deflate.h	176;"	d
max_lazy	deps/zlib/deflate.c	/^   ush max_lazy;    \/* do not perform lazy search above this match length *\/$/;"	m	struct:config_s	file:
max_lazy_match	deps/zlib/deflate.h	/^    uInt max_lazy_match;$/;"	m	struct:internal_state
max_length	deps/zlib/trees.c	/^    int     max_length;          \/* max bit length for the codes *\/$/;"	m	struct:static_tree_desc_s	file:
max_line	include/git2/blame.h	/^	uint32_t max_line;$/;"	m	struct:git_blame_options
max_mb_elem_len	deps/regex/regex_internal.h	/^  int max_mb_elem_len;$/;"	m	struct:__anon189
max_parents	examples/log.c	/^	int min_parents, max_parents;$/;"	m	struct:log_options	file:
max_size	include/git2/diff.h	/^	git_off_t   max_size;         \/**< defaults to 512MB *\/$/;"	m	struct:__anon268
maxs	src/hashsig.c	/^	hashsig_heap maxs;$/;"	m	struct:git_hashsig	file:
maybe_abbrev	src/revparse.c	/^static int maybe_abbrev(git_object** out, git_repository *repo, const char *spec)$/;"	f	file:
maybe_describe	src/revparse.c	/^static int maybe_describe(git_object**out, git_repository *repo, const char *spec)$/;"	f	file:
maybe_modified	src/diff.c	/^static int maybe_modified($/;"	f	file:
maybe_modified_submodule	src/diff.c	/^static int maybe_modified_submodule($/;"	f	file:
maybe_sha	src/revparse.c	/^static int maybe_sha(git_object** out, git_repository *repo, const char *spec)$/;"	f	file:
maybe_sha_or_abbrev	src/revparse.c	/^static int maybe_sha_or_abbrev(git_object** out, git_repository *repo, const char *spec, size_t speclen)$/;"	f	file:
maybe_want	src/fetch.c	/^static int maybe_want(git_remote *remote, git_remote_head *head, git_odb *odb, git_refspec *tagspec)$/;"	f	file:
mb_cur_max	deps/regex/regex_internal.h	/^  int mb_cur_max;$/;"	m	struct:re_dfa_t
mb_cur_max	deps/regex/regex_internal.h	/^  int mb_cur_max;$/;"	m	struct:re_string_t
mb_partial	deps/regex/regex_internal.h	/^  unsigned int mb_partial : 1;$/;"	m	struct:__anon184
mbchars	deps/regex/regex_internal.h	/^  wchar_t *mbchars;$/;"	m	struct:__anon183
mbcset	deps/regex/regex_internal.h	/^    re_charset_t *mbcset;	\/* for COMPLEX_BRACKET *\/$/;"	m	union:__anon184::__anon185
mbs	deps/regex/regex_internal.h	/^  unsigned char *mbs;$/;"	m	struct:re_string_t
mbs_allocated	deps/regex/regex_internal.h	/^  unsigned char mbs_allocated;$/;"	m	struct:re_string_t
mem_ctl	src/mwindow.c	/^static git_mwindow_ctl mem_ctl;$/;"	v	file:
memory_limit	src/pack.h	/^	size_t memory_limit;$/;"	m	struct:__anon32
memory_used	src/pack.h	/^	size_t memory_used;$/;"	m	struct:__anon32
memsize	src/delta.c	/^	unsigned long memsize;$/;"	m	struct:git_delta_index	file:
merge	src/tsort.c	/^static void merge(void **dst, const struct tsort_run *stack, ssize_t stack_curr, struct tsort_store *store)$/;"	f	file:
merge__dump_index_entries	tests/merge/merge_helpers.c	/^void merge__dump_index_entries(git_vector *index_entries)$/;"	f
merge__dump_names	tests/merge/merge_helpers.c	/^void merge__dump_names(git_index *index)$/;"	f
merge__dump_reuc	tests/merge/merge_helpers.c	/^void merge__dump_reuc(git_index *index)$/;"	f
merge_affected_paths	src/merge.c	/^static int merge_affected_paths(git_vector *paths, git_repository *repo, git_index *index_new)$/;"	f	file:
merge_ancestor_head	src/merge.c	/^static int merge_ancestor_head($/;"	f	file:
merge_assignments	src/attr_file.c	/^static int merge_assignments(void **old_raw, void *new_raw)$/;"	f	file:
merge_branch	tests/merge/workdir/dirty.c	/^static int merge_branch(git_merge_result **result, int merge_file_favor, int checkout_strategy)$/;"	f	file:
merge_branches	tests/merge/merge_helpers.c	/^int merge_branches(git_merge_result **result, git_repository *repo, const char *ours_branch, const char *theirs_branch, git_merge_opts *opts)$/;"	f
merge_check_index	src/merge.c	/^static int merge_check_index(size_t *conflicts, git_repository *repo, git_index *index_new, git_vector *merged_paths)$/;"	f	file:
merge_check_workdir	src/merge.c	/^static int merge_check_workdir(size_t *conflicts, git_repository *repo, git_index *index_new, git_vector *merged_paths)$/;"	f	file:
merge_commits_from_branches	tests/merge/merge_helpers.c	/^int merge_commits_from_branches($/;"	f
merge_conflict_resolve	src/merge.c	/^static int merge_conflict_resolve($/;"	f	file:
merge_conflict_resolve_automerge	src/merge.c	/^static int merge_conflict_resolve_automerge($/;"	f	file:
merge_conflict_resolve_one_removed	src/merge.c	/^static int merge_conflict_resolve_one_removed($/;"	f	file:
merge_conflict_resolve_one_renamed	src/merge.c	/^static int merge_conflict_resolve_one_renamed($/;"	f	file:
merge_conflict_resolve_trivial	src/merge.c	/^static int merge_conflict_resolve_trivial($/;"	f	file:
merge_delta_type_from_index_entries	src/merge.c	/^GIT_INLINE(int) merge_delta_type_from_index_entries($/;"	f
merge_diff_coalesce_rename	src/merge.c	/^GIT_INLINE(void) merge_diff_coalesce_rename($/;"	f
merge_diff_detect_binary	src/merge.c	/^GIT_INLINE(int) merge_diff_detect_binary($/;"	f
merge_diff_detect_df_conflict	src/merge.c	/^GIT_INLINE(int) merge_diff_detect_df_conflict($/;"	f
merge_diff_detect_type	src/merge.c	/^GIT_INLINE(int) merge_diff_detect_type($/;"	f
merge_diff_df_data	src/merge.c	/^struct merge_diff_df_data {$/;"	s	file:
merge_diff_empty	src/merge.c	/^static int merge_diff_empty(const git_vector *conflicts, size_t idx)$/;"	f	file:
merge_diff_from_index_entries	src/merge.c	/^static git_merge_diff *merge_diff_from_index_entries($/;"	f	file:
merge_diff_list_coalesce_renames	src/merge.c	/^static void merge_diff_list_coalesce_renames($/;"	f	file:
merge_diff_list_count_candidates	src/merge.c	/^static void merge_diff_list_count_candidates($/;"	f	file:
merge_diff_list_insert_conflict	src/merge.c	/^static int merge_diff_list_insert_conflict($/;"	f	file:
merge_diff_list_insert_unmodified	src/merge.c	/^static int merge_diff_list_insert_unmodified($/;"	f	file:
merge_diff_mark_rename_conflict	src/merge.c	/^static void merge_diff_mark_rename_conflict($/;"	f	file:
merge_diff_mark_similarity	src/merge.c	/^static int merge_diff_mark_similarity($/;"	f	file:
merge_diff_path	src/merge.c	/^GIT_INLINE(const char *) merge_diff_path($/;"	f
merge_diff_similarity	src/merge.c	/^struct merge_diff_similarity {$/;"	s	file:
merge_differently_filtered_files	tests/merge/workdir/dirty.c	/^static int merge_differently_filtered_files(char *files[])$/;"	f	file:
merge_dirty_files	tests/merge/workdir/dirty.c	/^static int merge_dirty_files(char *dirty_files[])$/;"	f	file:
merge_fastforward_branch	tests/merge/workdir/fastforward.c	/^static git_merge_result *merge_fastforward_branch(int flags)$/;"	f	file:
merge_file_best_mode	src/merge_file.c	/^GIT_INLINE(int) merge_file_best_mode($/;"	f
merge_file_best_path	src/merge_file.c	/^GIT_INLINE(const char *) merge_file_best_path($/;"	f
merge_flags	include/git2/merge.h	/^	git_merge_flags_t merge_flags;$/;"	m	struct:__anon253
merge_head	src/merge.c	/^	const git_merge_head *merge_head;$/;"	m	struct:merge_msg_entry	file:
merge_head_cb_data	tests/merge/workdir/setup.c	/^struct merge_head_cb_data {$/;"	s	file:
merge_head_foreach_cb	tests/merge/workdir/setup.c	/^static int merge_head_foreach_cb(const git_oid *oid, void *payload)$/;"	f	file:
merge_head_init	src/merge.c	/^static int merge_head_init($/;"	f	file:
merge_index_conflict_data	tests/merge/merge_helpers.h	/^struct merge_index_conflict_data {$/;"	s
merge_index_entry	tests/merge/merge_helpers.h	/^struct merge_index_entry {$/;"	s
merge_index_insert_reuc	src/merge.c	/^static int merge_index_insert_reuc($/;"	f	file:
merge_index_with_status	tests/merge/merge_helpers.h	/^struct merge_index_with_status {$/;"	s
merge_msg_entries	src/merge.c	/^static int merge_msg_entries($/;"	f	file:
merge_msg_entry	src/merge.c	/^struct merge_msg_entry {$/;"	s	file:
merge_msg_entry_written	src/merge.c	/^static int merge_msg_entry_written($/;"	f	file:
merge_msg_write_branches	src/merge.c	/^static int merge_msg_write_branches($/;"	f	file:
merge_msg_write_entries	src/merge.c	/^static int merge_msg_write_entries($/;"	f	file:
merge_msg_write_remotes	src/merge.c	/^static int merge_msg_write_remotes($/;"	f	file:
merge_msg_write_tags	src/merge.c	/^static int merge_msg_write_tags($/;"	f	file:
merge_msg_write_tracking	src/merge.c	/^static int merge_msg_write_tracking($/;"	f	file:
merge_name_entry	tests/merge/merge_helpers.h	/^struct merge_name_entry {$/;"	s
merge_normalize_opts	src/merge.c	/^static int merge_normalize_opts($/;"	f	file:
merge_result	include/git2/merge.h	/^GIT_EXTERN(int) git_merge_result_is_fastforward(git_merge_result *merge_result);$/;"	v
merge_result	include/git2/merge.h	/^GIT_EXTERN(int) git_merge_result_is_uptodate(git_merge_result *merge_result);$/;"	v
merge_result	include/git2/merge.h	/^GIT_EXTERN(void) git_merge_result_free(git_merge_result *merge_result);$/;"	v
merge_reuc_entry	tests/merge/merge_helpers.h	/^struct merge_reuc_entry {$/;"	s
merge_simple_branch	tests/merge/workdir/simple.c	/^static git_merge_result *merge_simple_branch(int merge_file_favor, int checkout_strategy)$/;"	f	file:
merge_staged_files	tests/merge/workdir/dirty.c	/^static int merge_staged_files(char *staged_files[])$/;"	f	file:
merge_state_array	deps/regex/regexec.c	/^merge_state_array (const re_dfa_t *dfa, re_dfastate_t **dst,$/;"	f	file:
merge_state_cleanup	src/merge.c	/^static int merge_state_cleanup(git_repository *repo)$/;"	f	file:
merge_state_with_log	deps/regex/regexec.c	/^merge_state_with_log (reg_errcode_t *err, re_match_context_t *mctx,$/;"	f
merge_structs	tests/core/vector.c	/^static int merge_structs(void **old_raw, void *new)$/;"	f	file:
merge_test_index	tests/merge/merge_helpers.c	/^int merge_test_index(git_index *index, const struct merge_index_entry expected[], size_t expected_len)$/;"	f
merge_test_merge_conflicts	tests/merge/merge_helpers.c	/^int merge_test_merge_conflicts(git_vector *conflicts, const struct merge_index_conflict_data expected[], size_t expected_len)$/;"	f
merge_test_names	tests/merge/merge_helpers.c	/^int merge_test_names(git_index *index, const struct merge_name_entry expected[], size_t expected_len)$/;"	f
merge_test_reuc	tests/merge/merge_helpers.c	/^int merge_test_reuc(git_index *index, const struct merge_reuc_entry expected[], size_t expected_len)$/;"	f
merge_test_workdir	tests/merge/merge_helpers.c	/^int merge_test_workdir(git_repository *repo, const struct merge_index_entry expected[], size_t expected_len)$/;"	f
merge_their_label	src/merge.c	/^const char *merge_their_label(const char *branchname)$/;"	f
merge_tree_index_t	src/merge.c	/^} merge_tree_index_t;$/;"	t	typeref:enum:__anon171	file:
merge_tree_normalize_opts	src/merge.c	/^static int merge_tree_normalize_opts($/;"	f	file:
merge_tree_opts	include/git2/merge.h	/^	git_merge_tree_opts merge_tree_opts;$/;"	m	struct:__anon253
merge_tree_opts	include/git2/revert.h	/^	git_merge_tree_opts merge_tree_opts;$/;"	m	struct:__anon257
merge_trees_from_branches	tests/merge/merge_helpers.c	/^int merge_trees_from_branches($/;"	f
merge_trivial	tests/merge/trees/trivial.c	/^static int merge_trivial(git_index **index, const char *ours, const char *theirs)$/;"	f	file:
merge_trivial	tests/merge/workdir/trivial.c	/^static int merge_trivial(const char *ours, const char *theirs)$/;"	f	file:
merge_trivial_conflict_entrycount	tests/merge/trees/trivial.c	/^static int merge_trivial_conflict_entrycount(git_index *index)$/;"	f	file:
merge_trivial_conflict_entrycount	tests/merge/workdir/trivial.c	/^static size_t merge_trivial_conflict_entrycount(void)$/;"	f	file:
message	include/git2/errors.h	/^	char *message;$/;"	m	struct:__anon226
message	src/notes.h	/^	char *message;$/;"	m	struct:git_note
message	src/tag.h	/^	char *message;$/;"	m	struct:git_tag
message_cb_payload	src/transports/smart.h	/^	void *message_cb_payload;$/;"	m	struct:__anon73
message_encoding	src/commit.h	/^	char *message_encoding;$/;"	m	struct:git_commit
messages	tests/notes/notes.c	/^static char *messages[] = {$/;"	v	file:
method	deps/http-parser/http_parser.h	/^  unsigned char method;       \/* requests only *\/$/;"	m	struct:http_parser
method	deps/zlib/deflate.h	/^    Byte  method;        \/* STORED (for zip only) or DEFLATED *\/$/;"	m	struct:internal_state
method_strings	deps/http-parser/http_parser.c	/^static const char *method_strings[] =$/;"	v	file:
metric	include/git2/diff.h	/^	git_diff_similarity_metric *metric;$/;"	m	struct:__anon272
metric	include/git2/merge.h	/^	git_diff_similarity_metric *metric;$/;"	m	struct:__anon251
min	src/util.h	17;"	d
min_hi	src/xdiff/xdiffi.c	/^	int min_lo, min_hi;$/;"	m	struct:s_xdpsplit	file:
min_length	include/git2/oid.h	/^GIT_EXTERN(git_oid_shorten *) git_oid_shorten_new(size_t min_length);$/;"	v
min_length	src/oid.c	/^	int min_length, full;$/;"	m	struct:git_oid_shorten	file:
min_line	include/git2/blame.h	/^	uint32_t min_line;$/;"	m	struct:git_blame_options
min_lo	src/xdiff/xdiffi.c	/^	int min_lo, min_hi;$/;"	m	struct:s_xdpsplit	file:
min_match_characters	include/git2/blame.h	/^	uint16_t min_match_characters;$/;"	m	struct:git_blame_options
min_parents	examples/log.c	/^	int min_parents, max_parents;$/;"	m	struct:log_options	file:
minimal_entry_size	src/index.c	31;"	d	file:
mins	src/hashsig.c	/^	hashsig_heap mins;$/;"	m	struct:git_hashsig	file:
mkdir	tests/clar.c	31;"	d	file:
mkdir_flags	src/fileops.c	/^	uint32_t mkdir_flags;$/;"	m	struct:__anon37	file:
mkdir_parent	src/repository.c	/^static int mkdir_parent(git_buf *buf, uint32_t mode, bool skip2)$/;"	f	file:
mmap_calls	src/mwindow.h	/^	unsigned int mmap_calls;$/;"	m	struct:git_mwindow_ctl
mmbuffer_t	src/xdiff/xdiff.h	/^} mmbuffer_t;$/;"	t	typeref:struct:s_mmbuffer
mmfile	src/merge_file.h	/^	mmfile_t mmfile;$/;"	m	struct:__anon55
mmfile_t	src/xdiff/xdiff.h	/^} mmfile_t;$/;"	t	typeref:struct:s_mmfile
mode	deps/zlib/inflate.h	/^    inflate_mode mode;          \/* current inflate mode *\/$/;"	m	struct:inflate_state
mode	include/git2/diff.h	/^	uint16_t    mode;$/;"	m	struct:__anon266
mode	include/git2/index.h	/^	unsigned int mode;$/;"	m	struct:git_index_entry
mode	include/git2/odb_backend.h	/^	unsigned int mode;$/;"	m	struct:git_odb_stream
mode	include/git2/repository.h	/^	uint32_t    mode;$/;"	m	struct:__anon212
mode	include/git2/sys/index.h	/^	unsigned int mode[3];$/;"	m	struct:git_index_reuc_entry
mode	src/filter.c	/^	git_filter_mode_t mode;$/;"	m	struct:git_filter_source	file:
mode	src/index.c	/^	uint32_t mode;$/;"	m	struct:entry_long	file:
mode	src/index.c	/^	uint32_t mode;$/;"	m	struct:entry_short	file:
mode	src/indexer.c	/^	unsigned int mode;$/;"	m	struct:git_indexer	file:
mode	src/merge_file.h	/^	int mode;$/;"	m	struct:__anon56
mode	src/merge_file.h	/^	unsigned int mode;$/;"	m	struct:__anon55
mode	src/repo_template.h	/^	mode_t mode;$/;"	m	struct:__anon145
mode	src/xdiff/xmerge.c	/^	int mode;$/;"	m	struct:s_xdmerge	file:
mode	tests/checkout/conflict.c	/^	uint16_t mode;$/;"	m	struct:checkout_index_entry	file:
mode	tests/merge/merge_helpers.h	/^	uint16_t mode;$/;"	m	struct:merge_index_entry
mode_t	src/win32/msvc-compat.h	31;"	d
month_names	src/date.c	/^static const char *month_names[] = {$/;"	v	file:
more	deps/regex/regex_internal.h	/^  char more;$/;"	m	struct:re_backref_cache_entry
moreStuff	tests/resources/userdiff/after/file.php	/^	protected $moreStuff;$/;"	v
moreStuff	tests/resources/userdiff/files/file.php	/^	protected $moreStuff;$/;"	v
msg	deps/zlib/zlib.h	/^    char     *msg;      \/* last error message, NULL if no error *\/$/;"	m	struct:z_stream_s
msg	src/push.h	/^	char *msg;$/;"	m	struct:push_status
msg	src/reflog.h	/^	char *msg;$/;"	m	struct:git_reflog_entry
msg	src/transports/smart.h	/^	char *msg;$/;"	m	struct:__anon71
msg	tests/online/push.c	/^	const char *msg;$/;"	m	struct:__anon17	file:
msg_entry_is_branch	src/merge.c	/^static int msg_entry_is_branch($/;"	f	file:
msg_entry_is_oid	src/merge.c	/^static int msg_entry_is_oid($/;"	f	file:
msg_entry_is_remote	src/merge.c	/^static int msg_entry_is_remote($/;"	f	file:
msg_entry_is_tag	src/merge.c	/^static int msg_entry_is_tag($/;"	f	file:
msg_entry_is_tracking	src/merge.c	/^static int msg_entry_is_tracking($/;"	f	file:
mtime	include/git2/index.h	/^	git_index_time mtime;$/;"	m	struct:git_index_entry
mtime	src/fileops.h	/^	git_time_t mtime;$/;"	m	struct:__anon47
mtime	src/index.c	/^	struct entry_time mtime;$/;"	m	struct:entry_long	typeref:struct:entry_long::entry_time	file:
mtime	src/index.c	/^	struct entry_time mtime;$/;"	m	struct:entry_short	typeref:struct:entry_short::entry_time	file:
mtime	src/pack.h	/^	git_time_t mtime;$/;"	m	struct:git_pack_file
mtime	tests/index/tests.c	/^   git_time_t mtime;$/;"	m	struct:test_entry	file:
multi_ack	src/transports/smart.h	/^		multi_ack: 1,$/;"	m	struct:transport_smart_caps
multi_ack_detailed	src/transports/smart.h	/^		multi_ack_detailed: 1,$/;"	m	struct:transport_smart_caps
multivar_iter	src/config.c	/^} multivar_iter;$/;"	t	typeref:struct:__anon96	file:
multivar_iter_free	src/config.c	/^void multivar_iter_free(git_config_iterator *_iter)$/;"	f
multivar_iter_next	src/config.c	/^static int multivar_iter_next(git_config_entry **entry, git_config_iterator *_iter)$/;"	f	file:
mutex	src/pack-objects.c	/^	git_mutex mutex;$/;"	m	struct:thread_params	file:
mv_read_cb	tests/config/multivar.c	/^static int mv_read_cb(const git_config_entry *entry, void *data)$/;"	f	file:
mw	src/pack.h	/^	git_mwindow *mw;$/;"	m	struct:git_packfile_stream
mwf	src/pack.h	/^	git_mwindow_file mwf;$/;"	m	struct:git_pack_file
mxcost	src/xdiff/xdiffi.h	/^	long mxcost;$/;"	m	struct:s_xdalgoenv
my_emit	src/blame_git.c	/^static int my_emit($/;"	f	file:
my_struct	tests/core/vector.c	/^} my_struct;$/;"	t	typeref:struct:__anon26	file:
n_conflicts	tests/checkout/checkout_helpers.h	/^	int n_conflicts;$/;"	m	struct:__anon6
n_dirty	tests/checkout/checkout_helpers.h	/^	int n_dirty;$/;"	m	struct:__anon6
n_entries	src/iterator.c	/^	size_t n_entries; \/* items in this frame *\/$/;"	m	struct:tree_iterator_frame	file:
n_ignored	tests/checkout/checkout_helpers.h	/^	int n_ignored;$/;"	m	struct:__anon6
n_untracked	tests/checkout/checkout_helpers.h	/^	int n_untracked;$/;"	m	struct:__anon6
n_updates	tests/checkout/checkout_helpers.h	/^	int n_updates;$/;"	m	struct:__anon6
nak_pkt	src/transports/smart_pkt.c	/^static int nak_pkt(git_pkt **out)$/;"	f	file:
name	deps/http-parser/http_parser.c	/^  const char *name;$/;"	m	struct:__anon197	file:
name	deps/regex/regex_internal.h	/^    unsigned char *name;$/;"	m	union:__anon192::__anon193
name	deps/zlib/zlib.h	/^    Bytef   *name;      \/* pointer to zero-terminated file name or Z_NULL *\/$/;"	m	struct:gz_header_s
name	examples/network/git2.c	/^	char *name;$/;"	m	struct:__anon3	file:
name	include/git2/config.h	/^	const char *name;$/;"	m	struct:__anon218
name	include/git2/net.h	/^	char *name;$/;"	m	struct:git_remote_head
name	include/git2/types.h	/^	char *name; \/** full name of the author *\/$/;"	m	struct:git_signature
name	src/attr.c	/^	git_attr_name name;$/;"	m	struct:__anon175	file:
name	src/attr_file.h	/^	char *name;$/;"	m	struct:__anon132
name	src/attr_file.h	/^	const char *name;$/;"	m	struct:__anon131
name	src/config.c	/^	char *name;$/;"	m	struct:__anon96	file:
name	src/config.c	/^	git_buf *name;$/;"	m	struct:rename_data	file:
name	src/date.c	/^	const char *name;$/;"	m	struct:__anon105	file:
name	src/date.c	/^	const char *name;$/;"	m	struct:special	file:
name	src/diff_driver.c	/^	char name[GIT_FLEX_ARRAY];$/;"	m	struct:git_diff_driver	file:
name	src/refdb_fs.c	/^	char name[GIT_FLEX_ARRAY];$/;"	m	struct:packref	file:
name	src/refs.h	/^	char name[0];$/;"	m	struct:git_reference
name	src/remote.h	/^	char *name;$/;"	m	struct:git_remote
name	src/submodule.h	/^	char *name;$/;"	m	struct:git_submodule
name	src/tree-cache.h	/^	char name[GIT_FLEX_ARRAY];$/;"	m	struct:git_tree_cache
name	src/userdiff.h	/^	const char *name;$/;"	m	struct:__anon179
name	tests/clar.c	/^	const char *name;$/;"	m	struct:clar_func	file:
name	tests/clar.c	/^	const char *name;$/;"	m	struct:clar_suite	file:
name	tests/commit/parse.c	/^	const char *name;$/;"	m	struct:__anon15	file:
name	tests/core/dirent.c	/^	char *name; \/* filename		*\/$/;"	m	struct:name_data	file:
name	tests/online/push_util.h	/^	char *name;$/;"	m	struct:__anon18
name	tests/online/push_util.h	/^	const char *name;$/;"	m	struct:__anon20
name_collision	src/checkout.c	/^	int name_collision:1,$/;"	m	struct:__anon122	file:
name_data	tests/core/dirent.c	/^typedef struct name_data {$/;"	s	file:
name_data	tests/core/dirent.c	/^} name_data;$/;"	t	typeref:struct:name_data	file:
name_entry_eq	tests/merge/merge_helpers.c	/^static int name_entry_eq(const char *expected, const char *actual)$/;"	f	file:
name_entry_eq_merge_name_entry	tests/merge/merge_helpers.c	/^static int name_entry_eq_merge_name_entry(const struct merge_name_entry *expected, const git_index_name_entry *actual)$/;"	f	file:
name_hash	src/attr_file.h	/^	uint32_t name_hash;$/;"	m	struct:__anon131
name_hash	src/attr_file.h	/^	uint32_t name_hash;$/;"	m	struct:__anon132
name_hash	src/pack-objects.c	/^static unsigned name_hash(const char *name)$/;"	f	file:
name_max	deps/zlib/zlib.h	/^    uInt    name_max;   \/* space at name (only when reading header) *\/$/;"	m	struct:gz_header_s
name_only_cmp	tests/core/sortedcache.c	/^static int name_only_cmp(const void *a, const void *b)$/;"	f	file:
names	src/index.h	/^	git_vector names;$/;"	m	struct:git_index
names	tests/core/dirent.c	/^	name_data *names; \/* name state data	*\/$/;"	m	struct:walk_data	file:
names	tests/diff/diff_helpers.h	/^	const char **names;$/;"	m	struct:__anon8
nanoseconds	include/git2/index.h	/^	unsigned int nanoseconds;$/;"	m	struct:__anon228
nanoseconds	src/index.c	/^	uint32_t nanoseconds;$/;"	m	struct:entry_time	file:
native	src/win32/pthread.h	/^	} native;$/;"	m	struct:__anon166	typeref:union:__anon166::__anon167
nattrs	src/filter.c	/^	size_t nattrs, nmatches;$/;"	m	struct:__anon88	file:
nbackref	deps/regex/regex_internal.h	/^  int nbackref; \/* The number of backreference in this dfa.  *\/$/;"	m	struct:re_dfa_t
nbkref_ents	deps/regex/regex_internal.h	/^  int nbkref_ents;$/;"	m	struct:__anon189
ncha	src/xdiff/xprepare.c	/^	chastore_t ncha;$/;"	m	struct:s_xdlclassifier	file:
nchar_classes	deps/regex/regex_internal.h	/^  int nchar_classes;$/;"	m	struct:__anon183
ncode	deps/zlib/inflate.h	/^    unsigned ncode;             \/* number of code length code lengths *\/$/;"	m	struct:inflate_state
ncoll_syms	deps/regex/regex_internal.h	/^  int ncoll_syms;$/;"	m	struct:__anon183
ndist	deps/zlib/inflate.h	/^    unsigned ndist;             \/* number of distance code lengths *\/$/;"	m	struct:inflate_state
need_more	deps/zlib/deflate.c	/^    need_more,      \/* block not completed, need more input or more output *\/$/;"	e	enum:__anon199	file:
need_pack	src/remote.h	/^	unsigned int need_pack;$/;"	m	struct:git_remote
negotiate_fetch	include/git2/transport.h	/^	int (*negotiate_fetch)($/;"	m	struct:git_transport
nelem	deps/regex/regex_internal.h	/^  int nelem;$/;"	m	struct:__anon181
nequiv_classes	deps/regex/regex_internal.h	/^  int nequiv_classes;$/;"	m	struct:__anon183
net_set_error	src/netops.c	/^static void net_set_error(const char *str)$/;"	f	file:
network_packetsize	src/transports/smart_protocol.c	/^static int network_packetsize(size_t received, void *payload)$/;"	f	file:
network_packetsize_payload	src/transports/smart_protocol.c	/^struct network_packetsize_payload$/;"	s	file:
new_backend	tests/odb/sorting.c	/^static git_odb_backend *new_backend(size_t position)$/;"	f	file:
new_cache_object	src/pack.c	/^static git_pack_cache_entry *new_cache_object(git_rawobj *source)$/;"	f	file:
new_entries	src/index.c	/^	git_vector *new_entries;$/;"	m	struct:read_tree_data	file:
new_file	include/git2/diff.h	/^	git_diff_file new_file;$/;"	m	struct:__anon267
new_hunk	src/blame.c	/^static git_blame_hunk* new_hunk($/;"	f	file:
new_iter	src/diff.c	/^	git_iterator *new_iter;$/;"	m	struct:__anon34	file:
new_lineno	include/git2/diff.h	/^	int    new_lineno;   \/** Line number in new file or -1 for deleted line *\/$/;"	m	struct:git_diff_line
new_lineno	src/diff_xdiff.c	/^	int old_lineno, new_lineno;$/;"	m	struct:__anon51	file:
new_lines	include/git2/diff.h	/^	int    new_lines;     \/** Number of lines in new_file *\/$/;"	m	struct:git_diff_hunk
new_oid	tests/online/push_util.h	/^	git_oid *new_oid;$/;"	m	struct:__anon18
new_prefix	include/git2/diff.h	/^	const char *new_prefix;       \/**< defaults to "b" *\/$/;"	m	struct:__anon268
new_ptr	deps/zlib/zutil.c	/^    voidpf new_ptr;$/;"	m	struct:ptr_table_s	file:
new_ref	tests/refs/reflog/reflog.c	/^static const char *new_ref = "refs\/heads\/test-reflog";$/;"	v	file:
new_remote_name	src/remote.c	/^	const char *new_remote_name;$/;"	m	struct:update_data	file:
new_src	src/diff.h	/^	git_iterator_type_t new_src;$/;"	m	struct:git_diff
new_start	include/git2/diff.h	/^	int    new_start;     \/** Starting line number in new_file *\/$/;"	m	struct:git_diff_hunk
new_window	src/mwindow.c	/^static git_mwindow *new_window($/;"	f	file:
newest_commit	include/git2/blame.h	/^	git_oid newest_commit;$/;"	m	struct:git_blame_options
newline_anchor	deps/regex/regex_internal.h	/^  unsigned char newline_anchor;$/;"	m	struct:re_string_t
newname	tests/status/renames.c	/^	const char *newname;$/;"	m	struct:status_entry	file:
next	deps/regex/regex_internal.h	/^  struct bin_tree_storage_t *next;$/;"	m	struct:bin_tree_storage_t	typeref:struct:bin_tree_storage_t::bin_tree_storage_t
next	deps/regex/regex_internal.h	/^  struct bin_tree_t *next;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t
next	deps/zlib/inflate.h	/^    code FAR *next;             \/* next available space in codes[] *\/$/;"	m	struct:inflate_state
next	include/git2/sys/config.h	/^	int (*next)(git_config_entry **entry, git_config_iterator *iter);$/;"	m	struct:git_config_iterator
next	include/git2/sys/refdb_backend.h	/^	int (*next)($/;"	m	struct:git_reference_iterator
next	src/blame.h	/^	struct git_blame__entry *next;$/;"	m	struct:git_blame__entry	typeref:struct:git_blame__entry::git_blame__entry
next	src/commit_list.h	/^	struct git_commit_list *next;$/;"	m	struct:git_commit_list	typeref:struct:git_commit_list::git_commit_list
next	src/config_file.c	/^	struct cvar_t *next;$/;"	m	struct:cvar_t	typeref:struct:cvar_t::cvar_t	file:
next	src/delta.c	/^	struct index_entry *next;$/;"	m	struct:index_entry	typeref:struct:index_entry::index_entry	file:
next	src/iterator.c	/^	fs_iterator_frame *next;$/;"	m	struct:fs_iterator_frame	file:
next	src/iterator.c	/^	size_t next;      \/* start of next range in frame *\/$/;"	m	struct:tree_iterator_frame	file:
next	src/mwindow.h	/^	struct git_mwindow *next;$/;"	m	struct:git_mwindow	typeref:struct:git_mwindow::git_mwindow
next	src/pool.c	/^	git_pool_page *next;$/;"	m	struct:git_pool_page	file:
next	src/pool.c	/^	struct pool_freelist *next;$/;"	m	struct:pool_freelist	typeref:struct:pool_freelist::pool_freelist	file:
next	src/xdiff/xdiffi.h	/^	struct s_xdchange *next;$/;"	m	struct:s_xdchange	typeref:struct:s_xdchange::s_xdchange
next	src/xdiff/xhistogram.c	/^		struct record *next;$/;"	m	struct:histindex::record	typeref:struct:histindex::record::record	file:
next	src/xdiff/xmerge.c	/^	struct s_xdmerge *next;$/;"	m	struct:s_xdmerge	typeref:struct:s_xdmerge::s_xdmerge	file:
next	src/xdiff/xpatience.c	/^		struct entry *next, *previous;$/;"	m	struct:hashmap::entry	typeref:struct:hashmap::entry::entry	file:
next	src/xdiff/xprepare.c	/^	struct s_xdlclass *next;$/;"	m	struct:s_xdlclass	typeref:struct:s_xdlclass::s_xdlclass	file:
next	src/xdiff/xtypes.h	/^	struct s_chanode *next;$/;"	m	struct:s_chanode	typeref:struct:s_chanode::s_chanode
next	src/xdiff/xtypes.h	/^	struct s_xrecord *next;$/;"	m	struct:s_xrecord	typeref:struct:s_xrecord::s_xrecord
next	tests/clar.c	/^	struct clar_error *next;$/;"	m	struct:clar_error	typeref:struct:clar_error::clar_error	file:
next_idx	deps/regex/regex_internal.h	/^  int next_idx;$/;"	m	struct:__anon186
next_in	deps/zlib/zlib.h	/^    Bytef    *next_in;  \/* next input byte *\/$/;"	m	struct:z_stream_s
next_name	include/git2/sys/refdb_backend.h	/^	int (*next_name)($/;"	m	struct:git_reference_iterator
next_out	deps/zlib/zlib.h	/^    Bytef    *next_out; \/* next output byte should be put there *\/$/;"	m	struct:z_stream_s
next_ptr	deps/zlib/zutil.c	/^local int next_ptr = 0;$/;"	v
next_ptrs	src/xdiff/xhistogram.c	/^	unsigned int *next_ptrs;$/;"	m	struct:histindex	file:
next_var	src/config_file.c	/^	cvar_t* next_var;$/;"	m	struct:git_config_file_iter	file:
nexts	deps/regex/regex_internal.h	/^  int *nexts;$/;"	m	struct:re_dfa_t
nfc	tests/core/iconv.c	/^static char *nfc = "\\xC3\\x85\\x73\\x74\\x72\\xC3\\xB6\\x6D";$/;"	v	file:
nfc_file	src/repository.c	/^static const char *nfc_file = "\\xC3\\x85\\x73\\x74\\x72\\xC3\\xB6\\x6D.XXXXXX";$/;"	v	file:
nfd	tests/core/iconv.c	/^static char *nfd = "\\x41\\xCC\\x8A\\x73\\x74\\x72\\x6F\\xCC\\x88\\x6D";$/;"	v	file:
nfd_file	src/repository.c	/^static const char *nfd_file = "\\x41\\xCC\\x8A\\x73\\x74\\x72\\x6F\\xCC\\x88\\x6D.XXXXXX";$/;"	v	file:
nfile	src/diff_patch.c	/^	git_diff_file_content nfile;$/;"	m	struct:git_patch	file:
nfiles	include/git2/diff.h	/^	uint16_t      nfiles;	   \/**< number of files in this delta *\/$/;"	m	struct:__anon267
ng_pkt	src/transports/smart_pkt.c	/^static int ng_pkt(git_pkt **out, const char *line, size_t len)$/;"	f	file:
nice_length	deps/zlib/deflate.c	/^   ush nice_length; \/* quit search above this match length *\/$/;"	m	struct:config_s	file:
nice_match	deps/zlib/deflate.h	/^    int nice_match; \/* Stop searching when current match exceeds this *\/$/;"	m	struct:internal_state
nitem	src/diff.c	/^	const git_index_entry *nitem;$/;"	m	struct:__anon34	file:
nlasts	deps/regex/regex_internal.h	/^  int nlasts; \/* The number of LASTS.  *\/$/;"	m	struct:__anon188
nlen	deps/zlib/inflate.h	/^    unsigned nlen;              \/* number of length code lengths *\/$/;"	m	struct:inflate_state
nmatches	src/filter.c	/^	size_t nattrs, nmatches;$/;"	m	struct:__anon88	file:
nmbchars	deps/regex/regex_internal.h	/^  int nmbchars;$/;"	m	struct:__anon183
no_check_cert_flags	src/transports/winhttp.c	/^static const int no_check_cert_flags = SECURITY_FLAG_IGNORE_CERT_CN_INVALID |$/;"	v	file:
no_options	examples/init.c	/^	int no_options;$/;"	m	struct:opts	file:
no_sideband	src/transports/smart_protocol.c	/^static int no_sideband(transport_smart *t, struct git_odb_writepack *writepack, gitno_buffer *buf, git_transfer_progress *stats)$/;"	f	file:
no_symlinks	src/index.h	/^	unsigned int no_symlinks:1;$/;"	m	struct:git_index
nodate	src/date.c	/^static int nodate(struct tm *tm)$/;"	f	file:
node	deps/regex/regex_internal.h	/^  int node;$/;"	m	struct:__anon187
node	deps/regex/regex_internal.h	/^  int node;$/;"	m	struct:__anon188
node	deps/regex/regex_internal.h	/^  int node;$/;"	m	struct:re_backref_cache_entry
node	deps/regex/regex_internal.h	/^  int node;$/;"	m	struct:re_fail_stack_ent_t
node_count	src/oid.c	/^	size_t node_count, size;$/;"	m	struct:git_oid_shorten	file:
node_idx	deps/regex/regex_internal.h	/^  int node_idx;$/;"	m	struct:bin_tree_t
node_index	src/oid.c	/^typedef short node_index;$/;"	t	file:
nodes	deps/regex/regex_internal.h	/^  re_node_set nodes;$/;"	m	struct:re_dfastate_t
nodes	deps/regex/regex_internal.h	/^  re_token_t *nodes;$/;"	m	struct:re_dfa_t
nodes	src/oid.c	/^	trie_node *nodes;$/;"	m	struct:git_oid_shorten	file:
nodes_alloc	deps/regex/regex_internal.h	/^  size_t nodes_alloc;$/;"	m	struct:re_dfa_t
nodes_len	deps/regex/regex_internal.h	/^  size_t nodes_len;$/;"	m	struct:re_dfa_t
non_eps_nodes	deps/regex/regex_internal.h	/^  re_node_set non_eps_nodes;$/;"	m	struct:re_dfastate_t
non_existing_tag_ref_name	tests/refs/read.c	/^static const char *non_existing_tag_ref_name = "refs\/tags\/i-do-not-exist";$/;"	v	file:
non_match	deps/regex/regex_internal.h	/^  unsigned int non_match : 1;$/;"	m	struct:__anon183
nonprintable	src/buf_text.h	/^	unsigned int printable, nonprintable; \/* These are just approximations! *\/$/;"	m	struct:__anon139
normal_url_char	deps/http-parser/http_parser.c	/^static const uint8_t normal_url_char[32] = {$/;"	v	file:
normalize_find_opts	src/diff_tform.c	/^static int normalize_find_opts($/;"	f	file:
normalize_namespace	src/notes.c	/^static int normalize_namespace(const char **notes_ref, git_repository *repo)$/;"	f	file:
normalize_options	src/blame.c	/^static void normalize_options($/;"	f	file:
not	examples/rev-parse.c	/^	int not;$/;"	m	struct:parse_state	file:
not_a_local_branch	src/branch.c	/^static int not_a_local_branch(const char *reference_name)$/;"	f	file:
note	include/git2/notes.h	/^GIT_EXTERN(const char *) git_note_message(const git_note *note);$/;"	v
note	include/git2/notes.h	/^GIT_EXTERN(const git_oid *) git_note_id(const git_note *note);$/;"	v
note	include/git2/notes.h	/^GIT_EXTERN(void) git_note_free(git_note *note);$/;"	v
note_cancel_cb	tests/notes/notes.c	/^static int note_cancel_cb($/;"	f	file:
note_error_notfound	src/notes.c	/^static int note_error_notfound(void)$/;"	f	file:
note_get_default_ref	src/notes.c	/^static int note_get_default_ref(const char **out, git_repository *repo)$/;"	f	file:
note_list_cb	tests/notes/notes.c	/^static int note_list_cb($/;"	f	file:
note_lookup	src/notes.c	/^static int note_lookup($/;"	f	file:
note_new	src/notes.c	/^static int note_new(git_note **out, git_oid *note_oid, git_blob *blob)$/;"	f	file:
note_remove	src/notes.c	/^static int note_remove(git_repository *repo,$/;"	f	file:
note_sha	tests/notes/notes.c	/^	const char *note_sha;$/;"	m	struct:__anon12	file:
note_write	src/notes.c	/^static int note_write(git_oid *out,$/;"	f	file:
notify_cb	include/git2/checkout.h	/^	git_checkout_notify_cb notify_cb;$/;"	m	struct:git_checkout_opts
notify_cb	include/git2/diff.h	/^	git_diff_notify_cb notify_cb;$/;"	m	struct:__anon268
notify_counter	tests/checkout/typechange.c	/^static int notify_counter($/;"	f	file:
notify_counts	tests/checkout/typechange.c	/^} notify_counts;$/;"	t	typeref:struct:__anon5	file:
notify_data	tests/checkout/index.c	/^struct notify_data {$/;"	s	file:
notify_expected	tests/diff/diff_helpers.h	/^} notify_expected;$/;"	t	typeref:struct:__anon9
notify_flags	include/git2/checkout.h	/^	unsigned int notify_flags; \/** see `git_checkout_notify_t` above *\/$/;"	m	struct:git_checkout_opts
notify_payload	include/git2/checkout.h	/^	void *notify_payload;$/;"	m	struct:git_checkout_opts
notify_payload	include/git2/diff.h	/^	void              *notify_payload;$/;"	m	struct:__anon268
npaths	examples/status.c	/^    int npaths;$/;"	m	struct:opts	file:
nr	src/xdiff/xpatience.c	/^	int nr, alloc;$/;"	m	struct:hashmap	file:
nr_alloc	src/pack-objects.h	/^		 nr_alloc,$/;"	m	struct:git_packbuilder
nr_objects	src/indexer.c	/^	size_t nr_objects;$/;"	m	struct:git_indexer	file:
nr_objects	src/pack-objects.h	/^	uint32_t nr_objects,$/;"	m	struct:git_packbuilder
nr_remaining	src/pack-objects.h	/^		 nr_remaining;$/;"	m	struct:git_packbuilder
nr_threads	src/pack-objects.h	/^	int nr_threads; \/* nr of threads to use *\/$/;"	m	struct:git_packbuilder
nr_written	src/pack-objects.h	/^		 nr_written,$/;"	m	struct:git_packbuilder
nranges	deps/regex/regex_internal.h	/^  int nranges;$/;"	m	struct:__anon183
nread	deps/http-parser/http_parser.h	/^  uint32_t nread;          \/* # bytes read in various scenarios *\/$/;"	m	struct:http_parser
nrec	src/xdiff/xdiffi.h	/^	long nrec;$/;"	m	struct:s_diffdata
nrec	src/xdiff/xtypes.h	/^	long nrec;$/;"	m	struct:s_xdfile
nreff	src/xdiff/xtypes.h	/^	long nreff;$/;"	m	struct:s_xdfile
nsize	src/xdiff/xtypes.h	/^	long isize, nsize;$/;"	m	struct:s_chastore
nsub_tops	deps/regex/regex_internal.h	/^  int nsub_tops;$/;"	m	struct:__anon189
nth_packed_object_offset	src/pack.c	/^static git_off_t nth_packed_object_offset(const struct git_pack_file *p, uint32_t n)$/;"	f	file:
ntohl	src/bswap.h	83;"	d
ntohl	src/bswap.h	85;"	d
ntohs	src/bswap.h	92;"	d
ntohs	src/bswap.h	94;"	d
nul	src/buf_text.h	/^	unsigned int nul, cr, lf, crlf; \/* NUL, CR, LF and CRLF counts *\/$/;"	m	struct:__anon139
num	deps/regex/regex_internal.h	/^  int num;$/;"	m	struct:re_fail_stack_t
num	deps/regex/regex_internal.h	/^  int num;$/;"	m	struct:re_state_table_entry
num_bad_objects	src/pack.h	/^	uint32_t num_bad_objects;$/;"	m	struct:git_pack_file
num_lines	include/git2/diff.h	/^	int    num_lines;    \/** Number of newline characters in content *\/$/;"	m	struct:git_diff_line
num_lines	src/blame.h	/^	int num_lines;$/;"	m	struct:git_blame
num_lines	src/blame.h	/^	int num_lines;$/;"	m	struct:git_blame__entry
num_objects	src/pack.h	/^	uint32_t num_objects;$/;"	m	struct:git_pack_file
num_regs	deps/regex/regex.h	/^  unsigned num_regs;$/;"	m	struct:re_registers
number_name	src/date.c	/^static const char *number_name[] = {$/;"	v	file:
numstat	examples/diff.c	/^	int numstat;$/;"	m	struct:opts	file:
obj	include/git2/object.h	/^GIT_EXTERN(const git_oid *) git_object_id(const git_object *obj);$/;"	v
obj	include/git2/object.h	/^GIT_EXTERN(git_otype) git_object_type(const git_object *obj);$/;"	v
obj	include/git2/object.h	/^GIT_EXTERN(git_repository *) git_object_owner(const git_object *obj);$/;"	v
obj_hdr	src/odb_loose.c	/^} obj_hdr;$/;"	t	typeref:struct:__anon151	file:
objbuf	src/indexer.c	/^	char objbuf[8*1024];$/;"	m	struct:git_indexer	file:
object	include/git2/object.h	/^GIT_EXTERN(void) git_object_free(git_object *object);$/;"	v
object	include/git2/odb.h	/^GIT_EXTERN(const git_oid *) git_odb_object_id(git_odb_object *object);$/;"	v
object	include/git2/odb.h	/^GIT_EXTERN(const void *) git_odb_object_data(git_odb_object *object);$/;"	v
object	include/git2/odb.h	/^GIT_EXTERN(git_otype) git_odb_object_type(git_odb_object *object);$/;"	v
object	include/git2/odb.h	/^GIT_EXTERN(size_t) git_odb_object_size(git_odb_object *object);$/;"	v
object	include/git2/odb.h	/^GIT_EXTERN(void) git_odb_object_free(git_odb_object *object);$/;"	v
object	src/blob.h	/^	git_object object;$/;"	m	struct:git_blob
object	src/commit.h	/^	git_object object;$/;"	m	struct:git_commit
object	src/pack-objects.c	/^	git_pobject *object;$/;"	m	struct:unpacked	file:
object	src/tag.h	/^	git_object object;$/;"	m	struct:git_tag
object	src/tree.h	/^	git_object object;$/;"	m	struct:git_tree
object_data	tests/object/raw/write.c	/^typedef struct object_data {$/;"	s	file:
object_data	tests/object/raw/write.c	/^} object_data;$/;"	t	typeref:struct:object_data	file:
object_data	tests/odb/loose_data.h	/^typedef struct object_data {$/;"	s
object_data	tests/odb/loose_data.h	/^} object_data;$/;"	t	typeref:struct:object_data
object_dir_mode	src/odb_loose.c	/^	mode_t object_dir_mode;$/;"	m	struct:loose_backend	file:
object_file_mode	src/odb_loose.c	/^	mode_t object_file_mode;$/;"	m	struct:loose_backend	file:
object_file_name	src/odb_loose.c	/^static int object_file_name($/;"	f	file:
object_from_reference	src/revparse.c	/^static int object_from_reference(git_object **object, git_reference *reference)$/;"	f	file:
object_ix	src/pack-objects.h	/^	git_oidmap *object_ix;$/;"	m	struct:git_packbuilder
object_list	src/pack-objects.h	/^	git_pobject *object_list;$/;"	m	struct:git_packbuilder
object_mkdir	src/odb_loose.c	/^static int object_mkdir(const git_buf *name, const loose_backend *be)$/;"	f	file:
object_zlib_level	src/odb_loose.c	/^	int object_zlib_level; \/** loose object zlib compression level. *\/$/;"	m	struct:loose_backend	file:
objects	src/indexer.c	/^	git_vector objects;$/;"	m	struct:git_indexer	file:
objects	src/repository.h	/^	git_cache objects;$/;"	m	struct:git_repository
objects_cmp	src/indexer.c	/^static int objects_cmp(const void *a, const void *b)$/;"	f	file:
objects_dir	src/odb_loose.c	/^	char objects_dir[GIT_FLEX_ARRAY];$/;"	m	struct:loose_backend	file:
objects_dirlen	src/odb_loose.c	/^	size_t objects_dirlen;$/;"	m	struct:loose_backend	file:
odb	include/git2/odb.h	/^GIT_EXTERN(size_t) git_odb_num_backends(git_odb *odb);$/;"	v
odb	include/git2/sys/odb_backend.h	/^	git_odb *odb;$/;"	m	struct:git_odb_backend
odb	src/indexer.c	/^	git_odb *odb;$/;"	m	struct:git_indexer	file:
odb	src/pack-objects.h	/^	git_odb *odb; \/* associated object database *\/$/;"	m	struct:git_packbuilder
odb	src/revwalk.h	/^	git_odb *odb;$/;"	m	struct:git_revwalk
odb	tests/odb/streamwrite.c	/^static git_odb *odb;$/;"	v	file:
odb_cache	src/odb.c	/^static git_cache *odb_cache(git_odb *odb)$/;"	f	file:
odb_dir	tests/object/raw/write.c	/^static const char *odb_dir = "test-objects";$/;"	v	file:
odb_free	src/odb.c	/^static void odb_free(git_odb *db)$/;"	f	file:
odb_obj	src/diff_tform.c	/^	git_odb_object *odb_obj;$/;"	m	struct:__anon115	file:
odb_object	src/blob.h	/^	git_odb_object *odb_object;$/;"	m	struct:git_blob
odb_object	src/merge_file.h	/^	git_odb_object *odb_object;$/;"	m	struct:__anon55
odb_object__alloc	src/odb.c	/^static git_odb_object *odb_object__alloc(const git_oid *oid, git_rawobj *source)$/;"	f	file:
odd	tests/core/dirent.c	/^static walk_data odd = {$/;"	v	file:
odd_names	tests/core/dirent.c	/^static name_data odd_names[] = {$/;"	v	file:
off	deps/http-parser/http_parser.h	/^    uint16_t off;               \/* Offset into buffer in which field starts *\/$/;"	m	struct:http_parser_url::__anon196
off	src/indexer.c	/^	git_off_t off;$/;"	m	struct:git_indexer	file:
offset	deps/zlib/inflate.h	/^    unsigned offset;            \/* distance back to copy string from *\/$/;"	m	struct:inflate_state
offset	include/git2/types.h	/^	int offset; \/** timezone offset, in minutes *\/$/;"	m	struct:git_time
offset	src/date.c	/^	int offset;$/;"	m	struct:__anon105	file:
offset	src/indexer.c	/^	uint32_t offset;$/;"	m	struct:entry	file:
offset	src/mwindow.h	/^	git_off_t offset;$/;"	m	struct:git_mwindow
offset	src/netops.h	/^	size_t offset;$/;"	m	struct:gitno_buffer
offset	src/pack-objects.h	/^	git_off_t offset;$/;"	m	struct:git_pobject
offset	src/pack.h	/^	git_off_t offset;$/;"	m	struct:git_pack_entry
offset	src/sortedcache.c	/^	size_t offset;$/;"	m	struct:sortedcache_magic_key	file:
offset	tests/commit/parse.c	/^	int offset;$/;"	m	struct:__anon15	file:
offset_long	src/indexer.c	/^	uint64_t offset_long;$/;"	m	struct:entry	file:
offsets	deps/regex/regex_internal.h	/^  int *offsets;$/;"	m	struct:re_string_t
offsets_needed	deps/regex/regex_internal.h	/^  unsigned char offsets_needed;$/;"	m	struct:re_string_t
ofile	src/diff_patch.c	/^	git_diff_file_content ofile;$/;"	m	struct:git_patch	file:
ofs_delta	src/transports/smart.h	/^		ofs_delta:1,$/;"	m	struct:transport_smart_caps
oid	include/git2/net.h	/^	git_oid oid;$/;"	m	struct:git_remote_head
oid	include/git2/sys/index.h	/^	git_oid oid[3];$/;"	m	struct:git_index_reuc_entry
oid	src/attr_file.h	/^		git_oid oid;$/;"	m	union:__anon133::__anon134
oid	src/cache.h	/^	git_oid    oid;$/;"	m	struct:__anon90
oid	src/commit_list.h	/^	git_oid oid;$/;"	m	struct:git_commit_list_node
oid	src/fetchhead.h	/^	git_oid oid;$/;"	m	struct:git_fetchhead_ref
oid	src/filter.c	/^	git_oid         oid;  \/* zero if unknown (which is likely) *\/$/;"	m	struct:git_filter_source	file:
oid	src/index.c	/^	git_oid oid;$/;"	m	struct:entry_long	file:
oid	src/index.c	/^	git_oid oid;$/;"	m	struct:entry_short	file:
oid	src/indexer.c	/^	git_oid oid;$/;"	m	struct:entry	file:
oid	src/merge.h	/^	git_oid oid;$/;"	m	struct:git_merge_head
oid	src/refdb_fs.c	/^	git_oid oid;$/;"	m	struct:packref	file:
oid	src/refs.h	/^		git_oid oid;$/;"	m	union:git_reference::__anon48
oid	src/transports/smart.h	/^	git_oid oid;$/;"	m	struct:__anon66
oid	src/tree-cache.h	/^	git_oid oid;$/;"	m	struct:git_tree_cache
oid	src/tree.h	/^	git_oid oid;$/;"	m	struct:git_tree_entry
oid	tests/core/oidmap.c	/^	git_oid oid;$/;"	m	struct:__anon24	file:
oid	tests/online/push_util.h	/^	const git_oid *oid;$/;"	m	struct:__anon20
oid_cur	src/reflog.h	/^	git_oid oid_cur;$/;"	m	struct:git_reflog_entry
oid_error_invalid	src/oid.c	/^static int oid_error_invalid(const char *msg)$/;"	f	file:
oid_old	src/reflog.h	/^	git_oid oid_old;$/;"	m	struct:git_reflog_entry
oid_str	src/merge.h	/^	char oid_str[GIT_OID_HEXSZ+1];$/;"	m	struct:git_merge_head
oid_str	tests/checkout/conflict.c	/^	char oid_str[41];$/;"	m	struct:checkout_index_entry	file:
oid_str	tests/merge/merge_helpers.h	/^	char oid_str[41];$/;"	m	struct:merge_index_entry
oid_str	tests/merge/workdir/setup.c	/^	const char **oid_str;$/;"	m	struct:merge_head_cb_data	file:
oid_strlen	src/diff_print.c	/^	int oid_strlen;$/;"	m	struct:__anon123	file:
oidmap_item	tests/core/oidmap.c	/^} oidmap_item;$/;"	t	typeref:struct:__anon24	file:
oids	src/pack.h	/^	git_oid **oids;$/;"	m	struct:git_pack_file
oids	tests/stash/foreach.c	/^	char **oids;$/;"	m	struct:callback_data	file:
oitem	src/diff.c	/^	const git_index_entry *oitem;$/;"	m	struct:__anon34	file:
ok	src/push.h	/^	bool ok;$/;"	m	struct:push_status
ok_pkt	src/transports/smart_pkt.c	/^static int ok_pkt(git_pkt **out, const char *line, size_t len)$/;"	f	file:
old_entries	src/index.c	/^	git_vector *old_entries;$/;"	m	struct:read_tree_data	file:
old_file	include/git2/diff.h	/^	git_diff_file old_file;$/;"	m	struct:__anon267
old_iter	src/diff.c	/^	git_iterator *old_iter;$/;"	m	struct:__anon34	file:
old_len	src/config.c	/^	size_t old_len;$/;"	m	struct:rename_data	file:
old_lineno	include/git2/diff.h	/^	int    old_lineno;   \/** Line number in old file or -1 for added line *\/$/;"	m	struct:git_diff_line
old_lineno	src/diff_xdiff.c	/^	int old_lineno, new_lineno;$/;"	m	struct:__anon51	file:
old_lines	include/git2/diff.h	/^	int    old_lines;     \/** Number of lines in old_file *\/$/;"	m	struct:git_diff_hunk
old_oid	tests/online/push_util.h	/^	git_oid *old_oid;$/;"	m	struct:__anon18
old_prefix	include/git2/diff.h	/^	const char *old_prefix;       \/**< defaults to "a" *\/$/;"	m	struct:__anon268
old_remote_name	src/remote.c	/^	const char *old_remote_name;$/;"	m	struct:update_data	file:
old_src	src/diff.h	/^	git_iterator_type_t old_src;$/;"	m	struct:git_diff
old_start	include/git2/diff.h	/^	int    old_start;     \/** Starting line number in old_file *\/$/;"	m	struct:git_diff_hunk
oldest_commit	include/git2/blame.h	/^	git_oid oldest_commit;$/;"	m	struct:git_blame_options
oldname	tests/status/renames.c	/^	const char *oldname;$/;"	m	struct:status_entry	file:
on_body	deps/http-parser/http_parser.h	/^  http_data_cb on_body;$/;"	m	struct:http_parser_settings
on_body_fill_buffer	src/transports/http.c	/^static int on_body_fill_buffer(http_parser *parser, const char *str, size_t len)$/;"	f	file:
on_disk	src/index.h	/^	unsigned int on_disk:1;$/;"	m	struct:git_index
on_header_field	deps/http-parser/http_parser.h	/^  http_data_cb on_header_field;$/;"	m	struct:http_parser_settings
on_header_field	src/transports/http.c	/^static int on_header_field(http_parser *parser, const char *str, size_t len)$/;"	f	file:
on_header_ready	src/transports/http.c	/^static int on_header_ready(http_subtransport *t)$/;"	f	file:
on_header_value	deps/http-parser/http_parser.h	/^  http_data_cb on_header_value;$/;"	m	struct:http_parser_settings
on_header_value	src/transports/http.c	/^static int on_header_value(http_parser *parser, const char *str, size_t len)$/;"	f	file:
on_headers_complete	deps/http-parser/http_parser.h	/^  http_cb      on_headers_complete;$/;"	m	struct:http_parser_settings
on_headers_complete	src/transports/http.c	/^static int on_headers_complete(http_parser *parser)$/;"	f	file:
on_message_begin	deps/http-parser/http_parser.h	/^  http_cb      on_message_begin;$/;"	m	struct:http_parser_settings
on_message_complete	deps/http-parser/http_parser.h	/^  http_cb      on_message_complete;$/;"	m	struct:http_parser_settings
on_message_complete	src/transports/http.c	/^static int on_message_complete(http_parser *parser)$/;"	f	file:
on_url	deps/http-parser/http_parser.h	/^  http_data_cb on_url;$/;"	m	struct:http_parser_settings
one	src/revwalk.h	/^	git_commit_list_node *one;$/;"	m	struct:git_revwalk
one	tests/odb/loose_data.h	/^static object_data one = {$/;"	v
one_blob_and_one_tree	tests/object/tree/duplicateentries.c	/^static void one_blob_and_one_tree(git_treebuilder *bld)$/;"	f	file:
one_bytes	tests/odb/loose_data.h	/^static unsigned char one_bytes[] = {$/;"	v
one_data	tests/object/raw/data.h	/^static unsigned char one_data[] = {$/;"	v
one_data	tests/odb/loose_data.h	/^static unsigned char one_data[] = {$/;"	v
one_entry	tests/core/dirent.c	/^static int one_entry(void *state, git_buf *path)$/;"	f	file:
one_id	tests/object/raw/data.h	/^static char *one_id = "8b137891791fe96927ad78e64b0aad7bded08bdc";$/;"	v
one_obj	tests/object/raw/data.h	/^static git_rawobj one_obj = {$/;"	v
one_to_two	src/checkout.c	/^		one_to_two:1,$/;"	m	struct:__anon122	file:
op	deps/zlib/inftrees.h	/^    unsigned char op;           \/* operation, extra bits, table bits *\/$/;"	m	struct:__anon200
opaque	deps/zlib/zlib.h	/^    voidpf     opaque;  \/* private data object passed to zalloc and zfree *\/$/;"	m	struct:z_stream_s
open	examples/network/index-pack.c	12;"	d	file:
open	include/git2/sys/config.h	/^	int (*open)(struct git_config_backend *, git_config_level_t level);$/;"	m	struct:git_config_backend
open	src/pool.h	/^	git_pool_page *open; \/* pages with space left *\/$/;"	m	struct:__anon33
open_algorithm_provider	src/hash/hash_win32.h	/^	hash_win32_cng_open_algorithm_provider_fn open_algorithm_provider;$/;"	m	struct:hash_cng_prov
open_gitmodules	src/submodule.c	/^static git_config_backend *open_gitmodules($/;"	f	file:
open_pack	src/indexer.c	/^static int open_pack(struct git_pack_file **out, const char *filename)$/;"	f	file:
open_windows	src/mwindow.h	/^	unsigned int open_windows;$/;"	m	struct:git_mwindow_ctl
opendir	src/win32/dir.h	35;"	d
opened_pack	src/indexer.c	/^		opened_pack :1,$/;"	m	struct:git_indexer	file:
opr	deps/regex/regex_internal.h	/^  } opr;$/;"	m	struct:__anon184	typeref:union:__anon184::__anon185
opr	deps/regex/regex_internal.h	/^  } opr;$/;"	m	struct:__anon192	typeref:union:__anon192::__anon193
opt	src/hashsig.c	/^	git_hashsig_option_t opt;$/;"	m	struct:git_hashsig	file:
opt_len	deps/zlib/deflate.h	/^    ulg opt_len;        \/* bit length of current block with optimal trees *\/$/;"	m	struct:internal_state
opt_subexp	deps/regex/regex_internal.h	/^  unsigned int opt_subexp : 1;$/;"	m	struct:__anon184
optimize_subexps	deps/regex/regcomp.c	/^optimize_subexps (void *extra, bin_tree_t *node)$/;"	f	file:
optimize_utf8	deps/regex/regcomp.c	/^optimize_utf8 (re_dfa_t *dfa)$/;"	f	file:
options	examples/add.c	/^	enum print_options options;$/;"	m	struct:print_payload	typeref:enum:print_payload::print_options	file:
options	src/blame.h	/^	git_blame_options options;$/;"	m	struct:git_blame
opts	examples/blame.c	/^struct opts {$/;"	s	file:
opts	examples/cat-file.c	/^struct opts {$/;"	s	file:
opts	examples/diff.c	/^struct opts {$/;"	s	file:
opts	examples/init.c	/^struct opts {$/;"	s	file:
opts	examples/status.c	/^struct opts {$/;"	s	file:
opts	src/checkout.c	/^	git_checkout_opts opts;$/;"	m	struct:__anon121	file:
opts	src/diff.h	/^	git_diff_options opts;$/;"	m	struct:git_diff
opts	src/status.h	/^	git_status_options opts;$/;"	m	struct:git_status_list
opts	tests/diff/blob.c	/^static git_diff_options opts;$/;"	v	file:
opts	tests/diff/tree.c	/^static git_diff_options opts;$/;"	v	file:
opts_flags	src/diff_file.h	/^	uint32_t opts_flags;$/;"	m	struct:__anon154
opts_free_baseline	src/checkout.c	/^	bool opts_free_baseline;$/;"	m	struct:__anon121	file:
opts_max_size	src/diff_file.h	/^	git_off_t opts_max_size;$/;"	m	struct:__anon154
org_indices	deps/regex/regex_internal.h	/^  int *org_indices;$/;"	m	struct:re_dfa_t
org_ptr	deps/zlib/zutil.c	/^    voidpf org_ptr;$/;"	m	struct:ptr_table_s	file:
orig_commit_id	include/git2/blame.h	/^	git_oid orig_commit_id;$/;"	m	struct:git_blame_hunk
orig_path	include/git2/blame.h	/^	const char *orig_path;$/;"	m	struct:git_blame_hunk
orig_signature	include/git2/blame.h	/^	git_signature *orig_signature;$/;"	m	struct:git_blame_hunk
orig_start_line_number	include/git2/blame.h	/^	uint16_t orig_start_line_number;$/;"	m	struct:git_blame_hunk
origin	include/git2/diff.h	/^	char   origin;       \/** A git_diff_line_t value *\/$/;"	m	struct:git_diff_line
origin_decref	src/blame_git.c	/^static void origin_decref(git_blame__origin *o)$/;"	f	file:
origin_incref	src/blame_git.c	/^static git_blame__origin *origin_incref(git_blame__origin *o)$/;"	f	file:
origin_url	include/git2/repository.h	/^	const char *origin_url;$/;"	m	struct:__anon212
os	deps/zlib/zlib.h	/^    int     os;         \/* operating system *\/$/;"	m	struct:gz_header_s
os	include/git2/oid.h	/^GIT_EXTERN(void) git_oid_shorten_free(git_oid_shorten *os);$/;"	v
other_commit_id	tests/refs/races.c	/^static const char *other_commit_id = "a65fedf39aefe402d3bb6e24df4d4f5fe4547750";$/;"	v	file:
other_flags	src/diff_driver.c	/^	uint32_t other_flags;$/;"	m	struct:git_diff_driver	file:
other_idx	src/merge.c	/^	size_t other_idx;$/;"	m	struct:merge_diff_similarity	file:
other_refname	tests/refs/races.c	/^static const char *other_refname = "refs\/heads\/foo";$/;"	v	file:
our_entry	src/merge.h	/^	git_index_entry our_entry;$/;"	m	struct:__anon144
our_label	include/git2/checkout.h	/^	const char *our_label; \/** the name of the "our" side of conflicts *\/$/;"	m	struct:git_checkout_opts
our_mode	tests/merge/merge_helpers.h	/^	unsigned int our_mode;$/;"	m	struct:merge_reuc_entry
our_oid_str	tests/merge/merge_helpers.h	/^	char our_oid_str[41];$/;"	m	struct:merge_reuc_entry
our_path	tests/merge/merge_helpers.h	/^	char our_path[128];$/;"	m	struct:merge_name_entry
our_status	src/merge.h	/^	git_delta_t our_status;$/;"	m	struct:__anon144
ours	include/git2/sys/index.h	/^	char *ours;$/;"	m	struct:git_index_name_entry
ours	src/checkout.c	/^	const git_index_entry *ours;$/;"	m	struct:__anon122	file:
ours	tests/checkout/conflict.c	/^	char ours[64];$/;"	m	struct:checkout_name_entry	file:
ours	tests/merge/merge_helpers.h	/^	struct merge_index_with_status ours;$/;"	m	struct:merge_index_conflict_data	typeref:struct:merge_index_conflict_data::merge_index_with_status
out	include/git2/config.h	/^GIT_EXTERN(int) git_config_find_global(git_buf *out);$/;"	v
out	include/git2/config.h	/^GIT_EXTERN(int) git_config_find_system(git_buf *out);$/;"	v
out	include/git2/config.h	/^GIT_EXTERN(int) git_config_find_xdg(git_buf *out);$/;"	v
out	include/git2/config.h	/^GIT_EXTERN(int) git_config_new(git_config **out);$/;"	v
out	include/git2/config.h	/^GIT_EXTERN(int) git_config_open_default(git_config **out);$/;"	v
out	include/git2/index.h	/^GIT_EXTERN(int) git_index_new(git_index **out);$/;"	v
out	include/git2/odb.h	/^GIT_EXTERN(int) git_odb_new(git_odb **out);$/;"	v
out	include/git2/sys/repository.h	/^GIT_EXTERN(int) git_repository_new(git_repository **out);$/;"	v
out	include/git2/transport.h	/^GIT_EXTERN(int) git_cred_default_new(git_cred **out);$/;"	v
out_degree	src/commit_list.h	/^	unsigned short out_degree;$/;"	m	struct:git_commit_list_node
out_func	deps/zlib/zlib.h	/^typedef int (*out_func) OF((void FAR *, unsigned char FAR *, unsigned));$/;"	t
out_of_order_pack	tests/pack/indexer.c	/^static const unsigned char out_of_order_pack[] = {$/;"	v	file:
out_of_order_pack_len	tests/pack/indexer.c	/^static const unsigned int out_of_order_pack_len = 112;$/;"	v	file:
outf	src/xdiff/xdiff.h	/^	int (*outf)(void *, mmbuffer_t *, int);$/;"	m	struct:s_xdemitcb
output	src/diff_xdiff.h	/^	git_diff_output output;$/;"	m	struct:__anon103
overwrite_filemode	tests/diff/drivers.c	/^static void overwrite_filemode(const char *expected, git_buf *actual)$/;"	f	file:
own_cache	src/odb.h	/^	git_cache own_cache;$/;"	m	struct:git_odb
owner	src/transports/git.c	/^	git_transport *owner;$/;"	m	struct:__anon75	file:
owner	src/transports/http.c	/^	transport_smart *owner;$/;"	m	struct:__anon81	file:
owner	src/transports/local.c	/^	git_remote *owner;$/;"	m	struct:__anon78	file:
owner	src/transports/smart.h	/^	git_remote *owner;$/;"	m	struct:__anon73
owner	src/transports/ssh.c	/^	transport_smart *owner;$/;"	m	struct:__anon77	file:
owner	src/transports/winhttp.c	/^	transport_smart *owner;$/;"	m	struct:__anon63	file:
owner	src/util.h	/^	void *owner;$/;"	m	struct:__anon31
p	src/pack.h	/^	struct git_pack_file *p;$/;"	m	struct:git_pack_entry	typeref:struct:git_pack_entry::git_pack_file
p	src/pack.h	/^	struct git_pack_file *p;$/;"	m	struct:git_packfile_stream	typeref:struct:git_packfile_stream::git_pack_file
p_access	src/posix.h	75;"	d
p_access	src/win32/posix_w32.c	/^int p_access(const char* path, mode_t mode)$/;"	f
p_chdir	src/posix.h	72;"	d
p_chdir	src/win32/posix_w32.c	/^int p_chdir(const char* path)$/;"	f
p_chmod	src/posix.h	74;"	d
p_chmod	src/win32/posix_w32.c	/^int p_chmod(const char* path, mode_t mode)$/;"	f
p_close	src/posix.h	61;"	d
p_creat	src/posix.c	/^int p_creat(const char *path, mode_t mode)$/;"	f
p_creat	src/win32/posix_w32.c	/^int p_creat(const char *path, mode_t mode)$/;"	f
p_fnmatch	src/fnmatch.c	/^p_fnmatch(const char *pattern, const char *string, int flags)$/;"	f
p_fnmatchx	src/fnmatch.c	/^p_fnmatchx(const char *pattern, const char *string, int flags, size_t recurs)$/;"	f	file:
p_freeaddrinfo	src/posix.c	/^void p_freeaddrinfo(struct addrinfo *info)$/;"	f
p_freeaddrinfo	src/posix.h	136;"	d
p_fstat	src/posix.h	59;"	d
p_fsync	src/unix/posix.h	19;"	d
p_fsync	src/win32/posix_w32.c	/^int p_fsync(int fd)$/;"	f
p_gai_strerror	src/posix.c	/^const char *p_gai_strerror(int ret)$/;"	f
p_gai_strerror	src/posix.h	137;"	d
p_getaddrinfo	src/posix.c	/^int p_getaddrinfo($/;"	f
p_getaddrinfo	src/posix.h	135;"	d
p_getcwd	src/posix.c	/^int p_getcwd(char *buffer_out, size_t size)$/;"	f
p_getcwd	src/win32/posix_w32.c	/^int p_getcwd(char *buffer_out, size_t size)$/;"	f
p_gmtime_r	src/posix.h	82;"	d
p_gmtime_r	src/win32/posix_w32.c	/^p_gmtime_r (const time_t *timer, struct tm *result)$/;"	f
p_hide_directory__w32	src/win32/posix_w32.c	/^int p_hide_directory__w32(const char *path)$/;"	f
p_inet_pton	src/unix/posix.h	32;"	d
p_inet_pton	src/win32/posix_w32.c	/^int p_inet_pton(int af, const char *src, void *dst)$/;"	f
p_link	src/unix/posix.h	16;"	d
p_link	src/win32/posix.h	/^GIT_INLINE(int) p_link(const char *old, const char *new)$/;"	f
p_localtime_r	src/posix.h	81;"	d
p_localtime_r	src/win32/posix_w32.c	/^p_localtime_r (const time_t *timer, struct tm *result)$/;"	f
p_lseek	src/posix.h	60;"	d
p_lstat	src/unix/posix.h	13;"	d
p_lstat	src/win32/posix_w32.c	/^int p_lstat(const char *filename, struct stat *buf)$/;"	f
p_lstat_posixly	src/unix/posix.h	35;"	d
p_lstat_posixly	src/win32/posix_w32.c	/^int p_lstat_posixly(const char *filename, struct stat *buf)$/;"	f
p_mkdir	src/unix/posix.h	18;"	d
p_mkdir	src/win32/posix.h	/^GIT_INLINE(int) p_mkdir(const char *path, mode_t mode)$/;"	f
p_mkstemp	src/unix/posix.h	30;"	d
p_mkstemp	src/win32/posix_w32.c	/^int p_mkstemp(char *tmp_path)$/;"	f
p_mmap	src/posix.c	/^int p_mmap(git_map *out, size_t len, int prot, int flags, int fd, git_off_t offset)$/;"	f
p_mmap	src/unix/map.c	/^int p_mmap(git_map *out, size_t len, int prot, int flags, int fd, git_off_t offset)$/;"	f
p_mmap	src/win32/map.c	/^int p_mmap(git_map *out, size_t len, int prot, int flags, int fd, git_off_t offset)$/;"	f
p_munmap	src/posix.c	/^int p_munmap(git_map *map)$/;"	f
p_munmap	src/unix/map.c	/^int p_munmap(git_map *map)$/;"	f
p_munmap	src/win32/map.c	/^int p_munmap(git_map *map)$/;"	f
p_open	src/posix.c	/^int p_open(const char *path, int flags, ...)$/;"	f
p_open	src/win32/posix_w32.c	/^int p_open(const char *path, int flags, ...)$/;"	f
p_read	src/posix.c	/^int p_read(git_file fd, void *buf, size_t cnt)$/;"	f
p_readdir_r	src/posix.h	/^GIT_INLINE(int) p_readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result)$/;"	f
p_readdir_r	src/posix.h	112;"	d
p_readlink	src/unix/posix.h	14;"	d
p_readlink	src/win32/posix_w32.c	/^int p_readlink(const char *link, char *target, size_t target_len)$/;"	f
p_realpath	src/unix/posix.h	23;"	d
p_realpath	src/unix/realpath.c	/^char *p_realpath(const char *pathname, char *resolved)$/;"	f
p_realpath	src/win32/posix_w32.c	/^char *p_realpath(const char *orig_path, char *buffer)$/;"	f
p_recv	src/posix.h	76;"	d
p_recv	src/win32/posix_w32.c	/^int p_recv(GIT_SOCKET socket, void *buffer, size_t length, int flags)$/;"	f
p_rename	src/posix.c	/^int p_rename(const char *from, const char *to)$/;"	f
p_rename	src/win32/posix_w32.c	/^int p_rename(const char *from, const char *to)$/;"	f
p_rmdir	src/posix.h	73;"	d
p_rmdir	src/win32/posix_w32.c	/^int p_rmdir(const char* path)$/;"	f
p_send	src/posix.h	77;"	d
p_send	src/win32/posix_w32.c	/^int p_send(GIT_SOCKET socket, const void *buffer, size_t length, int flags)$/;"	f
p_setenv	src/unix/posix.h	31;"	d
p_setenv	src/win32/posix_w32.c	/^int p_setenv(const char* name, const char* value, int overwrite)$/;"	f
p_snprintf	src/unix/posix.h	29;"	d
p_snprintf	src/win32/posix_w32.c	/^int p_snprintf(char *buffer, size_t count, const char *format, ...)$/;"	f
p_snprintf	tests/clar.c	57;"	d	file:
p_snprintf	tests/clar.c	59;"	d	file:
p_snprintf	tests/clar.c	73;"	d	file:
p_stat	src/posix.h	71;"	d
p_stat	src/win32/posix_w32.c	/^int p_stat(const char* path, struct stat* buf)$/;"	f
p_strnlen	src/strnlen.h	/^GIT_INLINE(size_t) p_strnlen(const char *s, size_t maxlen) {$/;"	f
p_strnlen	src/strnlen.h	20;"	d
p_symlink	src/unix/posix.h	15;"	d
p_symlink	src/win32/posix_w32.c	/^int p_symlink(const char *old, const char *new)$/;"	f
p_umask	src/posix.h	62;"	d
p_unlink	src/unix/posix.h	17;"	d
p_unlink	src/win32/posix_w32.c	/^int p_unlink(const char *path)$/;"	f
p_vsnprintf	src/unix/posix.h	28;"	d
p_vsnprintf	src/win32/posix_w32.c	/^int p_vsnprintf(char *buffer, size_t count, const char *format, va_list argptr)$/;"	f
p_write	src/posix.c	/^int p_write(git_file fd, const void *buf, size_t cnt)$/;"	f
pack	src/indexer.c	/^	struct git_pack_file *pack;$/;"	m	struct:git_indexer	typeref:struct:git_indexer::git_pack_file	file:
pack_backend	src/odb_pack.c	/^struct pack_backend {$/;"	s	file:
pack_backend__alloc	src/odb_pack.c	/^static int pack_backend__alloc(struct pack_backend **out, size_t initial_size)$/;"	f	file:
pack_backend__exists	src/odb_pack.c	/^static int pack_backend__exists(git_odb_backend *backend, const git_oid *oid)$/;"	f	file:
pack_backend__foreach	src/odb_pack.c	/^static int pack_backend__foreach(git_odb_backend *_backend, git_odb_foreach_cb cb, void *data)$/;"	f	file:
pack_backend__free	src/odb_pack.c	/^static void pack_backend__free(git_odb_backend *_backend)$/;"	f	file:
pack_backend__read	src/odb_pack.c	/^static int pack_backend__read($/;"	f	file:
pack_backend__read_header	src/odb_pack.c	/^static int pack_backend__read_header($/;"	f	file:
pack_backend__read_header_internal	src/odb_pack.c	/^static int pack_backend__read_header_internal($/;"	f	file:
pack_backend__read_internal	src/odb_pack.c	/^static int pack_backend__read_internal($/;"	f	file:
pack_backend__read_prefix	src/odb_pack.c	/^static int pack_backend__read_prefix($/;"	f	file:
pack_backend__read_prefix_internal	src/odb_pack.c	/^static int pack_backend__read_prefix_internal($/;"	f	file:
pack_backend__refresh	src/odb_pack.c	/^static int pack_backend__refresh(git_odb_backend *backend_)$/;"	f	file:
pack_backend__writepack	src/odb_pack.c	/^static int pack_backend__writepack(struct git_odb_writepack **out,$/;"	f	file:
pack_backend__writepack_append	src/odb_pack.c	/^static int pack_backend__writepack_append(struct git_odb_writepack *_writepack, const void *data, size_t size, git_transfer_progress *stats)$/;"	f	file:
pack_backend__writepack_commit	src/odb_pack.c	/^static int pack_backend__writepack_commit(struct git_odb_writepack *_writepack, git_transfer_progress *stats)$/;"	f	file:
pack_backend__writepack_free	src/odb_pack.c	/^static void pack_backend__writepack_free(struct git_odb_writepack *_writepack)$/;"	f	file:
pack_entry_find	src/odb_pack.c	/^static int pack_entry_find(struct git_pack_entry *e, struct pack_backend *backend, const git_oid *oid)$/;"	f	file:
pack_entry_find_inner	src/odb_pack.c	/^static int pack_entry_find_inner($/;"	f	file:
pack_entry_find_offset	src/pack.c	/^static int pack_entry_find_offset($/;"	f	file:
pack_entry_find_prefix	src/odb_pack.c	/^static int pack_entry_find_prefix($/;"	f	file:
pack_file	src/indexer.c	/^	git_filebuf pack_file;$/;"	m	struct:git_indexer	file:
pack_folder	src/odb_pack.c	/^	char *pack_folder;$/;"	m	struct:pack_backend	file:
pack_index_check	src/pack.c	/^static int pack_index_check(const char *path, struct git_pack_file *p)$/;"	f	file:
pack_index_free	src/pack.c	/^static void pack_index_free(struct git_pack_file *p)$/;"	f	file:
pack_index_open	src/pack.c	/^static int pack_index_open(struct git_pack_file *p)$/;"	f	file:
pack_keep	src/pack.h	/^	unsigned pack_local:1, pack_keep:1, has_cache:1;$/;"	m	struct:git_pack_file
pack_local	src/pack.h	/^	unsigned pack_local:1, pack_keep:1, has_cache:1;$/;"	m	struct:git_pack_file
pack_name	src/pack.h	/^	char pack_name[GIT_FLEX_ARRAY]; \/* more *\/$/;"	m	struct:git_pack_file
pack_oid	src/pack-objects.h	/^	git_oid pack_oid; \/* hash of written pack *\/$/;"	m	struct:git_packbuilder
pack_pkt	src/transports/smart_pkt.c	/^static int pack_pkt(git_pkt **out)$/;"	f	file:
pack_progress_cb	src/push.h	/^	git_packbuilder_progress pack_progress_cb;$/;"	m	struct:git_push
pack_progress_cb_payload	src/push.h	/^	void *pack_progress_cb_payload;$/;"	m	struct:git_push
pack_version_ok	src/pack.h	25;"	d
pack_window_open	src/pack.c	/^static unsigned char *pack_window_open($/;"	f	file:
pack_write_context	src/pack-objects.c	/^struct pack_write_context {$/;"	s	file:
pack_writepack	src/odb_pack.c	/^struct pack_writepack {$/;"	s	file:
packall	tests/refs/pack.c	/^static void packall(void)$/;"	f	file:
packbuilder_config	src/pack-objects.c	/^static int packbuilder_config(git_packbuilder *pb)$/;"	f	file:
packed_find_peel	src/refdb_fs.c	/^static int packed_find_peel(refdb_fs_backend *backend, struct packref *ref)$/;"	f	file:
packed_head_name	tests/refs/read.c	/^static const char *packed_head_name = "refs\/heads\/packed";$/;"	v	file:
packed_head_name	tests/refs/rename.c	/^static const char *packed_head_name = "refs\/heads\/packed";$/;"	v	file:
packed_loadloose	src/refdb_fs.c	/^static int packed_loadloose(refdb_fs_backend *backend)$/;"	f	file:
packed_lookup	src/refdb_fs.c	/^static int packed_lookup($/;"	f	file:
packed_objects	tests/odb/pack_data.h	/^static const char *packed_objects[] = {$/;"	v
packed_objects_one	tests/odb/pack_data_one.h	/^static const char *packed_objects_one[] = {$/;"	v
packed_pos	src/refdb_fs.c	/^	size_t packed_pos;$/;"	m	struct:__anon148	file:
packed_reload	src/refdb_fs.c	/^static int packed_reload(refdb_fs_backend *backend)$/;"	f	file:
packed_remove_loose	src/refdb_fs.c	/^static int packed_remove_loose(refdb_fs_backend *backend)$/;"	f	file:
packed_test_head_name	tests/refs/delete.c	/^static const char *packed_test_head_name = "refs\/heads\/packed-test";$/;"	v	file:
packed_test_head_name	tests/refs/read.c	/^static const char *packed_test_head_name = "refs\/heads\/packed-test";$/;"	v	file:
packed_test_head_name	tests/refs/rename.c	/^static const char *packed_test_head_name = "refs\/heads\/packed-test";$/;"	v	file:
packed_write	src/refdb_fs.c	/^static int packed_write(refdb_fs_backend *backend)$/;"	f	file:
packed_write_ref	src/refdb_fs.c	/^static int packed_write_ref(struct packref *ref, git_filebuf *file)$/;"	f	file:
packetsize_cb	src/transports/smart.h	/^	packetsize_cb packetsize_cb;$/;"	m	struct:__anon73
packetsize_cb	src/transports/smart.h	/^typedef int (*packetsize_cb)(size_t received, void *payload);$/;"	t
packetsize_payload	src/transports/smart.h	/^	void *packetsize_payload;$/;"	m	struct:__anon73
packfile	src/refdb_fs.h	/^	git_strmap *packfile;$/;"	m	struct:__anon172
packfile_error	src/pack.c	/^static int packfile_error(const char *message)$/;"	f	file:
packfile_load__cb	src/odb_pack.c	/^static int packfile_load__cb(void *data, git_buf *path)$/;"	f	file:
packfile_open	src/pack.c	/^static int packfile_open(struct git_pack_file *p)$/;"	f	file:
packfile_sort__cb	src/odb_pack.c	/^static int packfile_sort__cb(const void *a_, const void *b_)$/;"	f	file:
packfile_time	src/refdb_fs.h	/^	time_t packfile_time;$/;"	m	struct:__anon172
packfile_unpack_compressed	src/pack.c	/^int packfile_unpack_compressed($/;"	f
packfile_unpack_delta	src/pack.c	/^static int packfile_unpack_delta($/;"	f	file:
packfile_unpack_header1	src/pack.c	/^static int packfile_unpack_header1($/;"	f	file:
packref	src/refdb_fs.c	/^struct packref {$/;"	s	file:
packref_cmp	src/refdb_fs.c	/^static int packref_cmp(const void *a_, const void *b_)$/;"	f	file:
packs	src/odb_pack.c	/^	git_vector packs;$/;"	m	struct:pack_backend	file:
page_size	src/pool.h	/^	uint32_t page_size;  \/* size of page in bytes *\/$/;"	m	struct:__anon33
paired	src/status.h	/^	git_vector paired;$/;"	m	struct:git_status_list
param	src/transport.c	/^	void *param;$/;"	m	struct:transport_definition	file:
params	src/diff_xdiff.h	/^	xpparam_t    params;$/;"	m	struct:__anon103
parent	deps/regex/regex_internal.h	/^  struct bin_tree_t *parent;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t
parent	include/git2/transport.h	/^	git_cred parent;$/;"	m	struct:__anon243
parent	include/git2/transport.h	/^	git_cred parent;$/;"	m	struct:git_cred_ssh_custom
parent	include/git2/transport.h	/^	git_cred parent;$/;"	m	struct:git_cred_ssh_key
parent	src/blame_git.c	/^	git_blame__origin *parent;$/;"	m	struct:blame_chunk_cb_data	file:
parent	src/config.c	/^	git_config_iterator parent;$/;"	m	struct:__anon94	file:
parent	src/config.c	/^	git_config_iterator parent;$/;"	m	struct:__anon96	file:
parent	src/config_file.c	/^	git_config_backend parent;$/;"	m	struct:__anon35	file:
parent	src/config_file.c	/^	git_config_iterator parent;$/;"	m	struct:git_config_file_iter	file:
parent	src/iterator.c	/^	tree_iterator_entry *parent;$/;"	m	struct:tree_iterator_entry	file:
parent	src/odb_loose.c	/^	git_odb_backend parent;$/;"	m	struct:loose_backend	file:
parent	src/odb_pack.c	/^	git_odb_backend parent;$/;"	m	struct:pack_backend	file:
parent	src/odb_pack.c	/^	struct git_odb_writepack parent;$/;"	m	struct:pack_writepack	typeref:struct:pack_writepack::git_odb_writepack	file:
parent	src/refdb_fs.c	/^	git_refdb_backend parent;$/;"	m	struct:refdb_fs_backend	file:
parent	src/refdb_fs.c	/^	git_reference_iterator parent;$/;"	m	struct:__anon148	file:
parent	src/transports/git.c	/^	git_smart_subtransport parent;$/;"	m	struct:__anon75	file:
parent	src/transports/git.c	/^	git_smart_subtransport_stream parent;$/;"	m	struct:__anon74	file:
parent	src/transports/http.c	/^	git_smart_subtransport parent;$/;"	m	struct:__anon81	file:
parent	src/transports/http.c	/^	git_smart_subtransport_stream parent;$/;"	m	struct:__anon80	file:
parent	src/transports/local.c	/^	git_transport parent;$/;"	m	struct:__anon78	file:
parent	src/transports/smart.h	/^	git_transport parent;$/;"	m	struct:__anon73
parent	src/transports/ssh.c	/^	git_smart_subtransport parent;$/;"	m	struct:__anon77	file:
parent	src/transports/ssh.c	/^	git_smart_subtransport_stream parent;$/;"	m	struct:__anon76	file:
parent	src/transports/winhttp.c	/^	git_smart_subtransport parent;$/;"	m	struct:__anon63	file:
parent	src/transports/winhttp.c	/^	git_smart_subtransport_stream parent;$/;"	m	struct:__anon62	file:
parent	src/tree-cache.h	/^	struct git_tree_cache *parent;$/;"	m	struct:git_tree_cache	typeref:struct:git_tree_cache::git_tree_cache
parent	tests/odb/backend/nonrefreshing.c	/^	git_odb_backend parent;$/;"	m	struct:fake_backend	file:
parent_ids	src/commit.h	/^	git_array_t(git_oid) parent_ids;$/;"	m	struct:git_commit
parents	src/commit.c	/^	const git_commit **parents;$/;"	m	struct:__anon99	file:
parents	src/commit.c	/^	const git_oid **parents;$/;"	m	struct:__anon98	file:
parents	src/commit_list.h	/^	struct git_commit_list_node **parents;$/;"	m	struct:git_commit_list_node	typeref:struct:git_commit_list_node::git_commit_list_node
parse	deps/regex/regcomp.c	/^parse (re_string_t *regexp, regex_t *preg, reg_syntax_t syntax,$/;"	f	file:
parse	src/object.c	/^	int  (*parse)(void *self, git_odb_object *obj);$/;"	m	struct:__anon102	file:
parse	tests/generate.py	/^    def parse(self, contents):$/;"	m	class:Module
parse_bracket_element	deps/regex/regcomp.c	/^parse_bracket_element (bracket_elem_t *elem, re_string_t *regexp,$/;"	f	file:
parse_bracket_exp	deps/regex/regcomp.c	/^parse_bracket_exp (re_string_t *regexp, re_dfa_t *dfa, re_token_t *token,$/;"	f	file:
parse_bracket_symbol	deps/regex/regcomp.c	/^parse_bracket_symbol (bracket_elem_t *elem, re_string_t *regexp,$/;"	f	file:
parse_branch	deps/regex/regcomp.c	/^parse_branch (re_string_t *regexp, regex_t *preg, re_token_t *token,$/;"	f	file:
parse_buffer	src/transports/http.c	/^	gitno_buffer parse_buffer;$/;"	m	struct:__anon81	file:
parse_buffer_data	src/transports/http.c	/^	char parse_buffer_data[2048];$/;"	m	struct:__anon81	file:
parse_commit	tests/commit/parse.c	/^static int parse_commit(git_commit **out, const char *buffer)$/;"	f	file:
parse_date_basic	src/date.c	/^static int parse_date_basic(const char *date, git_time_t *timestamp, int *offset)$/;"	f	file:
parse_dup_op	deps/regex/regcomp.c	/^parse_dup_op (bin_tree_t *elem, re_string_t *regexp, re_dfa_t *dfa,$/;"	f	file:
parse_error	src/transports/http.c	/^	int parse_error;$/;"	m	struct:__anon81	file:
parse_expression	deps/regex/regcomp.c	/^parse_expression (re_string_t *regexp, regex_t *preg, re_token_t *token,$/;"	f	file:
parse_finished	src/transports/http.c	/^	unsigned parse_finished : 1;$/;"	m	struct:__anon81	file:
parse_header	src/indexer.c	/^static int parse_header(struct git_pack_header *hdr, struct git_pack_file *pack)$/;"	f	file:
parse_header_name	src/transports/http.c	/^	git_buf parse_header_name;$/;"	m	struct:__anon81	file:
parse_header_value	src/transports/http.c	/^	git_buf parse_header_value;$/;"	m	struct:__anon81	file:
parse_ignore_file	src/ignore.c	/^static int parse_ignore_file($/;"	f	file:
parse_index	src/index.c	/^static int parse_index(git_index *index, const char *buffer, size_t buffer_size)$/;"	f	file:
parse_len	src/transports/smart_pkt.c	/^static int32_t parse_len(const char *line)$/;"	f	file:
parse_multiline_variable	src/config_file.c	/^static int parse_multiline_variable(struct reader *reader, git_buf *value, int in_quotes)$/;"	f	file:
parse_obj_type	src/revparse.c	/^static git_otype parse_obj_type(const char *str)$/;"	f	file:
parse_optimized_patterns	src/attr_file.c	/^static bool parse_optimized_patterns($/;"	f	file:
parse_options	examples/log.c	/^static int parse_options($/;"	f	file:
parse_opts	examples/add.c	/^static void parse_opts(int *options, int *count, int argc, char *argv[])$/;"	f	file:
parse_opts	examples/blame.c	/^static void parse_opts(struct opts *o, int argc, char *argv[])$/;"	f	file:
parse_opts	examples/cat-file.c	/^static void parse_opts(struct opts *o, int argc, char *argv[])$/;"	f	file:
parse_opts	examples/diff.c	/^static void parse_opts(struct opts *o, int argc, char *argv[])$/;"	f	file:
parse_opts	examples/init.c	/^static void parse_opts(struct opts *o, int argc, char *argv[])$/;"	f	file:
parse_opts	examples/rev-parse.c	/^static void parse_opts(struct parse_state *ps, int argc, char *argv[])$/;"	f	file:
parse_opts	examples/status.c	/^static void parse_opts(struct opts *o, int argc, char *argv[])$/;"	f	file:
parse_refspec	src/push.c	/^static int parse_refspec(git_push *push, push_spec **spec, const char *str)$/;"	f	file:
parse_reg_exp	deps/regex/regcomp.c	/^parse_reg_exp (re_string_t *regexp, regex_t *preg, re_token_t *token,$/;"	f	file:
parse_report	src/transports/smart_protocol.c	/^static int parse_report(gitno_buffer *buf, git_push *push)$/;"	f	file:
parse_revision	examples/rev-parse.c	/^static int parse_revision(struct parse_state *ps)$/;"	f	file:
parse_section_header	src/config_file.c	/^static int parse_section_header(struct reader *reader, char **section_out)$/;"	f	file:
parse_section_header_ext	src/config_file.c	/^static int parse_section_header_ext(struct reader *reader, const char *line, const char *base_name, char **section_name)$/;"	f	file:
parse_shared	examples/init.c	/^static uint32_t parse_shared(const char *shared)$/;"	f	file:
parse_state	examples/rev-parse.c	/^struct parse_state {$/;"	s	file:
parse_sub_exp	deps/regex/regcomp.c	/^parse_sub_exp (re_string_t *regexp, regex_t *preg, re_token_t *token,$/;"	f	file:
parse_test_case	tests/commit/parse.c	/^} parse_test_case;$/;"	t	typeref:struct:__anon14	file:
parse_unauthorized_response	src/transports/http.c	/^static int parse_unauthorized_response($/;"	f	file:
parse_unauthorized_response	src/transports/winhttp.c	/^static int parse_unauthorized_response($/;"	f	file:
parse_url_char	deps/http-parser/http_parser.c	/^parse_url_char(enum state s, const char ch)$/;"	f	file:
parse_variable	src/config_file.c	/^static int parse_variable(struct reader *reader, char **var_name, char **var_value)$/;"	f	file:
parsed	src/commit_list.h	/^			 parsed:1,$/;"	m	struct:git_commit_list_node
parsed_header	src/indexer.c	/^	unsigned int parsed_header :1,$/;"	m	struct:git_indexer	file:
parser	src/transports/http.c	/^	http_parser parser;$/;"	m	struct:__anon81	file:
parser	tests/generate.py	/^    parser = OptionParser()$/;"	v	class:TestSuite
parser_context	src/transports/http.c	/^} parser_context;$/;"	t	typeref:struct:__anon82	file:
partial	src/iterator.c	/^	git_buf partial;$/;"	m	struct:__anon85	file:
partial_pos	src/iterator.c	/^	size_t partial_pos;$/;"	m	struct:__anon85	file:
pass	src/netops.h	/^	char *pass;$/;"	m	struct:gitno_connection_data
pass	tests/network/urlparse.c	/^static char *host, *port, *path, *user, *pass;$/;"	v	file:
pass_blame	src/blame_git.c	/^static void pass_blame(git_blame *blame, git_blame__origin *origin, uint32_t opt)$/;"	f	file:
pass_blame_to_parent	src/blame_git.c	/^static int pass_blame_to_parent($/;"	f	file:
pass_whole_blame	src/blame_git.c	/^static void pass_whole_blame(git_blame *blame,$/;"	f	file:
passing_commit_cases	tests/commit/parse.c	/^static char *passing_commit_cases[] = {$/;"	v	file:
passing_header_cases	tests/commit/parse.c	/^static parse_test_case passing_header_cases[] = {$/;"	v	file:
passing_signature_cases	tests/commit/parse.c	/^passing_signature_test_case passing_signature_cases[] = {$/;"	v
passing_signature_test_case	tests/commit/parse.c	/^} passing_signature_test_case;$/;"	t	typeref:struct:__anon15	file:
passphrase	include/git2/transport.h	/^	char *passphrase;$/;"	m	struct:git_cred_ssh_key
password	include/git2/cred_helpers.h	/^	char *password;$/;"	m	struct:git_cred_userpass_payload
password	include/git2/transport.h	/^	char *password;$/;"	m	struct:__anon243
patch	include/git2/patch.h	/^GIT_EXTERN(const git_diff_delta *) git_patch_get_delta(git_patch *patch);$/;"	v
patch	include/git2/patch.h	/^GIT_EXTERN(size_t) git_patch_num_hunks(git_patch *patch);$/;"	v
patch	include/git2/patch.h	/^GIT_EXTERN(void) git_patch_free(git_patch *patch);$/;"	v
patch	src/diff_patch.c	/^	git_patch patch;$/;"	m	struct:__anon150	file:
patch	src/diff_xdiff.c	/^	git_patch *patch;$/;"	m	struct:__anon51	file:
patch_from_sources	src/diff_patch.c	/^static int patch_from_sources($/;"	f	file:
path	deps/regex/regex_internal.h	/^  state_array_t *path;$/;"	m	struct:__anon188
path	deps/regex/regex_internal.h	/^  state_array_t path;$/;"	m	struct:__anon187
path	examples/blame.c	/^	char *path;$/;"	m	struct:opts	file:
path	examples/network/clone.c	/^	const char *path;$/;"	m	struct:progress_data	file:
path	include/git2/diff.h	/^	const char *path;$/;"	m	struct:__anon266
path	include/git2/index.h	/^	char *path;$/;"	m	struct:git_index_entry
path	include/git2/sys/index.h	/^	char *path;$/;"	m	struct:git_index_reuc_entry
path	src/attr_file.h	/^	char    *path;$/;"	m	struct:__anon135
path	src/blame.h	/^	char *path;$/;"	m	struct:git_blame
path	src/blame.h	/^	char path[GIT_FLEX_ARRAY];$/;"	m	struct:git_blame__origin
path	src/checkout.c	/^	git_buf path;$/;"	m	struct:__anon121	file:
path	src/filter.c	/^	char path[GIT_FLEX_ARRAY];$/;"	m	struct:git_filter_list	file:
path	src/filter.c	/^	const char     *path;$/;"	m	struct:git_filter_source	file:
path	src/index.c	/^	char path[1]; \/* arbitrary length *\/$/;"	m	struct:entry_long	file:
path	src/index.c	/^	char path[1]; \/* arbitrary length *\/$/;"	m	struct:entry_short	file:
path	src/index.c	/^	const char *path;$/;"	m	struct:entry_srch_key	file:
path	src/iterator.c	/^	git_buf path;$/;"	m	struct:__anon84	file:
path	src/iterator.c	/^	git_buf path;$/;"	m	struct:fs_iterator	file:
path	src/merge_file.h	/^	char *path;$/;"	m	struct:__anon55
path	src/merge_file.h	/^	const char *path;$/;"	m	struct:__anon56
path	src/netops.h	/^	char *path;$/;"	m	struct:gitno_connection_data
path	src/path.h	/^	char        path[GIT_FLEX_ARRAY];$/;"	m	struct:__anon126
path	src/refdb_fs.c	/^	char *path;$/;"	m	struct:refdb_fs_backend	file:
path	src/repo_template.h	/^	const char *path;$/;"	m	struct:__anon145
path	src/sortedcache.h	/^	char         path[GIT_FLEX_ARRAY];$/;"	m	struct:__anon158
path	src/submodule.h	/^	char *path; \/* important: may just point to "name" string *\/$/;"	m	struct:git_submodule
path	src/transports/smart.h	/^	char *path;$/;"	m	struct:git_pkt_cmd
path	src/win32/findfile.h	/^	wchar_t path[MAX_PATH];$/;"	m	struct:git_win32__path
path	tests/attr/attr_expect.h	/^	const char *path;$/;"	m	struct:attr_expected
path	tests/checkout/conflict.c	/^	char path[128];$/;"	m	struct:checkout_index_entry	file:
path	tests/core/dirent.c	/^	git_buf path;$/;"	m	struct:walk_data	file:
path	tests/core/sortedcache.c	/^	char path[GIT_FLEX_ARRAY];$/;"	m	struct:__anon27	file:
path	tests/diff/diff_helpers.h	/^	const char *path;$/;"	m	struct:__anon9
path	tests/index/tests.c	/^   char path[128];$/;"	m	struct:test_entry	file:
path	tests/merge/merge_helpers.h	/^	char path[128];$/;"	m	struct:merge_index_entry
path	tests/merge/merge_helpers.h	/^	char path[128];$/;"	m	struct:merge_reuc_entry
path	tests/network/urlparse.c	/^static char *host, *port, *path, *user, *pass;$/;"	v	file:
path	tests/repo/config.c	/^static git_buf path = GIT_BUF_INIT;$/;"	v	file:
path_ambiguities	src/iterator.c	/^	int path_ambiguities;$/;"	m	struct:__anon84	file:
path_dirent_data	src/path.c	/^typedef char path_dirent_data[sizeof(struct dirent) + FILENAME_MAX + 1];$/;"	t	file:
path_dirent_data	src/path.c	/^typedef struct dirent path_dirent_data;$/;"	t	typeref:struct:dirent	file:
path_found_entry	src/path.c	/^static int path_found_entry(void *payload, git_buf *path)$/;"	f	file:
path_from_url_or_path	src/transports/local.c	/^static int path_from_url_or_path(git_buf *local_path_out, const char *url_or_path)$/;"	f	file:
path_has_filename	src/iterator.c	/^	bool path_has_filename;$/;"	m	struct:__anon84	file:
path_len	src/index.c	/^	size_t path_len;$/;"	m	struct:entry_srch_key	file:
path_len	src/path.h	/^	size_t      path_len;$/;"	m	struct:__anon126
path_lock	src/filebuf.h	/^	char *path_lock;$/;"	m	struct:git_filebuf
path_original	src/filebuf.h	/^	char *path_original;$/;"	m	struct:git_filebuf
path_repository	src/repository.h	/^	char *path_repository;$/;"	m	struct:git_repository
path_unless_empty	src/repository.c	/^static const char *path_unless_empty(git_buf *buf)$/;"	f	file:
paths	include/git2/checkout.h	/^	git_strarray paths;$/;"	m	struct:git_checkout_opts
paths	src/blame.h	/^	git_vector paths;$/;"	m	struct:git_blame
paths	src/diff_patch.c	/^	char paths[GIT_FLEX_ARRAY];$/;"	m	struct:__anon150	file:
paths	tests/odb/alternates.c	/^static const char *paths[] = {$/;"	v	file:
paths	tests/submodule/status.c	/^	const char **paths;$/;"	m	struct:__anon10	file:
paths_cmp	src/blame.c	/^static int paths_cmp(const void *a, const void *b) { return git__strcmp((char*)a, (char*)b); }$/;"	f	file:
paths_on_dup	src/blame_git.c	/^static int paths_on_dup(void **old, void *new)$/;"	f	file:
pathspec	examples/status.c	/^    char *pathspec[MAX_PATHSPEC];$/;"	m	struct:opts	file:
pathspec	include/git2/diff.h	/^	git_strarray       pathspec;     \/**< defaults to include all paths *\/$/;"	m	struct:__anon268
pathspec	include/git2/status.h	/^	git_strarray      pathspec;$/;"	m	struct:__anon261
pathspec	src/diff.h	/^	git_vector       pathspec;$/;"	m	struct:git_diff
pathspec	src/pathspec.h	/^	git_pathspec *pathspec;$/;"	m	struct:git_pathspec_match_list
pathspec	src/pathspec.h	/^	git_vector pathspec;$/;"	m	struct:git_pathspec
pathspec_build_failure_array	src/pathspec.c	/^static int pathspec_build_failure_array($/;"	f	file:
pathspec_free	src/pathspec.c	/^static void pathspec_free(git_pathspec *ps)$/;"	f	file:
pathspec_mark_remaining	src/pathspec.c	/^static size_t pathspec_mark_remaining($/;"	f	file:
pathspec_match_alloc	src/pathspec.c	/^static git_pathspec_match_list *pathspec_match_alloc($/;"	f	file:
pathspec_match_context	src/pathspec.c	/^struct pathspec_match_context {$/;"	s	file:
pathspec_match_context_init	src/pathspec.c	/^static void pathspec_match_context_init($/;"	f	file:
pathspec_match_free	src/pathspec.c	/^static void pathspec_match_free(git_pathspec_match_list *m)$/;"	f	file:
pathspec_match_from_iterator	src/pathspec.c	/^static int pathspec_match_from_iterator($/;"	f	file:
pathspec_match_iter_flags	src/pathspec.c	/^static git_iterator_flag_t pathspec_match_iter_flags(uint32_t flags)$/;"	f	file:
pathspec_match_one	src/pathspec.c	/^static int pathspec_match_one($/;"	f	file:
patience_diff	src/xdiff/xpatience.c	/^static int patience_diff(mmfile_t *file1, mmfile_t *file2,$/;"	f	file:
pattern	src/attr_file.h	/^	char *pattern;$/;"	m	struct:__anon129
pattern	src/refspec.h	/^		pattern :1,$/;"	m	struct:git_refspec
pattern	src/tag.c	/^	const char *pattern;$/;"	m	struct:__anon50	file:
pattern	tests/object/tag/list.c	/^	const char* pattern;$/;"	m	struct:pattern_match_t	file:
pattern_match_t	tests/object/tag/list.c	/^struct pattern_match_t$/;"	s	file:
payload	include/git2/diff.h	/^	void *payload;$/;"	m	struct:__anon271
payload	include/git2/remote.h	/^	void *payload;$/;"	m	struct:git_remote_callbacks
payload	src/diff_patch.h	/^	void *payload;$/;"	m	struct:git_diff_output
payload	src/diff_print.c	/^	void *payload;$/;"	m	struct:__anon123	file:
payload	src/filter.c	/^	void *payload;$/;"	m	struct:__anon87	file:
payload	src/transports/smart_protocol.c	/^	void *payload;$/;"	m	struct:network_packetsize_payload	file:
payload	src/tsort.c	/^	void *payload;$/;"	m	struct:tsort_store	file:
payload	src/util.c	/^	void *payload;$/;"	m	struct:__anon106	file:
pb	include/git2/pack.h	/^GIT_EXTERN(const git_oid *) git_packbuilder_hash(git_packbuilder *pb);$/;"	v
pb	include/git2/pack.h	/^GIT_EXTERN(uint32_t) git_packbuilder_object_count(git_packbuilder *pb);$/;"	v
pb	include/git2/pack.h	/^GIT_EXTERN(uint32_t) git_packbuilder_written(git_packbuilder *pb);$/;"	v
pb	include/git2/pack.h	/^GIT_EXTERN(void) git_packbuilder_free(git_packbuilder *pb);$/;"	v
pb	src/pack-objects.c	/^	git_packbuilder *pb;$/;"	m	struct:thread_params	file:
pb	src/pack-objects.c	/^	git_packbuilder *pb;$/;"	m	struct:tree_walk_context	file:
pb	src/push.h	/^	git_packbuilder *pb;$/;"	m	struct:git_push
pb	src/transports/smart_protocol.c	/^	git_packbuilder *pb;$/;"	m	struct:push_packbuilder_payload	file:
pb_parallelism	include/git2/push.h	/^	unsigned int pb_parallelism;$/;"	m	struct:__anon254
pb_parallelism	src/push.h	/^	unsigned pb_parallelism;$/;"	m	struct:git_push
peak_mapped	src/mwindow.h	/^	size_t peak_mapped;$/;"	m	struct:git_mwindow_ctl
peak_open_windows	src/mwindow.h	/^	unsigned int peak_open_windows;$/;"	m	struct:git_mwindow_ctl
peek_token	deps/regex/regcomp.c	/^peek_token (re_token_t *token, re_string_t *input, reg_syntax_t syntax)$/;"	f	file:
peek_token_bracket	deps/regex/regcomp.c	/^peek_token_bracket (re_token_t *token, re_string_t *input, reg_syntax_t syntax)$/;"	f	file:
peel	src/refdb_fs.c	/^	git_oid peel;$/;"	m	struct:packref	file:
peel	src/refs.h	/^	git_oid peel;$/;"	m	struct:git_reference
peel_error	src/object.c	/^static int peel_error(int error, const git_oid *oid, git_otype type)$/;"	f	file:
peel_error	src/refs.c	/^static int peel_error(int error, git_reference *ref, const char* msg)$/;"	f	file:
peeling_mode	src/refdb_fs.c	/^	int peeling_mode;$/;"	m	struct:refdb_fs_backend	file:
pending	deps/zlib/deflate.h	/^    uInt   pending;      \/* nb of bytes in the pending buffer *\/$/;"	m	struct:internal_state
pending_buf	deps/zlib/deflate.h	/^    Bytef *pending_buf;  \/* output still pending *\/$/;"	m	struct:internal_state
pending_buf_size	deps/zlib/deflate.h	/^    ulg   pending_buf_size; \/* size of pending_buf *\/$/;"	m	struct:internal_state
pending_number	src/date.c	/^static void pending_number(struct tm *tm, int *num)$/;"	f	file:
pending_out	deps/zlib/deflate.h	/^    Bytef *pending_out;  \/* next pending byte to output to the stream *\/$/;"	m	struct:internal_state
pfx	src/checkout.c	/^	char *pfx;$/;"	m	struct:__anon121	file:
pfxcomp	src/diff.h	/^	int (*pfxcomp)(const char *str, const char *pfx);$/;"	m	struct:git_diff
pick_dir_mode	src/repository.c	/^static mode_t pick_dir_mode(git_repository_init_options *opts)$/;"	f	file:
pkt_done_str	src/transports/smart_pkt.c	/^static const char pkt_done_str[] = "0009done\\n";$/;"	v	file:
pkt_flush_str	src/transports/smart_pkt.c	/^static const char pkt_flush_str[] = "0000";$/;"	v	file:
pkt_have_prefix	src/transports/smart_pkt.c	/^static const char pkt_have_prefix[] = "0032have ";$/;"	v	file:
pkt_want_prefix	src/transports/smart_pkt.c	/^static const char pkt_want_prefix[] = "0032want ";$/;"	v	file:
plaintext_free	src/transports/cred.c	/^static void plaintext_free(struct git_cred *cred)$/;"	f	file:
plno	src/blame_git.c	/^	long plno;$/;"	m	struct:blame_chunk_cb_data	file:
pool	src/attr_file.h	/^	git_pool *pool;$/;"	m	struct:__anon133
pool	src/attrcache.h	/^	git_pool pool;$/;"	m	struct:__anon92
pool	src/checkout.c	/^	git_pool pool;$/;"	m	struct:__anon121	file:
pool	src/diff.h	/^	git_pool pool;$/;"	m	struct:git_diff
pool	src/iterator.c	/^	git_pool pool;$/;"	m	struct:__anon84	file:
pool	src/merge.h	/^	git_pool pool;$/;"	m	struct:__anon143
pool	src/pathspec.h	/^	git_pool pool;$/;"	m	struct:git_pathspec
pool	src/pathspec.h	/^	git_pool pool;$/;"	m	struct:git_pathspec_match_list
pool	src/refdb_fs.c	/^	git_pool pool;$/;"	m	struct:__anon148	file:
pool	src/sortedcache.h	/^	git_pool     pool;$/;"	m	struct:__anon158
pool_alloc_page	src/pool.c	/^static void *pool_alloc_page(git_pool *pool, uint32_t size)$/;"	f	file:
pool_freelist	src/pool.c	/^struct pool_freelist {$/;"	s	file:
pool_insert_page	src/pool.c	/^static void pool_insert_page(git_pool *pool, git_pool_page *page)$/;"	f	file:
pool_is_allocated	src/attr_file.h	/^	bool pool_is_allocated;$/;"	m	struct:__anon133
pool_remove_page	src/pool.c	/^GIT_INLINE(void) pool_remove_page($/;"	f
pop_fail_stack	deps/regex/regexec.c	/^pop_fail_stack (struct re_fail_stack_t *fs, int *pidx, int nregs,$/;"	f	file:
populate_fetchhead	tests/fetchhead/nonetwork.c	/^static void populate_fetchhead(git_vector *out, git_repository *repo)$/;"	f	file:
port	deps/http-parser/http_parser.h	/^  uint16_t port;                \/* Converted UF_PORT string *\/$/;"	m	struct:http_parser_url
port	src/netops.h	/^	char *port;$/;"	m	struct:gitno_connection_data
port	tests/network/urlparse.c	/^static char *host, *port, *path, *user, *pass;$/;"	v	file:
pos	examples/common.h	/^	int    pos;$/;"	m	struct:args_info
position	tests/odb/sorting.c	/^	size_t position;$/;"	m	struct:__anon28	file:
post_body	src/transports/winhttp.c	/^	HANDLE post_body;$/;"	m	struct:__anon62	file:
post_body_len	src/transports/winhttp.c	/^	DWORD post_body_len;$/;"	m	struct:__anon62	file:
post_verb	src/transports/http.c	/^static const char *post_verb = "POST";$/;"	v	file:
post_verb	src/transports/winhttp.c	/^static const wchar_t *post_verb = L"POST";$/;"	v	file:
postorder	deps/regex/regcomp.c	/^postorder (bin_tree_t *root, reg_errcode_t (fn (void *, bin_tree_t *)),$/;"	f	file:
pqdownheap	deps/zlib/trees.c	/^local void pqdownheap(s, tree, k)$/;"	f
pqremove	deps/zlib/trees.c	438;"	d	file:
pqueue_down	src/pqueue.c	/^static void pqueue_down(git_pqueue *pq, size_t el)$/;"	f	file:
pqueue_up	src/pqueue.c	/^static void pqueue_up(git_pqueue *pq, size_t el)$/;"	f	file:
pragma_nocache	src/transports/winhttp.c	/^static const wchar_t *pragma_nocache = L"Pragma: no-cache";$/;"	v	file:
prefix	src/pathspec.h	/^	char *prefix;$/;"	m	struct:git_pathspec
prefix	src/transport.c	/^	char *prefix;$/;"	m	struct:transport_definition	file:
prefix_git	src/transports/git.c	/^static const char prefix_git[] = "git:\/\/";$/;"	v	file:
prefix_http	src/netops.c	/^static const char *prefix_http = "http:\/\/";$/;"	v	file:
prefix_http	src/transports/winhttp.c	/^static const char *prefix_http = "http:\/\/";$/;"	v	file:
prefix_https	src/netops.c	/^static const char *prefix_https = "https:\/\/";$/;"	v	file:
prefix_https	src/transports/winhttp.c	/^static const char *prefix_https = "https:\/\/";$/;"	v	file:
prefix_ssh	src/transports/ssh.c	/^static const char prefix_ssh[] = "ssh:\/\/";$/;"	v	file:
prefixcomp	src/iterator.h	/^	int (*prefixcomp)(const char *str, const char *prefix);$/;"	m	struct:git_iterator
preorder	deps/regex/regcomp.c	/^preorder (bin_tree_t *root, reg_errcode_t (fn (void *, bin_tree_t *)),$/;"	f	file:
prepare_pack	src/pack-objects.c	/^static int prepare_pack(git_packbuilder *pb)$/;"	f	file:
prepare_walk	src/revwalk.c	/^static int prepare_walk(git_revwalk *walk)$/;"	f	file:
prepare_worktree_commit_message	src/stash.c	/^static int prepare_worktree_commit_message($/;"	f	file:
prev	deps/zlib/deflate.h	/^    Posf *prev;$/;"	m	struct:internal_state
prev	src/blame.h	/^	struct git_blame__entry *prev;$/;"	m	struct:git_blame__entry	typeref:struct:git_blame__entry::git_blame__entry
prev_conflict	src/merge.c	/^	git_merge_diff *prev_conflict;$/;"	m	struct:merge_diff_df_data	file:
prev_length	deps/zlib/deflate.h	/^    uInt prev_length;$/;"	m	struct:internal_state
prev_match	deps/zlib/deflate.h	/^    IPos prev_match;             \/* previous match *\/$/;"	m	struct:internal_state
prev_path	src/merge.c	/^	const char *prev_path;$/;"	m	struct:merge_diff_df_data	file:
previous	src/blame.h	/^	struct git_blame__origin *previous;$/;"	m	struct:git_blame__origin	typeref:struct:git_blame__origin::git_blame__origin
previous	src/xdiff/xpatience.c	/^		struct entry *next, *previous;$/;"	m	struct:hashmap::entry	typeref:struct:hashmap::entry::	file:
print_cb	src/diff_print.c	/^	git_diff_line_cb print_cb;$/;"	m	struct:__anon123	file:
print_commit	examples/log.c	/^static void print_commit(git_commit *commit)$/;"	f	file:
print_long	examples/status.c	/^static void print_long(git_status_list *status)$/;"	f	file:
print_matched_cb	examples/add.c	/^int print_matched_cb(const char *path, const char *matched_pathspec, void *payload)$/;"	f
print_options	examples/add.c	/^enum print_options {$/;"	g	file:
print_payload	examples/add.c	/^struct print_payload {$/;"	s	file:
print_progress	examples/network/clone.c	/^static void print_progress(const progress_data *pd)$/;"	f	file:
print_short	examples/status.c	/^static void print_short(git_repository *repo, git_status_list *status)$/;"	f	file:
print_signature	examples/cat-file.c	/^static void print_signature(const char *header, const git_signature *sig)$/;"	f	file:
print_time	examples/log.c	/^static void print_time(const git_time *intime, const char *prefix)$/;"	f	file:
print_usage	examples/add.c	/^void print_usage(void)$/;"	f
printable	src/buf_text.h	/^	unsigned int printable, nonprintable; \/* These are just approximations! *\/$/;"	m	struct:__anon139
priority	src/filter.c	/^	int priority;$/;"	m	struct:__anon88	file:
priority	src/odb.c	/^	int priority;$/;"	m	struct:__anon117	file:
priority	src/transport.c	/^	unsigned priority;$/;"	m	struct:transport_definition	file:
priv	src/xdiff/xdiff.h	/^	void *priv;$/;"	m	struct:s_xdemitcb
privatekey	include/git2/transport.h	/^	char *privatekey;$/;"	m	struct:git_cred_ssh_key
proceed_next_node	deps/regex/regexec.c	/^proceed_next_node (const re_match_context_t *mctx, int nregs, regmatch_t *regs,$/;"	f	file:
process_commit	src/revwalk.c	/^static int process_commit(git_revwalk *walk, git_commit_list_node *commit, int hide)$/;"	f	file:
process_commit_parents	src/revwalk.c	/^static int process_commit_parents(git_revwalk *walk, git_commit_list_node *commit)$/;"	f	file:
process_entry_path	src/notes.c	/^static int process_entry_path($/;"	f	file:
process_tree_to_tree_diffing	tests/diff/tree.c	/^void process_tree_to_tree_diffing($/;"	f
progress	include/git2/remote.h	/^	int (*progress)(const char *str, int len, void *data);$/;"	m	struct:git_remote_callbacks
progress	tests/checkout/tree.c	/^static void progress(const char *path, size_t cur, size_t tot, void *payload)$/;"	f	file:
progress	tests/online/fetch.c	/^static int progress(const git_transfer_progress *stats, void *payload)$/;"	f	file:
progress_cb	examples/network/fetch.c	/^static int progress_cb(const char *str, int len, void *data)$/;"	f	file:
progress_cb	include/git2/checkout.h	/^	git_checkout_progress_cb progress_cb;$/;"	m	struct:git_checkout_opts
progress_cb	src/indexer.c	/^	git_transfer_progress_callback progress_cb;$/;"	m	struct:git_indexer	file:
progress_cb	src/pack-objects.h	/^	git_packbuilder_progress progress_cb;$/;"	m	struct:git_packbuilder
progress_cb	src/transports/local.c	/^	git_transfer_progress_callback progress_cb;$/;"	m	struct:foreach_data	file:
progress_cb	src/transports/smart.h	/^	git_transport_message_cb progress_cb;$/;"	m	struct:__anon73
progress_cb_payload	src/pack-objects.h	/^	void *progress_cb_payload;$/;"	m	struct:git_packbuilder
progress_cond	src/pack-objects.h	/^	git_cond progress_cond;$/;"	m	struct:git_packbuilder
progress_data	examples/network/clone.c	/^typedef struct progress_data {$/;"	s	file:
progress_data	examples/network/clone.c	/^} progress_data;$/;"	t	typeref:struct:progress_data	file:
progress_mutex	src/pack-objects.h	/^	git_mutex progress_mutex;$/;"	m	struct:git_packbuilder
progress_payload	include/git2/checkout.h	/^	void *progress_payload;$/;"	m	struct:git_checkout_opts
progress_payload	src/indexer.c	/^	void *progress_payload;$/;"	m	struct:git_indexer	file:
progress_payload	src/transports/local.c	/^	void *progress_payload;$/;"	m	struct:foreach_data	file:
progress_pkt	src/transports/smart_pkt.c	/^static int progress_pkt(git_pkt **out, const char *line, size_t len)$/;"	f	file:
prov	src/hash/hash_win32.h	/^	git_hash_prov *prov;$/;"	m	struct:git_hash_ctx
prov	src/hash/hash_win32.h	/^	} prov;$/;"	m	struct:git_hash_prov	typeref:union:git_hash_prov::__anon169
prune_impossible_nodes	deps/regex/regexec.c	/^prune_impossible_nodes (re_match_context_t *mctx)$/;"	f	file:
ps	include/git2/pathspec.h	/^GIT_EXTERN(void) git_pathspec_free(git_pathspec *ps);$/;"	v
pthread_attr_t	src/win32/pthread.h	/^typedef int pthread_attr_t;$/;"	t
pthread_cond_destroy	src/win32/pthread.c	/^int pthread_cond_destroy(pthread_cond_t *cond)$/;"	f
pthread_cond_init	src/win32/pthread.c	/^int pthread_cond_init(pthread_cond_t *cond, const pthread_condattr_t *attr)$/;"	f
pthread_cond_signal	src/win32/pthread.c	/^int pthread_cond_signal(pthread_cond_t *cond)$/;"	f
pthread_cond_t	src/win32/pthread.h	/^typedef HANDLE pthread_cond_t;$/;"	t
pthread_cond_wait	src/win32/pthread.c	/^int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex)$/;"	f
pthread_condattr_t	src/win32/pthread.h	/^typedef int pthread_condattr_t;$/;"	t
pthread_create	src/win32/pthread.c	/^int pthread_create($/;"	f
pthread_join	src/win32/pthread.c	/^int pthread_join(pthread_t thread, void **value_ptr)$/;"	f
pthread_mutex_destroy	src/win32/pthread.c	/^int pthread_mutex_destroy(pthread_mutex_t *mutex)$/;"	f
pthread_mutex_init	src/win32/pthread.c	/^int pthread_mutex_init($/;"	f
pthread_mutex_lock	src/win32/pthread.c	/^int pthread_mutex_lock(pthread_mutex_t *mutex)$/;"	f
pthread_mutex_t	src/win32/pthread.h	/^typedef CRITICAL_SECTION pthread_mutex_t;$/;"	t
pthread_mutex_unlock	src/win32/pthread.c	/^int pthread_mutex_unlock(pthread_mutex_t *mutex)$/;"	f
pthread_mutexattr_t	src/win32/pthread.h	/^typedef int pthread_mutexattr_t;$/;"	t
pthread_num_processors_np	src/win32/pthread.c	/^int pthread_num_processors_np(void)$/;"	f
pthread_rwlock_destroy	src/win32/pthread.c	/^int pthread_rwlock_destroy(pthread_rwlock_t *lock)$/;"	f
pthread_rwlock_init	src/win32/pthread.c	/^int pthread_rwlock_init($/;"	f
pthread_rwlock_rdlock	src/win32/pthread.c	/^int pthread_rwlock_rdlock(pthread_rwlock_t *lock)$/;"	f
pthread_rwlock_rdunlock	src/thread-utils.h	84;"	d
pthread_rwlock_rdunlock	src/win32/pthread.c	/^int pthread_rwlock_rdunlock(pthread_rwlock_t *lock)$/;"	f
pthread_rwlock_t	src/win32/pthread.h	/^} pthread_rwlock_t;$/;"	t	typeref:struct:__anon166
pthread_rwlock_wrlock	src/win32/pthread.c	/^int pthread_rwlock_wrlock(pthread_rwlock_t *lock)$/;"	f
pthread_rwlock_wrunlock	src/thread-utils.h	85;"	d
pthread_rwlock_wrunlock	src/win32/pthread.c	/^int pthread_rwlock_wrunlock(pthread_rwlock_t *lock)$/;"	f
pthread_rwlockattr_t	src/win32/pthread.h	/^typedef int pthread_rwlockattr_t;$/;"	t
pthread_t	src/win32/pthread.h	/^typedef HANDLE pthread_t;$/;"	t
ptr	include/git2/buffer.h	/^	char   *ptr;$/;"	m	struct:__anon214
ptr	src/delta.c	/^	const unsigned char *ptr;$/;"	m	struct:index_entry	file:
ptr	src/xdiff/xdiff.h	/^	char *ptr;$/;"	m	struct:s_mmbuffer
ptr	src/xdiff/xdiff.h	/^	char *ptr;$/;"	m	struct:s_mmfile
ptr	src/xdiff/xhistogram.c	/^		unsigned int ptr, cnt;$/;"	m	struct:histindex::record	file:
ptr	src/xdiff/xtypes.h	/^	char const *ptr;$/;"	m	struct:s_xrecord
ptr	tests/clar.c	/^	void (*ptr)(void);$/;"	m	struct:clar_func	file:
ptr_shift	src/xdiff/xhistogram.c	/^		     ptr_shift;$/;"	m	struct:histindex	file:
ptr_table	deps/zlib/zutil.c	/^} ptr_table;$/;"	t	typeref:struct:ptr_table_s	file:
ptr_table_s	deps/zlib/zutil.c	/^typedef struct ptr_table_s {$/;"	s	file:
ptrdiff_t	deps/zlib/zutil.h	/^       typedef int ptrdiff_t;$/;"	t
ptrs_equal_cmp	src/blame.c	/^static int ptrs_equal_cmp(const void *a, const void *b) { return a<b ? -1 : a>b ? 1 : 0; }$/;"	f	file:
publickey	include/git2/transport.h	/^	char *publickey;$/;"	m	struct:git_cred_ssh_custom
publickey	include/git2/transport.h	/^	char *publickey;$/;"	m	struct:git_cred_ssh_key
publickey_len	include/git2/transport.h	/^	size_t publickey_len;$/;"	m	struct:git_cred_ssh_custom
push	include/git2/push.h	/^GIT_EXTERN(int) git_push_finish(git_push *push);$/;"	v
push	include/git2/push.h	/^GIT_EXTERN(int) git_push_unpack_ok(git_push *push);$/;"	v
push	include/git2/push.h	/^GIT_EXTERN(void) git_push_free(git_push *push);$/;"	v
push	include/git2/transport.h	/^	int (*push)(git_transport *transport, git_push *push);$/;"	m	struct:git_transport
push	src/refspec.h	/^		push : 1,$/;"	m	struct:git_refspec
push_attr_file	src/attr.c	483;"	d	file:
push_cb_data	src/revwalk.c	/^struct push_cb_data {$/;"	s	file:
push_commit	examples/rev-list.c	/^static int push_commit(git_revwalk *walk, const git_oid *oid, int hide)$/;"	f	file:
push_commit	src/revwalk.c	/^static int push_commit(git_revwalk *walk, const git_oid *oid, int uninteresting, int from_glob)$/;"	f	file:
push_fail_stack	deps/regex/regexec.c	/^push_fail_stack (struct re_fail_stack_t *fs, int str_idx, int dest_node,$/;"	f	file:
push_glob	src/revwalk.c	/^static int push_glob(git_revwalk *walk, const char *glob, int hide)$/;"	f	file:
push_ignore_file	src/ignore.c	74;"	d	file:
push_leaf	src/oid.c	/^static trie_node *push_leaf(git_oid_shorten *os, node_index idx, int push_at, const char *oid)$/;"	f	file:
push_one_attr	src/attr.c	/^static int push_one_attr(void *ref, git_buf *path)$/;"	f	file:
push_one_ignore	src/ignore.c	/^static int push_one_ignore(void *payload, git_buf *path)$/;"	f	file:
push_pack_progress_cb	tests/online/push.c	/^static int push_pack_progress_cb($/;"	f	file:
push_packbuilder_payload	src/transports/smart_protocol.c	/^struct push_packbuilder_payload$/;"	s	file:
push_range	examples/rev-list.c	/^static int push_range(git_repository *repo, git_revwalk *walk, const char *range, int hide)$/;"	f	file:
push_ref	src/revwalk.c	/^static int push_ref(git_revwalk *walk, const char *refname, int hide, int from_glob)$/;"	f	file:
push_refspecs	tests/network/remote/remotes.c	/^static const char *push_refspecs[] = {$/;"	v	file:
push_rev	examples/log.c	/^static void push_rev(struct log_state *s, git_object *obj, int hide)$/;"	f	file:
push_spec	examples/rev-list.c	/^static int push_spec(git_repository *repo, git_revwalk *walk, const char *spec, int hide)$/;"	f	file:
push_spec	src/push.h	/^typedef struct push_spec {$/;"	s
push_spec	src/push.h	/^} push_spec;$/;"	t	typeref:struct:push_spec
push_spec_rref_cmp	src/push.c	/^static int push_spec_rref_cmp(const void *a, const void *b)$/;"	f	file:
push_status	src/push.h	/^typedef struct push_status {$/;"	s
push_status	src/push.h	/^} push_status;$/;"	t	typeref:struct:push_status
push_status	tests/online/push.c	/^} push_status;$/;"	t	typeref:struct:__anon17	file:
push_status_ref_cmp	src/push.c	/^static int push_status_ref_cmp(const void *a, const void *b)$/;"	f	file:
push_three_states	tests/stash/drop.c	/^static void push_three_states(void)$/;"	f	file:
push_transfer_progress_cb	tests/online/push.c	/^static int push_transfer_progress_cb($/;"	f	file:
pushurl	src/remote.h	/^	char *pushurl;$/;"	m	struct:git_remote
putShortMSB	deps/zlib/deflate.c	/^local void putShortMSB (s, b)$/;"	f
put_be32	src/hash/hash_generic.c	77;"	d	file:
put_be32	src/hash/hash_generic.c	86;"	d	file:
put_byte	deps/zlib/deflate.h	275;"	d
put_short	deps/zlib/trees.c	181;"	d	file:
put_uuid_string	src/transports/winhttp.c	/^static int put_uuid_string(LPWSTR buffer, size_t buffer_len_cch)$/;"	f	file:
queue_differences	src/push.c	/^static int queue_differences($/;"	f	file:
queue_objects	src/push.c	/^static int queue_objects(git_push *push)$/;"	f	file:
quick_diff_blob_to_str	tests/diff/blob.c	/^static void quick_diff_blob_to_str($/;"	f	file:
quiet	examples/init.c	/^	int quiet;$/;"	m	struct:opts	file:
quot	include/git2/inttypes.h	/^   intmax_t quot;$/;"	m	struct:__anon221
quotes_for_value	src/config_file.c	/^static const char *quotes_for_value(const char *value)$/;"	f	file:
range_ends	deps/regex/regex_internal.h	/^  uint32_t *range_ends;$/;"	m	struct:__anon183
range_ends	deps/regex/regex_internal.h	/^  wchar_t *range_ends;$/;"	m	struct:__anon183
range_starts	deps/regex/regex_internal.h	/^  uint32_t *range_starts;$/;"	m	struct:__anon183
range_starts	deps/regex/regex_internal.h	/^  wchar_t *range_starts;$/;"	m	struct:__anon183
rangematch	src/fnmatch.c	/^rangematch(const char *pattern, char test, int flags, char **newp)$/;"	f	file:
raw	src/pack.h	/^	git_rawobj raw;$/;"	m	struct:git_pack_cache_entry
raw_header	src/commit.h	/^	char *raw_header;$/;"	m	struct:git_commit
raw_len	deps/regex/regex_internal.h	/^  int raw_len;$/;"	m	struct:re_string_t
raw_mbs	deps/regex/regex_internal.h	/^  const unsigned char *raw_mbs;$/;"	m	struct:re_string_t
raw_mbs_idx	deps/regex/regex_internal.h	/^  int raw_mbs_idx;$/;"	m	struct:re_string_t
raw_message	src/commit.h	/^	char *raw_message;$/;"	m	struct:git_commit
raw_stop	deps/regex/regex_internal.h	/^  int raw_stop;$/;"	m	struct:re_string_t
rc	src/attr_file.h	/^	git_refcount rc;		\/* for macros *\/$/;"	m	struct:__anon132
rc	src/config.c	/^	git_refcount rc;$/;"	m	struct:__anon93	file:
rc	src/config.h	/^	git_refcount rc;$/;"	m	struct:git_config
rc	src/diff.h	/^	git_refcount     rc;$/;"	m	struct:git_diff
rc	src/diff_patch.c	/^	git_refcount rc;$/;"	m	struct:git_patch	file:
rc	src/index.h	/^	git_refcount rc;$/;"	m	struct:git_index
rc	src/odb.h	/^	git_refcount rc;$/;"	m	struct:git_odb
rc	src/pathspec.h	/^	git_refcount rc;$/;"	m	struct:git_pathspec
rc	src/refdb.h	/^	git_refcount rc;$/;"	m	struct:git_refdb
rc	src/sortedcache.h	/^	git_refcount rc;$/;"	m	struct:__anon158
rc	src/submodule.h	/^	git_refcount rc;$/;"	m	struct:git_submodule
rcha	src/xdiff/xhistogram.c	/^	chastore_t rcha;$/;"	m	struct:histindex	file:
rcha	src/xdiff/xtypes.h	/^	chastore_t rcha;$/;"	m	struct:s_xdfile
rchash	src/xdiff/xprepare.c	/^	xdlclass_t **rchash;$/;"	m	struct:s_xdlclassifier	file:
rchg	src/xdiff/xdiffi.h	/^	char *rchg;$/;"	m	struct:s_diffdata
rchg	src/xdiff/xtypes.h	/^	char *rchg;$/;"	m	struct:s_xdfile
rcrecs	src/xdiff/xprepare.c	/^	xdlclass_t **rcrecs;$/;"	m	struct:s_xdlclassifier	file:
re	src/diff_driver.c	/^	regex_t re;$/;"	m	struct:__anon40	file:
re_acquire_state	deps/regex/regex_internal.c	/^re_acquire_state (reg_errcode_t *err, const re_dfa_t *dfa,$/;"	f	file:
re_acquire_state_context	deps/regex/regex_internal.c	/^re_acquire_state_context (reg_errcode_t *err, const re_dfa_t *dfa,$/;"	f	file:
re_backref_cache_entry	deps/regex/regex_internal.h	/^struct re_backref_cache_entry$/;"	s
re_bitset_ptr_t	deps/regex/regex_internal.h	/^typedef bitset_word_t *re_bitset_ptr_t;$/;"	t
re_charset_t	deps/regex/regex_internal.h	/^} re_charset_t;$/;"	t	typeref:struct:__anon183
re_comp	deps/regex/regcomp.c	/^re_comp (s)$/;"	f
re_comp_buf	deps/regex/regcomp.c	/^static struct re_pattern_buffer re_comp_buf;$/;"	v	typeref:struct:re_pattern_buffer	file:
re_compile_fastmap	deps/regex/regex.c	48;"	d	file:
re_compile_fastmap_iter	deps/regex/regcomp.c	/^re_compile_fastmap_iter (regex_t *bufp, const re_dfastate_t *init_state,$/;"	f	file:
re_compile_internal	deps/regex/regcomp.c	/^re_compile_internal (regex_t *preg, const char * pattern, size_t length,$/;"	f	file:
re_compile_pattern	deps/regex/regcomp.c	/^re_compile_pattern (const char *pattern,$/;"	f
re_compile_pattern	deps/regex/regex.c	43;"	d	file:
re_const_bitset_ptr_t	deps/regex/regex_internal.h	/^typedef const bitset_word_t *re_const_bitset_ptr_t;$/;"	t
re_context_type	deps/regex/regex_internal.h	/^} re_context_type;$/;"	t	typeref:enum:__anon180
re_copy_regs	deps/regex/regexec.c	/^re_copy_regs (struct re_registers *regs,$/;"	f	file:
re_dfa_add_node	deps/regex/regex_internal.c	/^re_dfa_add_node (re_dfa_t *dfa, re_token_t token)$/;"	f	file:
re_dfa_t	deps/regex/regex_internal.h	/^struct re_dfa_t$/;"	s
re_dfa_t	deps/regex/regex_internal.h	/^typedef struct re_dfa_t re_dfa_t;$/;"	t	typeref:struct:re_dfa_t
re_dfastate_t	deps/regex/regex_internal.h	/^struct re_dfastate_t$/;"	s
re_dfastate_t	deps/regex/regex_internal.h	/^typedef struct re_dfastate_t re_dfastate_t;$/;"	t	typeref:struct:re_dfastate_t
re_fail_stack_ent_t	deps/regex/regex_internal.h	/^struct re_fail_stack_ent_t$/;"	s
re_fail_stack_t	deps/regex/regex_internal.h	/^struct re_fail_stack_t$/;"	s
re_free	deps/regex/regex_internal.h	486;"	d
re_malloc	deps/regex/regex_internal.h	483;"	d
re_match	deps/regex/regex.c	39;"	d	file:
re_match	deps/regex/regexec.c	/^re_match (struct re_pattern_buffer *bufp,$/;"	f
re_match_2	deps/regex/regex.c	37;"	d	file:
re_match_context_t	deps/regex/regex_internal.h	/^} re_match_context_t;$/;"	t	typeref:struct:__anon189
re_max_failures	deps/regex/regex.c	/^int re_max_failures = 2000;$/;"	v
re_node_set	deps/regex/regex_internal.h	/^} re_node_set;$/;"	t	typeref:struct:__anon181
re_node_set_add_intersect	deps/regex/regex_internal.c	/^re_node_set_add_intersect (re_node_set *dest, const re_node_set *src1,$/;"	f	file:
re_node_set_alloc	deps/regex/regex_internal.c	/^re_node_set_alloc (re_node_set *set, int size)$/;"	f	file:
re_node_set_compare	deps/regex/regex_internal.c	/^re_node_set_compare (const re_node_set *set1, const re_node_set *set2)$/;"	f
re_node_set_contains	deps/regex/regex_internal.c	/^re_node_set_contains (const re_node_set *set, int elem)$/;"	f
re_node_set_empty	deps/regex/regex_internal.h	715;"	d
re_node_set_free	deps/regex/regex_internal.h	716;"	d
re_node_set_init_1	deps/regex/regex_internal.c	/^re_node_set_init_1 (re_node_set *set, int elem)$/;"	f	file:
re_node_set_init_2	deps/regex/regex_internal.c	/^re_node_set_init_2 (re_node_set *set, int elem1, int elem2)$/;"	f	file:
re_node_set_init_copy	deps/regex/regex_internal.c	/^re_node_set_init_copy (re_node_set *dest, const re_node_set *src)$/;"	f	file:
re_node_set_init_empty	deps/regex/regex_internal.h	712;"	d
re_node_set_init_union	deps/regex/regex_internal.c	/^re_node_set_init_union (re_node_set *dest, const re_node_set *src1,$/;"	f	file:
re_node_set_insert	deps/regex/regex_internal.c	/^re_node_set_insert (re_node_set *set, int elem)$/;"	f	file:
re_node_set_insert_last	deps/regex/regex_internal.c	/^re_node_set_insert_last (re_node_set *set, int elem)$/;"	f	file:
re_node_set_merge	deps/regex/regex_internal.c	/^re_node_set_merge (re_node_set *dest, const re_node_set *src)$/;"	f	file:
re_node_set_remove	deps/regex/regex_internal.h	713;"	d
re_node_set_remove_at	deps/regex/regex_internal.c	/^re_node_set_remove_at (re_node_set *set, int idx)$/;"	f	file:
re_nsub	deps/regex/regex.h	/^  size_t re_nsub;$/;"	m	struct:re_pattern_buffer
re_pattern_buffer	deps/regex/regex.h	/^struct re_pattern_buffer$/;"	s
re_realloc	deps/regex/regex_internal.h	485;"	d
re_registers	deps/regex/regex.h	/^struct re_registers$/;"	s
re_search	deps/regex/regex.c	41;"	d	file:
re_search_2	deps/regex/regex.c	46;"	d	file:
re_search_2_stub	deps/regex/regexec.c	/^re_search_2_stub (struct re_pattern_buffer *bufp,$/;"	f	file:
re_search_internal	deps/regex/regexec.c	/^re_search_internal (const regex_t *preg,$/;"	f	file:
re_search_stub	deps/regex/regexec.c	/^re_search_stub (struct re_pattern_buffer *bufp,$/;"	f	file:
re_set_fastmap	deps/regex/regcomp.c	/^re_set_fastmap (char *fastmap, int icase, int ch)$/;"	f
re_set_registers	deps/regex/regex.c	35;"	d	file:
re_set_registers	deps/regex/regexec.c	/^re_set_registers (struct re_pattern_buffer *bufp,$/;"	f
re_set_syntax	deps/regex/regex.c	45;"	d	file:
re_sift_context_t	deps/regex/regex_internal.h	/^} re_sift_context_t;$/;"	t	typeref:struct:__anon190
re_state_table_entry	deps/regex/regex_internal.h	/^struct re_state_table_entry$/;"	s
re_str	deps/regex/regex_internal.h	/^  char* re_str;$/;"	m	struct:re_dfa_t
re_string_allocate	deps/regex/regex_internal.c	/^re_string_allocate (re_string_t *pstr, const char *str, int len, int init_len,$/;"	f	file:
re_string_byte_at	deps/regex/regex_internal.h	460;"	d
re_string_char_size_at	deps/regex/regex_internal.h	/^re_string_char_size_at (const re_string_t *pstr, int idx)$/;"	f
re_string_construct	deps/regex/regex_internal.c	/^re_string_construct (re_string_t *pstr, const char *str, int len,$/;"	f	file:
re_string_construct_common	deps/regex/regex_internal.c	/^re_string_construct_common (const char *str, int len, re_string_t *pstr,$/;"	f	file:
re_string_context_at	deps/regex/regex_internal.c	/^re_string_context_at (const re_string_t *input, int idx, int eflags)$/;"	f	file:
re_string_cur_idx	deps/regex/regex_internal.h	457;"	d
re_string_destruct	deps/regex/regex_internal.c	/^re_string_destruct (re_string_t *pstr)$/;"	f	file:
re_string_elem_size_at	deps/regex/regex_internal.h	/^re_string_elem_size_at (const re_string_t *pstr, int idx)$/;"	f
re_string_eoi	deps/regex/regex_internal.h	456;"	d
re_string_fetch_byte	deps/regex/regex_internal.h	449;"	d
re_string_fetch_byte_case	deps/regex/regex_internal.c	/^re_string_fetch_byte_case (re_string_t *pstr)$/;"	f
re_string_first_byte	deps/regex/regex_internal.h	451;"	d
re_string_get_buffer	deps/regex/regex_internal.h	458;"	d
re_string_is_single_byte_char	deps/regex/regex_internal.h	453;"	d
re_string_length	deps/regex/regex_internal.h	459;"	d
re_string_peek_byte	deps/regex/regex_internal.h	447;"	d
re_string_peek_byte_case	deps/regex/regex_internal.c	/^re_string_peek_byte_case (const re_string_t *pstr, int idx)$/;"	f
re_string_realloc_buffers	deps/regex/regex_internal.c	/^re_string_realloc_buffers (re_string_t *pstr, int new_buf_len)$/;"	f	file:
re_string_reconstruct	deps/regex/regex_internal.c	/^re_string_reconstruct (re_string_t *pstr, int idx, int eflags)$/;"	f	file:
re_string_set_index	deps/regex/regex_internal.h	462;"	d
re_string_skip_bytes	deps/regex/regex_internal.h	461;"	d
re_string_skip_chars	deps/regex/regex_internal.c	/^re_string_skip_chars (re_string_t *pstr, int new_raw_idx, wint_t *last_wc)$/;"	f	file:
re_string_t	deps/regex/regex_internal.h	/^struct re_string_t$/;"	s
re_string_t	deps/regex/regex_internal.h	/^typedef struct re_string_t re_string_t;$/;"	t	typeref:struct:re_string_t
re_string_translate_buffer	deps/regex/regex_internal.c	/^re_string_translate_buffer (re_string_t *pstr)$/;"	f	file:
re_string_wchar_at	deps/regex/regex_internal.h	/^re_string_wchar_at (const re_string_t *pstr, int idx)$/;"	f
re_sub_match_last_t	deps/regex/regex_internal.h	/^} re_sub_match_last_t;$/;"	t	typeref:struct:__anon187
re_sub_match_top_t	deps/regex/regex_internal.h	/^} re_sub_match_top_t;$/;"	t	typeref:struct:__anon188
re_token_t	deps/regex/regex_internal.h	/^} re_token_t;$/;"	t	typeref:struct:__anon184
re_token_type_t	deps/regex/regex_internal.h	/^} re_token_type_t;$/;"	t	typeref:enum:__anon182
read	examples/network/index-pack.c	13;"	d	file:
read	include/git2/odb_backend.h	/^	int (*read)(git_odb_stream *stream, char *buffer, size_t len);$/;"	m	struct:git_odb_stream
read	include/git2/sys/odb_backend.h	/^	int (* read)($/;"	m	struct:git_odb_backend
read	include/git2/transport.h	/^	int (*read)($/;"	m	struct:git_smart_subtransport_stream
read_buf	deps/zlib/deflate.c	/^local int read_buf(strm, buf, size)$/;"	f
read_calls	tests/odb/backend/nonrefreshing.c	/^	int read_calls;$/;"	m	struct:fake_backend	file:
read_conflict_name	src/index.c	1581;"	d	file:
read_conflict_name	src/index.c	1609;"	d	file:
read_conflict_names	src/index.c	/^static int read_conflict_names(git_index *index, const char *buffer, size_t size)$/;"	f	file:
read_entry	src/index.c	/^static size_t read_entry(git_index_entry *dest, const void *buffer, size_t buffer_size)$/;"	f	file:
read_extension	src/index.c	/^static size_t read_extension(git_index *index, const char *buffer, size_t buffer_size)$/;"	f	file:
read_flags	include/git2/transport.h	/^	int (*read_flags)(git_transport *transport, int *flags);$/;"	m	struct:git_transport
read_gitfile	src/repository.c	/^static int read_gitfile(git_buf *path_out, const char *file_path)$/;"	f	file:
read_header	include/git2/sys/odb_backend.h	/^	int (* read_header)($/;"	m	struct:git_odb_backend
read_header	src/index.c	/^static int read_header(struct index_header *dest, const void *buffer)$/;"	f	file:
read_header_calls	tests/odb/backend/nonrefreshing.c	/^	int read_header_calls;$/;"	m	struct:fake_backend	file:
read_header_loose	src/odb_loose.c	/^static int read_header_loose(git_rawobj *out, git_buf *loc)$/;"	f	file:
read_loose	src/odb_loose.c	/^static int read_loose(git_rawobj *out, git_buf *loc)$/;"	f	file:
read_name_missing	tests/fetchhead/nonetwork.c	/^static int read_name_missing(const char *ref_name, const char *remote_url,$/;"	f	file:
read_noop	tests/fetchhead/nonetwork.c	/^static int read_noop(const char *ref_name, const char *remote_url,$/;"	f	file:
read_object_stream	src/indexer.c	/^static int read_object_stream(git_indexer *idx, git_packfile_stream *stream)$/;"	f	file:
read_old_style_cb	tests/fetchhead/nonetwork.c	/^static int read_old_style_cb(const char *name, const char *url,$/;"	f	file:
read_prefix	include/git2/sys/odb_backend.h	/^	int (* read_prefix)($/;"	m	struct:git_odb_backend
read_prefix_calls	tests/odb/backend/nonrefreshing.c	/^	int read_prefix_calls;$/;"	m	struct:fake_backend	file:
read_ptr	src/config_file.c	/^	char *read_ptr;$/;"	m	struct:reader	file:
read_reuc	src/index.c	/^static int read_reuc(git_index *index, const char *buffer, size_t size)$/;"	f	file:
read_tree_cb	src/index.c	/^static int read_tree_cb($/;"	f	file:
read_tree_data	src/index.c	/^typedef struct read_tree_data {$/;"	s	file:
read_tree_data	src/index.c	/^} read_tree_data;$/;"	t	typeref:struct:read_tree_data	file:
read_tree_internal	src/tree-cache.c	/^static int read_tree_internal(git_tree_cache **out,$/;"	f	file:
read_type_missing	tests/fetchhead/nonetwork.c	/^static int read_type_missing(const char *ref_name, const char *remote_url,$/;"	f	file:
readdir	src/win32/dir.h	36;"	d
readdir_r	src/win32/dir.h	37;"	d
reader	src/config_file.c	/^struct reader {$/;"	s	file:
reader_consume_line	src/config_file.c	/^static void reader_consume_line(struct reader *reader)$/;"	f	file:
reader_getchar	src/config_file.c	/^static int reader_getchar(struct reader *reader, int flags)$/;"	f	file:
reader_getchar_raw	src/config_file.c	/^static int reader_getchar_raw(struct reader *reader)$/;"	f	file:
reader_peek	src/config_file.c	/^static int reader_peek(struct reader *reader, int flags)$/;"	f	file:
reader_readline	src/config_file.c	/^static char *reader_readline(struct reader *reader, bool skip_whitespace)$/;"	f	file:
readers	src/config_file.c	/^	git_array_t(struct reader) readers;$/;"	m	struct:__anon35	file:
readstream	include/git2/sys/odb_backend.h	/^	int (* readstream)($/;"	m	struct:git_odb_backend
receive_pack_ls_service_url	src/transports/http.c	/^static const char *receive_pack_ls_service_url = "\/info\/refs?service=git-receive-pack";$/;"	v	file:
receive_pack_ls_service_url	src/transports/winhttp.c	/^static const char *receive_pack_ls_service_url = "\/info\/refs?service=git-receive-pack";$/;"	v	file:
receive_pack_service	src/transports/http.c	/^static const char *receive_pack_service = "receive-pack";$/;"	v	file:
receive_pack_service	src/transports/winhttp.c	/^static const char *receive_pack_service = "receive-pack";$/;"	v	file:
receive_pack_service_url	src/transports/http.c	/^static const char *receive_pack_service_url = "\/git-receive-pack";$/;"	v	file:
receive_pack_service_url	src/transports/winhttp.c	/^static const char *receive_pack_service_url = "\/git-receive-pack";$/;"	v	file:
received_bytes	include/git2/odb_backend.h	/^	size_t received_bytes;$/;"	m	struct:git_odb_stream
received_bytes	include/git2/types.h	/^	size_t received_bytes;$/;"	m	struct:git_transfer_progress
received_objects	include/git2/types.h	/^	unsigned int received_objects;$/;"	m	struct:git_transfer_progress
received_response	src/transports/http.c	/^		received_response : 1,$/;"	m	struct:__anon80	file:
received_response	src/transports/winhttp.c	/^		received_response : 1,$/;"	m	struct:__anon62	file:
record	src/xdiff/xhistogram.c	/^	struct record {$/;"	s	struct:histindex	file:
record_callbacks_data	tests/online/push_util.h	/^} record_callbacks_data;$/;"	t	typeref:struct:__anon19
record_callbacks_data_clear	tests/online/push_util.c	/^void record_callbacks_data_clear(record_callbacks_data *data)$/;"	f
record_push_status_cb	tests/online/push.c	/^static int record_push_status_cb(const char *ref, const char *msg, void *data)$/;"	f	file:
record_ref_cb	tests/online/push_util.c	/^int record_ref_cb(git_remote_head *head, void *payload)$/;"	f
record_update_tips_cb	tests/online/push_util.c	/^int record_update_tips_cb(const char *refname, const git_oid *a, const git_oid *b, void *data)$/;"	f
records	src/xdiff/xhistogram.c	/^	} **records, \/* an ocurrence *\/$/;"	m	struct:histindex	typeref:struct:histindex::record	file:
records_size	src/xdiff/xhistogram.c	/^		     records_size,$/;"	m	struct:histindex	file:
recs	src/xdiff/xtypes.h	/^	xrecord_t **recs;$/;"	m	struct:s_xdfile
recursing	src/pack-objects.h	/^	    recursing:1,$/;"	m	struct:git_pobject
recv	src/netops.h	/^	int (*recv)(struct gitno_buffer *buffer);$/;"	m	struct:gitno_buffer
recv_pkt	src/transports/smart_protocol.c	/^static int recv_pkt(git_pkt **out, gitno_buffer *buf)$/;"	f	file:
redirect_count	src/transports/http.c	/^		redirect_count : 3;$/;"	m	struct:__anon80	file:
redirect_url	src/transports/http.c	/^	char *redirect_url;$/;"	m	struct:__anon80	file:
ref	include/git2/refs.h	/^GIT_EXTERN(const char *) git_reference_name(const git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(const char *) git_reference_shorthand(git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(const char *) git_reference_symbolic_target(const git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(const git_oid *) git_reference_target(const git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(const git_oid *) git_reference_target_peel(const git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(git_ref_t) git_reference_type(const git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(git_repository *) git_reference_owner(const git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(int) git_reference_delete(git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(int) git_reference_is_branch(git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(int) git_reference_is_note(git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(int) git_reference_is_remote(git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(int) git_reference_is_tag(git_reference *ref);$/;"	v
ref	include/git2/refs.h	/^GIT_EXTERN(void) git_reference_free(git_reference *ref);$/;"	v
ref	src/push.h	/^	char *ref;$/;"	m	struct:push_status
ref	src/transports/smart.h	/^	char *ref;$/;"	m	struct:__anon70
ref	src/transports/smart.h	/^	char *ref;$/;"	m	struct:__anon71
ref	tests/online/push.c	/^	const char *ref;$/;"	m	struct:__anon17	file:
ref	tests/refs/branches/name.c	/^static git_reference *ref;$/;"	v	file:
ref_branch_name	tests/refs/overwrite.c	/^static const char *ref_branch_name = "refs\/heads\/branch";$/;"	v	file:
ref_error_notfound	src/refdb_fs.c	/^static int ref_error_notfound(const char *name)$/;"	f	file:
ref_is_available	src/refdb_fs.c	/^static bool ref_is_available($/;"	f	file:
ref_list	tests/refs/listall.c	/^static git_strarray ref_list;$/;"	v	file:
ref_master_name	tests/refs/overwrite.c	/^static const char *ref_master_name = "refs\/heads\/master";$/;"	v	file:
ref_master_name	tests/refs/rename.c	/^static const char *ref_master_name = "refs\/heads\/master";$/;"	v	file:
ref_master_name	tests/refs/setter.c	/^static const char *ref_master_name = "refs\/heads\/master";$/;"	v	file:
ref_name	src/fetchhead.h	/^	char *ref_name;$/;"	m	struct:git_fetchhead_ref
ref_name	src/merge.h	/^	char *ref_name;$/;"	m	struct:git_merge_head
ref_name	src/reflog.h	/^	char *ref_name;$/;"	m	struct:git_reflog
ref_name	tests/refs/overwrite.c	/^static const char *ref_name = "refs\/heads\/other";$/;"	v	file:
ref_name	tests/refs/setter.c	/^static const char *ref_name = "refs\/heads\/other";$/;"	v	file:
ref_name_cmp	src/transports/smart.c	/^static int ref_name_cmp(const void *a, const void *b)$/;"	f	file:
ref_one_name	tests/refs/rename.c	/^static const char *ref_one_name = "refs\/heads\/one\/branch";$/;"	v	file:
ref_one_name_new	tests/refs/rename.c	/^static const char *ref_one_name_new = "refs\/heads\/two\/branch";$/;"	v	file:
ref_pkt	src/transports/smart_pkt.c	/^static int ref_pkt(git_pkt **out, const char *line, size_t len)$/;"	f	file:
ref_test_name	tests/refs/overwrite.c	/^static const char *ref_test_name = "refs\/heads\/test";$/;"	v	file:
ref_test_name	tests/refs/setter.c	/^static const char *ref_test_name = "refs\/heads\/test";$/;"	v	file:
ref_two_name	tests/refs/rename.c	/^static const char *ref_two_name = "refs\/heads\/two";$/;"	v	file:
ref_two_name_new	tests/refs/rename.c	/^static const char *ref_two_name_new = "refs\/heads\/two\/two";$/;"	v	file:
refcache	src/refdb_fs.c	/^	git_sortedcache *refcache;$/;"	m	struct:refdb_fs_backend	file:
refcmp_cb	tests/refs/iterator.c	/^static int refcmp_cb(const void *a, const void *b)$/;"	f	file:
refcnt	src/blame.h	/^	int refcnt;$/;"	m	struct:git_blame__origin
refcount	src/cache.h	/^	git_atomic refcount;$/;"	m	struct:__anon90
refcount	src/pack.h	/^	git_atomic refcount;$/;"	m	struct:git_pack_cache_entry
refcount	src/util.h	/^	git_atomic refcount;$/;"	m	struct:__anon31
refdb	include/git2/refdb.h	/^GIT_EXTERN(int) git_refdb_compress(git_refdb *refdb);$/;"	v
refdb	include/git2/refdb.h	/^GIT_EXTERN(void) git_refdb_free(git_refdb *refdb);$/;"	v
refdb_free_backend	src/refdb.c	/^static void refdb_free_backend(git_refdb *db)$/;"	f	file:
refdb_fs_backend	src/refdb_fs.c	/^typedef struct refdb_fs_backend {$/;"	s	file:
refdb_fs_backend	src/refdb_fs.c	/^} refdb_fs_backend;$/;"	t	typeref:struct:refdb_fs_backend	file:
refdb_fs_backend__compress	src/refdb_fs.c	/^static int refdb_fs_backend__compress(git_refdb_backend *_backend)$/;"	f	file:
refdb_fs_backend__delete	src/refdb_fs.c	/^static int refdb_fs_backend__delete($/;"	f	file:
refdb_fs_backend__exists	src/refdb_fs.c	/^static int refdb_fs_backend__exists($/;"	f	file:
refdb_fs_backend__free	src/refdb_fs.c	/^static void refdb_fs_backend__free(git_refdb_backend *_backend)$/;"	f	file:
refdb_fs_backend__iterator	src/refdb_fs.c	/^static int refdb_fs_backend__iterator($/;"	f	file:
refdb_fs_backend__iterator_free	src/refdb_fs.c	/^static void refdb_fs_backend__iterator_free(git_reference_iterator *_iter)$/;"	f	file:
refdb_fs_backend__iterator_next	src/refdb_fs.c	/^static int refdb_fs_backend__iterator_next($/;"	f	file:
refdb_fs_backend__iterator_next_name	src/refdb_fs.c	/^static int refdb_fs_backend__iterator_next_name($/;"	f	file:
refdb_fs_backend__lookup	src/refdb_fs.c	/^static int refdb_fs_backend__lookup($/;"	f	file:
refdb_fs_backend__rename	src/refdb_fs.c	/^static int refdb_fs_backend__rename($/;"	f	file:
refdb_fs_backend__write	src/refdb_fs.c	/^static int refdb_fs_backend__write($/;"	f	file:
refdb_fs_iter	src/refdb_fs.c	/^} refdb_fs_iter;$/;"	t	typeref:struct:__anon148	file:
refdb_reflog_fs__delete	src/refdb_fs.c	/^static int refdb_reflog_fs__delete(git_refdb_backend *_backend, const char *name)$/;"	f	file:
refdb_reflog_fs__ensure_log	src/refdb_fs.c	/^static int refdb_reflog_fs__ensure_log(git_refdb_backend *_backend, const char *name)$/;"	f	file:
refdb_reflog_fs__has_log	src/refdb_fs.c	/^static int refdb_reflog_fs__has_log(git_refdb_backend *_backend, const char *name)$/;"	f	file:
refdb_reflog_fs__read	src/refdb_fs.c	/^static int refdb_reflog_fs__read(git_reflog **out, git_refdb_backend *_backend, const char *name)$/;"	f	file:
refdb_reflog_fs__rename	src/refdb_fs.c	/^static int refdb_reflog_fs__rename(git_refdb_backend *_backend, const char *old_name, const char *new_name)$/;"	f	file:
refdb_reflog_fs__write	src/refdb_fs.c	/^static int refdb_reflog_fs__write(git_refdb_backend *_backend, git_reflog *reflog)$/;"	f	file:
reference__create	src/refs.c	/^static int reference__create($/;"	f	file:
reference__rename	src/refs.c	/^static int reference__rename(git_reference **out, git_reference *ref, const char *new_name, int force,$/;"	f	file:
reference__update_terminal	src/refs.c	/^static int reference__update_terminal($/;"	f	file:
reference_is_packed	tests/refs/ref_helpers.c	/^int reference_is_packed(git_reference *ref)$/;"	f
reference_matches_remote_head	src/clone.c	/^static int reference_matches_remote_head($/;"	f	file:
reference_normalize_for_repo	src/refs.c	/^static int reference_normalize_for_repo($/;"	f	file:
reference_path_available	src/refdb_fs.c	/^static int reference_path_available($/;"	f	file:
reflog	include/git2/reflog.h	/^GIT_EXTERN(int) git_reflog_write(git_reflog *reflog);$/;"	v
reflog	include/git2/reflog.h	/^GIT_EXTERN(size_t) git_reflog_entrycount(git_reflog *reflog);$/;"	v
reflog	include/git2/reflog.h	/^GIT_EXTERN(void) git_reflog_free(git_reflog *reflog);$/;"	v
reflog_alloc	src/refdb_fs.c	/^static int reflog_alloc(git_reflog **reflog, const char *name)$/;"	f	file:
reflog_append	src/refdb_fs.c	/^static int reflog_append(refdb_fs_backend *backend, const git_reference *ref, const git_signature *who, const char *message)$/;"	f	file:
reflog_check	tests/reset/reset_helpers.c	/^void reflog_check(git_repository *repo, const char *refname,$/;"	f
reflog_delete	include/git2/sys/refdb_backend.h	/^	int (*reflog_delete)(git_refdb_backend *backend, const char *name);$/;"	m	struct:git_refdb_backend
reflog_inverse_index	src/reflog.h	/^GIT_INLINE(size_t) reflog_inverse_index(size_t idx, size_t total)$/;"	f
reflog_parse	src/refdb_fs.c	/^static int reflog_parse(git_reflog *log, const char *buf, size_t buf_size)$/;"	f	file:
reflog_read	include/git2/sys/refdb_backend.h	/^	int (*reflog_read)(git_reflog **out, git_refdb_backend *backend, const char *name);$/;"	m	struct:git_refdb_backend
reflog_rename	include/git2/sys/refdb_backend.h	/^	int (*reflog_rename)(git_refdb_backend *_backend, const char *old_name, const char *new_name);$/;"	m	struct:git_refdb_backend
reflog_write	include/git2/sys/refdb_backend.h	/^	int (*reflog_write)(git_refdb_backend *backend, git_reflog *reflog);$/;"	m	struct:git_refdb_backend
refname	tests/refs/races.c	/^static const char *refname = "refs\/heads\/master";$/;"	v	file:
refnames	tests/refs/iterator.c	/^static const char *refnames[] = {$/;"	v	file:
refresh	include/git2/sys/config.h	/^	int (*refresh)(struct git_config_backend *);$/;"	m	struct:git_config_backend
refresh	include/git2/sys/odb_backend.h	/^	int (* refresh)(git_odb_backend *);$/;"	m	struct:git_odb_backend
refresh	tests/generate.py	/^    def refresh(self, path):$/;"	m	class:Module
refs	src/remote.h	/^	git_vector refs;$/;"	m	struct:git_remote
refs	src/transports/local.c	/^	git_vector refs;$/;"	m	struct:__anon78	file:
refs	src/transports/smart.h	/^	git_vector refs;$/;"	m	struct:__anon73
refs_foreach_cancel_cb	tests/refs/iterator.c	/^static int refs_foreach_cancel_cb(git_reference *reference, void *payload)$/;"	f	file:
refs_foreach_cb	tests/refs/iterator.c	/^static int refs_foreach_cb(git_reference *reference, void *payload)$/;"	f	file:
refs_foreach_name_cancel_cb	tests/refs/iterator.c	/^static int refs_foreach_name_cancel_cb(const char *name, void *payload)$/;"	f	file:
refs_foreach_name_cb	tests/refs/iterator.c	/^static int refs_foreach_name_cb(const char *name, void *payload)$/;"	f	file:
refspec	include/git2/refspec.h	/^GIT_EXTERN(const char *) git_refspec_dst(const git_refspec *refspec);$/;"	v
refspec	include/git2/refspec.h	/^GIT_EXTERN(const char *) git_refspec_src(const git_refspec *refspec);$/;"	v
refspec	include/git2/refspec.h	/^GIT_EXTERN(const char *) git_refspec_string(const git_refspec *refspec);$/;"	v
refspec	include/git2/refspec.h	/^GIT_EXTERN(int) git_refspec_force(const git_refspec *refspec);$/;"	v
refspec	src/clone.c	/^	const git_refspec *refspec;$/;"	m	struct:head_info	file:
refspec_cb	src/remote.c	/^static int refspec_cb(const git_config_entry *entry, void *payload)$/;"	f	file:
refspec_cb_data	src/remote.c	/^struct refspec_cb_data {$/;"	s	file:
refspec_transform	src/refspec.c	/^static int refspec_transform($/;"	f	file:
refspecs	src/remote.h	/^	git_vector refspecs;$/;"	m	struct:git_remote
reg_errcode_t	deps/regex/regex.h	/^} reg_errcode_t;$/;"	t	typeref:enum:__anon194
reg_syntax_t	deps/regex/regex.h	/^typedef unsigned long int reg_syntax_t;$/;"	t
regcomp	deps/regex/regcomp.c	/^regcomp (regex_t *__restrict preg,$/;"	f
regcomp	deps/regex/regex.c	32;"	d	file:
regerror	deps/regex/regex.c	33;"	d	file:
regex	src/config.c	/^	regex_t regex;$/;"	m	struct:__anon94	file:
regex	src/config.c	/^	regex_t regex;$/;"	m	struct:__anon96	file:
regex_t	deps/regex/regex.h	/^typedef struct re_pattern_buffer regex_t;$/;"	t	typeref:struct:re_pattern_buffer
regexec	deps/regex/regex.c	31;"	d	file:
regexec	deps/regex/regexec.c	/^regexec ($/;"	f
regfree	deps/regex/regcomp.c	/^regfree (regex_t *preg)$/;"	f
regfree	deps/regex/regex.c	30;"	d	file:
region	src/xdiff/xhistogram.c	/^struct region {$/;"	s	file:
register_custom_filters	tests/filter/custom.c	/^static void register_custom_filters(void)$/;"	f	file:
register_state	deps/regex/regex_internal.c	/^register_state (const re_dfa_t *dfa, re_dfastate_t *newstate,$/;"	f	file:
regmatch_t	deps/regex/regex.h	/^} regmatch_t;$/;"	t	typeref:struct:__anon195
regoff_t	deps/regex/regex.h	/^typedef int regoff_t;$/;"	t
regs	deps/regex/regex_internal.h	/^  regmatch_t *regs;$/;"	m	struct:re_fail_stack_ent_t
rehash	src/pack-objects.c	/^static void rehash(git_packbuilder *pb)$/;"	f	file:
reload_submodules	src/checkout.c	/^	bool reload_submodules;$/;"	m	struct:__anon121	file:
rem	include/git2/inttypes.h	/^   intmax_t rem;$/;"	m	struct:__anon221
remaining	src/pack-objects.c	/^	unsigned int remaining;$/;"	m	struct:thread_params	file:
remote	examples/network/fetch.c	/^	git_remote *remote;$/;"	m	struct:dl_data	file:
remote	include/git2/remote.h	/^GIT_EXTERN(const char *) git_remote_name(const git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(const char *) git_remote_pushurl(const git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(const char *) git_remote_url(const git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(const git_transfer_progress *) git_remote_stats(git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(git_remote_autotag_option_t) git_remote_autotag(const git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(git_repository *) git_remote_owner(const git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(int) git_remote_connected(const git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(int) git_remote_download(git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(int) git_remote_save(const git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(int) git_remote_update_fetchhead(git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(size_t) git_remote_refspec_count(const git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(void) git_remote_clear_refspecs(git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(void) git_remote_disconnect(git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(void) git_remote_free(git_remote *remote);$/;"	v
remote	include/git2/remote.h	/^GIT_EXTERN(void) git_remote_stop(git_remote *remote);$/;"	v
remote	src/push.h	/^	git_remote *remote;$/;"	m	struct:git_push
remote	src/remote.c	/^	git_remote *remote;$/;"	m	struct:refspec_cb_data	file:
remote	tests/network/remote/local.c	/^static git_remote *remote;$/;"	v	file:
remote_callbacks	include/git2/clone.h	/^	git_remote_callbacks remote_callbacks;$/;"	m	struct:git_clone_options
remote_head_cmp	src/remote.c	/^static int remote_head_cmp(const void *_a, const void *_b)$/;"	f	file:
remote_head_for_fetchspec_src	src/remote.c	/^static int remote_head_for_fetchspec_src(git_remote_head **out, git_vector *update_heads, const char *fetchspec_src)$/;"	f	file:
remote_head_for_ref	src/remote.c	/^static int remote_head_for_ref(git_remote_head **out, git_refspec *spec, git_vector *update_heads, git_reference *ref)$/;"	f	file:
remote_head_oid	src/clone.c	/^	git_oid remote_head_oid;$/;"	m	struct:head_info	file:
remote_list_cb	src/remote.c	/^static int remote_list_cb(const git_config_entry *entry, void *payload)$/;"	f	file:
remote_name	include/git2/clone.h	/^	const char *remote_name;$/;"	m	struct:git_clone_options
remote_tracking_branch_name	tests/refs/branches/remote.c	/^static const char *remote_tracking_branch_name = "refs\/remotes\/test\/master";$/;"	v	file:
remote_url	src/fetchhead.h	/^	char *remote_url;$/;"	m	struct:git_fetchhead_ref
remote_url	src/merge.h	/^	char *remote_url;$/;"	m	struct:git_merge_head
remove_data	tests/clar_libgit2.c	/^} remove_data;$/;"	t	typeref:struct:__anon13	file:
remove_file_cb	tests/status/worktree.c	/^static int remove_file_cb(void *data, git_buf *file)$/;"	f	file:
remove_note_in_tree_eexists_cb	src/notes.c	/^static int remove_note_in_tree_eexists_cb($/;"	f	file:
remove_note_in_tree_enotfound_cb	src/notes.c	/^static int remove_note_in_tree_enotfound_cb($/;"	f	file:
remove_object_files	tests/object/raw/write.c	/^static void remove_object_files(object_data *d)$/;"	f	file:
remove_ones	tests/core/vector.c	/^static int remove_ones(const git_vector *v, size_t idx)$/;"	f	file:
remove_placeholders_recurs	tests/clar_libgit2.c	/^static int remove_placeholders_recurs(void *_data, git_buf *path)$/;"	f	file:
removed	src/tree.h	/^	uint16_t removed;$/;"	m	struct:git_tree_entry
removes	src/checkout.c	/^	git_vector removes;$/;"	m	struct:__anon121	file:
rename	include/git2/sys/refdb_backend.h	/^	int (*rename)($/;"	m	struct:git_refdb_backend
rename_and_edit_file	tests/status/renames.c	/^static void rename_and_edit_file(git_repository *repo, const char *oldname, const char *newname)$/;"	f	file:
rename_config_entries_cb	src/config.c	/^static int rename_config_entries_cb($/;"	f	file:
rename_data	src/config.c	/^struct rename_data {$/;"	s	file:
rename_expected	tests/diff/rename.c	/^struct rename_expected$/;"	s	file:
rename_fetch_refspecs	src/remote.c	/^static int rename_fetch_refspecs($/;"	f	file:
rename_file	tests/status/renames.c	/^static void rename_file(git_repository *repo, const char *oldname, const char *newname)$/;"	f	file:
rename_from_rewrite_threshold	include/git2/diff.h	/^	uint16_t rename_from_rewrite_threshold;$/;"	m	struct:__anon272
rename_limit	include/git2/diff.h	/^	size_t rename_limit;$/;"	m	struct:__anon272
rename_one_remote_reference	src/remote.c	/^static int rename_one_remote_reference($/;"	f	file:
rename_remote_config_section	src/remote.c	/^static int rename_remote_config_section($/;"	f	file:
rename_remote_references	src/remote.c	/^static int rename_remote_references($/;"	f	file:
rename_threshold	include/git2/diff.h	/^	uint16_t rename_threshold;$/;"	m	struct:__anon272
rename_threshold	include/git2/merge.h	/^	unsigned int rename_threshold;$/;"	m	struct:__anon251
render	tests/generate.py	/^        def render(self):$/;"	m	class:Module.CallbacksTemplate
render	tests/generate.py	/^        def render(self):$/;"	m	class:Module.DeclarationTemplate
render	tests/generate.py	/^        def render(self):$/;"	m	class:Module.InfoTemplate
replace_file_with_mode	tests/index/filemodes.c	/^static void replace_file_with_mode($/;"	f	file:
repo	examples/add.c	/^	git_repository *repo;$/;"	m	struct:print_payload	file:
repo	examples/log.c	/^	git_repository *repo;$/;"	m	struct:log_state	file:
repo	examples/rev-parse.c	/^	git_repository *repo;$/;"	m	struct:parse_state	file:
repo	include/git2/attr.h	/^	git_repository *repo);$/;"	v
repo	include/git2/ignore.h	/^	git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(const char *) git_repository_get_namespace(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(const char *) git_repository_path(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(const char *) git_repository_workdir(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(int) git_repository_head_detached(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(int) git_repository_head_unborn(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(int) git_repository_is_bare(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(int) git_repository_is_empty(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(int) git_repository_is_shallow(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(int) git_repository_message_remove(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(int) git_repository_state(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(int) git_repository_state_cleanup(git_repository *repo);$/;"	v
repo	include/git2/repository.h	/^GIT_EXTERN(void) git_repository_free(git_repository *repo);$/;"	v
repo	include/git2/submodule.h	/^GIT_EXTERN(int) git_submodule_reload_all(git_repository *repo);$/;"	v
repo	include/git2/sys/repository.h	/^GIT_EXTERN(void) git_repository__cleanup(git_repository *repo);$/;"	v
repo	src/attr.c	/^	git_repository *repo;$/;"	m	struct:__anon176	file:
repo	src/checkout.c	/^	git_repository *repo;$/;"	m	struct:__anon121	file:
repo	src/clone.c	/^	git_repository *repo;$/;"	m	struct:head_info	file:
repo	src/commit.c	/^	git_repository *repo;$/;"	m	struct:__anon99	file:
repo	src/diff.c	/^	git_repository *repo;$/;"	m	struct:__anon34	file:
repo	src/diff.h	/^	git_repository   *repo;$/;"	m	struct:git_diff
repo	src/diff_file.h	/^	git_repository *repo;$/;"	m	struct:__anon154
repo	src/diff_tform.c	/^	git_repository *repo;$/;"	m	struct:__anon115	file:
repo	src/filter.c	/^	git_repository *repo;$/;"	m	struct:git_filter_source	file:
repo	src/ignore.h	/^	git_repository *repo;$/;"	m	struct:__anon174
repo	src/iterator.h	/^	git_repository *repo;$/;"	m	struct:git_iterator
repo	src/merge.h	/^	git_repository *repo;$/;"	m	struct:__anon143
repo	src/object.h	/^	git_repository *repo;$/;"	m	struct:git_object
repo	src/pack-objects.h	/^	git_repository *repo; \/* associated repository *\/$/;"	m	struct:git_packbuilder
repo	src/push.h	/^	git_repository *repo;$/;"	m	struct:git_push
repo	src/refdb.h	/^	git_repository *repo;$/;"	m	struct:git_refdb
repo	src/refdb_fs.c	/^	git_repository *repo;$/;"	m	struct:refdb_fs_backend	file:
repo	src/remote.h	/^	git_repository *repo;$/;"	m	struct:git_remote
repo	src/revwalk.h	/^	git_repository *repo;$/;"	m	struct:git_revwalk
repo	src/submodule.h	/^	git_repository *repo;$/;"	m	struct:git_submodule
repo	src/tag.c	/^	git_repository *repo;$/;"	m	struct:__anon49	file:
repo	src/transports/local.c	/^	git_repository *repo;$/;"	m	struct:__anon78	file:
repo	tests/index/collision.c	/^git_repository *repo = NULL;$/;"	v
repo	tests/index/conflicts.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/index/names.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/index/reuc.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/index/stage.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/trees/automerge.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/trees/commits.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/trees/modeconflict.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/trees/renames.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/trees/treediff.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/trees/trivial.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/workdir/dirty.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/workdir/fastforward.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/workdir/renames.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/workdir/setup.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/workdir/simple.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/workdir/submodules.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/merge/workdir/trivial.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/network/remote/local.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/object/blob/fromchunks.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/object/blob/write.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/object/commit/commitstagedfile.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/object/tag/peel.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/object/tree/frompath.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/odb/alternates.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/odb/streamwrite.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/branches/create.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/branches/delete.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/branches/ishead.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/branches/iterator.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/branches/lookup.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/branches/move.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/branches/name.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/branches/upstream.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/branches/upstreamname.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/foreachglob.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/iterator.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/listall.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/refs/unicode.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/repo/head.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/repo/headtree.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/repo/setters.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/reset/hard.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/reset/mixed.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/reset/soft.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/revert/bare.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/revert/workdir.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/stash/drop.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/stash/foreach.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/stash/save.c	/^static git_repository *repo;$/;"	v	file:
repo	tests/stash/submodules.c	/^static git_repository *repo;$/;"	v	file:
repo_contains_no_reference	src/repository.c	/^static int repo_contains_no_reference(git_repository *repo)$/;"	f	file:
repo_index	tests/index/conflicts.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/index/names.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/index/reuc.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/index/stage.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/merge/workdir/dirty.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/merge/workdir/fastforward.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/merge/workdir/setup.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/merge/workdir/simple.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/merge/workdir/trivial.c	/^static git_index *repo_index;$/;"	v	file:
repo_index	tests/revert/workdir.c	/^static git_index *repo_index;$/;"	v	file:
repo_init_config	src/repository.c	/^static int repo_init_config($/;"	f	file:
repo_init_create_head	src/repository.c	/^static int repo_init_create_head(const char *git_dir, const char *ref_name)$/;"	f	file:
repo_init_create_origin	src/repository.c	/^static int repo_init_create_origin(git_repository *repo, const char *url)$/;"	f	file:
repo_init_directories	src/repository.c	/^static int repo_init_directories($/;"	f	file:
repo_init_fs_configs	src/repository.c	/^static int repo_init_fs_configs($/;"	f	file:
repo_init_structure	src/repository.c	/^static int repo_init_structure($/;"	f	file:
repo_local_config	src/repository.c	/^static int repo_local_config($/;"	f	file:
repo_mode	tests/repo/init.c	/^enum repo_mode {$/;"	g	file:
repo_reinit_submodule_fs	src/repository.c	/^static int repo_reinit_submodule_fs(git_submodule *sm, const char *n, void *p)$/;"	f	file:
repo_template	src/repo_template.h	/^static repo_template_item repo_template[] = {$/;"	v
repo_template_item	src/repo_template.h	/^} repo_template_item;$/;"	t	typeref:struct:__anon145
repo_write_gitlink	src/repository.c	/^static int repo_write_gitlink($/;"	f	file:
repo_write_template	src/repository.c	/^static int repo_write_template($/;"	f	file:
repodir	examples/log.c	/^	const char *repodir;$/;"	m	struct:log_state	file:
repodir	examples/rev-parse.c	/^	const char *repodir;$/;"	m	struct:parse_state	file:
repodir	examples/status.c	/^    char *repodir;$/;"	m	struct:opts	file:
report_errors_only	tests/clar.c	/^	int report_errors_only;$/;"	m	struct:__anon23	file:
report_progress	src/checkout.c	/^static void report_progress($/;"	f	file:
report_status	src/push.h	/^	bool report_status;$/;"	m	struct:git_push
report_status	src/transports/smart.h	/^		report_status:1,$/;"	m	struct:transport_smart_caps
report_suite_names	tests/clar.c	/^	int report_suite_names;$/;"	m	struct:__anon23	file:
repository	src/blame.h	/^	git_repository *repository;$/;"	m	struct:git_blame
repository_alloc	src/repository.c	/^static git_repository *repository_alloc(void)$/;"	f	file:
request	src/transports/winhttp.c	/^	HINTERNET request;$/;"	m	struct:__anon62	file:
request_uri	src/transports/winhttp.c	/^	wchar_t *request_uri;$/;"	m	struct:__anon62	file:
res	tests/resources/userdiff/after/file.php	/^            $res = call_user_func_array(array($this->generator, $name), $arguments);$/;"	v
res	tests/resources/userdiff/before/file.php	/^            $res = call_user_func_array(array($this->generator, $name), $arguments);$/;"	v
res	tests/resources/userdiff/expected/driver/diff.php	/^             $res = call_user_func_array(array($this->generator, $name), $arguments);$/;"	v
res	tests/resources/userdiff/expected/nodriver/diff.php	/^             $res = call_user_func_array(array($this->generator, $name), $arguments);$/;"	v
res	tests/resources/userdiff/files/file.php	/^            $res = call_user_func_array(array($this->generator, $name), $arguments);$/;"	v
res_oid	src/odb_loose.c	/^	unsigned char res_oid[GIT_OID_HEXSZ];	\/* hex formatted oid of$/;"	m	struct:__anon153	file:
reserved	deps/zlib/zlib.h	/^    uLong   reserved;   \/* reserved for future use *\/$/;"	m	struct:z_stream_s
reset	src/iterator.h	/^	int (*reset)(git_iterator *, const char *start, const char *end);$/;"	m	struct:__anon112
reset_global_search_path	tests/core/env.c	/^static void reset_global_search_path(void)$/;"	f	file:
reset_index_and_workdir	src/stash.c	/^static int reset_index_and_workdir($/;"	f	file:
reset_index_to_treeish	tests/checkout/checkout_helpers.c	/^void reset_index_to_treeish(git_object *treeish)$/;"	f
reset_system_search_path	tests/core/env.c	/^static void reset_system_search_path(void)$/;"	f	file:
resize	src/tsort.c	/^static int resize(struct tsort_store *store, size_t new_size)$/;"	f	file:
resize_trie	src/oid.c	/^static int resize_trie(git_oid_shorten *self, size_t new_size)$/;"	f	file:
resize_vector	src/vector.c	/^GIT_INLINE(int) resize_vector(git_vector *v, size_t new_size)$/;"	f
resolve_commit_oid_to_tree	tests/diff/diff_helpers.c	/^git_tree *resolve_commit_oid_to_tree($/;"	f
resolve_deltas	src/indexer.c	/^static int resolve_deltas(git_indexer *idx, git_transfer_progress *stats)$/;"	f	file:
resolved	src/merge.h	/^	git_vector resolved;$/;"	m	struct:__anon143
restore_terminator	src/iterator.c	/^	char restore_terminator;$/;"	m	struct:__anon85	file:
result_bytes	tests/revwalk/basic.c	/^static const int result_bytes = 24;$/;"	v	file:
result_contents	tests/merge/workdir/dirty.c	/^static char *result_contents[4][6] = {$/;"	v	file:
ret	examples/network/fetch.c	/^	int ret;$/;"	m	struct:dl_data	file:
retrieve_base_commit_and_message	src/stash.c	/^static int retrieve_base_commit_and_message($/;"	f	file:
retrieve_branch_reference	src/branch.c	/^static int retrieve_branch_reference($/;"	f	file:
retrieve_head	src/stash.c	/^static int retrieve_head(git_reference **out, git_repository *repo)$/;"	f	file:
retrieve_known_commit	tests/refs/branches/create.c	/^static void retrieve_known_commit(git_commit **commit, git_repository *repo)$/;"	f	file:
retrieve_note_tree_and_commit	src/notes.c	/^static int retrieve_note_tree_and_commit($/;"	f	file:
retrieve_oid_from_reflog	src/revparse.c	/^static int retrieve_oid_from_reflog(git_oid *oid, git_reference *ref, size_t identifier)$/;"	f	file:
retrieve_previously_checked_out_branch_or_revision	src/revparse.c	/^static int retrieve_previously_checked_out_branch_or_revision(git_object **out, git_reference **base_ref, git_repository *repo, const char *identifier, size_t position)$/;"	f	file:
retrieve_reflog_path	src/refdb_fs.c	/^GIT_INLINE(int) retrieve_reflog_path(git_buf *path, git_repository *repo, const char *name)$/;"	f
retrieve_remote_tracking_reference	src/revparse.c	/^static int retrieve_remote_tracking_reference(git_reference **base_ref, const char *identifier, git_repository *repo)$/;"	f	file:
retrieve_revobject_from_reflog	src/revparse.c	/^static int retrieve_revobject_from_reflog(git_object **out, git_reference **base_ref, git_repository *repo, const char *identifier, size_t position)$/;"	f	file:
retrieve_tag_from_oid	tests/object/tag/peel.c	/^static void retrieve_tag_from_oid(git_tag **tag_out, git_repository *repo, const char *sha)$/;"	f	file:
retrieve_tag_reference	src/tag.c	/^static int retrieve_tag_reference($/;"	f	file:
retrieve_tag_reference_oid	src/tag.c	/^static int retrieve_tag_reference_oid($/;"	f	file:
retrieve_target_from_oid	tests/refs/branches/create.c	/^static void retrieve_target_from_oid(git_commit **out, git_repository *repo, const char *sha)$/;"	f	file:
retrieve_top_stash_id	tests/stash/drop.c	/^void retrieve_top_stash_id(git_oid *out)$/;"	f
retrieve_upstream_configuration	src/branch.c	/^static int retrieve_upstream_configuration($/;"	f	file:
reuc	src/index.h	/^	git_vector reuc;$/;"	m	struct:git_index
reuc_cmp	src/index.c	/^static int reuc_cmp(const void *a, const void *b)$/;"	f	file:
reuc_entry_exists	tests/index/reuc.c	/^static int reuc_entry_exists(void)$/;"	f	file:
reuc_icmp	src/index.c	/^static int reuc_icmp(const void *a, const void *b)$/;"	f	file:
reuc_isrch	src/index.c	/^static int reuc_isrch(const void *key, const void *array_member)$/;"	f	file:
reuc_search	src/index.h	/^	git_vector_cmp reuc_search;$/;"	m	struct:git_index
reuc_srch	src/index.c	/^static int reuc_srch(const void *key, const void *array_member)$/;"	f	file:
rev	examples/cat-file.c	/^	const char *rev;$/;"	m	struct:opts	file:
reverse_elements	src/tsort.c	/^static void reverse_elements(void **dst, ssize_t start, ssize_t end)$/;"	f	file:
reverse_filter_apply	tests/filter/custom.c	/^static int reverse_filter_apply($/;"	f	file:
reverse_filter_free	tests/filter/custom.c	/^static void reverse_filter_free(git_filter *f)$/;"	f	file:
revert_normalize_opts	src/revert.c	/^static int revert_normalize_opts($/;"	f	file:
revert_seterr	src/revert.c	/^static int revert_seterr(git_commit *commit, const char *fmt)$/;"	f	file:
revert_state_cleanup	src/revert.c	/^static int revert_state_cleanup(git_repository *repo)$/;"	f	file:
revisions	examples/log.c	/^	int revisions;$/;"	m	struct:log_state	file:
revparse__ext	src/revparse.c	/^int revparse__ext($/;"	f
revparse_lookup_object	src/revparse.c	/^static int revparse_lookup_object($/;"	f	file:
revwalk	src/push.c	/^static int revwalk(git_vector *commits, git_push *push)$/;"	f	file:
revwalk_basic_setup_walk	tests/revwalk/basic.c	/^static void revwalk_basic_setup_walk(const char *fixture)$/;"	f	file:
revwalk_enqueue_timesort	src/revwalk.c	/^static int revwalk_enqueue_timesort(git_revwalk *walk, git_commit_list_node *commit)$/;"	f	file:
revwalk_enqueue_unsorted	src/revwalk.c	/^static int revwalk_enqueue_unsorted(git_revwalk *walk, git_commit_list_node *commit)$/;"	f	file:
revwalk_next_reverse	src/revwalk.c	/^static int revwalk_next_reverse(git_commit_list_node **object_out, git_revwalk *walk)$/;"	f	file:
revwalk_next_timesort	src/revwalk.c	/^static int revwalk_next_timesort(git_commit_list_node **object_out, git_revwalk *walk)$/;"	f	file:
revwalk_next_toposort	src/revwalk.c	/^static int revwalk_next_toposort(git_commit_list_node **object_out, git_revwalk *walk)$/;"	f	file:
revwalk_next_unsorted	src/revwalk.c	/^static int revwalk_next_unsorted(git_commit_list_node **object_out, git_revwalk *walk)$/;"	f	file:
revwalk_parseopts	examples/rev-list.c	/^static int revwalk_parseopts(git_repository *repo, git_revwalk *walk, int nopts, char **opts)$/;"	f	file:
rewinddir	src/win32/dir.h	38;"	d
rewrite_gitmodules	tests/submodule/submodule_helpers.c	/^void rewrite_gitmodules(const char *workdir)$/;"	f
rhash	src/xdiff/xtypes.h	/^	xrecord_t **rhash;$/;"	m	struct:s_xdfile
right	deps/regex/regex_internal.h	/^  struct bin_tree_t *right;$/;"	m	struct:bin_tree_t	typeref:struct:bin_tree_t::bin_tree_t
rindex	src/xdiff/xdiffi.h	/^	long *rindex;$/;"	m	struct:s_diffdata
rindex	src/xdiff/xtypes.h	/^	long *rindex;$/;"	m	struct:s_xdfile
rm_eo	deps/regex/regex.h	/^  regoff_t rm_eo;  \/* Byte offset from string's start to substring's end.  *\/$/;"	m	struct:__anon195
rm_so	deps/regex/regex.h	/^  regoff_t rm_so;  \/* Byte offset from string's start to substring's start.  *\/$/;"	m	struct:__anon195
roid	src/push.h	/^	git_oid roid;$/;"	m	struct:push_spec
root	src/iterator.c	/^	tree_iterator_frame *head, *root;$/;"	m	struct:__anon84	file:
root_commit_message	tests/commit/write.c	/^static const char *root_commit_message = "This is a root commit\\n\\$/;"	v	file:
root_len	src/iterator.c	/^	size_t root_len;$/;"	m	struct:fs_iterator	file:
root_reflog_message	tests/commit/write.c	/^static const char *root_reflog_message = "commit (initial): This is a root commit \\$/;"	v	file:
rpc	include/git2/transport.h	/^	unsigned rpc;$/;"	m	struct:git_smart_subtransport_definition
rpc	src/transports/smart.h	/^	unsigned rpc : 1,$/;"	m	struct:__anon73
rref	src/push.h	/^	char *rref;$/;"	m	struct:push_spec
rules	src/attr_file.h	/^	git_vector rules;		\/* vector of <rule*> or <fnmatch*> *\/$/;"	m	struct:__anon133
run	examples/test/test-rev-list.sh	/^run () {$/;"	f
run_command	examples/network/git2.c	/^static int run_command(git_cb fn, int argc, char **argv)$/;"	f	file:
run_test_cases	tests/attr/lookup.c	/^static void run_test_cases(git_attr_file *file, struct attr_expected *cases, int force_dir)$/;"	f	file:
s	src/transports/http.c	/^	http_stream *s;$/;"	m	struct:__anon82	file:
s40	tests/object/message.c	16;"	d	file:
s_bdiffparam	src/xdiff/xdiff.h	/^typedef struct s_bdiffparam {$/;"	s
s_body_identity	deps/http-parser/http_parser.c	/^  , s_body_identity$/;"	e	enum:state	file:
s_body_identity_eof	deps/http-parser/http_parser.c	/^  , s_body_identity_eof$/;"	e	enum:state	file:
s_chanode	src/xdiff/xtypes.h	/^typedef struct s_chanode {$/;"	s
s_chastore	src/xdiff/xtypes.h	/^typedef struct s_chastore {$/;"	s
s_chunk_data	deps/http-parser/http_parser.c	/^  , s_chunk_data$/;"	e	enum:state	file:
s_chunk_data_almost_done	deps/http-parser/http_parser.c	/^  , s_chunk_data_almost_done$/;"	e	enum:state	file:
s_chunk_data_done	deps/http-parser/http_parser.c	/^  , s_chunk_data_done$/;"	e	enum:state	file:
s_chunk_parameters	deps/http-parser/http_parser.c	/^  , s_chunk_parameters$/;"	e	enum:state	file:
s_chunk_size	deps/http-parser/http_parser.c	/^  , s_chunk_size$/;"	e	enum:state	file:
s_chunk_size_almost_done	deps/http-parser/http_parser.c	/^  , s_chunk_size_almost_done$/;"	e	enum:state	file:
s_chunk_size_start	deps/http-parser/http_parser.c	/^  , s_chunk_size_start$/;"	e	enum:state	file:
s_dead	deps/http-parser/http_parser.c	/^  { s_dead = 1 \/* important that this is > 0 *\/$/;"	e	enum:state	file:
s_diffdata	src/xdiff/xdiffi.h	/^typedef struct s_diffdata {$/;"	s
s_header_almost_done	deps/http-parser/http_parser.c	/^  , s_header_almost_done$/;"	e	enum:state	file:
s_header_field	deps/http-parser/http_parser.c	/^  , s_header_field$/;"	e	enum:state	file:
s_header_field_start	deps/http-parser/http_parser.c	/^  , s_header_field_start$/;"	e	enum:state	file:
s_header_value	deps/http-parser/http_parser.c	/^  , s_header_value$/;"	e	enum:state	file:
s_header_value_lws	deps/http-parser/http_parser.c	/^  , s_header_value_lws$/;"	e	enum:state	file:
s_header_value_start	deps/http-parser/http_parser.c	/^  , s_header_value_start$/;"	e	enum:state	file:
s_headers_almost_done	deps/http-parser/http_parser.c	/^  , s_headers_almost_done$/;"	e	enum:state	file:
s_headers_done	deps/http-parser/http_parser.c	/^  , s_headers_done$/;"	e	enum:state	file:
s_http_host	deps/http-parser/http_parser.c	/^  , s_http_host$/;"	e	enum:http_host_state	file:
s_http_host_dead	deps/http-parser/http_parser.c	/^    s_http_host_dead = 1$/;"	e	enum:http_host_state	file:
s_http_host_port	deps/http-parser/http_parser.c	/^  , s_http_host_port$/;"	e	enum:http_host_state	file:
s_http_host_port_start	deps/http-parser/http_parser.c	/^  , s_http_host_port_start$/;"	e	enum:http_host_state	file:
s_http_host_start	deps/http-parser/http_parser.c	/^  , s_http_host_start$/;"	e	enum:http_host_state	file:
s_http_host_v6	deps/http-parser/http_parser.c	/^  , s_http_host_v6$/;"	e	enum:http_host_state	file:
s_http_host_v6_end	deps/http-parser/http_parser.c	/^  , s_http_host_v6_end$/;"	e	enum:http_host_state	file:
s_http_host_v6_start	deps/http-parser/http_parser.c	/^  , s_http_host_v6_start$/;"	e	enum:http_host_state	file:
s_http_userinfo	deps/http-parser/http_parser.c	/^  , s_http_userinfo$/;"	e	enum:http_host_state	file:
s_http_userinfo_start	deps/http-parser/http_parser.c	/^  , s_http_userinfo_start$/;"	e	enum:http_host_state	file:
s_lno	src/blame.h	/^	int s_lno;$/;"	m	struct:git_blame__entry
s_message_done	deps/http-parser/http_parser.c	/^  , s_message_done$/;"	e	enum:state	file:
s_mmbuffer	src/xdiff/xdiff.h	/^typedef struct s_mmbuffer {$/;"	s
s_mmfile	src/xdiff/xdiff.h	/^typedef struct s_mmfile {$/;"	s
s_reg_t	deps/regex/regex.h	/^typedef long int s_reg_t;$/;"	t
s_req_first_http_major	deps/http-parser/http_parser.c	/^  , s_req_first_http_major$/;"	e	enum:state	file:
s_req_first_http_minor	deps/http-parser/http_parser.c	/^  , s_req_first_http_minor$/;"	e	enum:state	file:
s_req_fragment	deps/http-parser/http_parser.c	/^  , s_req_fragment$/;"	e	enum:state	file:
s_req_fragment_start	deps/http-parser/http_parser.c	/^  , s_req_fragment_start$/;"	e	enum:state	file:
s_req_http_H	deps/http-parser/http_parser.c	/^  , s_req_http_H$/;"	e	enum:state	file:
s_req_http_HT	deps/http-parser/http_parser.c	/^  , s_req_http_HT$/;"	e	enum:state	file:
s_req_http_HTT	deps/http-parser/http_parser.c	/^  , s_req_http_HTT$/;"	e	enum:state	file:
s_req_http_HTTP	deps/http-parser/http_parser.c	/^  , s_req_http_HTTP$/;"	e	enum:state	file:
s_req_http_major	deps/http-parser/http_parser.c	/^  , s_req_http_major$/;"	e	enum:state	file:
s_req_http_minor	deps/http-parser/http_parser.c	/^  , s_req_http_minor$/;"	e	enum:state	file:
s_req_http_start	deps/http-parser/http_parser.c	/^  , s_req_http_start$/;"	e	enum:state	file:
s_req_line_almost_done	deps/http-parser/http_parser.c	/^  , s_req_line_almost_done$/;"	e	enum:state	file:
s_req_method	deps/http-parser/http_parser.c	/^  , s_req_method$/;"	e	enum:state	file:
s_req_path	deps/http-parser/http_parser.c	/^  , s_req_path$/;"	e	enum:state	file:
s_req_query_string	deps/http-parser/http_parser.c	/^  , s_req_query_string$/;"	e	enum:state	file:
s_req_query_string_start	deps/http-parser/http_parser.c	/^  , s_req_query_string_start$/;"	e	enum:state	file:
s_req_schema	deps/http-parser/http_parser.c	/^  , s_req_schema$/;"	e	enum:state	file:
s_req_schema_slash	deps/http-parser/http_parser.c	/^  , s_req_schema_slash$/;"	e	enum:state	file:
s_req_schema_slash_slash	deps/http-parser/http_parser.c	/^  , s_req_schema_slash_slash$/;"	e	enum:state	file:
s_req_server	deps/http-parser/http_parser.c	/^  , s_req_server$/;"	e	enum:state	file:
s_req_server_start	deps/http-parser/http_parser.c	/^  , s_req_server_start$/;"	e	enum:state	file:
s_req_server_with_at	deps/http-parser/http_parser.c	/^  , s_req_server_with_at$/;"	e	enum:state	file:
s_req_spaces_before_url	deps/http-parser/http_parser.c	/^  , s_req_spaces_before_url$/;"	e	enum:state	file:
s_res_H	deps/http-parser/http_parser.c	/^  , s_res_H$/;"	e	enum:state	file:
s_res_HT	deps/http-parser/http_parser.c	/^  , s_res_HT$/;"	e	enum:state	file:
s_res_HTT	deps/http-parser/http_parser.c	/^  , s_res_HTT$/;"	e	enum:state	file:
s_res_HTTP	deps/http-parser/http_parser.c	/^  , s_res_HTTP$/;"	e	enum:state	file:
s_res_first_http_major	deps/http-parser/http_parser.c	/^  , s_res_first_http_major$/;"	e	enum:state	file:
s_res_first_http_minor	deps/http-parser/http_parser.c	/^  , s_res_first_http_minor$/;"	e	enum:state	file:
s_res_first_status_code	deps/http-parser/http_parser.c	/^  , s_res_first_status_code$/;"	e	enum:state	file:
s_res_http_major	deps/http-parser/http_parser.c	/^  , s_res_http_major$/;"	e	enum:state	file:
s_res_http_minor	deps/http-parser/http_parser.c	/^  , s_res_http_minor$/;"	e	enum:state	file:
s_res_line_almost_done	deps/http-parser/http_parser.c	/^  , s_res_line_almost_done$/;"	e	enum:state	file:
s_res_or_resp_H	deps/http-parser/http_parser.c	/^  , s_res_or_resp_H$/;"	e	enum:state	file:
s_res_status	deps/http-parser/http_parser.c	/^  , s_res_status$/;"	e	enum:state	file:
s_res_status_code	deps/http-parser/http_parser.c	/^  , s_res_status_code$/;"	e	enum:state	file:
s_start_req	deps/http-parser/http_parser.c	/^  , s_start_req$/;"	e	enum:state	file:
s_start_req_or_res	deps/http-parser/http_parser.c	/^  , s_start_req_or_res$/;"	e	enum:state	file:
s_start_res	deps/http-parser/http_parser.c	/^  , s_start_res$/;"	e	enum:state	file:
s_xdalgoenv	src/xdiff/xdiffi.h	/^typedef struct s_xdalgoenv {$/;"	s
s_xdchange	src/xdiff/xdiffi.h	/^typedef struct s_xdchange {$/;"	s
s_xdemitcb	src/xdiff/xdiff.h	/^typedef struct s_xdemitcb {$/;"	s
s_xdemitconf	src/xdiff/xdiff.h	/^typedef struct s_xdemitconf {$/;"	s
s_xdfenv	src/xdiff/xtypes.h	/^typedef struct s_xdfenv {$/;"	s
s_xdfile	src/xdiff/xtypes.h	/^typedef struct s_xdfile {$/;"	s
s_xdlclass	src/xdiff/xprepare.c	/^typedef struct s_xdlclass {$/;"	s	file:
s_xdlclassifier	src/xdiff/xprepare.c	/^typedef struct s_xdlclassifier {$/;"	s	file:
s_xdmerge	src/xdiff/xmerge.c	/^typedef struct s_xdmerge {$/;"	s	file:
s_xdpsplit	src/xdiff/xdiffi.c	/^typedef struct s_xdpsplit {$/;"	s	file:
s_xmparam	src/xdiff/xdiff.h	/^typedef struct s_xmparam {$/;"	s
s_xpparam	src/xdiff/xdiff.h	/^typedef struct s_xpparam {$/;"	s
s_xrecord	src/xdiff/xtypes.h	/^typedef struct s_xrecord {$/;"	s
same_suspect	src/blame_git.c	/^static bool same_suspect(git_blame__origin *a, git_blame__origin *b)$/;"	f	file:
sane	deps/zlib/inflate.h	/^    int sane;                   \/* if false, allow invalid distance too far *\/$/;"	m	struct:inflate_state
save_cache	tests/generate.py	/^    def save_cache(self):$/;"	m	class:TestSuite
save_entry	src/indexer.c	/^static int save_entry(git_indexer *idx, struct entry *entry, struct git_pack_entry *pentry, git_off_t entry_start)$/;"	f	file:
sb_char	deps/regex/regex_internal.h	/^  re_bitset_ptr_t sb_char;$/;"	m	struct:re_dfa_t
sbcset	deps/regex/regex_internal.h	/^    re_bitset_ptr_t sbcset;	\/* for SIMPLE_BRACKET *\/$/;"	m	union:__anon184::__anon185
scanA	src/xdiff/xhistogram.c	/^static int scanA(struct histindex *index, unsigned int line1, unsigned int count1)$/;"	f	file:
scan_tree	deps/zlib/trees.c	/^local void scan_tree (s, tree, max_code)$/;"	f
scanned	src/blame.h	/^	bool scanned;$/;"	m	struct:git_blame__entry
score	src/blame.h	/^	unsigned score;$/;"	m	struct:git_blame__entry
scurr	src/xdiff/xtypes.h	/^	long scurr;$/;"	m	struct:s_chastore
search_cur_bkref_entry	deps/regex/regexec.c	/^search_cur_bkref_entry (const re_match_context_t *mctx, int str_idx)$/;"	f	file:
search_duplicated_node	deps/regex/regcomp.c	/^search_duplicated_node (const re_dfa_t *dfa, int org_node,$/;"	f	file:
second_tree	tests/object/tree/write.c	/^static const char *second_tree = "f60079018b664e4e79329a7ef9559c8d9e0378d1";$/;"	v	file:
seconds	include/git2/index.h	/^	git_time_t seconds;$/;"	m	struct:__anon228
seconds	src/index.c	/^	uint32_t seconds;$/;"	m	struct:entry_time	file:
seed_packbuilder	tests/pack/packbuilder.c	/^static void seed_packbuilder(void)$/;"	f	file:
seek	src/iterator.h	/^	int (*seek)(git_iterator *, const char *prefix);$/;"	m	struct:__anon112
seek_back_trailer	src/indexer.c	/^static git_off_t seek_back_trailer(git_indexer *idx)$/;"	f	file:
seek_forward	src/index.c	1744;"	d	file:
seek_forward	src/index.c	1811;"	d	file:
seek_forward	src/refdb_fs.c	1239;"	d	file:
seek_forward	src/refdb_fs.c	1294;"	d	file:
seen	src/commit_list.h	/^	unsigned int seen:1,$/;"	m	struct:git_commit_list_node
send_all_trees	deps/zlib/trees.c	/^local void send_all_trees(s, lcodes, dcodes, blcodes)$/;"	f
send_bits	deps/zlib/trees.c	/^local void send_bits(s, value, length)$/;"	f
send_bits	deps/zlib/trees.c	218;"	d	file:
send_code	deps/zlib/trees.c	168;"	d	file:
send_code	deps/zlib/trees.c	172;"	d	file:
send_command	src/transports/git.c	/^static int send_command(git_stream *s)$/;"	f	file:
send_command	src/transports/ssh.c	/^static int send_command(ssh_stream *s)$/;"	f	file:
send_tree	deps/zlib/trees.c	/^local void send_tree (s, tree, max_code)$/;"	f
sent_command	src/transports/git.c	/^	unsigned sent_command : 1;$/;"	m	struct:__anon74	file:
sent_command	src/transports/ssh.c	/^	unsigned sent_command : 1;$/;"	m	struct:__anon76	file:
sent_request	src/transports/http.c	/^	unsigned sent_request : 1,$/;"	m	struct:__anon80	file:
sent_request	src/transports/winhttp.c	/^	unsigned sent_request : 1,$/;"	m	struct:__anon62	file:
serialize_reflog_entry	src/refdb_fs.c	/^static int serialize_reflog_entry($/;"	f	file:
service	src/transports/http.c	/^	const char *service;$/;"	m	struct:__anon80	file:
service	src/transports/winhttp.c	/^	const char *service;$/;"	m	struct:__anon62	file:
service_url	src/transports/http.c	/^	const char *service_url;$/;"	m	struct:__anon80	file:
service_url	src/transports/winhttp.c	/^	const char *service_url;$/;"	m	struct:__anon62	file:
session	src/transports/ssh.c	/^	LIBSSH2_SESSION *session;$/;"	m	struct:__anon76	file:
session	src/transports/winhttp.c	/^	HINTERNET session;$/;"	m	struct:__anon63	file:
set	include/git2/sys/config.h	/^	int (*set)(struct git_config_backend *, const char *key, const char *value);$/;"	m	struct:git_config_backend
setW	src/hash/hash_generic.c	56;"	d	file:
setW	src/hash/hash_generic.c	58;"	d	file:
setW	src/hash/hash_generic.c	60;"	d	file:
set_callbacks	include/git2/transport.h	/^	int (*set_callbacks)($/;"	m	struct:git_transport
set_config	src/repository.c	/^static void set_config(git_repository *repo, git_config *config)$/;"	f	file:
set_config_int	tests/diff/tree.c	/^static void set_config_int(git_repository *repo, const char *name, int value)$/;"	f	file:
set_core_autocrlf_to	tests/merge/workdir/dirty.c	/^static void set_core_autocrlf_to(git_repository *repo, bool value)$/;"	f	file:
set_core_autocrlf_to	tests/merge/workdir/simple.c	/^static void set_core_autocrlf_to(git_repository *repo, bool value)$/;"	f	file:
set_error	src/errors.c	/^static void set_error(int error_class, char *string)$/;"	f	file:
set_index	src/repository.c	/^static void set_index(git_repository *repo, git_index *index)$/;"	f	file:
set_multivar	include/git2/sys/config.h	/^	int (*set_multivar)(git_config_backend *cfg, const char *name, const char *regexp, const char *value);$/;"	m	struct:git_config_backend
set_odb	src/repository.c	/^static void set_odb(git_repository *repo, git_odb *odb)$/;"	f	file:
set_parse_error	src/config_file.c	/^static void set_parse_error(struct reader *reader, int col, const char *error_str)$/;"	f	file:
set_refdb	src/repository.c	/^static void set_refdb(git_repository *repo, git_refdb *refdb)$/;"	f	file:
set_refspecs	src/remote.c	/^static int set_refspecs(git_remote *remote, git_strarray *array, int push)$/;"	f	file:
set_regs	deps/regex/regexec.c	/^set_regs (const regex_t *preg, const re_match_context_t *mctx, size_t nmatch,$/;"	f	file:
set_sm_ignore	tests/submodule/status.c	/^static int set_sm_ignore(git_submodule *sm, const char *name, void *payload)$/;"	f	file:
set_some_bits	tests/core/bitvec.c	/^static void set_some_bits(git_bitvec *bv, size_t length)$/;"	f	file:
set_sorting	examples/log.c	/^static void set_sorting(struct log_state *s, unsigned int sort_mode)$/;"	f	file:
set_stream_input	src/odb_loose.c	/^static void set_stream_input(z_stream *s, void *in, size_t len)$/;"	f	file:
set_stream_output	src/odb_loose.c	/^static void set_stream_output(z_stream *s, void *out, size_t len)$/;"	f	file:
setenv_and_check	tests/core/env.c	/^static void setenv_and_check(const char *name, const char *value)$/;"	f	file:
settings	src/transports/http.c	/^	http_parser_settings settings;$/;"	m	struct:__anon81	file:
setup	tests/core/dirent.c	/^static void setup(walk_data *d)$/;"	f	file:
setup_fixture_submod2	tests/submodule/submodule_helpers.c	/^git_repository *setup_fixture_submod2(void)$/;"	f
setup_fixture_submodules	tests/submodule/submodule_helpers.c	/^git_repository *setup_fixture_submodules(void)$/;"	f
setup_namespace	src/refdb_fs.c	/^static int setup_namespace(git_buf *path, git_repository *repo)$/;"	f	file:
setup_repository_and_backend	tests/odb/backend/nonrefreshing.c	/^static void setup_repository_and_backend(git_error_code error_code)$/;"	f	file:
setup_simple_state	tests/repo/state.c	/^static void setup_simple_state(const char *filename)$/;"	f	file:
setup_stash	tests/stash/stash_helpers.c	/^void setup_stash(git_repository *repo, git_signature *signature)$/;"	f
setup_tracking_config	src/clone.c	/^static int setup_tracking_config($/;"	f	file:
sha	tests/checkout/index.c	/^	const char *sha;$/;"	m	struct:notify_data	file:
sha	tests/object/cache.c	/^	const char *sha;$/;"	m	struct:__anon21	file:
sha1	src/pack.h	/^	git_oid sha1;$/;"	m	struct:git_pack_entry
sha1_entry_pos	src/sha1_lookup.c	/^int sha1_entry_pos(const void *table,$/;"	f
sha1_position	src/sha1_lookup.c	/^int sha1_position(const void *table,$/;"	f
shared	examples/init.c	/^	uint32_t shared;$/;"	m	struct:opts	file:
shell_out	tests/clar/fs.h	/^shell_out(char * const argv[])$/;"	f
shift_hunks_by	src/blame.c	/^static void shift_hunks_by(git_vector *v, size_t start_line, int shift_by)$/;"	f	file:
short_entry_size	src/index.c	28;"	d	file:
short_oid	src/odb_loose.c	/^	unsigned char short_oid[GIT_OID_HEXSZ]; \/* hex formatted oid to match *\/$/;"	m	struct:__anon153	file:
short_oid_len	src/odb_loose.c	/^	size_t short_oid_len;$/;"	m	struct:__anon153	file:
short_tag_id	tests/object/tag/read.c	/^static const char *short_tag_id = "5da7760512a953e3c7c4e47e4392c7a4338fb729";$/;"	v	file:
short_tagged_commit	tests/object/tag/read.c	/^static const char *short_tagged_commit = "4a5ed60bafcf4638b7c8356bd4ce1916bfede93c";$/;"	v	file:
should_checkout	src/clone.c	/^static bool should_checkout($/;"	f	file:
should_generate	tests/generate.py	/^    def should_generate(self, path):$/;"	m	class:TestSuite
should_write_reflog	src/refdb_fs.c	/^static bool should_write_reflog(git_repository *repo, const char *name)$/;"	f	file:
show	include/git2/status.h	/^	git_status_show_t show;$/;"	m	struct:__anon261
show_blob	examples/cat-file.c	/^static void show_blob(const git_blob *blob)$/;"	f	file:
show_branch	examples/status.c	/^static void show_branch(git_repository *repo, int format)$/;"	f	file:
show_commit	examples/cat-file.c	/^static void show_commit(const git_commit *commit)$/;"	f	file:
show_diff	examples/log.c	/^	int show_diff;$/;"	m	struct:log_options	file:
show_tag	examples/cat-file.c	/^static void show_tag(const git_tag *tag)$/;"	f	file:
show_tree	examples/cat-file.c	/^static void show_tree(const git_tree *tree)$/;"	f	file:
showbranch	examples/status.c	/^    int showbranch;$/;"	m	struct:opts	file:
shutdown	include/git2/sys/filter.h	/^	git_filter_shutdown_fn shutdown;$/;"	m	struct:git_filter
side_band	src/transports/smart.h	/^		side_band:1,$/;"	m	struct:transport_smart_caps
side_band_64k	src/transports/smart.h	/^		side_band_64k:1,$/;"	m	struct:transport_smart_caps
sideband_error_pkt	src/transports/smart_pkt.c	/^static int sideband_error_pkt(git_pkt **out, const char *line, size_t len)$/;"	f	file:
sift_ctx_init	deps/regex/regexec.c	/^sift_ctx_init (re_sift_context_t *sctx, re_dfastate_t **sifted_sts,$/;"	f	file:
sift_states_backward	deps/regex/regexec.c	/^sift_states_backward (const re_match_context_t *mctx, re_sift_context_t *sctx)$/;"	f	file:
sift_states_bkref	deps/regex/regexec.c	/^sift_states_bkref (const re_match_context_t *mctx, re_sift_context_t *sctx,$/;"	f	file:
sift_states_iter_mb	deps/regex/regexec.c	/^sift_states_iter_mb (const re_match_context_t *mctx, re_sift_context_t *sctx,$/;"	f	file:
sifted_states	deps/regex/regex_internal.h	/^  re_dfastate_t **sifted_states;$/;"	m	struct:__anon190
sig	include/git2/signature.h	/^GIT_EXTERN(void) git_signature_free(git_signature *sig);$/;"	v
sign_callback	include/git2/transport.h	/^	void *sign_callback;$/;"	m	struct:git_cred_ssh_custom
sign_data	include/git2/transport.h	/^	void *sign_data;$/;"	m	struct:git_cred_ssh_custom
signature	include/git2/clone.h	/^	git_signature *signature;$/;"	m	struct:git_clone_options
signature	src/index.c	/^	char signature[4];$/;"	m	struct:index_extension	file:
signature	src/index.c	/^	uint32_t signature;$/;"	m	struct:index_header	file:
signature	tests/stash/drop.c	/^static git_signature *signature;$/;"	v	file:
signature	tests/stash/foreach.c	/^static git_signature *signature;$/;"	v	file:
signature	tests/stash/save.c	/^static git_signature *signature;$/;"	v	file:
signature	tests/stash/submodules.c	/^static git_signature *signature;$/;"	v	file:
signature_error	src/signature.c	/^static int signature_error(const char *msg)$/;"	f	file:
similarity	include/git2/diff.h	/^	int (*similarity)(int *score, void *siga, void *sigb, void *payload);$/;"	m	struct:__anon271
similarity	include/git2/diff.h	/^	uint16_t      similarity;  \/**< for RENAMED and COPIED, value 0-100 *\/$/;"	m	struct:__anon267
similarity	src/diff_tform.c	/^	uint16_t similarity;$/;"	m	struct:__anon116	file:
similarity	src/merge.c	/^	unsigned char similarity;$/;"	m	struct:merge_diff_similarity	file:
similarity_get_file	src/diff_tform.c	/^GIT_INLINE(git_diff_file *) similarity_get_file(git_diff *diff, size_t idx)$/;"	f
similarity_info	src/diff_tform.c	/^} similarity_info;$/;"	t	typeref:struct:__anon115	file:
similarity_init	src/diff_tform.c	/^static int similarity_init($/;"	f	file:
similarity_measure	src/diff_tform.c	/^static int similarity_measure($/;"	f	file:
similarity_sig	src/diff_tform.c	/^static int similarity_sig($/;"	f	file:
similarity_unload	src/diff_tform.c	/^static void similarity_unload(similarity_info *info)$/;"	f	file:
size	include/git2/buffer.h	/^	size_t asize, size;$/;"	m	struct:__anon214
size	include/git2/diff.h	/^	git_off_t   size;$/;"	m	struct:__anon266
size	src/cache.h	/^	size_t     size;$/;"	m	struct:__anon90
size	src/fileops.h	/^	git_off_t  size;$/;"	m	struct:__anon47
size	src/hash/hash_generic.h	/^	unsigned long long size;$/;"	m	struct:git_hash_ctx
size	src/hashsig.c	/^	int size, asize;$/;"	m	struct:__anon100	file:
size	src/mwindow.h	/^	git_off_t size;$/;"	m	struct:git_mwindow_file
size	src/object.c	/^	size_t		size;	\/* size in bytes of the object structure *\/$/;"	m	struct:__anon102	file:
size	src/odb.c	/^	size_t size, written;$/;"	m	struct:__anon118	file:
size	src/odb_loose.c	/^	size_t	size; \/* object size *\/$/;"	m	struct:__anon151	file:
size	src/oid.c	/^	size_t node_count, size;$/;"	m	struct:git_oid_shorten	file:
size	src/pack-objects.h	/^	size_t size;$/;"	m	struct:git_pobject
size	src/pool.c	/^	uint32_t size;$/;"	m	struct:git_pool_page	file:
size	src/xdiff/xdiff.h	/^	size_t size;$/;"	m	struct:s_mmbuffer
size	src/xdiff/xdiff.h	/^	size_t size;$/;"	m	struct:s_mmfile
size	src/xdiff/xprepare.c	/^	long size;$/;"	m	struct:s_xdlclass	file:
size	src/xdiff/xtypes.h	/^	long size;$/;"	m	struct:s_xrecord
size_t	deps/http-parser/http_parser.h	/^typedef SIZE_T size_t;$/;"	t
skip	examples/log.c	/^	int skip, limit;$/;"	m	struct:log_options	file:
skip	tests/object/tree/walk.c	/^	const char *skip;$/;"	m	struct:treewalk_skip_data	file:
skip_alpha	src/date.c	/^static int skip_alpha(const char *date)$/;"	f	file:
skip_bom	src/config_file.c	/^static int skip_bom(struct reader *reader)$/;"	f	file:
sm	tests/stash/submodules.c	/^static git_submodule *sm;$/;"	v	file:
sm_lookup_cb	tests/submodule/lookup.c	/^static int sm_lookup_cb(git_submodule *sm, const char *name, void *payload)$/;"	f	file:
sm_lookup_data	tests/submodule/lookup.c	/^} sm_lookup_data;$/;"	t	typeref:struct:__anon11	file:
smaller	deps/zlib/trees.c	449;"	d	file:
smaller_value	tests/core/sortedcache.c	/^	char smaller_value;$/;"	m	struct:__anon27	file:
snake_cnt	src/xdiff/xdiffi.h	/^	long snake_cnt;$/;"	m	struct:s_xdalgoenv
sncur	src/xdiff/xtypes.h	/^	chanode_t *sncur;$/;"	m	struct:s_chastore
snprintf	examples/blame.c	18;"	d	file:
snprintf	src/win32/msvc-compat.h	42;"	d
snprintf	src/win32/msvc-compat.h	44;"	d
socket	src/netops.h	/^	GIT_SOCKET socket;$/;"	m	struct:gitno_socket
socket	src/netops.h	/^	gitno_socket *socket;$/;"	m	struct:gitno_buffer
socket	src/transports/git.c	/^	gitno_socket socket;$/;"	m	struct:__anon74	file:
socket	src/transports/http.c	/^	gitno_socket socket;$/;"	m	struct:__anon81	file:
socket	src/transports/ssh.c	/^	gitno_socket socket;$/;"	m	struct:__anon76	file:
some	tests/odb/loose_data.h	/^static object_data some = {$/;"	v
some_bytes	tests/odb/loose_data.h	/^static unsigned char some_bytes[] = {$/;"	v
some_data	tests/object/raw/data.h	/^static unsigned char some_data[] = {$/;"	v
some_data	tests/odb/loose_data.h	/^static unsigned char some_data[] = {$/;"	v
some_id	tests/object/raw/data.h	/^static char *some_id = "fd8430bc864cfcd5f10e5590f8a447e01b942bfe";$/;"	v
some_obj	tests/object/raw/data.h	/^static git_rawobj some_obj = {$/;"	v
sort_by_hash_and_name	src/attr_file.c	/^static int sort_by_hash_and_name(const void *a_raw, const void *b_raw)$/;"	f	file:
sortedcache_clear	src/sortedcache.c	/^static void sortedcache_clear(git_sortedcache *sc)$/;"	f	file:
sortedcache_copy_item	src/sortedcache.c	/^static int sortedcache_copy_item(void *payload, void *tgt_item, void *src_item)$/;"	f	file:
sortedcache_free	src/sortedcache.c	/^static void sortedcache_free(git_sortedcache *sc)$/;"	f	file:
sortedcache_magic_cmp	src/sortedcache.c	/^static int sortedcache_magic_cmp(const void *key, const void *value)$/;"	f	file:
sortedcache_magic_key	src/sortedcache.c	/^struct sortedcache_magic_key {$/;"	s	file:
sortedcache_test_reload	tests/core/sortedcache.c	/^static void sortedcache_test_reload(git_sortedcache *sc)$/;"	f	file:
sortedcache_test_struct	tests/core/sortedcache.c	/^} sortedcache_test_struct;$/;"	t	typeref:struct:__anon27	file:
sortedcache_test_struct_cmp	tests/core/sortedcache.c	/^static int sortedcache_test_struct_cmp(const void *a_, const void *b_)$/;"	f	file:
sortedcache_test_struct_free	tests/core/sortedcache.c	/^static void sortedcache_test_struct_free(void *payload, void *item_)$/;"	f	file:
sorting	examples/log.c	/^	int sorting;$/;"	m	struct:log_state	file:
sorting	src/revwalk.h	/^	unsigned int sorting;$/;"	m	struct:git_revwalk
source	src/filter.c	/^	git_filter_source source;$/;"	m	struct:git_filter_list	file:
sources	tests/diff/rename.c	/^	const char **sources;$/;"	m	struct:rename_expected	file:
spec	examples/rev-parse.c	/^	const char *spec;$/;"	m	struct:parse_state	file:
spec	include/git2/refspec.h	/^GIT_EXTERN(git_direction) git_refspec_direction(const git_refspec *spec);$/;"	v
special	src/date.c	/^static const struct special {$/;"	s	file:
special	src/date.c	/^} special[] = {$/;"	v	typeref:struct:special	file:
specs	src/push.h	/^	git_vector specs;$/;"	m	struct:git_push
split_blame	src/blame_git.c	/^static void split_blame(git_blame *blame, git_blame__entry *split, git_blame__entry *e)$/;"	f	file:
split_hunk_in_vector	src/blame.c	/^static git_blame_hunk *split_hunk_in_vector($/;"	f	file:
split_overlap	src/blame_git.c	/^static void split_overlap(git_blame__entry *split, git_blame__entry *e,$/;"	f	file:
src	include/git2/sys/filter.h	/^GIT_EXTERN(const char *) git_filter_source_path(const git_filter_source *src);$/;"	v
src	include/git2/sys/filter.h	/^GIT_EXTERN(const git_oid *) git_filter_source_id(const git_filter_source *src);$/;"	v
src	include/git2/sys/filter.h	/^GIT_EXTERN(git_filter_mode_t) git_filter_source_mode(const git_filter_source *src);$/;"	v
src	include/git2/sys/filter.h	/^GIT_EXTERN(git_repository *) git_filter_source_repo(const git_filter_source *src);$/;"	v
src	include/git2/sys/filter.h	/^GIT_EXTERN(uint16_t) git_filter_source_filemode(const git_filter_source *src);$/;"	v
src	src/diff_file.h	/^	git_iterator_type_t src;$/;"	m	struct:__anon154
src	src/diff_tform.c	/^	git_iterator_type_t src;$/;"	m	struct:__anon115	file:
src	src/refspec.h	/^	char *src;$/;"	m	struct:git_refspec
src_buf	src/delta.c	/^	const void *src_buf;$/;"	m	struct:git_delta_index	file:
src_size	src/delta.c	/^	unsigned long src_size;$/;"	m	struct:git_delta_index	file:
srwl	src/win32/pthread.h	/^		GIT_SRWLOCK srwl;$/;"	m	union:__anon166::__anon167
ssh_agent_auth	src/transports/ssh.c	/^static int ssh_agent_auth(LIBSSH2_SESSION *session, git_cred_ssh_key *c) {$/;"	f	file:
ssh_custom_free	src/transports/cred.c	/^static void ssh_custom_free(struct git_cred *cred)$/;"	f	file:
ssh_error	src/transports/ssh.c	/^static void ssh_error(LIBSSH2_SESSION *session, const char *errmsg)$/;"	f	file:
ssh_key_free	src/transports/cred.c	/^static void ssh_key_free(struct git_cred *cred)$/;"	f	file:
ssh_receivepack	src/transports/ssh.c	/^static int ssh_receivepack($/;"	f	file:
ssh_receivepack_ls	src/transports/ssh.c	/^static int ssh_receivepack_ls($/;"	f	file:
ssh_stream	src/transports/ssh.c	/^} ssh_stream;$/;"	t	typeref:struct:__anon76	file:
ssh_stream_alloc	src/transports/ssh.c	/^static int ssh_stream_alloc($/;"	f	file:
ssh_stream_free	src/transports/ssh.c	/^static void ssh_stream_free(git_smart_subtransport_stream *stream)$/;"	f	file:
ssh_stream_read	src/transports/ssh.c	/^static int ssh_stream_read($/;"	f	file:
ssh_stream_write	src/transports/ssh.c	/^static int ssh_stream_write($/;"	f	file:
ssh_subtransport	src/transports/ssh.c	/^} ssh_subtransport;$/;"	t	typeref:struct:__anon77	file:
ssh_subtransport_definition	src/transport.c	/^static git_smart_subtransport_definition ssh_subtransport_definition = { git_smart_subtransport_ssh, 0 };$/;"	v	file:
ssh_transport_definition	src/transport.c	/^static transport_definition ssh_transport_definition = { "ssh:\/\/", 1, git_transport_smart, &ssh_subtransport_definition };$/;"	v	file:
ssh_uploadpack	src/transports/ssh.c	/^static int ssh_uploadpack($/;"	f	file:
ssh_uploadpack_ls	src/transports/ssh.c	/^static int ssh_uploadpack_ls($/;"	f	file:
ssize_t	deps/http-parser/http_parser.h	/^typedef SSIZE_T ssize_t;$/;"	t
ssize_t	examples/network/index-pack.c	16;"	d	file:
ssize_t	src/win32/msvc-compat.h	/^typedef SSIZE_T ssize_t;$/;"	t
ssl	src/netops.h	/^	SSL *ssl;$/;"	m	struct:gitno_ssl
ssl	src/netops.h	/^	gitno_ssl ssl;$/;"	m	struct:gitno_socket
ssl_set_error	src/netops.c	/^static int ssl_set_error(gitno_ssl *ssl, int error)$/;"	f	file:
ssl_setup	src/netops.c	/^static int ssl_setup(gitno_socket *socket, const char *host, int flags)$/;"	f	file:
sss	tests/object/message.c	17;"	d	file:
st	src/path.h	/^	struct stat st;$/;"	m	struct:__anon126	typeref:struct:__anon126::stat
stack	deps/regex/regex_internal.h	/^  struct re_fail_stack_ent_t *stack;$/;"	m	struct:re_fail_stack_t	typeref:struct:re_fail_stack_t::re_fail_stack_ent_t
stack	src/iterator.c	/^	fs_iterator_frame *stack;$/;"	m	struct:fs_iterator	file:
stage	src/index.c	/^	int stage;$/;"	m	struct:entry_srch_key	file:
stage	tests/checkout/conflict.c	/^	int stage;$/;"	m	struct:checkout_index_entry	file:
stage	tests/merge/merge_helpers.h	/^	int stage;$/;"	m	struct:merge_index_entry
stage_and_commit	tests/status/worktree.c	/^static void stage_and_commit(git_repository *repo, const char *path)$/;"	f	file:
stage_content	tests/merge/workdir/dirty.c	/^static void stage_content(char *content[])$/;"	f	file:
stage_random_files	tests/merge/workdir/dirty.c	/^static void stage_random_files(char *files[])$/;"	f	file:
staged	src/merge.h	/^	git_vector staged;$/;"	m	struct:__anon143
stamp	src/attr_file.h	/^		git_futils_filestamp stamp;$/;"	m	union:__anon133::__anon134
stamp	src/index.h	/^	git_futils_filestamp stamp;$/;"	m	struct:git_index
stamp	src/sortedcache.h	/^	git_futils_filestamp stamp;$/;"	m	struct:__anon158
start	deps/regex/regex.h	/^  regoff_t *start;$/;"	m	struct:re_registers
start	src/iterator.c	/^	const char *start;$/;"	m	struct:tree_iterator_frame	file:
start	src/iterator.h	/^	char *start;$/;"	m	struct:git_iterator
start	src/tsort.c	/^	ssize_t start;$/;"	m	struct:tsort_run	file:
start_inflate	src/odb_loose.c	/^static int start_inflate(z_stream *s, git_buf *obj, void *out, size_t len)$/;"	f	file:
start_line	examples/blame.c	/^	int start_line;$/;"	m	struct:opts	file:
start_state	deps/http-parser/http_parser.c	383;"	d	file:
startlen	src/iterator.c	/^	size_t startlen;$/;"	m	struct:tree_iterator_frame	file:
stash_tip_oid	tests/stash/foreach.c	/^static git_oid stash_tip_oid;$/;"	v	file:
stash_tip_oid	tests/stash/save.c	/^static git_oid stash_tip_oid;$/;"	v	file:
stash_tip_oid	tests/stash/submodules.c	/^static git_oid stash_tip_oid;$/;"	v	file:
stash_update_index_from_diff	src/stash.c	/^static int stash_update_index_from_diff($/;"	f	file:
stash_update_rules	src/stash.c	/^struct stash_update_rules {$/;"	s	file:
stat	src/win32/mingw-compat.h	14;"	d
stat	src/win32/msvc-compat.h	18;"	d
stat	tests/clar.c	28;"	d	file:
stat_desc	deps/zlib/deflate.h	/^    static_tree_desc *stat_desc; \/* the corresponding static tree *\/$/;"	m	struct:tree_desc_s
state	deps/http-parser/http_parser.c	/^enum state$/;"	g	file:
state	deps/http-parser/http_parser.h	/^  unsigned char state;        \/* enum state from http_parser.c *\/$/;"	m	struct:http_parser
state	deps/zlib/zlib.h	/^    struct internal_state FAR *state; \/* not visible by applications *\/$/;"	m	struct:z_stream_s	typeref:struct:z_stream_s::FAR
state_array_t	deps/regex/regex_internal.h	/^} state_array_t;$/;"	t	typeref:struct:__anon186
state_files	src/repository.c	/^static const char *state_files[] = {$/;"	v	file:
state_hash_mask	deps/regex/regex_internal.h	/^  unsigned int state_hash_mask;$/;"	m	struct:re_dfa_t
state_loc	tests/core/dirent.c	/^static walk_data *state_loc;$/;"	v	file:
state_log	deps/regex/regex_internal.h	/^  re_dfastate_t **state_log;$/;"	m	struct:__anon189
state_log_top	deps/regex/regex_internal.h	/^  int state_log_top;$/;"	m	struct:__anon189
state_table	deps/regex/regex_internal.h	/^  struct re_state_table_entry *state_table;$/;"	m	struct:re_dfa_t	typeref:struct:re_dfa_t::re_state_table_entry
static_bl_desc	deps/zlib/trees.c	/^local static_tree_desc  static_bl_desc =$/;"	v
static_d_desc	deps/zlib/trees.c	/^local static_tree_desc  static_d_desc =$/;"	v
static_dtree	deps/zlib/trees.c	/^local ct_data static_dtree[D_CODES];$/;"	v
static_dtree	deps/zlib/trees.h	/^local const ct_data static_dtree[D_CODES] = {$/;"	v
static_l_desc	deps/zlib/trees.c	/^local static_tree_desc  static_l_desc =$/;"	v
static_len	deps/zlib/deflate.h	/^    ulg static_len;     \/* bit length of current block with static trees *\/$/;"	m	struct:internal_state
static_ltree	deps/zlib/trees.c	/^local ct_data static_ltree[L_CODES+2];$/;"	v
static_ltree	deps/zlib/trees.h	/^local const ct_data static_ltree[L_CODES+2] = {$/;"	v
static_tree	deps/zlib/trees.c	/^    const ct_data *static_tree;  \/* static tree or NULL *\/$/;"	m	struct:static_tree_desc_s	file:
static_tree_desc	deps/zlib/deflate.h	/^typedef struct static_tree_desc_s  static_tree_desc;$/;"	t	typeref:struct:static_tree_desc_s
static_tree_desc_s	deps/zlib/deflate.c	/^struct static_tree_desc_s {int dummy;}; \/* for buggy compilers *\/$/;"	s	file:
static_tree_desc_s	deps/zlib/trees.c	/^struct static_tree_desc_s {$/;"	s	file:
stats	src/pack-objects.c	/^	git_transfer_progress *stats;$/;"	m	struct:pack_write_context	file:
stats	src/remote.h	/^	git_transfer_progress stats;$/;"	m	struct:git_remote
stats	src/transports/local.c	/^	git_transfer_progress *stats;$/;"	m	struct:foreach_data	file:
stats	src/transports/smart_protocol.c	/^	git_transfer_progress *stats;$/;"	m	struct:network_packetsize_payload	file:
status	deps/zlib/deflate.h	/^    int   status;        \/* as the name implies *\/$/;"	m	struct:internal_state
status	include/git2/diff.h	/^	git_delta_t   status;$/;"	m	struct:__anon267
status	include/git2/diff.h	/^GIT_EXTERN(char) git_diff_status_char(git_delta_t status);$/;"	v
status	include/git2/status.h	/^	git_status_t status;$/;"	m	struct:__anon262
status	src/push.h	/^	git_vector status;$/;"	m	struct:git_push
status	src/status.c	/^	unsigned int status;$/;"	m	struct:status_file_info	file:
status	src/transports/smart.h	/^	enum git_ack_status status;$/;"	m	struct:__anon66	typeref:enum:__anon66::git_ack_status
status	tests/diff/rename.c	/^	unsigned int *status;$/;"	m	struct:rename_expected	file:
status	tests/merge/merge_helpers.h	/^	unsigned int status;$/;"	m	struct:merge_index_with_status
status	tests/status/renames.c	/^	git_status_t status;$/;"	m	struct:status_entry	file:
status	tests/status/status_helpers.h	/^	unsigned int status;$/;"	m	struct:__anon30
status_code	deps/http-parser/http_parser.h	/^  unsigned short status_code; \/* responses only *\/$/;"	m	struct:http_parser
status_collect	src/status.c	/^static int status_collect($/;"	f	file:
status_compute	src/status.c	/^static git_status_t status_compute($/;"	f	file:
status_entry	tests/status/renames.c	/^struct status_entry {$/;"	s	file:
status_entry_cmp	src/status.c	/^static int status_entry_cmp(const void *a, const void *b)$/;"	f	file:
status_entry_cmp_base	src/status.c	/^GIT_INLINE(int) status_entry_cmp_base($/;"	f
status_entry_counts	tests/status/status_helpers.h	/^} status_entry_counts;$/;"	t	typeref:struct:__anon29
status_entry_icmp	src/status.c	/^static int status_entry_icmp(const void *a, const void *b)$/;"	f	file:
status_entry_single	tests/status/status_helpers.h	/^} status_entry_single;$/;"	t	typeref:struct:__anon30
status_file_info	src/status.c	/^struct status_file_info {$/;"	s	file:
status_is_included	src/status.c	/^static bool status_is_included($/;"	f	file:
status_paths	tests/diff/iterator.c	/^static const char *status_paths[] = {$/;"	v	file:
status_paths_range_0	tests/diff/iterator.c	/^static const char *status_paths_range_0[] = {$/;"	v	file:
status_paths_range_1	tests/diff/iterator.c	/^static const char *status_paths_range_1[] = {$/;"	v	file:
status_paths_range_3	tests/diff/iterator.c	/^static const char *status_paths_range_3[] = {$/;"	v	file:
status_paths_range_4	tests/diff/iterator.c	/^static const char *status_paths_range_4[] = {$/;"	v	file:
status_paths_range_5	tests/diff/iterator.c	/^static const char *status_paths_range_5[] = {$/;"	v	file:
statuses	tests/diff/diff_helpers.h	/^	int *statuses;$/;"	m	struct:__anon8
statuses	tests/submodule/status.c	/^	int *statuses;$/;"	m	struct:__anon10	file:
statuslist	include/git2/status.h	/^	git_status_list *statuslist);$/;"	v
statusopt	examples/status.c	/^    git_status_options statusopt;$/;"	m	struct:opts	file:
stop	deps/regex/regex_internal.h	/^  int stop;$/;"	m	struct:re_string_t
stop	tests/object/tree/walk.c	/^	const char *stop;$/;"	m	struct:treewalk_skip_data	file:
storage	src/tsort.c	/^	void **storage;$/;"	m	struct:tsort_store	file:
store_common	src/transports/smart_protocol.c	/^static int store_common(transport_smart *t)$/;"	f	file:
store_delta	src/indexer.c	/^static int store_delta(git_indexer *idx)$/;"	f	file:
store_object	src/indexer.c	/^static int store_object(git_indexer *idx)$/;"	f	file:
store_refs	src/transports/local.c	/^static int store_refs(transport_local *t)$/;"	f	file:
str	src/object.c	/^	const char	*str;	\/* type name string *\/$/;"	m	struct:__anon102	file:
str0	tests/repo/pathspec.c	/^static char *str0[] = { "*_file", "new_file", "garbage" };$/;"	v	file:
str1	tests/repo/pathspec.c	/^static char *str1[] = { "*_FILE", "NEW_FILE", "GARBAGE" };$/;"	v	file:
str2	tests/repo/pathspec.c	/^static char *str2[] = { "staged_*" };$/;"	v	file:
str3	tests/repo/pathspec.c	/^static char *str3[] = { "!subdir", "*_file", "new_file" };$/;"	v	file:
str4	tests/repo/pathspec.c	/^static char *str4[] = { "*" };$/;"	v	file:
str5	tests/repo/pathspec.c	/^static char *str5[] = { "S*" };$/;"	v	file:
str_equal_no_trailing_slash	src/submodule.c	/^static kh_inline int str_equal_no_trailing_slash(const char *a, const char *b)$/;"	f	file:
str_hash_no_trailing_slash	src/submodule.c	/^static kh_inline khint_t str_hash_no_trailing_slash(const char *s)$/;"	f	file:
str_idx	deps/regex/regex_internal.h	/^  int str_idx; \/* The position NODE match at.  *\/$/;"	m	struct:__anon187
str_idx	deps/regex/regex_internal.h	/^  int str_idx;$/;"	m	struct:__anon188
str_idx	deps/regex/regex_internal.h	/^  int str_idx;$/;"	m	struct:re_backref_cache_entry
str_match	include/git2/config.h	/^	const char *str_match;$/;"	m	struct:__anon220
str_oid	tests/core/oid.c	/^const char *str_oid = "ae90f12eea699729ed24555e40b9fd669da12a12";$/;"	v
str_oid_m	tests/core/oid.c	/^const char *str_oid_m = "ae90f12eea699729ed24555e40b9fd669da12a12THIS IS EXTRA TEXT THAT SHOULD GET IGNORED";$/;"	v
str_oid_p	tests/core/oid.c	/^const char *str_oid_p = "ae90f12eea699729ed";$/;"	v
str_tree	deps/regex/regex_internal.h	/^  bin_tree_t *str_tree;$/;"	m	struct:re_dfa_t
str_tree_storage	deps/regex/regex_internal.h	/^  bin_tree_storage_t *str_tree_storage;$/;"	m	struct:re_dfa_t
str_tree_storage_idx	deps/regex/regex_internal.h	/^  int str_tree_storage_idx;$/;"	m	struct:re_dfa_t
strategy	deps/zlib/deflate.h	/^    int strategy; \/* favor or force Huffman coding*\/$/;"	m	struct:internal_state
strategy	src/checkout.c	/^	unsigned int strategy;$/;"	m	struct:__anon121	file:
strcasecmp	examples/blame.c	19;"	d	file:
strcasecmp	src/win32/msvc-compat.h	34;"	d
strcasecmp	tests/clar.c	43;"	d	file:
strcomp	src/diff.h	/^	int (*strcomp)(const char *, const char *);$/;"	m	struct:git_diff
strcomp	src/pathspec.c	/^	int (*strcomp)(const char *, const char *);$/;"	m	struct:pathspec_match_context	file:
strdup	tests/clar.c	40;"	d	file:
stream	include/git2/odb.h	/^GIT_EXTERN(void) git_odb_stream_free(git_odb_stream *stream);$/;"	v
stream	src/indexer.c	/^	git_packfile_stream stream;$/;"	m	struct:git_indexer	file:
stream	src/odb.c	/^	git_odb_stream stream;$/;"	m	struct:__anon118	file:
stream	src/odb_loose.c	/^	git_odb_stream stream;$/;"	m	struct:__anon152	file:
stream	src/transports/smart_protocol.c	/^	git_smart_subtransport_stream *stream;$/;"	m	struct:push_packbuilder_payload	file:
stream	tests/odb/streamwrite.c	/^static git_odb_stream *stream;$/;"	v	file:
stream_thunk	src/transports/smart_protocol.c	/^static int stream_thunk(void *buf, size_t size, void *data)$/;"	f	file:
streaming_write	tests/object/raw/write.c	/^static void streaming_write(git_oid *oid, git_odb *odb, git_rawobj *raw)$/;"	f	file:
strequal_ignore_eol	tests/reset/hard.c	/^static int strequal_ignore_eol(const char *exp, const char *str)$/;"	f	file:
strict_comparison	src/vector.c	/^static int strict_comparison(const void *a, const void *b)$/;"	f	file:
string	src/refspec.h	/^	char *string;$/;"	m	struct:git_refspec
string	tests/commit/parse.c	/^	const char *string;$/;"	m	struct:__anon15	file:
string	tests/commit/parse.c	/^	const char *string;$/;"	m	struct:__anon16	file:
strings	include/git2/strarray.h	/^	char **strings;$/;"	m	struct:git_strarray
strip_comments	src/config_file.c	/^static int strip_comments(char *line, int in_quotes)$/;"	f	file:
strip_cr_from_buf	tests/clar_libgit2.c	/^static size_t strip_cr_from_buf(char *start, size_t len)$/;"	f	file:
strm	deps/zlib/deflate.h	/^    z_streamp strm;      \/* pointer back to this zlib stream *\/$/;"	m	struct:internal_state
strncasecmp	src/win32/msvc-compat.h	35;"	d
strncomp	src/diff.h	/^	int (*strncomp)(const char *, const char *, size_t);$/;"	m	struct:git_diff
strncomp	src/iterator.c	/^	int (*strncomp)(const char *a, const char *b, size_t sz);$/;"	m	struct:__anon84	file:
strncomp	src/pathspec.c	/^	int (*strncomp)(const char *, const char *, size_t);$/;"	m	struct:pathspec_match_context	file:
strncpy	tests/clar.c	49;"	d	file:
strstart	deps/zlib/deflate.h	/^    uInt strstart;               \/* start of string to insert *\/$/;"	m	struct:internal_state
strtoimax	include/git2/inttypes.h	301;"	d
strtoumax	include/git2/inttypes.h	302;"	d
style	src/merge_file.h	/^	git_merge_file_style_t style;$/;"	m	struct:__anon59
style	src/xdiff/xdiff.h	/^	int style;$/;"	m	struct:s_xmparam
sub	tests/core/dirent.c	/^	char *sub;		\/* sub-directory name *\/$/;"	m	struct:walk_data	file:
sub	tests/core/dirent.c	/^static walk_data sub = {$/;"	v	file:
sub_epsilon_src_nodes	deps/regex/regexec.c	/^sub_epsilon_src_nodes (const re_dfa_t *dfa, int node, re_node_set *dest_nodes,$/;"	f	file:
sub_names	tests/core/dirent.c	/^static name_data sub_names[] = {$/;"	v	file:
sub_slash	tests/core/dirent.c	/^static walk_data sub_slash = {$/;"	v	file:
sub_tops	deps/regex/regex_internal.h	/^  re_sub_match_top_t **sub_tops;$/;"	m	struct:__anon189
subexp_from	deps/regex/regex_internal.h	/^  int subexp_from;$/;"	m	struct:re_backref_cache_entry
subexp_map	deps/regex/regex_internal.h	/^  int *subexp_map;$/;"	m	struct:re_dfa_t
subexp_to	deps/regex/regex_internal.h	/^  int subexp_to;$/;"	m	struct:re_backref_cache_entry
submodule	include/git2/submodule.h	/^	git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(const char *) git_submodule_branch(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(const char *) git_submodule_name(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(const char *) git_submodule_path(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(const char *) git_submodule_url(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(const git_oid *) git_submodule_head_id(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(const git_oid *) git_submodule_index_id(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(const git_oid *) git_submodule_wd_id(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(git_repository *) git_submodule_owner(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(int) git_submodule_add_finalize(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(int) git_submodule_reload(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(int) git_submodule_save(git_submodule *submodule);$/;"	v
submodule	include/git2/submodule.h	/^GIT_EXTERN(int) git_submodule_sync(git_submodule *submodule);$/;"	v
submodule	src/checkout.c	/^		submodule:1;$/;"	m	struct:__anon122	file:
submodule_alloc	src/submodule.c	/^static git_submodule *submodule_alloc(git_repository *repo, const char *name)$/;"	f	file:
submodule_cmp	src/submodule.c	/^static int submodule_cmp(const void *a, const void *b)$/;"	f	file:
submodule_config_error	src/submodule.c	/^static int submodule_config_error(const char *property, const char *value)$/;"	f	file:
submodule_config_key_trunc_puts	src/submodule.c	/^static int submodule_config_key_trunc_puts(git_buf *key, const char *suffix)$/;"	f	file:
submodule_copy_oid_maybe	src/submodule.c	/^static void submodule_copy_oid_maybe($/;"	f	file:
submodule_expectations	tests/submodule/status.c	/^} submodule_expectations;$/;"	t	typeref:struct:__anon10	file:
submodule_get	src/submodule.c	/^static int submodule_get($/;"	f	file:
submodule_get_index_status	src/submodule.c	/^static void submodule_get_index_status(unsigned int *status, git_submodule *sm)$/;"	f	file:
submodule_get_wd_status	src/submodule.c	/^static void submodule_get_wd_status($/;"	f	file:
submodule_is_config_only	src/checkout.c	/^static bool submodule_is_config_only($/;"	f	file:
submodule_load_from_config	src/submodule.c	/^static int submodule_load_from_config($/;"	f	file:
submodule_load_from_wd_lite	src/submodule.c	/^static int submodule_load_from_wd_lite($/;"	f	file:
submodule_release	src/submodule.c	/^static void submodule_release(git_submodule *sm)$/;"	f	file:
submodule_update_config	src/submodule.c	/^static int submodule_update_config($/;"	f	file:
submodule_update_from_head_data	src/submodule.c	/^static void submodule_update_from_head_data($/;"	f	file:
submodule_update_from_index_entry	src/submodule.c	/^static void submodule_update_from_index_entry($/;"	f	file:
submodule_update_head	src/submodule.c	/^static int submodule_update_head(git_submodule *submodule)$/;"	f	file:
submodule_update_index	src/submodule.c	/^static int submodule_update_index(git_submodule *sm)$/;"	f	file:
submodules	src/repository.h	/^	git_strmap *submodules;$/;"	m	struct:git_repository
subpath_len	src/tree.c	/^static size_t subpath_len(const char *path)$/;"	f	file:
subtransport	include/git2/transport.h	/^	git_smart_subtransport *subtransport;$/;"	m	struct:git_smart_subtransport_stream
success	tests/online/push.c	/^	int success;$/;"	m	struct:__anon17	file:
suite	tests/clar.c	/^	const char *suite;$/;"	m	struct:clar_error	file:
suite_count	tests/generate.py	/^    def suite_count(self):$/;"	m	class:TestSuite
suite_errors	tests/clar.c	/^	int suite_errors;$/;"	m	struct:__anon23	file:
suites_ran	tests/clar.c	/^	int suites_ran;$/;"	m	struct:__anon23	file:
summary	src/commit.h	/^	char *summary;$/;"	m	struct:git_commit
supports_ipv6	tests/core/posix.c	/^static bool supports_ipv6(void)$/;"	f	file:
suspect	src/blame.h	/^	git_blame__origin *suspect;$/;"	m	struct:git_blame__entry
symbolic	src/refs.h	/^		char *symbolic;$/;"	m	union:git_reference::__anon48
sync_one_submodule	tests/submodule/modify.c	/^static int sync_one_submodule($/;"	f	file:
synchronized_threads_init	src/global.c	/^static int synchronized_threads_init()$/;"	f	file:
synchronized_threads_shutdown	src/global.c	/^static void synchronized_threads_shutdown()$/;"	f	file:
syncsearch	deps/zlib/inflate.c	/^local unsigned syncsearch(have, buf, len)$/;"	f
syntax	deps/regex/regex_internal.h	/^  reg_syntax_t syntax;$/;"	m	struct:re_dfa_t
t	src/transports/http.c	/^	http_subtransport *t;$/;"	m	struct:__anon82	file:
t40	tests/object/message.c	15;"	d	file:
table	deps/zlib/zutil.c	/^local ptr_table table[MAX_PTR];$/;"	v
table_bits	src/xdiff/xhistogram.c	/^	unsigned int table_bits,$/;"	m	struct:histindex	file:
tag	include/git2/tag.h	/^GIT_EXTERN(const char *) git_tag_message(const git_tag *tag);$/;"	v
tag	include/git2/tag.h	/^GIT_EXTERN(const char *) git_tag_name(const git_tag *tag);$/;"	v
tag	include/git2/tag.h	/^GIT_EXTERN(const git_oid *) git_tag_id(const git_tag *tag);$/;"	v
tag	include/git2/tag.h	/^GIT_EXTERN(const git_oid *) git_tag_target_id(const git_tag *tag);$/;"	v
tag	include/git2/tag.h	/^GIT_EXTERN(const git_signature *) git_tag_tagger(const git_tag *tag);$/;"	v
tag	include/git2/tag.h	/^GIT_EXTERN(git_otype) git_tag_target_type(const git_tag *tag);$/;"	v
tag	include/git2/tag.h	/^GIT_EXTERN(git_repository *) git_tag_owner(const git_tag *tag);$/;"	v
tag	include/git2/tag.h	/^GIT_EXTERN(void) git_tag_free(git_tag *tag);$/;"	v
tag	tests/object/tag/peel.c	/^static git_tag *tag;$/;"	v	file:
tag	tests/odb/loose_data.h	/^static object_data tag = {$/;"	v
tag1_id	tests/object/tag/read.c	/^static const char *tag1_id = "b25fa35b38051e4ae45d4222e795f9df2e43f1d1";$/;"	v	file:
tag2_id	tests/object/tag/read.c	/^static const char *tag2_id = "7b4384978d2493e851f9cca7858815fac9b10980";$/;"	v	file:
tag2_id	tests/object/tag/write.c	/^static const char *tag2_id = "7b4384978d2493e851f9cca7858815fac9b10980";$/;"	v	file:
tag_bytes	tests/odb/loose_data.h	/^static unsigned char tag_bytes[] = {$/;"	v
tag_cb_data	src/tag.c	/^} tag_cb_data;$/;"	t	typeref:struct:__anon49	file:
tag_data	tests/object/raw/data.h	/^static unsigned char tag_data[] = {$/;"	v
tag_data	tests/odb/loose_data.h	/^static unsigned char tag_data[] = {$/;"	v
tag_error	src/tag.c	/^static int tag_error(const char *str)$/;"	f	file:
tag_filter_data	src/tag.c	/^} tag_filter_data;$/;"	t	typeref:struct:__anon50	file:
tag_id	tests/object/raw/data.h	/^static char *tag_id = "09d373e1dfdc16b129ceec6dd649739911541e05";$/;"	v
tag_list_cb	src/tag.c	/^static int tag_list_cb(const char *tag_name, git_oid *oid, void *data)$/;"	f	file:
tag_name	src/tag.h	/^	char *tag_name;$/;"	m	struct:git_tag
tag_obj	tests/object/raw/data.h	/^static git_rawobj tag_obj = {$/;"	v
tag_parse	src/tag.c	/^static int tag_parse(git_tag *tag, const char *buffer, const char *buffer_end)$/;"	f	file:
tagged	src/pack-objects.h	/^	    tagged:1,$/;"	m	struct:git_pobject
tagged_commit	tests/object/tag/read.c	/^static const char *tagged_commit = "e90810b8df3e80c413d903f631643c716887138d";$/;"	v	file:
tagged_commit	tests/object/tag/write.c	/^static const char *tagged_commit = "e90810b8df3e80c413d903f631643c716887138d";$/;"	v	file:
tagger	src/tag.h	/^	git_signature *tagger;$/;"	m	struct:git_tag
tagger_email	tests/object/tag/write.c	/^static const char* tagger_email = "vicent@github.com";$/;"	v	file:
tagger_message	tests/object/tag/write.c	/^static const char* tagger_message = "This is my tag.\\n\\nThere are many tags, but this one is mine\\n";$/;"	v	file:
tagger_name	tests/object/tag/write.c	/^static const char* tagger_name = "Vicent Marti";$/;"	v	file:
taggerless	tests/object/tag/read.c	/^static const char *taggerless = "4a23e2e65ad4e31c4c9db7dc746650bfad082679";$/;"	v	file:
taglist	src/tag.c	/^	git_vector *taglist;$/;"	m	struct:__anon50	file:
tags_cb	src/tag.c	/^static int tags_cb(const char *ref, void *data)$/;"	f	file:
tail	src/oid.c	/^	const char *tail;$/;"	m	union:__anon124	file:
tail	src/xdiff/xtypes.h	/^	chanode_t *head, *tail;$/;"	m	struct:s_chastore
target	src/blame_git.c	/^	git_blame__origin *target;$/;"	m	struct:blame_chunk_cb_data	file:
target	src/refs.h	/^	} target;$/;"	m	struct:git_reference	typeref:union:git_reference::__anon48
target	src/tag.h	/^	git_oid target;$/;"	m	struct:git_tag
target	tests/object/tag/peel.c	/^static git_object *target;$/;"	v	file:
target	tests/refs/branches/create.c	/^static git_commit *target;$/;"	v	file:
target	tests/reset/hard.c	/^static git_object *target;$/;"	v	file:
target	tests/reset/mixed.c	/^static git_object *target;$/;"	v	file:
target	tests/reset/soft.c	/^static git_object *target;$/;"	v	file:
target_directory	include/git2/checkout.h	/^	const char *target_directory; \/** alternative checkout path to workdir *\/$/;"	m	struct:git_checkout_opts
target_limit	include/git2/merge.h	/^	unsigned int target_limit;$/;"	m	struct:__anon251
targets	tests/diff/rename.c	/^	const char **targets;$/;"	m	struct:rename_expected	file:
te	src/iterator.c	/^	const git_tree_entry *te;$/;"	m	struct:tree_iterator_entry	file:
template	examples/init.c	/^	const char *template;$/;"	m	struct:opts	file:
template_path	include/git2/repository.h	/^	const char *template_path;$/;"	m	struct:__anon212
test	tests/clar.c	/^	const char *test;$/;"	m	struct:clar_error	file:
test_4096	tests/core/buffer.c	/^const char *test_4096 = TESTSTR_4096;$/;"	v
test_8192	tests/core/buffer.c	/^const char *test_8192 = TESTSTR_8192;$/;"	v
test_attr_file__assign_variants	tests/attr/file.c	/^void test_attr_file__assign_variants(void)$/;"	f
test_attr_file__check_attr_examples	tests/attr/file.c	/^void test_attr_file__check_attr_examples(void)$/;"	f
test_attr_file__match_variants	tests/attr/file.c	/^void test_attr_file__match_variants(void)$/;"	f
test_attr_file__simple_read	tests/attr/file.c	/^void test_attr_file__simple_read(void)$/;"	f
test_attr_flags__bare	tests/attr/flags.c	/^void test_attr_flags__bare(void)$/;"	f
test_attr_flags__cleanup	tests/attr/flags.c	/^void test_attr_flags__cleanup(void)$/;"	f
test_attr_flags__index_vs_workdir	tests/attr/flags.c	/^void test_attr_flags__index_vs_workdir(void)$/;"	f
test_attr_flags__subdir	tests/attr/flags.c	/^void test_attr_flags__subdir(void)$/;"	f
test_attr_ignore__allow_root	tests/attr/ignore.c	/^void test_attr_ignore__allow_root(void)$/;"	f
test_attr_ignore__cleanup	tests/attr/ignore.c	/^void test_attr_ignore__cleanup(void)$/;"	f
test_attr_ignore__expand_tilde_to_homedir	tests/attr/ignore.c	/^void test_attr_ignore__expand_tilde_to_homedir(void)$/;"	f
test_attr_ignore__honor_temporary_rules	tests/attr/ignore.c	/^void test_attr_ignore__honor_temporary_rules(void)$/;"	f
test_attr_ignore__ignore_root	tests/attr/ignore.c	/^void test_attr_ignore__ignore_root(void)$/;"	f
test_attr_ignore__initialize	tests/attr/ignore.c	/^void test_attr_ignore__initialize(void)$/;"	f
test_attr_ignore__skip_gitignore_directory	tests/attr/ignore.c	/^void test_attr_ignore__skip_gitignore_directory(void)$/;"	f
test_attr_lookup__assign_variants	tests/attr/lookup.c	/^void test_attr_lookup__assign_variants(void)$/;"	f
test_attr_lookup__check_attr_examples	tests/attr/lookup.c	/^void test_attr_lookup__check_attr_examples(void)$/;"	f
test_attr_lookup__from_buffer	tests/attr/lookup.c	/^void test_attr_lookup__from_buffer(void)$/;"	f
test_attr_lookup__match_variants	tests/attr/lookup.c	/^void test_attr_lookup__match_variants(void)$/;"	f
test_attr_lookup__simple	tests/attr/lookup.c	/^void test_attr_lookup__simple(void)$/;"	f
test_attr_repo__bad_macros	tests/attr/repo.c	/^void test_attr_repo__bad_macros(void)$/;"	f
test_attr_repo__cleanup	tests/attr/repo.c	/^void test_attr_repo__cleanup(void)$/;"	f
test_attr_repo__foreach	tests/attr/repo.c	/^void test_attr_repo__foreach(void)$/;"	f
test_attr_repo__get_many	tests/attr/repo.c	/^void test_attr_repo__get_many(void)$/;"	f
test_attr_repo__get_many_in_place	tests/attr/repo.c	/^void test_attr_repo__get_many_in_place(void)$/;"	f
test_attr_repo__get_one	tests/attr/repo.c	/^void test_attr_repo__get_one(void)$/;"	f
test_attr_repo__initialize	tests/attr/repo.c	/^void test_attr_repo__initialize(void)$/;"	f
test_attr_repo__macros	tests/attr/repo.c	/^void test_attr_repo__macros(void)$/;"	f
test_attr_repo__manpage_example	tests/attr/repo.c	/^void test_attr_repo__manpage_example(void)$/;"	f
test_attr_repo__staging_properly_normalizes_line_endings_according_to_gitattributes_directives	tests/attr/repo.c	/^void test_attr_repo__staging_properly_normalizes_line_endings_according_to_gitattributes_directives(void)$/;"	f
test_blame_buffer__add_lines_at_end	tests/blame/buffer.c	/^void test_blame_buffer__add_lines_at_end(void)$/;"	f
test_blame_buffer__add_splits_hunk	tests/blame/buffer.c	/^void test_blame_buffer__add_splits_hunk(void)$/;"	f
test_blame_buffer__added_line	tests/blame/buffer.c	/^void test_blame_buffer__added_line(void)$/;"	f
test_blame_buffer__cleanup	tests/blame/buffer.c	/^void test_blame_buffer__cleanup(void)$/;"	f
test_blame_buffer__delete_crosses_hunk_boundary	tests/blame/buffer.c	/^void test_blame_buffer__delete_crosses_hunk_boundary(void)$/;"	f
test_blame_buffer__deleted_line	tests/blame/buffer.c	/^void test_blame_buffer__deleted_line(void)$/;"	f
test_blame_buffer__initialize	tests/blame/buffer.c	/^void test_blame_buffer__initialize(void)$/;"	f
test_blame_buffer__replace_line	tests/blame/buffer.c	/^void test_blame_buffer__replace_line(void)$/;"	f
test_blame_getters__byindex	tests/blame/getters.c	/^void test_blame_getters__byindex(void)$/;"	f
test_blame_getters__byline	tests/blame/getters.c	/^void test_blame_getters__byline(void)$/;"	f
test_blame_getters__cleanup	tests/blame/getters.c	/^void test_blame_getters__cleanup(void)$/;"	f
test_blame_getters__initialize	tests/blame/getters.c	/^void test_blame_getters__initialize(void)$/;"	f
test_blame_harder__c	tests/blame/harder.c	/^void test_blame_harder__c(void)$/;"	f
test_blame_harder__cc	tests/blame/harder.c	/^void test_blame_harder__cc(void)$/;"	f
test_blame_harder__ccc	tests/blame/harder.c	/^void test_blame_harder__ccc(void)$/;"	f
test_blame_harder__cleanup	tests/blame/harder.c	/^void test_blame_harder__cleanup(void)$/;"	f
test_blame_harder__initialize	tests/blame/harder.c	/^void test_blame_harder__initialize(void)$/;"	f
test_blame_harder__m	tests/blame/harder.c	/^void test_blame_harder__m(void)$/;"	f
test_blame_simple__can_restrict_lines_both	tests/blame/simple.c	/^void test_blame_simple__can_restrict_lines_both(void)$/;"	f
test_blame_simple__can_restrict_lines_max	tests/blame/simple.c	/^void test_blame_simple__can_restrict_lines_max(void)$/;"	f
test_blame_simple__can_restrict_lines_min	tests/blame/simple.c	/^void test_blame_simple__can_restrict_lines_min(void)$/;"	f
test_blame_simple__can_restrict_to_first_parent_commits	tests/blame/simple.c	/^void test_blame_simple__can_restrict_to_first_parent_commits(void)$/;"	f
test_blame_simple__can_restrict_to_newish_commits	tests/blame/simple.c	/^void test_blame_simple__can_restrict_to_newish_commits(void)$/;"	f
test_blame_simple__cleanup	tests/blame/simple.c	/^void test_blame_simple__cleanup(void)$/;"	f
test_blame_simple__initialize	tests/blame/simple.c	/^void test_blame_simple__initialize(void)$/;"	f
test_blame_simple__trivial_blamerepo	tests/blame/simple.c	/^void test_blame_simple__trivial_blamerepo(void)$/;"	f
test_blame_simple__trivial_libgit2	tests/blame/simple.c	/^void test_blame_simple__trivial_libgit2(void)$/;"	f
test_blame_simple__trivial_testrepo	tests/blame/simple.c	/^void test_blame_simple__trivial_testrepo(void)$/;"	f
test_body	tests/object/raw/write.c	/^void test_body(object_data *d, git_rawobj *o) $/;"	f
test_buf_basic__printf	tests/buf/basic.c	/^void test_buf_basic__printf(void)$/;"	f
test_buf_basic__resize	tests/buf/basic.c	/^void test_buf_basic__resize(void)$/;"	f
test_buf_splice__append	tests/buf/splice.c	/^void test_buf_splice__append(void)$/;"	f
test_buf_splice__cleanup	tests/buf/splice.c	/^void test_buf_splice__cleanup(void) {$/;"	f
test_buf_splice__dont_do_anything	tests/buf/splice.c	/^void test_buf_splice__dont_do_anything(void)$/;"	f
test_buf_splice__initialize	tests/buf/splice.c	/^void test_buf_splice__initialize(void) {$/;"	f
test_buf_splice__insert_at	tests/buf/splice.c	/^void test_buf_splice__insert_at(void)$/;"	f
test_buf_splice__preprend	tests/buf/splice.c	/^void test_buf_splice__preprend(void)$/;"	f
test_buf_splice__remove_at	tests/buf/splice.c	/^void test_buf_splice__remove_at(void)$/;"	f
test_buf_splice__replace	tests/buf/splice.c	/^void test_buf_splice__replace(void)$/;"	f
test_buf_splice__replace_with_longer	tests/buf/splice.c	/^void test_buf_splice__replace_with_longer(void)$/;"	f
test_buf_splice__replace_with_shorter	tests/buf/splice.c	/^void test_buf_splice__replace_with_shorter(void)$/;"	f
test_buf_splice__truncate	tests/buf/splice.c	/^void test_buf_splice__truncate(void)$/;"	f
test_checkout_binaryunicode__autocrlf	tests/checkout/binaryunicode.c	/^void test_checkout_binaryunicode__autocrlf(void)$/;"	f
test_checkout_binaryunicode__cleanup	tests/checkout/binaryunicode.c	/^void test_checkout_binaryunicode__cleanup(void)$/;"	f
test_checkout_binaryunicode__initialize	tests/checkout/binaryunicode.c	/^void test_checkout_binaryunicode__initialize(void)$/;"	f
test_checkout_binaryunicode__noautocrlf	tests/checkout/binaryunicode.c	/^void test_checkout_binaryunicode__noautocrlf(void)$/;"	f
test_checkout_conflict__add_add	tests/checkout/conflict.c	/^void test_checkout_conflict__add_add(void)$/;"	f
test_checkout_conflict__automerge	tests/checkout/conflict.c	/^void test_checkout_conflict__automerge(void)$/;"	f
test_checkout_conflict__cleanup	tests/checkout/conflict.c	/^void test_checkout_conflict__cleanup(void)$/;"	f
test_checkout_conflict__diff3	tests/checkout/conflict.c	/^void test_checkout_conflict__diff3(void)$/;"	f
test_checkout_conflict__directory_file	tests/checkout/conflict.c	/^void test_checkout_conflict__directory_file(void)$/;"	f
test_checkout_conflict__directory_file_with_custom_labels	tests/checkout/conflict.c	/^void test_checkout_conflict__directory_file_with_custom_labels(void)$/;"	f
test_checkout_conflict__ignored	tests/checkout/conflict.c	/^void test_checkout_conflict__ignored(void)$/;"	f
test_checkout_conflict__initialize	tests/checkout/conflict.c	/^void test_checkout_conflict__initialize(void)$/;"	f
test_checkout_conflict__link_file	tests/checkout/conflict.c	/^void test_checkout_conflict__link_file(void)$/;"	f
test_checkout_conflict__links	tests/checkout/conflict.c	/^void test_checkout_conflict__links(void)$/;"	f
test_checkout_conflict__mode_change	tests/checkout/conflict.c	/^void test_checkout_conflict__mode_change(void)$/;"	f
test_checkout_conflict__name_mangled_file_exists_in_workdir	tests/checkout/conflict.c	/^void test_checkout_conflict__name_mangled_file_exists_in_workdir(void)$/;"	f
test_checkout_conflict__ours	tests/checkout/conflict.c	/^void test_checkout_conflict__ours(void)$/;"	f
test_checkout_conflict__path_filters	tests/checkout/conflict.c	/^void test_checkout_conflict__path_filters(void)$/;"	f
test_checkout_conflict__rename_keep_ours	tests/checkout/conflict.c	/^void test_checkout_conflict__rename_keep_ours(void)$/;"	f
test_checkout_conflict__renames	tests/checkout/conflict.c	/^void test_checkout_conflict__renames(void)$/;"	f
test_checkout_conflict__report_progress	tests/checkout/conflict.c	/^void test_checkout_conflict__report_progress(void)$/;"	f
test_checkout_conflict__theirs	tests/checkout/conflict.c	/^void test_checkout_conflict__theirs(void)$/;"	f
test_checkout_conflict__update_only	tests/checkout/conflict.c	/^void test_checkout_conflict__update_only(void)$/;"	f
test_checkout_crlf__autocrlf_false_index_size_is_unfiltered_size	tests/checkout/crlf.c	/^void test_checkout_crlf__autocrlf_false_index_size_is_unfiltered_size(void)$/;"	f
test_checkout_crlf__autocrlf_false_no_attrs	tests/checkout/crlf.c	/^void test_checkout_crlf__autocrlf_false_no_attrs(void)$/;"	f
test_checkout_crlf__autocrlf_false_text_auto_attr	tests/checkout/crlf.c	/^void test_checkout_crlf__autocrlf_false_text_auto_attr(void)$/;"	f
test_checkout_crlf__autocrlf_input_no_attrs	tests/checkout/crlf.c	/^void test_checkout_crlf__autocrlf_input_no_attrs(void)$/;"	f
test_checkout_crlf__autocrlf_input_text_auto_attr	tests/checkout/crlf.c	/^void test_checkout_crlf__autocrlf_input_text_auto_attr(void)$/;"	f
test_checkout_crlf__autocrlf_true_index_size_is_filtered_size	tests/checkout/crlf.c	/^void test_checkout_crlf__autocrlf_true_index_size_is_filtered_size(void)$/;"	f
test_checkout_crlf__autocrlf_true_no_attrs	tests/checkout/crlf.c	/^void test_checkout_crlf__autocrlf_true_no_attrs(void)$/;"	f
test_checkout_crlf__autocrlf_true_text_auto_attr	tests/checkout/crlf.c	/^void test_checkout_crlf__autocrlf_true_text_auto_attr(void)$/;"	f
test_checkout_crlf__cleanup	tests/checkout/crlf.c	/^void test_checkout_crlf__cleanup(void)$/;"	f
test_checkout_crlf__detect_crlf_autocrlf_true	tests/checkout/crlf.c	/^void test_checkout_crlf__detect_crlf_autocrlf_true(void)$/;"	f
test_checkout_crlf__initialize	tests/checkout/crlf.c	/^void test_checkout_crlf__initialize(void)$/;"	f
test_checkout_crlf__more_crlf_autocrlf_true	tests/checkout/crlf.c	/^void test_checkout_crlf__more_crlf_autocrlf_true(void)$/;"	f
test_checkout_crlf__more_lf_autocrlf_true	tests/checkout/crlf.c	/^void test_checkout_crlf__more_lf_autocrlf_true(void)$/;"	f
test_checkout_crlf__with_ident	tests/checkout/crlf.c	/^void test_checkout_crlf__with_ident(void)$/;"	f
test_checkout_head__cleanup	tests/checkout/head.c	/^void test_checkout_head__cleanup(void)$/;"	f
test_checkout_head__initialize	tests/checkout/head.c	/^void test_checkout_head__initialize(void)$/;"	f
test_checkout_head__unborn_head_returns_GIT_EUNBORNBRANCH	tests/checkout/head.c	/^void test_checkout_head__unborn_head_returns_GIT_EUNBORNBRANCH(void)$/;"	f
test_checkout_head__with_index_only_tree	tests/checkout/head.c	/^void test_checkout_head__with_index_only_tree(void)$/;"	f
test_checkout_index__calls_progress_callback	tests/checkout/index.c	/^void test_checkout_index__calls_progress_callback(void)$/;"	f
test_checkout_index__can_checkout_a_newly_initialized_repository	tests/checkout/index.c	/^void test_checkout_index__can_checkout_a_newly_initialized_repository(void)$/;"	f
test_checkout_index__can_create_missing_files	tests/checkout/index.c	/^void test_checkout_index__can_create_missing_files(void)$/;"	f
test_checkout_index__can_get_repo_from_index	tests/checkout/index.c	/^void test_checkout_index__can_get_repo_from_index(void)$/;"	f
test_checkout_index__can_notify_of_skipped_files	tests/checkout/index.c	/^void test_checkout_index__can_notify_of_skipped_files(void)$/;"	f
test_checkout_index__can_overcome_name_clashes	tests/checkout/index.c	/^void test_checkout_index__can_overcome_name_clashes(void)$/;"	f
test_checkout_index__can_overwrite_modified_file	tests/checkout/index.c	/^void test_checkout_index__can_overwrite_modified_file(void)$/;"	f
test_checkout_index__can_remove_untracked_files	tests/checkout/index.c	/^void test_checkout_index__can_remove_untracked_files(void)$/;"	f
test_checkout_index__can_update_prefixed_files	tests/checkout/index.c	/^void test_checkout_index__can_update_prefixed_files(void)$/;"	f
test_checkout_index__cannot_checkout_a_bare_repository	tests/checkout/index.c	/^void test_checkout_index__cannot_checkout_a_bare_repository(void)$/;"	f
test_checkout_index__cleanup	tests/checkout/index.c	/^void test_checkout_index__cleanup(void)$/;"	f
test_checkout_index__donot_overwrite_modified_file_by_default	tests/checkout/index.c	/^void test_checkout_index__donot_overwrite_modified_file_by_default(void)$/;"	f
test_checkout_index__honor_coreautocrlf_setting_set_to_true	tests/checkout/index.c	/^void test_checkout_index__honor_coreautocrlf_setting_set_to_true(void)$/;"	f
test_checkout_index__honor_coresymlinks_setting_set_to_false	tests/checkout/index.c	/^void test_checkout_index__honor_coresymlinks_setting_set_to_false(void)$/;"	f
test_checkout_index__honor_coresymlinks_setting_set_to_true	tests/checkout/index.c	/^void test_checkout_index__honor_coresymlinks_setting_set_to_true(void)$/;"	f
test_checkout_index__honor_the_gitattributes_directives	tests/checkout/index.c	/^void test_checkout_index__honor_the_gitattributes_directives(void)$/;"	f
test_checkout_index__honor_the_specified_pathspecs	tests/checkout/index.c	/^void test_checkout_index__honor_the_specified_pathspecs(void)$/;"	f
test_checkout_index__initialize	tests/checkout/index.c	/^void test_checkout_index__initialize(void)$/;"	f
test_checkout_index__issue_1397	tests/checkout/index.c	/^void test_checkout_index__issue_1397(void)$/;"	f
test_checkout_index__options_dir_modes	tests/checkout/index.c	/^void test_checkout_index__options_dir_modes(void)$/;"	f
test_checkout_index__options_disable_filters	tests/checkout/index.c	/^void test_checkout_index__options_disable_filters(void)$/;"	f
test_checkout_index__options_open_flags	tests/checkout/index.c	/^void test_checkout_index__options_open_flags(void)$/;"	f
test_checkout_index__options_override_file_modes	tests/checkout/index.c	/^void test_checkout_index__options_override_file_modes(void)$/;"	f
test_checkout_index__target_directory	tests/checkout/index.c	/^void test_checkout_index__target_directory(void)$/;"	f
test_checkout_index__target_directory_from_bare	tests/checkout/index.c	/^void test_checkout_index__target_directory_from_bare(void)$/;"	f
test_checkout_index__validates_struct_version	tests/checkout/index.c	/^void test_checkout_index__validates_struct_version(void)$/;"	f
test_checkout_index__wont_notify_of_expected_line_ending_changes	tests/checkout/index.c	/^void test_checkout_index__wont_notify_of_expected_line_ending_changes(void)$/;"	f
test_checkout_notify_cb	tests/checkout/index.c	/^static int test_checkout_notify_cb($/;"	f	file:
test_checkout_tree__calls_progress_callback	tests/checkout/tree.c	/^void test_checkout_tree__calls_progress_callback(void)$/;"	f
test_checkout_tree__can_cancel_checkout_from_notify	tests/checkout/tree.c	/^void test_checkout_tree__can_cancel_checkout_from_notify(void)$/;"	f
test_checkout_tree__can_checkout_a_subdirectory_from_a_commit	tests/checkout/tree.c	/^void test_checkout_tree__can_checkout_a_subdirectory_from_a_commit(void)$/;"	f
test_checkout_tree__can_checkout_a_subdirectory_from_a_subtree	tests/checkout/tree.c	/^void test_checkout_tree__can_checkout_a_subdirectory_from_a_subtree(void)$/;"	f
test_checkout_tree__can_checkout_and_remove_directory	tests/checkout/tree.c	/^void test_checkout_tree__can_checkout_and_remove_directory(void)$/;"	f
test_checkout_tree__can_checkout_with_last_workdir_item_missing	tests/checkout/tree.c	/^void test_checkout_tree__can_checkout_with_last_workdir_item_missing(void)$/;"	f
test_checkout_tree__can_checkout_with_pattern	tests/checkout/tree.c	/^void test_checkout_tree__can_checkout_with_pattern(void)$/;"	f
test_checkout_tree__can_continue_when_dir_in_use	tests/checkout/tree.c	/^void test_checkout_tree__can_continue_when_dir_in_use(void)$/;"	f
test_checkout_tree__can_disable_pattern_match	tests/checkout/tree.c	/^void test_checkout_tree__can_disable_pattern_match(void)$/;"	f
test_checkout_tree__can_overwrite_ignored_by_default	tests/checkout/tree.c	/^void test_checkout_tree__can_overwrite_ignored_by_default(void)$/;"	f
test_checkout_tree__can_overwrite_ignored_folder_by_default	tests/checkout/tree.c	/^void test_checkout_tree__can_overwrite_ignored_folder_by_default(void)$/;"	f
test_checkout_tree__can_remove_ignored	tests/checkout/tree.c	/^void test_checkout_tree__can_remove_ignored(void)$/;"	f
test_checkout_tree__can_remove_untracked	tests/checkout/tree.c	/^void test_checkout_tree__can_remove_untracked(void)$/;"	f
test_checkout_tree__can_switch_branches	tests/checkout/tree.c	/^void test_checkout_tree__can_switch_branches(void)$/;"	f
test_checkout_tree__can_update_only	tests/checkout/tree.c	/^void test_checkout_tree__can_update_only(void)$/;"	f
test_checkout_tree__can_write_to_empty_dirs	tests/checkout/tree.c	/^void test_checkout_tree__can_write_to_empty_dirs(void)$/;"	f
test_checkout_tree__cannot_checkout_a_non_treeish	tests/checkout/tree.c	/^void test_checkout_tree__cannot_checkout_a_non_treeish(void)$/;"	f
test_checkout_tree__checking_out_a_conflicting_content_change_returns_EMERGECONFLICT	tests/checkout/tree.c	/^void test_checkout_tree__checking_out_a_conflicting_content_change_returns_EMERGECONFLICT(void)$/;"	f
test_checkout_tree__checking_out_a_conflicting_type_change_returns_EMERGECONFLICT	tests/checkout/tree.c	/^void test_checkout_tree__checking_out_a_conflicting_type_change_returns_EMERGECONFLICT(void)$/;"	f
test_checkout_tree__checking_out_a_conflicting_type_change_returns_EMERGECONFLICT_2	tests/checkout/tree.c	/^void test_checkout_tree__checking_out_a_conflicting_type_change_returns_EMERGECONFLICT_2(void)$/;"	f
test_checkout_tree__cleanup	tests/checkout/tree.c	/^void test_checkout_tree__cleanup(void)$/;"	f
test_checkout_tree__conflict_on_ignored_folder_when_not_overwriting	tests/checkout/tree.c	/^void test_checkout_tree__conflict_on_ignored_folder_when_not_overwriting(void)$/;"	f
test_checkout_tree__conflict_on_ignored_when_not_overwriting	tests/checkout/tree.c	/^void test_checkout_tree__conflict_on_ignored_when_not_overwriting(void)$/;"	f
test_checkout_tree__doesnt_write_unrequested_files_to_worktree	tests/checkout/tree.c	/^void test_checkout_tree__doesnt_write_unrequested_files_to_worktree(void)$/;"	f
test_checkout_tree__donot_update_deleted_file_by_default	tests/checkout/tree.c	/^void test_checkout_tree__donot_update_deleted_file_by_default(void)$/;"	f
test_checkout_tree__extremely_long_file_name	tests/checkout/tree.c	/^void test_checkout_tree__extremely_long_file_name(void)$/;"	f
test_checkout_tree__fails_when_conflicts_exist_in_index	tests/checkout/tree.c	/^void test_checkout_tree__fails_when_conflicts_exist_in_index(void)$/;"	f
test_checkout_tree__fails_when_dir_in_use	tests/checkout/tree.c	/^void test_checkout_tree__fails_when_dir_in_use(void)$/;"	f
test_checkout_tree__filemode_preserved_in_index	tests/checkout/tree.c	/^void test_checkout_tree__filemode_preserved_in_index(void)$/;"	f
test_checkout_tree__initialize	tests/checkout/tree.c	/^void test_checkout_tree__initialize(void)$/;"	f
test_checkout_tree__issue_1397	tests/checkout/tree.c	/^void test_checkout_tree__issue_1397(void)$/;"	f
test_checkout_tree__target_directory_from_bare	tests/checkout/tree.c	/^void test_checkout_tree__target_directory_from_bare(void)$/;"	f
test_checkout_typechange__checkout_typechanges_safe	tests/checkout/typechange.c	/^void test_checkout_typechange__checkout_typechanges_safe(void)$/;"	f
test_checkout_typechange__checkout_with_conflicts	tests/checkout/typechange.c	/^void test_checkout_typechange__checkout_with_conflicts(void)$/;"	f
test_checkout_typechange__cleanup	tests/checkout/typechange.c	/^void test_checkout_typechange__cleanup(void)$/;"	f
test_checkout_typechange__initialize	tests/checkout/typechange.c	/^void test_checkout_typechange__initialize(void)$/;"	f
test_clone_empty__can_clone_an_empty_local_repo	tests/clone/empty.c	/^void test_clone_empty__can_clone_an_empty_local_repo(void)$/;"	f
test_clone_empty__can_clone_an_empty_local_repo_barely	tests/clone/empty.c	/^void test_clone_empty__can_clone_an_empty_local_repo_barely(void)$/;"	f
test_clone_empty__can_clone_an_empty_standard_repo	tests/clone/empty.c	/^void test_clone_empty__can_clone_an_empty_standard_repo(void)$/;"	f
test_clone_empty__cleanup	tests/clone/empty.c	/^void test_clone_empty__cleanup(void)$/;"	f
test_clone_empty__initialize	tests/clone/empty.c	/^void test_clone_empty__initialize(void)$/;"	f
test_clone_nonetwork__bad_urls	tests/clone/nonetwork.c	/^void test_clone_nonetwork__bad_urls(void)$/;"	f
test_clone_nonetwork__can_cancel_clone_in_checkout	tests/clone/nonetwork.c	/^void test_clone_nonetwork__can_cancel_clone_in_checkout(void)$/;"	f
test_clone_nonetwork__can_cancel_clone_in_fetch	tests/clone/nonetwork.c	/^void test_clone_nonetwork__can_cancel_clone_in_fetch(void)$/;"	f
test_clone_nonetwork__can_checkout_given_branch	tests/clone/nonetwork.c	/^void test_clone_nonetwork__can_checkout_given_branch(void)$/;"	f
test_clone_nonetwork__can_detached_head	tests/clone/nonetwork.c	/^void test_clone_nonetwork__can_detached_head(void)$/;"	f
test_clone_nonetwork__can_prevent_the_checkout_of_a_standard_repo	tests/clone/nonetwork.c	/^void test_clone_nonetwork__can_prevent_the_checkout_of_a_standard_repo(void)$/;"	f
test_clone_nonetwork__cleanup	tests/clone/nonetwork.c	/^void test_clone_nonetwork__cleanup(void)$/;"	f
test_clone_nonetwork__clone_into_updates_reflog_properly	tests/clone/nonetwork.c	/^void test_clone_nonetwork__clone_into_updates_reflog_properly(void)$/;"	f
test_clone_nonetwork__clone_updates_reflog_properly	tests/clone/nonetwork.c	/^void test_clone_nonetwork__clone_updates_reflog_properly(void)$/;"	f
test_clone_nonetwork__cope_with_already_existing_directory	tests/clone/nonetwork.c	/^void test_clone_nonetwork__cope_with_already_existing_directory(void)$/;"	f
test_clone_nonetwork__custom_origin_name	tests/clone/nonetwork.c	/^void test_clone_nonetwork__custom_origin_name(void)$/;"	f
test_clone_nonetwork__defaults	tests/clone/nonetwork.c	/^void test_clone_nonetwork__defaults(void)$/;"	f
test_clone_nonetwork__do_not_clean_existing_directory	tests/clone/nonetwork.c	/^void test_clone_nonetwork__do_not_clean_existing_directory(void)$/;"	f
test_clone_nonetwork__fail_when_the_target_is_a_file	tests/clone/nonetwork.c	/^void test_clone_nonetwork__fail_when_the_target_is_a_file(void)$/;"	f
test_clone_nonetwork__fail_with_already_existing_but_non_empty_directory	tests/clone/nonetwork.c	/^void test_clone_nonetwork__fail_with_already_existing_but_non_empty_directory(void)$/;"	f
test_clone_nonetwork__initialize	tests/clone/nonetwork.c	/^void test_clone_nonetwork__initialize(void)$/;"	f
test_clone_nonetwork__local	tests/clone/nonetwork.c	/^void test_clone_nonetwork__local(void)$/;"	f
test_clone_nonetwork__local_absolute_path	tests/clone/nonetwork.c	/^void test_clone_nonetwork__local_absolute_path(void)$/;"	f
test_clone_nonetwork__local_bare	tests/clone/nonetwork.c	/^void test_clone_nonetwork__local_bare(void)$/;"	f
test_cmp	tests/core/vector.c	/^static int test_cmp(const void *a, const void *b)$/;"	f	file:
test_commit_commit__cleanup	tests/commit/commit.c	/^void test_commit_commit__cleanup(void)$/;"	f
test_commit_commit__create_unexisting_update_ref	tests/commit/commit.c	/^void test_commit_commit__create_unexisting_update_ref(void)$/;"	f
test_commit_commit__initialize	tests/commit/commit.c	/^void test_commit_commit__initialize(void)$/;"	f
test_commit_commit__summary	tests/commit/commit.c	/^void test_commit_commit__summary(void)$/;"	f
test_commit_parent__can_retrieve_nth_generation_parent	tests/commit/parent.c	/^void test_commit_parent__can_retrieve_nth_generation_parent(void)$/;"	f
test_commit_parent__cleanup	tests/commit/parent.c	/^void test_commit_parent__cleanup(void)$/;"	f
test_commit_parent__initialize	tests/commit/parent.c	/^void test_commit_parent__initialize(void)$/;"	f
test_commit_parse__cleanup	tests/commit/parse.c	/^void test_commit_parse__cleanup(void)$/;"	f
test_commit_parse__details0	tests/commit/parse.c	/^void test_commit_parse__details0(void) {$/;"	f
test_commit_parse__entire_commit	tests/commit/parse.c	/^void test_commit_parse__entire_commit(void)$/;"	f
test_commit_parse__header	tests/commit/parse.c	/^void test_commit_parse__header(void)$/;"	f
test_commit_parse__initialize	tests/commit/parse.c	/^void test_commit_parse__initialize(void)$/;"	f
test_commit_parse__leading_lf	tests/commit/parse.c	/^void test_commit_parse__leading_lf(void)$/;"	f
test_commit_parse__only_lf	tests/commit/parse.c	/^void test_commit_parse__only_lf(void)$/;"	f
test_commit_parse__signature	tests/commit/parse.c	/^void test_commit_parse__signature(void)$/;"	f
test_commit_signature__angle_brackets_in_email_are_not_supported	tests/commit/signature.c	/^void test_commit_signature__angle_brackets_in_email_are_not_supported(void)$/;"	f
test_commit_signature__angle_brackets_in_names_are_not_supported	tests/commit/signature.c	/^void test_commit_signature__angle_brackets_in_names_are_not_supported(void)$/;"	f
test_commit_signature__create_empties	tests/commit/signature.c	/^void test_commit_signature__create_empties(void)$/;"	f
test_commit_signature__create_one_char	tests/commit/signature.c	/^void test_commit_signature__create_one_char(void)$/;"	f
test_commit_signature__create_two_char	tests/commit/signature.c	/^void test_commit_signature__create_two_char(void)$/;"	f
test_commit_signature__create_zero_char	tests/commit/signature.c	/^void test_commit_signature__create_zero_char(void)$/;"	f
test_commit_signature__leading_and_trailing_spaces_are_trimmed	tests/commit/signature.c	/^void test_commit_signature__leading_and_trailing_spaces_are_trimmed(void)$/;"	f
test_commit_write__cleanup	tests/commit/write.c	/^void test_commit_write__cleanup(void)$/;"	f
test_commit_write__from_memory	tests/commit/write.c	/^void test_commit_write__from_memory(void)$/;"	f
test_commit_write__initialize	tests/commit/write.c	/^void test_commit_write__initialize(void)$/;"	f
test_commit_write__root	tests/commit/write.c	/^void test_commit_write__root(void)$/;"	f
test_config_add__cleanup	tests/config/add.c	/^void test_config_add__cleanup(void)$/;"	f
test_config_add__initialize	tests/config/add.c	/^void test_config_add__initialize(void)$/;"	f
test_config_add__to_existing_section	tests/config/add.c	/^void test_config_add__to_existing_section(void)$/;"	f
test_config_add__to_new_section	tests/config/add.c	/^void test_config_add__to_new_section(void)$/;"	f
test_config_backend__checks_version	tests/config/backend.c	/^void test_config_backend__checks_version(void)$/;"	f
test_config_configlevel__adding_the_same_level_twice_returns_EEXISTS	tests/config/configlevel.c	/^void test_config_configlevel__adding_the_same_level_twice_returns_EEXISTS(void)$/;"	f
test_config_configlevel__can_read_from_a_single_level_focused_file_after_parent_config_has_been_freed	tests/config/configlevel.c	/^void test_config_configlevel__can_read_from_a_single_level_focused_file_after_parent_config_has_been_freed(void)$/;"	f
test_config_configlevel__can_replace_a_config_file_at_an_existing_level	tests/config/configlevel.c	/^void test_config_configlevel__can_replace_a_config_file_at_an_existing_level(void)$/;"	f
test_config_configlevel__fetching_a_level_from_an_empty_compound_config_returns_ENOTFOUND	tests/config/configlevel.c	/^void test_config_configlevel__fetching_a_level_from_an_empty_compound_config_returns_ENOTFOUND(void)$/;"	f
test_config_global__cleanup	tests/config/global.c	/^void test_config_global__cleanup(void)$/;"	f
test_config_global__initialize	tests/config/global.c	/^void test_config_global__initialize(void)$/;"	f
test_config_global__open_global	tests/config/global.c	/^void test_config_global__open_global(void)$/;"	f
test_config_global__open_xdg	tests/config/global.c	/^void test_config_global__open_xdg(void)$/;"	f
test_config_include__absolute	tests/config/include.c	/^void test_config_include__absolute(void)$/;"	f
test_config_include__depth	tests/config/include.c	/^void test_config_include__depth(void)$/;"	f
test_config_include__homedir	tests/config/include.c	/^void test_config_include__homedir(void)$/;"	f
test_config_include__ordering	tests/config/include.c	/^void test_config_include__ordering(void)$/;"	f
test_config_include__refresh	tests/config/include.c	/^void test_config_include__refresh(void)$/;"	f
test_config_include__relative	tests/config/include.c	/^void test_config_include__relative(void)$/;"	f
test_config_multivar__add	tests/config/multivar.c	/^void test_config_multivar__add(void)$/;"	f
test_config_multivar__add_new	tests/config/multivar.c	/^void test_config_multivar__add_new(void)$/;"	f
test_config_multivar__cleanup	tests/config/multivar.c	/^void test_config_multivar__cleanup(void)$/;"	f
test_config_multivar__delete	tests/config/multivar.c	/^void test_config_multivar__delete(void)$/;"	f
test_config_multivar__delete_multiple	tests/config/multivar.c	/^void test_config_multivar__delete_multiple(void)$/;"	f
test_config_multivar__delete_notfound	tests/config/multivar.c	/^void test_config_multivar__delete_notfound(void)$/;"	f
test_config_multivar__foreach	tests/config/multivar.c	/^void test_config_multivar__foreach(void)$/;"	f
test_config_multivar__get	tests/config/multivar.c	/^void test_config_multivar__get(void)$/;"	f
test_config_multivar__initialize	tests/config/multivar.c	/^void test_config_multivar__initialize(void)$/;"	f
test_config_multivar__replace	tests/config/multivar.c	/^void test_config_multivar__replace(void)$/;"	f
test_config_multivar__replace_multiple	tests/config/multivar.c	/^void test_config_multivar__replace_multiple(void)$/;"	f
test_config_new__write_new_config	tests/config/new.c	/^void test_config_new__write_new_config(void)$/;"	f
test_config_read__blank_lines	tests/config/read.c	/^void test_config_read__blank_lines(void)$/;"	f
test_config_read__can_load_and_parse_an_empty_config_file	tests/config/read.c	/^void test_config_read__can_load_and_parse_an_empty_config_file(void)$/;"	f
test_config_read__case_sensitive	tests/config/read.c	/^void test_config_read__case_sensitive(void)$/;"	f
test_config_read__corrupt_header	tests/config/read.c	/^void test_config_read__corrupt_header(void)$/;"	f
test_config_read__corrupt_header2	tests/config/read.c	/^void test_config_read__corrupt_header2(void)$/;"	f
test_config_read__corrupt_header3	tests/config/read.c	/^void test_config_read__corrupt_header3(void)$/;"	f
test_config_read__empty_files	tests/config/read.c	/^void test_config_read__empty_files(void)$/;"	f
test_config_read__escaping_quotes	tests/config/read.c	/^void test_config_read__escaping_quotes(void)$/;"	f
test_config_read__fallback_from_local_to_global_and_from_global_to_system	tests/config/read.c	/^void test_config_read__fallback_from_local_to_global_and_from_global_to_system(void)$/;"	f
test_config_read__foreach	tests/config/read.c	/^void test_config_read__foreach(void)$/;"	f
test_config_read__foreach_match	tests/config/read.c	/^void test_config_read__foreach_match(void)$/;"	f
test_config_read__header_in_last_line	tests/config/read.c	/^void test_config_read__header_in_last_line(void)$/;"	f
test_config_read__invalid_ext_headers	tests/config/read.c	/^void test_config_read__invalid_ext_headers(void)$/;"	f
test_config_read__iterator	tests/config/read.c	/^void test_config_read__iterator(void)$/;"	f
test_config_read__iterator_glob	tests/config/read.c	/^void test_config_read__iterator_glob(void)$/;"	f
test_config_read__local_config_overrides_global_config_overrides_system_config	tests/config/read.c	/^void test_config_read__local_config_overrides_global_config_overrides_system_config(void)$/;"	f
test_config_read__lone_variable	tests/config/read.c	/^void test_config_read__lone_variable(void)$/;"	f
test_config_read__multiline_value	tests/config/read.c	/^void test_config_read__multiline_value(void)$/;"	f
test_config_read__number_suffixes	tests/config/read.c	/^void test_config_read__number_suffixes(void)$/;"	f
test_config_read__override_variable	tests/config/read.c	/^void test_config_read__override_variable(void)$/;"	f
test_config_read__prefixes	tests/config/read.c	/^void test_config_read__prefixes(void)$/;"	f
test_config_read__read_git_config_entry	tests/config/read.c	/^void test_config_read__read_git_config_entry(void)$/;"	f
test_config_read__simple_read	tests/config/read.c	/^void test_config_read__simple_read(void)$/;"	f
test_config_read__simple_read_from_specific_level	tests/config/read.c	/^void test_config_read__simple_read_from_specific_level(void)$/;"	f
test_config_read__subsection_header	tests/config/read.c	/^void test_config_read__subsection_header(void)$/;"	f
test_config_read__symbol_headers	tests/config/read.c	/^void test_config_read__symbol_headers(void)$/;"	f
test_config_read__whitespace_not_required_around_assignment	tests/config/read.c	/^void test_config_read__whitespace_not_required_around_assignment(void)$/;"	f
test_config_refresh__cleanup	tests/config/refresh.c	/^void test_config_refresh__cleanup(void)$/;"	f
test_config_refresh__delete_value	tests/config/refresh.c	/^void test_config_refresh__delete_value(void)$/;"	f
test_config_refresh__initialize	tests/config/refresh.c	/^void test_config_refresh__initialize(void)$/;"	f
test_config_refresh__update_value	tests/config/refresh.c	/^void test_config_refresh__update_value(void)$/;"	f
test_config_rename__can_rename	tests/config/rename.c	/^void test_config_rename__can_rename(void)$/;"	f
test_config_rename__cleanup	tests/config/rename.c	/^void test_config_rename__cleanup(void)$/;"	f
test_config_rename__initialize	tests/config/rename.c	/^void test_config_rename__initialize(void)$/;"	f
test_config_rename__prevent_overwrite	tests/config/rename.c	/^void test_config_rename__prevent_overwrite(void)$/;"	f
test_config_rename__require_a_valid_new_name	tests/config/rename.c	/^void test_config_rename__require_a_valid_new_name(void)$/;"	f
test_config_stress__cleanup	tests/config/stress.c	/^void test_config_stress__cleanup(void)$/;"	f
test_config_stress__comments	tests/config/stress.c	/^void test_config_stress__comments(void)$/;"	f
test_config_stress__dont_break_on_invalid_input	tests/config/stress.c	/^void test_config_stress__dont_break_on_invalid_input(void)$/;"	f
test_config_stress__escape_subsection_names	tests/config/stress.c	/^void test_config_stress__escape_subsection_names(void)$/;"	f
test_config_stress__initialize	tests/config/stress.c	/^void test_config_stress__initialize(void)$/;"	f
test_config_stress__trailing_backslash	tests/config/stress.c	/^void test_config_stress__trailing_backslash(void)$/;"	f
test_config_validkeyname__accessing_requires_a_valid_name	tests/config/validkeyname.c	/^void test_config_validkeyname__accessing_requires_a_valid_name(void)$/;"	f
test_config_validkeyname__cleanup	tests/config/validkeyname.c	/^void test_config_validkeyname__cleanup(void)$/;"	f
test_config_validkeyname__initialize	tests/config/validkeyname.c	/^void test_config_validkeyname__initialize(void)$/;"	f
test_config_write__add_value_at_file_with_no_clrf_at_the_end	tests/config/write.c	/^void test_config_write__add_value_at_file_with_no_clrf_at_the_end(void)$/;"	f
test_config_write__add_value_at_specific_level	tests/config/write.c	/^void test_config_write__add_value_at_specific_level(void)$/;"	f
test_config_write__add_value_which_needs_quotes	tests/config/write.c	/^void test_config_write__add_value_which_needs_quotes(void)$/;"	f
test_config_write__can_set_a_value_to_NULL	tests/config/write.c	/^void test_config_write__can_set_a_value_to_NULL(void)$/;"	f
test_config_write__can_set_an_empty_value	tests/config/write.c	/^void test_config_write__can_set_an_empty_value(void)$/;"	f
test_config_write__cleanup	tests/config/write.c	/^void test_config_write__cleanup(void)$/;"	f
test_config_write__delete_inexistent	tests/config/write.c	/^void test_config_write__delete_inexistent(void)$/;"	f
test_config_write__delete_value	tests/config/write.c	/^void test_config_write__delete_value(void)$/;"	f
test_config_write__delete_value_at_specific_level	tests/config/write.c	/^void test_config_write__delete_value_at_specific_level(void)$/;"	f
test_config_write__escape_value	tests/config/write.c	/^void test_config_write__escape_value(void)$/;"	f
test_config_write__initialize	tests/config/write.c	/^void test_config_write__initialize(void)$/;"	f
test_config_write__replace_value	tests/config/write.c	/^void test_config_write__replace_value(void)$/;"	f
test_config_write__updating_a_locked_config_file_returns_ELOCKED	tests/config/write.c	/^void test_config_write__updating_a_locked_config_file_returns_ELOCKED(void)$/;"	f
test_config_write__value_containing_quotes	tests/config/write.c	/^void test_config_write__value_containing_quotes(void)$/;"	f
test_config_write__write_subsection	tests/config/write.c	/^void test_config_write__write_subsection(void)$/;"	f
test_core_bitvec__0	tests/core/bitvec.c	/^void test_core_bitvec__0(void)$/;"	f
test_core_buffer__0	tests/core/buffer.c	/^void test_core_buffer__0(void)$/;"	f
test_core_buffer__1	tests/core/buffer.c	/^void test_core_buffer__1(void)$/;"	f
test_core_buffer__10	tests/core/buffer.c	/^void test_core_buffer__10(void)$/;"	f
test_core_buffer__11	tests/core/buffer.c	/^void test_core_buffer__11(void)$/;"	f
test_core_buffer__2	tests/core/buffer.c	/^void test_core_buffer__2(void)$/;"	f
test_core_buffer__3	tests/core/buffer.c	/^void test_core_buffer__3(void)$/;"	f
test_core_buffer__4	tests/core/buffer.c	/^void test_core_buffer__4(void)$/;"	f
test_core_buffer__5	tests/core/buffer.c	/^void test_core_buffer__5(void)$/;"	f
test_core_buffer__6	tests/core/buffer.c	/^void test_core_buffer__6(void)$/;"	f
test_core_buffer__7	tests/core/buffer.c	/^void test_core_buffer__7(void)$/;"	f
test_core_buffer__8	tests/core/buffer.c	/^void test_core_buffer__8(void)$/;"	f
test_core_buffer__9	tests/core/buffer.c	/^void test_core_buffer__9(void)$/;"	f
test_core_buffer__base64	tests/core/buffer.c	/^void test_core_buffer__base64(void)$/;"	f
test_core_buffer__classify_with_utf8	tests/core/buffer.c	/^void test_core_buffer__classify_with_utf8(void)$/;"	f
test_core_buffer__lf_and_crlf_conversions	tests/core/buffer.c	/^void test_core_buffer__lf_and_crlf_conversions(void)$/;"	f
test_core_buffer__puts_escaped	tests/core/buffer.c	/^void test_core_buffer__puts_escaped(void)$/;"	f
test_core_buffer__rfind_variants	tests/core/buffer.c	/^void test_core_buffer__rfind_variants(void)$/;"	f
test_core_buffer__similarity_metric	tests/core/buffer.c	/^void test_core_buffer__similarity_metric(void)$/;"	f
test_core_buffer__similarity_metric_whitespace	tests/core/buffer.c	/^void test_core_buffer__similarity_metric_whitespace(void)$/;"	f
test_core_buffer__unescape	tests/core/buffer.c	/^void test_core_buffer__unescape(void)$/;"	f
test_core_copy__file	tests/core/copy.c	/^void test_core_copy__file(void)$/;"	f
test_core_copy__file_in_dir	tests/core/copy.c	/^void test_core_copy__file_in_dir(void)$/;"	f
test_core_copy__tree	tests/core/copy.c	/^void test_core_copy__tree(void)$/;"	f
test_core_dirent__dont_traverse_dot	tests/core/dirent.c	/^void test_core_dirent__dont_traverse_dot(void)$/;"	f
test_core_dirent__dont_traverse_empty_folders	tests/core/dirent.c	/^void test_core_dirent__dont_traverse_empty_folders(void)$/;"	f
test_core_dirent__empty_dir	tests/core/dirent.c	/^void test_core_dirent__empty_dir(void)$/;"	f
test_core_dirent__length_limits	tests/core/dirent.c	/^void test_core_dirent__length_limits(void)$/;"	f
test_core_dirent__traverse_slash_terminated_folder	tests/core/dirent.c	/^void test_core_dirent__traverse_slash_terminated_folder(void)$/;"	f
test_core_dirent__traverse_subfolder	tests/core/dirent.c	/^void test_core_dirent__traverse_subfolder(void)$/;"	f
test_core_dirent__traverse_weird_filenames	tests/core/dirent.c	/^void test_core_dirent__traverse_weird_filenames(void)$/;"	f
test_core_env__0	tests/core/env.c	/^void test_core_env__0(void)$/;"	f
test_core_env__1	tests/core/env.c	/^void test_core_env__1(void)$/;"	f
test_core_env__2	tests/core/env.c	/^void test_core_env__2(void)$/;"	f
test_core_env__cleanup	tests/core/env.c	/^void test_core_env__cleanup(void)$/;"	f
test_core_env__initialize	tests/core/env.c	/^void test_core_env__initialize(void)$/;"	f
test_core_errors__new_school	tests/core/errors.c	/^void test_core_errors__new_school(void)$/;"	f
test_core_errors__public_api	tests/core/errors.c	/^void test_core_errors__public_api(void)$/;"	f
test_core_features__0	tests/core/features.c	/^void test_core_features__0(void)$/;"	f
test_core_filebuf__0	tests/core/filebuf.c	/^void test_core_filebuf__0(void)$/;"	f
test_core_filebuf__1	tests/core/filebuf.c	/^void test_core_filebuf__1(void)$/;"	f
test_core_filebuf__2	tests/core/filebuf.c	/^void test_core_filebuf__2(void)$/;"	f
test_core_filebuf__4	tests/core/filebuf.c	/^void test_core_filebuf__4(void)$/;"	f
test_core_filebuf__5	tests/core/filebuf.c	/^void test_core_filebuf__5(void)$/;"	f
test_core_filebuf__umask	tests/core/filebuf.c	/^void test_core_filebuf__umask(void)$/;"	f
test_core_hex__fromhex	tests/core/hex.c	/^void test_core_hex__fromhex(void)$/;"	f
test_core_iconv__cleanup	tests/core/iconv.c	/^void test_core_iconv__cleanup(void)$/;"	f
test_core_iconv__decomposed_to_precomposed	tests/core/iconv.c	/^void test_core_iconv__decomposed_to_precomposed(void)$/;"	f
test_core_iconv__initialize	tests/core/iconv.c	/^void test_core_iconv__initialize(void)$/;"	f
test_core_iconv__precomposed_is_unmodified	tests/core/iconv.c	/^void test_core_iconv__precomposed_is_unmodified(void)$/;"	f
test_core_iconv__unchanged	tests/core/iconv.c	/^void test_core_iconv__unchanged(void)$/;"	f
test_core_mkdir__basic	tests/core/mkdir.c	/^void test_core_mkdir__basic(void)$/;"	f
test_core_mkdir__chmods	tests/core/mkdir.c	/^void test_core_mkdir__chmods(void)$/;"	f
test_core_mkdir__with_base	tests/core/mkdir.c	/^void test_core_mkdir__with_base(void)$/;"	f
test_core_oid__initialize	tests/core/oid.c	/^void test_core_oid__initialize(void)$/;"	f
test_core_oid__ncmp	tests/core/oid.c	/^void test_core_oid__ncmp(void)$/;"	f
test_core_oid__strcmp	tests/core/oid.c	/^void test_core_oid__strcmp(void)$/;"	f
test_core_oid__streq	tests/core/oid.c	/^void test_core_oid__streq(void)$/;"	f
test_core_oidmap__basic	tests/core/oidmap.c	/^void test_core_oidmap__basic(void)$/;"	f
test_core_oidmap__hash_collision	tests/core/oidmap.c	/^void test_core_oidmap__hash_collision(void)$/;"	f
test_core_opts__readwrite	tests/core/opts.c	/^void test_core_opts__readwrite(void)$/;"	f
test_core_path__00_dirname	tests/core/path.c	/^void test_core_path__00_dirname(void)$/;"	f
test_core_path__01_basename	tests/core/path.c	/^void test_core_path__01_basename(void)$/;"	f
test_core_path__02_topdir	tests/core/path.c	/^void test_core_path__02_topdir(void)$/;"	f
test_core_path__05_joins	tests/core/path.c	/^void test_core_path__05_joins(void)$/;"	f
test_core_path__06_long_joins	tests/core/path.c	/^void test_core_path__06_long_joins(void)$/;"	f
test_core_path__07_path_to_dir	tests/core/path.c	/^void test_core_path__07_path_to_dir(void)$/;"	f
test_core_path__08_self_join	tests/core/path.c	/^void test_core_path__08_self_join(void)$/;"	f
test_core_path__09_percent_decode	tests/core/path.c	/^void test_core_path__09_percent_decode(void)$/;"	f
test_core_path__10_fromurl	tests/core/path.c	/^void test_core_path__10_fromurl(void)$/;"	f
test_core_path__11_walkup	tests/core/path.c	/^void test_core_path__11_walkup(void)$/;"	f
test_core_path__11a_walkup_cancel	tests/core/path.c	/^void test_core_path__11a_walkup_cancel(void)$/;"	f
test_core_path__12_offset_to_path_root	tests/core/path.c	/^void test_core_path__12_offset_to_path_root(void)$/;"	f
test_core_path__13_cannot_prettify_a_non_existing_file	tests/core/path.c	/^void test_core_path__13_cannot_prettify_a_non_existing_file(void)$/;"	f
test_core_path__14_apply_relative	tests/core/path.c	/^void test_core_path__14_apply_relative(void)$/;"	f
test_core_path__15_resolve_relative	tests/core/path.c	/^void test_core_path__15_resolve_relative(void)$/;"	f
test_core_pool__0	tests/core/pool.c	/^void test_core_pool__0(void)$/;"	f
test_core_pool__1	tests/core/pool.c	/^void test_core_pool__1(void)$/;"	f
test_core_pool__2	tests/core/pool.c	/^void test_core_pool__2(void)$/;"	f
test_core_pool__free_list	tests/core/pool.c	/^void test_core_pool__free_list(void)$/;"	f
test_core_pool__strndup_limit	tests/core/pool.c	/^void test_core_pool__strndup_limit(void)$/;"	f
test_core_posix__inet_pton	tests/core/posix.c	/^void test_core_posix__inet_pton(void)$/;"	f
test_core_posix__initialize	tests/core/posix.c	/^void test_core_posix__initialize(void)$/;"	f
test_core_pqueue__interleave_inserts_and_pops	tests/core/pqueue.c	/^void test_core_pqueue__interleave_inserts_and_pops(void)$/;"	f
test_core_pqueue__items_are_put_in_order	tests/core/pqueue.c	/^void test_core_pqueue__items_are_put_in_order(void)$/;"	f
test_core_pqueue__max_heap_size	tests/core/pqueue.c	/^void test_core_pqueue__max_heap_size(void)$/;"	f
test_core_rmdir__can_remove_empty_parents	tests/core/rmdir.c	/^void test_core_rmdir__can_remove_empty_parents(void)$/;"	f
test_core_rmdir__can_skip_non_empty_dir	tests/core/rmdir.c	/^void test_core_rmdir__can_skip_non_empty_dir(void)$/;"	f
test_core_rmdir__delete_recursive	tests/core/rmdir.c	/^void test_core_rmdir__delete_recursive(void)$/;"	f
test_core_rmdir__fail_to_delete_non_empty_dir	tests/core/rmdir.c	/^void test_core_rmdir__fail_to_delete_non_empty_dir(void)$/;"	f
test_core_rmdir__initialize	tests/core/rmdir.c	/^void test_core_rmdir__initialize(void)$/;"	f
test_core_sortedcache__in_memory	tests/core/sortedcache.c	/^void test_core_sortedcache__in_memory(void)$/;"	f
test_core_sortedcache__name_only	tests/core/sortedcache.c	/^void test_core_sortedcache__name_only(void)$/;"	f
test_core_sortedcache__on_disk	tests/core/sortedcache.c	/^void test_core_sortedcache__on_disk(void)$/;"	f
test_core_stat__0	tests/core/stat.c	/^void test_core_stat__0(void)$/;"	f
test_core_stat__cleanup	tests/core/stat.c	/^void test_core_stat__cleanup(void)$/;"	f
test_core_stat__initialize	tests/core/stat.c	/^void test_core_stat__initialize(void)$/;"	f
test_core_string__0	tests/core/string.c	/^void test_core_string__0(void)$/;"	f
test_core_string__1	tests/core/string.c	/^void test_core_string__1(void)$/;"	f
test_core_string__2	tests/core/string.c	/^void test_core_string__2(void)$/;"	f
test_core_strmap__0	tests/core/strmap.c	/^void test_core_strmap__0(void)$/;"	f
test_core_strmap__1	tests/core/strmap.c	/^void test_core_strmap__1(void)$/;"	f
test_core_strmap__2	tests/core/strmap.c	/^void test_core_strmap__2(void)$/;"	f
test_core_strmap__3	tests/core/strmap.c	/^void test_core_strmap__3(void)$/;"	f
test_core_strtol__int32	tests/core/strtol.c	/^void test_core_strtol__int32(void)$/;"	f
test_core_strtol__int64	tests/core/strtol.c	/^void test_core_strtol__int64(void)$/;"	f
test_core_vector__0	tests/core/vector.c	/^void test_core_vector__0(void)$/;"	f
test_core_vector__1	tests/core/vector.c	/^void test_core_vector__1(void)$/;"	f
test_core_vector__2	tests/core/vector.c	/^void test_core_vector__2(void)$/;"	f
test_core_vector__3	tests/core/vector.c	/^void test_core_vector__3(void)$/;"	f
test_core_vector__4	tests/core/vector.c	/^void test_core_vector__4(void)$/;"	f
test_core_vector__5	tests/core/vector.c	/^void test_core_vector__5(void)$/;"	f
test_core_vector__remove_matching	tests/core/vector.c	/^void test_core_vector__remove_matching(void)$/;"	f
test_core_zstream__basic	tests/core/zstream.c	/^void test_core_zstream__basic(void)$/;"	f
test_core_zstream__big_data	tests/core/zstream.c	/^void test_core_zstream__big_data(void)$/;"	f
test_core_zstream__buffer	tests/core/zstream.c	/^void test_core_zstream__buffer(void)$/;"	f
test_count	tests/clar.c	/^	size_t test_count;$/;"	m	struct:clar_suite	file:
test_date_date__overflow	tests/date/date.c	/^void test_date_date__overflow(void)$/;"	f
test_diff_blob__binary_data_comparisons	tests/diff/blob.c	/^void test_diff_blob__binary_data_comparisons(void)$/;"	f
test_diff_blob__can_compare_a_binary_blob_and_a_text_blob	tests/diff/blob.c	/^void test_diff_blob__can_compare_a_binary_blob_and_a_text_blob(void)$/;"	f
test_diff_blob__can_compare_against_null_blobs	tests/diff/blob.c	/^void test_diff_blob__can_compare_against_null_blobs(void)$/;"	f
test_diff_blob__can_compare_against_null_blobs_with_patch	tests/diff/blob.c	/^void test_diff_blob__can_compare_against_null_blobs_with_patch(void)$/;"	f
test_diff_blob__can_compare_blob_to_buffer	tests/diff/blob.c	/^void test_diff_blob__can_compare_blob_to_buffer(void)$/;"	f
test_diff_blob__can_compare_blob_to_buffer_with_patch	tests/diff/blob.c	/^void test_diff_blob__can_compare_blob_to_buffer_with_patch(void)$/;"	f
test_diff_blob__can_compare_buffer_to_buffer	tests/diff/blob.c	/^void test_diff_blob__can_compare_buffer_to_buffer(void)$/;"	f
test_diff_blob__can_compare_identical_blobs	tests/diff/blob.c	/^void test_diff_blob__can_compare_identical_blobs(void)$/;"	f
test_diff_blob__can_compare_identical_blobs_with_patch	tests/diff/blob.c	/^void test_diff_blob__can_compare_identical_blobs_with_patch(void)$/;"	f
test_diff_blob__can_compare_text_blobs	tests/diff/blob.c	/^void test_diff_blob__can_compare_text_blobs(void)$/;"	f
test_diff_blob__can_compare_text_blobs_with_patch	tests/diff/blob.c	/^void test_diff_blob__can_compare_text_blobs_with_patch(void)$/;"	f
test_diff_blob__can_compare_two_binary_blobs	tests/diff/blob.c	/^void test_diff_blob__can_compare_two_binary_blobs(void)$/;"	f
test_diff_blob__can_correctly_detect_a_binary_blob_as_binary	tests/diff/blob.c	/^void test_diff_blob__can_correctly_detect_a_binary_blob_as_binary(void)$/;"	f
test_diff_blob__can_correctly_detect_a_textual_blob_as_non_binary	tests/diff/blob.c	/^void test_diff_blob__can_correctly_detect_a_textual_blob_as_non_binary(void)$/;"	f
test_diff_blob__checks_options_version_too_high	tests/diff/blob.c	/^void test_diff_blob__checks_options_version_too_high(void)$/;"	f
test_diff_blob__checks_options_version_too_low	tests/diff/blob.c	/^void test_diff_blob__checks_options_version_too_low(void)$/;"	f
test_diff_blob__cleanup	tests/diff/blob.c	/^void test_diff_blob__cleanup(void)$/;"	f
test_diff_blob__comparing_two_text_blobs_honors_interhunkcontext	tests/diff/blob.c	/^void test_diff_blob__comparing_two_text_blobs_honors_interhunkcontext(void)$/;"	f
test_diff_blob__initialize	tests/diff/blob.c	/^void test_diff_blob__initialize(void)$/;"	f
test_diff_blob__using_path_and_attributes	tests/diff/blob.c	/^void test_diff_blob__using_path_and_attributes(void)$/;"	f
test_diff_diffiter__checks_options_version	tests/diff/diffiter.c	/^void test_diff_diffiter__checks_options_version(void)$/;"	f
test_diff_diffiter__cleanup	tests/diff/diffiter.c	/^void test_diff_diffiter__cleanup(void)$/;"	f
test_diff_diffiter__create	tests/diff/diffiter.c	/^void test_diff_diffiter__create(void)$/;"	f
test_diff_diffiter__initialize	tests/diff/diffiter.c	/^void test_diff_diffiter__initialize(void)$/;"	f
test_diff_diffiter__iterate_all	tests/diff/diffiter.c	/^void test_diff_diffiter__iterate_all(void)$/;"	f
test_diff_diffiter__iterate_and_generate_patch_text	tests/diff/diffiter.c	/^void test_diff_diffiter__iterate_and_generate_patch_text(void)$/;"	f
test_diff_diffiter__iterate_files_1	tests/diff/diffiter.c	/^void test_diff_diffiter__iterate_files_1(void)$/;"	f
test_diff_diffiter__iterate_files_2	tests/diff/diffiter.c	/^void test_diff_diffiter__iterate_files_2(void)$/;"	f
test_diff_diffiter__iterate_files_and_hunks	tests/diff/diffiter.c	/^void test_diff_diffiter__iterate_files_and_hunks(void)$/;"	f
test_diff_diffiter__iterate_randomly_while_saving_state	tests/diff/diffiter.c	/^void test_diff_diffiter__iterate_randomly_while_saving_state(void)$/;"	f
test_diff_diffiter__max_size_threshold	tests/diff/diffiter.c	/^void test_diff_diffiter__max_size_threshold(void)$/;"	f
test_diff_drivers__builtins	tests/diff/drivers.c	/^void test_diff_drivers__builtins(void)$/;"	f
test_diff_drivers__cleanup	tests/diff/drivers.c	/^void test_diff_drivers__cleanup(void)$/;"	f
test_diff_drivers__initialize	tests/diff/drivers.c	/^void test_diff_drivers__initialize(void)$/;"	f
test_diff_drivers__long_lines	tests/diff/drivers.c	/^void test_diff_drivers__long_lines(void)$/;"	f
test_diff_drivers__patterns	tests/diff/drivers.c	/^void test_diff_drivers__patterns(void)$/;"	f
test_diff_index__0	tests/diff/index.c	/^void test_diff_index__0(void)$/;"	f
test_diff_index__1	tests/diff/index.c	/^void test_diff_index__1(void)$/;"	f
test_diff_index__checks_options_version	tests/diff/index.c	/^void test_diff_index__checks_options_version(void)$/;"	f
test_diff_index__cleanup	tests/diff/index.c	/^void test_diff_index__cleanup(void)$/;"	f
test_diff_index__initialize	tests/diff/index.c	/^void test_diff_index__initialize(void)$/;"	f
test_diff_iterator__cleanup	tests/diff/iterator.c	/^void test_diff_iterator__cleanup(void)$/;"	f
test_diff_iterator__index_0	tests/diff/iterator.c	/^void test_diff_iterator__index_0(void)$/;"	f
test_diff_iterator__index_1	tests/diff/iterator.c	/^void test_diff_iterator__index_1(void)$/;"	f
test_diff_iterator__index_handles_icase_range	tests/diff/iterator.c	/^void test_diff_iterator__index_handles_icase_range(void)$/;"	f
test_diff_iterator__index_range	tests/diff/iterator.c	/^void test_diff_iterator__index_range(void)$/;"	f
test_diff_iterator__index_range_empty_0	tests/diff/iterator.c	/^void test_diff_iterator__index_range_empty_0(void)$/;"	f
test_diff_iterator__index_range_empty_1	tests/diff/iterator.c	/^void test_diff_iterator__index_range_empty_1(void)$/;"	f
test_diff_iterator__index_range_empty_2	tests/diff/iterator.c	/^void test_diff_iterator__index_range_empty_2(void)$/;"	f
test_diff_iterator__initialize	tests/diff/iterator.c	/^void test_diff_iterator__initialize(void)$/;"	f
test_diff_iterator__tree_0	tests/diff/iterator.c	/^void test_diff_iterator__tree_0(void)$/;"	f
test_diff_iterator__tree_1	tests/diff/iterator.c	/^void test_diff_iterator__tree_1(void)$/;"	f
test_diff_iterator__tree_2	tests/diff/iterator.c	/^void test_diff_iterator__tree_2(void)$/;"	f
test_diff_iterator__tree_3	tests/diff/iterator.c	/^void test_diff_iterator__tree_3(void)$/;"	f
test_diff_iterator__tree_4	tests/diff/iterator.c	/^void test_diff_iterator__tree_4(void)$/;"	f
test_diff_iterator__tree_4_ranged	tests/diff/iterator.c	/^void test_diff_iterator__tree_4_ranged(void)$/;"	f
test_diff_iterator__tree_handles_icase_range	tests/diff/iterator.c	/^void test_diff_iterator__tree_handles_icase_range(void)$/;"	f
test_diff_iterator__tree_range_empty_0	tests/diff/iterator.c	/^void test_diff_iterator__tree_range_empty_0(void)$/;"	f
test_diff_iterator__tree_range_empty_1	tests/diff/iterator.c	/^void test_diff_iterator__tree_range_empty_1(void)$/;"	f
test_diff_iterator__tree_range_empty_2	tests/diff/iterator.c	/^void test_diff_iterator__tree_range_empty_2(void)$/;"	f
test_diff_iterator__tree_ranged_0	tests/diff/iterator.c	/^void test_diff_iterator__tree_ranged_0(void)$/;"	f
test_diff_iterator__tree_ranged_1	tests/diff/iterator.c	/^void test_diff_iterator__tree_ranged_1(void)$/;"	f
test_diff_iterator__tree_special_functions	tests/diff/iterator.c	/^void test_diff_iterator__tree_special_functions(void)$/;"	f
test_diff_iterator__workdir_0	tests/diff/iterator.c	/^void test_diff_iterator__workdir_0(void)$/;"	f
test_diff_iterator__workdir_1	tests/diff/iterator.c	/^void test_diff_iterator__workdir_1(void)$/;"	f
test_diff_iterator__workdir_1_ranged_0	tests/diff/iterator.c	/^void test_diff_iterator__workdir_1_ranged_0(void)$/;"	f
test_diff_iterator__workdir_1_ranged_1	tests/diff/iterator.c	/^void test_diff_iterator__workdir_1_ranged_1(void)$/;"	f
test_diff_iterator__workdir_1_ranged_3	tests/diff/iterator.c	/^void test_diff_iterator__workdir_1_ranged_3(void)$/;"	f
test_diff_iterator__workdir_1_ranged_4	tests/diff/iterator.c	/^void test_diff_iterator__workdir_1_ranged_4(void)$/;"	f
test_diff_iterator__workdir_1_ranged_5	tests/diff/iterator.c	/^void test_diff_iterator__workdir_1_ranged_5(void)$/;"	f
test_diff_iterator__workdir_1_ranged_empty_0	tests/diff/iterator.c	/^void test_diff_iterator__workdir_1_ranged_empty_0(void)$/;"	f
test_diff_iterator__workdir_1_ranged_empty_1	tests/diff/iterator.c	/^void test_diff_iterator__workdir_1_ranged_empty_1(void)$/;"	f
test_diff_iterator__workdir_1_ranged_empty_2	tests/diff/iterator.c	/^void test_diff_iterator__workdir_1_ranged_empty_2(void)$/;"	f
test_diff_iterator__workdir_builtin_ignores	tests/diff/iterator.c	/^void test_diff_iterator__workdir_builtin_ignores(void)$/;"	f
test_diff_iterator__workdir_handles_icase_range	tests/diff/iterator.c	/^void test_diff_iterator__workdir_handles_icase_range(void)$/;"	f
test_diff_notify__cleanup	tests/diff/notify.c	/^void test_diff_notify__cleanup(void)$/;"	f
test_diff_notify__initialize	tests/diff/notify.c	/^void test_diff_notify__initialize(void)$/;"	f
test_diff_notify__notify_catchall	tests/diff/notify.c	/^void test_diff_notify__notify_catchall(void)$/;"	f
test_diff_notify__notify_catchall_with_empty_pathspecs	tests/diff/notify.c	/^void test_diff_notify__notify_catchall_with_empty_pathspecs(void)$/;"	f
test_diff_notify__notify_cb_can_abort_diff	tests/diff/notify.c	/^void test_diff_notify__notify_cb_can_abort_diff(void)$/;"	f
test_diff_notify__notify_cb_can_be_used_as_filtering_function	tests/diff/notify.c	/^void test_diff_notify__notify_cb_can_be_used_as_filtering_function(void)$/;"	f
test_diff_notify__notify_multiple_pathspec	tests/diff/notify.c	/^void test_diff_notify__notify_multiple_pathspec(void)$/;"	f
test_diff_notify__notify_single_pathspec	tests/diff/notify.c	/^void test_diff_notify__notify_single_pathspec(void)$/;"	f
test_diff_patch__can_cancel_diff_print	tests/diff/patch.c	/^void test_diff_patch__can_cancel_diff_print(void)$/;"	f
test_diff_patch__can_properly_display_the_removal_of_a_file	tests/diff/patch.c	/^void test_diff_patch__can_properly_display_the_removal_of_a_file(void)$/;"	f
test_diff_patch__cleanup	tests/diff/patch.c	/^void test_diff_patch__cleanup(void)$/;"	f
test_diff_patch__config_options	tests/diff/patch.c	/^void test_diff_patch__config_options(void)$/;"	f
test_diff_patch__hunks_have_correct_line_numbers	tests/diff/patch.c	/^void test_diff_patch__hunks_have_correct_line_numbers(void)$/;"	f
test_diff_patch__initialize	tests/diff/patch.c	/^void test_diff_patch__initialize(void)$/;"	f
test_diff_patch__line_counts_with_eofnl	tests/diff/patch.c	/^void test_diff_patch__line_counts_with_eofnl(void)$/;"	f
test_diff_patch__to_string	tests/diff/patch.c	/^void test_diff_patch__to_string(void)$/;"	f
test_diff_pathspec__0	tests/diff/pathspec.c	/^void test_diff_pathspec__0(void)$/;"	f
test_diff_pathspec__cleanup	tests/diff/pathspec.c	/^void test_diff_pathspec__cleanup(void)$/;"	f
test_diff_pathspec__initialize	tests/diff/pathspec.c	/^void test_diff_pathspec__initialize(void)$/;"	f
test_diff_rename__by_config_doesnt_mess_with_whitespace_settings	tests/diff/rename.c	/^void test_diff_rename__by_config_doesnt_mess_with_whitespace_settings(void)$/;"	f
test_diff_rename__can_delete_unmodified_deltas	tests/diff/rename.c	/^void test_diff_rename__can_delete_unmodified_deltas(void)$/;"	f
test_diff_rename__can_find_copy_to_split	tests/diff/rename.c	/^void test_diff_rename__can_find_copy_to_split(void)$/;"	f
test_diff_rename__can_override_thresholds_when_obeying_config	tests/diff/rename.c	/^void test_diff_rename__can_override_thresholds_when_obeying_config(void)$/;"	f
test_diff_rename__can_rename_from_rewrite	tests/diff/rename.c	/^void test_diff_rename__can_rename_from_rewrite(void)$/;"	f
test_diff_rename__case_changes_are_split	tests/diff/rename.c	/^void test_diff_rename__case_changes_are_split(void)$/;"	f
test_diff_rename__checks_options_version	tests/diff/rename.c	/^void test_diff_rename__checks_options_version(void)$/;"	f
test_diff_rename__cleanup	tests/diff/rename.c	/^void test_diff_rename__cleanup(void)$/;"	f
test_diff_rename__file_exchange	tests/diff/rename.c	/^void test_diff_rename__file_exchange(void)$/;"	f
test_diff_rename__file_exchange_three	tests/diff/rename.c	/^void test_diff_rename__file_exchange_three(void)$/;"	f
test_diff_rename__file_partial_exchange	tests/diff/rename.c	/^void test_diff_rename__file_partial_exchange(void)$/;"	f
test_diff_rename__from_deleted_to_split	tests/diff/rename.c	/^void test_diff_rename__from_deleted_to_split(void)$/;"	f
test_diff_rename__handles_small_files	tests/diff/rename.c	/^void test_diff_rename__handles_small_files(void)$/;"	f
test_diff_rename__initialize	tests/diff/rename.c	/^void test_diff_rename__initialize(void)$/;"	f
test_diff_rename__match_oid	tests/diff/rename.c	/^void test_diff_rename__match_oid(void)$/;"	f
test_diff_rename__matches_config_behavior	tests/diff/rename.c	/^void test_diff_rename__matches_config_behavior(void)$/;"	f
test_diff_rename__not_exact_match	tests/diff/rename.c	/^void test_diff_rename__not_exact_match(void)$/;"	f
test_diff_rename__patch	tests/diff/rename.c	/^void test_diff_rename__patch(void)$/;"	f
test_diff_rename__rejected_match_can_match_others	tests/diff/rename.c	/^void test_diff_rename__rejected_match_can_match_others(void)$/;"	f
test_diff_rename__rejected_match_can_match_others_three	tests/diff/rename.c	/^void test_diff_rename__rejected_match_can_match_others_three(void)$/;"	f
test_diff_rename__rejected_match_can_match_others_two	tests/diff/rename.c	/^void test_diff_rename__rejected_match_can_match_others_two(void)$/;"	f
test_diff_rename__rename_and_copy_from_same_source	tests/diff/rename.c	/^void test_diff_rename__rename_and_copy_from_same_source(void)$/;"	f
test_diff_rename__rewrite_on_single_file	tests/diff/rename.c	/^void test_diff_rename__rewrite_on_single_file(void)$/;"	f
test_diff_rename__unmodified_can_be_renamed	tests/diff/rename.c	/^void test_diff_rename__unmodified_can_be_renamed(void)$/;"	f
test_diff_rename__working_directory_changes	tests/diff/rename.c	/^void test_diff_rename__working_directory_changes(void)$/;"	f
test_diff_submodules__cleanup	tests/diff/submodules.c	/^void test_diff_submodules__cleanup(void)$/;"	f
test_diff_submodules__diff_ignore_options	tests/diff/submodules.c	/^void test_diff_submodules__diff_ignore_options(void)$/;"	f
test_diff_submodules__dirty_submodule	tests/diff/submodules.c	/^void test_diff_submodules__dirty_submodule(void)$/;"	f
test_diff_submodules__dirty_submodule_2	tests/diff/submodules.c	/^void test_diff_submodules__dirty_submodule_2(void)$/;"	f
test_diff_submodules__initialize	tests/diff/submodules.c	/^void test_diff_submodules__initialize(void)$/;"	f
test_diff_submodules__invalid_cache	tests/diff/submodules.c	/^void test_diff_submodules__invalid_cache(void)$/;"	f
test_diff_submodules__submod2_head_to_index	tests/diff/submodules.c	/^void test_diff_submodules__submod2_head_to_index(void)$/;"	f
test_diff_submodules__submod2_index_to_wd	tests/diff/submodules.c	/^void test_diff_submodules__submod2_index_to_wd(void)$/;"	f
test_diff_submodules__unmodified_submodule	tests/diff/submodules.c	/^void test_diff_submodules__unmodified_submodule(void)$/;"	f
test_diff_tree__0	tests/diff/tree.c	/^void test_diff_tree__0(void)$/;"	f
test_diff_tree__bare	tests/diff/tree.c	/^void test_diff_tree__bare(void)$/;"	f
test_diff_tree__checks_options_version	tests/diff/tree.c	/^void test_diff_tree__checks_options_version(void)$/;"	f
test_diff_tree__cleanup	tests/diff/tree.c	/^void test_diff_tree__cleanup(void)$/;"	f
test_diff_tree__diff_configs	tests/diff/tree.c	/^void test_diff_tree__diff_configs(void)$/;"	f
test_diff_tree__initialize	tests/diff/tree.c	/^void test_diff_tree__initialize(void)$/;"	f
test_diff_tree__issue_1397	tests/diff/tree.c	/^void test_diff_tree__issue_1397(void)$/;"	f
test_diff_tree__larger_hunks	tests/diff/tree.c	/^void test_diff_tree__larger_hunks(void)$/;"	f
test_diff_tree__merge	tests/diff/tree.c	/^void test_diff_tree__merge(void)$/;"	f
test_diff_tree__options	tests/diff/tree.c	/^void test_diff_tree__options(void)$/;"	f
test_diff_tree__regular_blob_mode_changed_to_executable_file	tests/diff/tree.c	/^void test_diff_tree__regular_blob_mode_changed_to_executable_file(void)$/;"	f
test_diff_tree__symlink_blob_mode_changed_to_regular_file	tests/diff/tree.c	/^void test_diff_tree__symlink_blob_mode_changed_to_regular_file(void)$/;"	f
test_diff_tree__symlink_blob_mode_changed_to_regular_file_as_typechange	tests/diff/tree.c	/^void test_diff_tree__symlink_blob_mode_changed_to_regular_file_as_typechange(void)$/;"	f
test_diff_workdir__can_diff_empty_file	tests/diff/workdir.c	/^void test_diff_workdir__can_diff_empty_file(void)$/;"	f
test_diff_workdir__cannot_diff_against_a_bare_repository	tests/diff/workdir.c	/^void test_diff_workdir__cannot_diff_against_a_bare_repository(void)$/;"	f
test_diff_workdir__checks_options_version	tests/diff/workdir.c	/^void test_diff_workdir__checks_options_version(void)$/;"	f
test_diff_workdir__cleanup	tests/diff/workdir.c	/^void test_diff_workdir__cleanup(void)$/;"	f
test_diff_workdir__eof_newline_changes	tests/diff/workdir.c	/^void test_diff_workdir__eof_newline_changes(void)$/;"	f
test_diff_workdir__filemode_changes	tests/diff/workdir.c	/^void test_diff_workdir__filemode_changes(void)$/;"	f
test_diff_workdir__filemode_changes_with_filemode_false	tests/diff/workdir.c	/^void test_diff_workdir__filemode_changes_with_filemode_false(void)$/;"	f
test_diff_workdir__head_index_and_workdir_all_differ	tests/diff/workdir.c	/^void test_diff_workdir__head_index_and_workdir_all_differ(void)$/;"	f
test_diff_workdir__initialize	tests/diff/workdir.c	/^void test_diff_workdir__initialize(void)$/;"	f
test_diff_workdir__larger_hunks	tests/diff/workdir.c	/^void test_diff_workdir__larger_hunks(void)$/;"	f
test_diff_workdir__patience_diff	tests/diff/workdir.c	/^void test_diff_workdir__patience_diff(void)$/;"	f
test_diff_workdir__submodules	tests/diff/workdir.c	/^void test_diff_workdir__submodules(void)$/;"	f
test_diff_workdir__to_index	tests/diff/workdir.c	/^void test_diff_workdir__to_index(void)$/;"	f
test_diff_workdir__to_index_issue_1397	tests/diff/workdir.c	/^void test_diff_workdir__to_index_issue_1397(void)$/;"	f
test_diff_workdir__to_index_with_assume_unchanged	tests/diff/workdir.c	/^void test_diff_workdir__to_index_with_assume_unchanged(void)$/;"	f
test_diff_workdir__to_index_with_pathspec	tests/diff/workdir.c	/^void test_diff_workdir__to_index_with_pathspec(void)$/;"	f
test_diff_workdir__to_null_tree	tests/diff/workdir.c	/^void test_diff_workdir__to_null_tree(void)$/;"	f
test_diff_workdir__to_tree	tests/diff/workdir.c	/^void test_diff_workdir__to_tree(void)$/;"	f
test_diff_workdir__to_tree_issue_1397	tests/diff/workdir.c	/^void test_diff_workdir__to_tree_issue_1397(void)$/;"	f
test_diff_workdir__untracked_directory_comes_last	tests/diff/workdir.c	/^void test_diff_workdir__untracked_directory_comes_last(void)$/;"	f
test_diff_workdir__untracked_directory_scenarios	tests/diff/workdir.c	/^void test_diff_workdir__untracked_directory_scenarios(void)$/;"	f
test_diff_workdir__untracked_with_bom	tests/diff/workdir.c	/^void test_diff_workdir__untracked_with_bom(void)$/;"	f
test_diff_workdir__with_stale_index	tests/diff/workdir.c	/^void test_diff_workdir__with_stale_index(void)$/;"	f
test_entries	tests/index/tests.c	/^static struct test_entry test_entries[] = {$/;"	v	typeref:struct:test_entry	file:
test_entry	tests/index/tests.c	/^struct test_entry {$/;"	s	file:
test_fetchhead_nonetwork__initialize	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__initialize(void)$/;"	f
test_fetchhead_nonetwork__invalid_description	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__invalid_description(void)$/;"	f
test_fetchhead_nonetwork__invalid_for_merge	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__invalid_for_merge(void)$/;"	f
test_fetchhead_nonetwork__invalid_oid	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__invalid_oid(void)$/;"	f
test_fetchhead_nonetwork__invalid_unterminated_last_line	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__invalid_unterminated_last_line(void)$/;"	f
test_fetchhead_nonetwork__name_missing	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__name_missing(void)$/;"	f
test_fetchhead_nonetwork__nonexistent	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__nonexistent(void)$/;"	f
test_fetchhead_nonetwork__read	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__read(void)$/;"	f
test_fetchhead_nonetwork__read_old_style	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__read_old_style(void)$/;"	f
test_fetchhead_nonetwork__type_missing	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__type_missing(void)$/;"	f
test_fetchhead_nonetwork__write	tests/fetchhead/nonetwork.c	/^void test_fetchhead_nonetwork__write(void)$/;"	f
test_file_contents	tests/merge/workdir/setup.c	/^static bool test_file_contents(const char *filename, const char *expected)$/;"	f	file:
test_filter_blob__all_crlf	tests/filter/blob.c	/^void test_filter_blob__all_crlf(void)$/;"	f
test_filter_blob__cleanup	tests/filter/blob.c	/^void test_filter_blob__cleanup(void)$/;"	f
test_filter_blob__ident	tests/filter/blob.c	/^void test_filter_blob__ident(void)$/;"	f
test_filter_blob__initialize	tests/filter/blob.c	/^void test_filter_blob__initialize(void)$/;"	f
test_filter_blob__sanitizes	tests/filter/blob.c	/^void test_filter_blob__sanitizes(void)$/;"	f
test_filter_crlf__cleanup	tests/filter/crlf.c	/^void test_filter_crlf__cleanup(void)$/;"	f
test_filter_crlf__initialize	tests/filter/crlf.c	/^void test_filter_crlf__initialize(void)$/;"	f
test_filter_crlf__to_odb	tests/filter/crlf.c	/^void test_filter_crlf__to_odb(void)$/;"	f
test_filter_crlf__to_worktree	tests/filter/crlf.c	/^void test_filter_crlf__to_worktree(void)$/;"	f
test_filter_custom__can_register_a_custom_filter_in_the_repository	tests/filter/custom.c	/^void test_filter_custom__can_register_a_custom_filter_in_the_repository(void)$/;"	f
test_filter_custom__cleanup	tests/filter/custom.c	/^void test_filter_custom__cleanup(void)$/;"	f
test_filter_custom__filter_registry_failure_cases	tests/filter/custom.c	/^void test_filter_custom__filter_registry_failure_cases(void)$/;"	f
test_filter_custom__initialize	tests/filter/custom.c	/^void test_filter_custom__initialize(void)$/;"	f
test_filter_custom__order_dependency	tests/filter/custom.c	/^void test_filter_custom__order_dependency(void)$/;"	f
test_filter_custom__to_odb	tests/filter/custom.c	/^void test_filter_custom__to_odb(void)$/;"	f
test_filter_custom__to_workdir	tests/filter/custom.c	/^void test_filter_custom__to_workdir(void)$/;"	f
test_filter_ident__cleanup	tests/filter/ident.c	/^void test_filter_ident__cleanup(void)$/;"	f
test_filter_ident__initialize	tests/filter/ident.c	/^void test_filter_ident__initialize(void)$/;"	f
test_filter_ident__to_odb	tests/filter/ident.c	/^void test_filter_ident__to_odb(void)$/;"	f
test_filter_ident__to_worktree	tests/filter/ident.c	/^void test_filter_ident__to_worktree(void)$/;"	f
test_find_differences	tests/merge/trees/treediff.c	/^static void test_find_differences($/;"	f	file:
test_graph_descendant_of__cleanup	tests/graph/descendant_of.c	/^void test_graph_descendant_of__cleanup(void)$/;"	f
test_graph_descendant_of__initialize	tests/graph/descendant_of.c	/^void test_graph_descendant_of__initialize(void)$/;"	f
test_graph_descendant_of__returns_correct_result	tests/graph/descendant_of.c	/^void test_graph_descendant_of__returns_correct_result(void)$/;"	f
test_id	tests/refs/revparse.c	/^static void test_id($/;"	f	file:
test_id_inrepo	tests/refs/revparse.c	/^static void test_id_inrepo($/;"	f	file:
test_index_addall__callback_filtering	tests/index/addall.c	/^void test_index_addall__callback_filtering(void)$/;"	f
test_index_addall__cleanup	tests/index/addall.c	/^void test_index_addall__cleanup(void)$/;"	f
test_index_addall__initialize	tests/index/addall.c	/^void test_index_addall__initialize(void)$/;"	f
test_index_addall__repo_lifecycle	tests/index/addall.c	/^void test_index_addall__repo_lifecycle(void)$/;"	f
test_index_collision__add	tests/index/collision.c	/^void test_index_collision__add(void)$/;"	f
test_index_collision__add_with_highstage_1	tests/index/collision.c	/^void test_index_collision__add_with_highstage_1(void)$/;"	f
test_index_collision__add_with_highstage_2	tests/index/collision.c	/^void test_index_collision__add_with_highstage_2(void)$/;"	f
test_index_collision__cleanup	tests/index/collision.c	/^void test_index_collision__cleanup(void)$/;"	f
test_index_conflicts__add	tests/index/conflicts.c	/^void test_index_conflicts__add(void)$/;"	f
test_index_conflicts__add_fixes_incorrect_stage	tests/index/conflicts.c	/^void test_index_conflicts__add_fixes_incorrect_stage(void)$/;"	f
test_index_conflicts__cleanup	tests/index/conflicts.c	/^void test_index_conflicts__cleanup(void)$/;"	f
test_index_conflicts__get	tests/index/conflicts.c	/^void test_index_conflicts__get(void)$/;"	f
test_index_conflicts__initialize	tests/index/conflicts.c	/^void test_index_conflicts__initialize(void)$/;"	f
test_index_conflicts__iterate	tests/index/conflicts.c	/^void test_index_conflicts__iterate(void)$/;"	f
test_index_conflicts__moved_to_reuc_on_add	tests/index/conflicts.c	/^void test_index_conflicts__moved_to_reuc_on_add(void)$/;"	f
test_index_conflicts__moved_to_reuc_on_remove	tests/index/conflicts.c	/^void test_index_conflicts__moved_to_reuc_on_remove(void)$/;"	f
test_index_conflicts__partial	tests/index/conflicts.c	/^void test_index_conflicts__partial(void)$/;"	f
test_index_conflicts__remove	tests/index/conflicts.c	/^void test_index_conflicts__remove(void)$/;"	f
test_index_conflicts__remove_all_conflicts	tests/index/conflicts.c	/^void test_index_conflicts__remove_all_conflicts(void)$/;"	f
test_index_crlf__autocrlf_false_no_attrs	tests/index/crlf.c	/^void test_index_crlf__autocrlf_false_no_attrs(void)$/;"	f
test_index_crlf__autocrlf_false_text_auto_attr	tests/index/crlf.c	/^void test_index_crlf__autocrlf_false_text_auto_attr(void)$/;"	f
test_index_crlf__autocrlf_input_no_attrs	tests/index/crlf.c	/^void test_index_crlf__autocrlf_input_no_attrs(void)$/;"	f
test_index_crlf__autocrlf_input_text_auto_attr	tests/index/crlf.c	/^void test_index_crlf__autocrlf_input_text_auto_attr(void)$/;"	f
test_index_crlf__autocrlf_true_no_attrs	tests/index/crlf.c	/^void test_index_crlf__autocrlf_true_no_attrs(void)$/;"	f
test_index_crlf__autocrlf_true_text_auto_attr	tests/index/crlf.c	/^void test_index_crlf__autocrlf_true_text_auto_attr(void)$/;"	f
test_index_crlf__cleanup	tests/index/crlf.c	/^void test_index_crlf__cleanup(void)$/;"	f
test_index_crlf__initialize	tests/index/crlf.c	/^void test_index_crlf__initialize(void)$/;"	f
test_index_filemodes__cleanup	tests/index/filemodes.c	/^void test_index_filemodes__cleanup(void)$/;"	f
test_index_filemodes__initialize	tests/index/filemodes.c	/^void test_index_filemodes__initialize(void)$/;"	f
test_index_filemodes__read	tests/index/filemodes.c	/^void test_index_filemodes__read(void)$/;"	f
test_index_filemodes__trusted	tests/index/filemodes.c	/^void test_index_filemodes__trusted(void)$/;"	f
test_index_filemodes__untrusted	tests/index/filemodes.c	/^void test_index_filemodes__untrusted(void)$/;"	f
test_index_inmemory__can_create_an_inmemory_index	tests/index/inmemory.c	/^void test_index_inmemory__can_create_an_inmemory_index(void)$/;"	f
test_index_inmemory__cannot_add_bypath_to_an_inmemory_index	tests/index/inmemory.c	/^void test_index_inmemory__cannot_add_bypath_to_an_inmemory_index(void)$/;"	f
test_index_names__add	tests/index/names.c	/^void test_index_names__add(void)$/;"	f
test_index_names__cleaned_on_checkout_head	tests/index/names.c	/^void test_index_names__cleaned_on_checkout_head(void)$/;"	f
test_index_names__cleaned_on_checkout_tree	tests/index/names.c	/^void test_index_names__cleaned_on_checkout_tree(void)$/;"	f
test_index_names__cleaned_on_reset_hard	tests/index/names.c	/^void test_index_names__cleaned_on_reset_hard(void)$/;"	f
test_index_names__cleaned_on_reset_mixed	tests/index/names.c	/^void test_index_names__cleaned_on_reset_mixed(void)$/;"	f
test_index_names__cleanup	tests/index/names.c	/^void test_index_names__cleanup(void)$/;"	f
test_index_names__initialize	tests/index/names.c	/^void test_index_names__initialize(void)$/;"	f
test_index_names__retained_on_checkout_index	tests/index/names.c	/^void test_index_names__retained_on_checkout_index(void)$/;"	f
test_index_names__roundtrip	tests/index/names.c	/^void test_index_names__roundtrip(void)$/;"	f
test_index_read_tree__read_write_involution	tests/index/read_tree.c	/^void test_index_read_tree__read_write_involution(void)$/;"	f
test_index_rename__single_file	tests/index/rename.c	/^void test_index_rename__single_file(void)$/;"	f
test_index_reuc__add	tests/index/reuc.c	/^void test_index_reuc__add(void)$/;"	f
test_index_reuc__add_no_ancestor	tests/index/reuc.c	/^void test_index_reuc__add_no_ancestor(void)$/;"	f
test_index_reuc__cleaned_on_checkout_head	tests/index/reuc.c	/^void test_index_reuc__cleaned_on_checkout_head(void)$/;"	f
test_index_reuc__cleaned_on_checkout_tree	tests/index/reuc.c	/^void test_index_reuc__cleaned_on_checkout_tree(void)$/;"	f
test_index_reuc__cleaned_on_reset_hard	tests/index/reuc.c	/^void test_index_reuc__cleaned_on_reset_hard(void)$/;"	f
test_index_reuc__cleaned_on_reset_mixed	tests/index/reuc.c	/^void test_index_reuc__cleaned_on_reset_mixed(void)$/;"	f
test_index_reuc__cleanup	tests/index/reuc.c	/^void test_index_reuc__cleanup(void)$/;"	f
test_index_reuc__ignore_case	tests/index/reuc.c	/^void test_index_reuc__ignore_case(void)$/;"	f
test_index_reuc__initialize	tests/index/reuc.c	/^void test_index_reuc__initialize(void)$/;"	f
test_index_reuc__read_byindex	tests/index/reuc.c	/^void test_index_reuc__read_byindex(void)$/;"	f
test_index_reuc__read_bypath	tests/index/reuc.c	/^void test_index_reuc__read_bypath(void)$/;"	f
test_index_reuc__remove	tests/index/reuc.c	/^void test_index_reuc__remove(void)$/;"	f
test_index_reuc__retained_on_checkout_index	tests/index/reuc.c	/^void test_index_reuc__retained_on_checkout_index(void)$/;"	f
test_index_reuc__retained_on_reset_soft	tests/index/reuc.c	/^void test_index_reuc__retained_on_reset_soft(void)$/;"	f
test_index_reuc__updates_existing	tests/index/reuc.c	/^void test_index_reuc__updates_existing(void)$/;"	f
test_index_reuc__write	tests/index/reuc.c	/^void test_index_reuc__write(void)$/;"	f
test_index_stage__add_always_adds_stage_0	tests/index/stage.c	/^void test_index_stage__add_always_adds_stage_0(void)$/;"	f
test_index_stage__cleanup	tests/index/stage.c	/^void test_index_stage__cleanup(void)$/;"	f
test_index_stage__find_gets_first_stage	tests/index/stage.c	/^void test_index_stage__find_gets_first_stage(void)$/;"	f
test_index_stage__initialize	tests/index/stage.c	/^void test_index_stage__initialize(void)$/;"	f
test_index_tests__add	tests/index/tests.c	/^void test_index_tests__add(void)$/;"	f
test_index_tests__add_bypath_to_a_bare_repository_returns_EBAREPO	tests/index/tests.c	/^void test_index_tests__add_bypath_to_a_bare_repository_returns_EBAREPO(void)$/;"	f
test_index_tests__add_issue_1397	tests/index/tests.c	/^void test_index_tests__add_issue_1397(void)$/;"	f
test_index_tests__corrupted_extension	tests/index/tests.c	/^void test_index_tests__corrupted_extension(void)$/;"	f
test_index_tests__default_test_index	tests/index/tests.c	/^void test_index_tests__default_test_index(void)$/;"	f
test_index_tests__elocked	tests/index/tests.c	/^void test_index_tests__elocked(void)$/;"	f
test_index_tests__empty_index	tests/index/tests.c	/^void test_index_tests__empty_index(void)$/;"	f
test_index_tests__find_in_empty	tests/index/tests.c	/^void test_index_tests__find_in_empty(void)$/;"	f
test_index_tests__find_in_existing	tests/index/tests.c	/^void test_index_tests__find_in_existing(void)$/;"	f
test_index_tests__gitgit_index	tests/index/tests.c	/^void test_index_tests__gitgit_index(void)$/;"	f
test_index_tests__initialize	tests/index/tests.c	/^void test_index_tests__initialize(void)$/;"	f
test_index_tests__preserves_case	tests/index/tests.c	/^void test_index_tests__preserves_case(void)$/;"	f
test_index_tests__reload_from_disk	tests/index/tests.c	/^void test_index_tests__reload_from_disk(void)$/;"	f
test_index_tests__reload_while_ignoring_case	tests/index/tests.c	/^void test_index_tests__reload_while_ignoring_case(void)$/;"	f
test_index_tests__remove_directory	tests/index/tests.c	/^void test_index_tests__remove_directory(void)$/;"	f
test_index_tests__remove_entry	tests/index/tests.c	/^void test_index_tests__remove_entry(void)$/;"	f
test_index_tests__sort0	tests/index/tests.c	/^void test_index_tests__sort0(void)$/;"	f
test_index_tests__sort1	tests/index/tests.c	/^void test_index_tests__sort1(void)$/;"	f
test_index_tests__write	tests/index/tests.c	/^void test_index_tests__write(void)$/;"	f
test_index_tests__write_invalid_filename	tests/index/tests.c	/^void test_index_tests__write_invalid_filename(void)$/;"	f
test_merge_trees_automerge__automerge	tests/merge/trees/automerge.c	/^void test_merge_trees_automerge__automerge(void)$/;"	f
test_merge_trees_automerge__cleanup	tests/merge/trees/automerge.c	/^void test_merge_trees_automerge__cleanup(void)$/;"	f
test_merge_trees_automerge__favor_ours	tests/merge/trees/automerge.c	/^void test_merge_trees_automerge__favor_ours(void)$/;"	f
test_merge_trees_automerge__favor_theirs	tests/merge/trees/automerge.c	/^void test_merge_trees_automerge__favor_theirs(void)$/;"	f
test_merge_trees_automerge__initialize	tests/merge/trees/automerge.c	/^void test_merge_trees_automerge__initialize(void)$/;"	f
test_merge_trees_automerge__unrelated	tests/merge/trees/automerge.c	/^void test_merge_trees_automerge__unrelated(void)$/;"	f
test_merge_trees_commits__automerge	tests/merge/trees/commits.c	/^void test_merge_trees_commits__automerge(void)$/;"	f
test_merge_trees_commits__cleanup	tests/merge/trees/commits.c	/^void test_merge_trees_commits__cleanup(void)$/;"	f
test_merge_trees_commits__df_conflict	tests/merge/trees/commits.c	/^void test_merge_trees_commits__df_conflict(void)$/;"	f
test_merge_trees_commits__initialize	tests/merge/trees/commits.c	/^void test_merge_trees_commits__initialize(void)$/;"	f
test_merge_trees_commits__no_ancestor	tests/merge/trees/commits.c	/^void test_merge_trees_commits__no_ancestor(void)$/;"	f
test_merge_trees_modeconflict__cleanup	tests/merge/trees/modeconflict.c	/^void test_merge_trees_modeconflict__cleanup(void)$/;"	f
test_merge_trees_modeconflict__df_conflict	tests/merge/trees/modeconflict.c	/^void test_merge_trees_modeconflict__df_conflict(void)$/;"	f
test_merge_trees_modeconflict__initialize	tests/merge/trees/modeconflict.c	/^void test_merge_trees_modeconflict__initialize(void)$/;"	f
test_merge_trees_renames__cleanup	tests/merge/trees/renames.c	/^void test_merge_trees_renames__cleanup(void)$/;"	f
test_merge_trees_renames__index	tests/merge/trees/renames.c	/^void test_merge_trees_renames__index(void)$/;"	f
test_merge_trees_renames__initialize	tests/merge/trees/renames.c	/^void test_merge_trees_renames__initialize(void)$/;"	f
test_merge_trees_renames__no_rename_index	tests/merge/trees/renames.c	/^void test_merge_trees_renames__no_rename_index(void)$/;"	f
test_merge_trees_treediff__best_renames	tests/merge/trees/treediff.c	/^void test_merge_trees_treediff__best_renames(void)$/;"	f
test_merge_trees_treediff__cleanup	tests/merge/trees/treediff.c	/^void test_merge_trees_treediff__cleanup(void)$/;"	f
test_merge_trees_treediff__df_conflicts	tests/merge/trees/treediff.c	/^void test_merge_trees_treediff__df_conflicts(void)$/;"	f
test_merge_trees_treediff__initialize	tests/merge/trees/treediff.c	/^void test_merge_trees_treediff__initialize(void)$/;"	f
test_merge_trees_treediff__rename_conflicts	tests/merge/trees/treediff.c	/^void test_merge_trees_treediff__rename_conflicts(void)$/;"	f
test_merge_trees_treediff__simple	tests/merge/trees/treediff.c	/^void test_merge_trees_treediff__simple(void)$/;"	f
test_merge_trees_treediff__strict_renames	tests/merge/trees/treediff.c	/^void test_merge_trees_treediff__strict_renames(void)$/;"	f
test_merge_trees_trivial__10	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__10(void)$/;"	f
test_merge_trees_trivial__11	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__11(void)$/;"	f
test_merge_trees_trivial__13	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__13(void)$/;"	f
test_merge_trees_trivial__14	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__14(void)$/;"	f
test_merge_trees_trivial__2alt	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__2alt(void)$/;"	f
test_merge_trees_trivial__3alt	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__3alt(void)$/;"	f
test_merge_trees_trivial__4	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__4(void)$/;"	f
test_merge_trees_trivial__5alt_1	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__5alt_1(void)$/;"	f
test_merge_trees_trivial__5alt_2	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__5alt_2(void)$/;"	f
test_merge_trees_trivial__6	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__6(void)$/;"	f
test_merge_trees_trivial__7	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__7(void)$/;"	f
test_merge_trees_trivial__8	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__8(void)$/;"	f
test_merge_trees_trivial__9	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__9(void)$/;"	f
test_merge_trees_trivial__cleanup	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__cleanup(void)$/;"	f
test_merge_trees_trivial__initialize	tests/merge/trees/trivial.c	/^void test_merge_trees_trivial__initialize(void)$/;"	f
test_merge_workdir_dirty__affected_dirty_files_disallowed	tests/merge/workdir/dirty.c	/^void test_merge_workdir_dirty__affected_dirty_files_disallowed(void)$/;"	f
test_merge_workdir_dirty__cleanup	tests/merge/workdir/dirty.c	/^void test_merge_workdir_dirty__cleanup(void)$/;"	f
test_merge_workdir_dirty__honors_cache	tests/merge/workdir/dirty.c	/^void test_merge_workdir_dirty__honors_cache(void)$/;"	f
test_merge_workdir_dirty__identical_staged_files_allowed	tests/merge/workdir/dirty.c	/^void test_merge_workdir_dirty__identical_staged_files_allowed(void)$/;"	f
test_merge_workdir_dirty__initialize	tests/merge/workdir/dirty.c	/^void test_merge_workdir_dirty__initialize(void)$/;"	f
test_merge_workdir_dirty__staged_files_in_index_disallowed	tests/merge/workdir/dirty.c	/^void test_merge_workdir_dirty__staged_files_in_index_disallowed(void)$/;"	f
test_merge_workdir_dirty__unaffected_dirty_files_allowed	tests/merge/workdir/dirty.c	/^void test_merge_workdir_dirty__unaffected_dirty_files_allowed(void)$/;"	f
test_merge_workdir_fastforward__cleanup	tests/merge/workdir/fastforward.c	/^void test_merge_workdir_fastforward__cleanup(void)$/;"	f
test_merge_workdir_fastforward__fastforward	tests/merge/workdir/fastforward.c	/^void test_merge_workdir_fastforward__fastforward(void)$/;"	f
test_merge_workdir_fastforward__fastforward_only	tests/merge/workdir/fastforward.c	/^void test_merge_workdir_fastforward__fastforward_only(void)$/;"	f
test_merge_workdir_fastforward__initialize	tests/merge/workdir/fastforward.c	/^void test_merge_workdir_fastforward__initialize(void)$/;"	f
test_merge_workdir_fastforward__no_fastforward	tests/merge/workdir/fastforward.c	/^void test_merge_workdir_fastforward__no_fastforward(void)$/;"	f
test_merge_workdir_fastforward__uptodate	tests/merge/workdir/fastforward.c	/^void test_merge_workdir_fastforward__uptodate(void)$/;"	f
test_merge_workdir_fastforward__uptodate_merging_prev_commit	tests/merge/workdir/fastforward.c	/^void test_merge_workdir_fastforward__uptodate_merging_prev_commit(void)$/;"	f
test_merge_workdir_renames__cleanup	tests/merge/workdir/renames.c	/^void test_merge_workdir_renames__cleanup(void)$/;"	f
test_merge_workdir_renames__initialize	tests/merge/workdir/renames.c	/^void test_merge_workdir_renames__initialize(void)$/;"	f
test_merge_workdir_renames__ours	tests/merge/workdir/renames.c	/^void test_merge_workdir_renames__ours(void)$/;"	f
test_merge_workdir_renames__renames	tests/merge/workdir/renames.c	/^void test_merge_workdir_renames__renames(void)$/;"	f
test_merge_workdir_renames__similar	tests/merge/workdir/renames.c	/^void test_merge_workdir_renames__similar(void)$/;"	f
test_merge_workdir_setup__branches_and_oids_1	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__branches_and_oids_1(void)$/;"	f
test_merge_workdir_setup__branches_and_oids_2	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__branches_and_oids_2(void)$/;"	f
test_merge_workdir_setup__branches_and_oids_3	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__branches_and_oids_3(void)$/;"	f
test_merge_workdir_setup__branches_and_oids_4	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__branches_and_oids_4(void)$/;"	f
test_merge_workdir_setup__cleanup	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__cleanup(void)$/;"	f
test_merge_workdir_setup__head_foreach_nonewline	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__head_foreach_nonewline(void)$/;"	f
test_merge_workdir_setup__head_foreach_octopus	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__head_foreach_octopus(void)$/;"	f
test_merge_workdir_setup__head_foreach_one	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__head_foreach_one(void)$/;"	f
test_merge_workdir_setup__head_invalid_oid	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__head_invalid_oid(void)$/;"	f
test_merge_workdir_setup__head_notfound	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__head_notfound(void)$/;"	f
test_merge_workdir_setup__initialize	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__initialize(void)$/;"	f
test_merge_workdir_setup__no_fastforward	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__no_fastforward(void)$/;"	f
test_merge_workdir_setup__normal_branch_and_remote_tracking_branch	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__normal_branch_and_remote_tracking_branch(void)$/;"	f
test_merge_workdir_setup__one_branch	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__one_branch(void)$/;"	f
test_merge_workdir_setup__one_oid	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__one_oid(void)$/;"	f
test_merge_workdir_setup__pull_one	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__pull_one(void)$/;"	f
test_merge_workdir_setup__pull_three	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__pull_three(void)$/;"	f
test_merge_workdir_setup__pull_two	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__pull_two(void)$/;"	f
test_merge_workdir_setup__remote_tracking_branch_and_normal_branch	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__remote_tracking_branch_and_normal_branch(void)$/;"	f
test_merge_workdir_setup__remote_tracking_one_branch	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__remote_tracking_one_branch(void)$/;"	f
test_merge_workdir_setup__remote_tracking_three_branches	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__remote_tracking_three_branches(void)$/;"	f
test_merge_workdir_setup__remote_tracking_two_branches	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__remote_tracking_two_branches(void)$/;"	f
test_merge_workdir_setup__removed_after_failure	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__removed_after_failure(void)$/;"	f
test_merge_workdir_setup__retained_after_success	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__retained_after_success(void)$/;"	f
test_merge_workdir_setup__three_branches	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__three_branches(void)$/;"	f
test_merge_workdir_setup__three_oids	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__three_oids(void)$/;"	f
test_merge_workdir_setup__three_remotes	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__three_remotes(void)$/;"	f
test_merge_workdir_setup__three_same_branches	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__three_same_branches(void)$/;"	f
test_merge_workdir_setup__three_same_oids	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__three_same_oids(void)$/;"	f
test_merge_workdir_setup__two_branches	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__two_branches(void)$/;"	f
test_merge_workdir_setup__two_remote_tracking_branch_and_two_normal_branches	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__two_remote_tracking_branch_and_two_normal_branches(void)$/;"	f
test_merge_workdir_setup__two_remotes	tests/merge/workdir/setup.c	/^void test_merge_workdir_setup__two_remotes(void)$/;"	f
test_merge_workdir_simple__automerge	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__automerge(void)$/;"	f
test_merge_workdir_simple__automerge_crlf	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__automerge_crlf(void)$/;"	f
test_merge_workdir_simple__binary	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__binary(void)$/;"	f
test_merge_workdir_simple__checkout_ours	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__checkout_ours(void)$/;"	f
test_merge_workdir_simple__cleanup	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__cleanup(void)$/;"	f
test_merge_workdir_simple__diff3	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__diff3(void)$/;"	f
test_merge_workdir_simple__diff3_from_config	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__diff3_from_config(void)$/;"	f
test_merge_workdir_simple__directory_file	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__directory_file(void)$/;"	f
test_merge_workdir_simple__favor_ours	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__favor_ours(void)$/;"	f
test_merge_workdir_simple__favor_theirs	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__favor_theirs(void)$/;"	f
test_merge_workdir_simple__initialize	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__initialize(void)$/;"	f
test_merge_workdir_simple__merge_overrides_config	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__merge_overrides_config(void)$/;"	f
test_merge_workdir_simple__mergefile	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__mergefile(void)$/;"	f
test_merge_workdir_simple__union	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__union(void)$/;"	f
test_merge_workdir_simple__unrelated	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__unrelated(void)$/;"	f
test_merge_workdir_simple__unrelated_with_conflicts	tests/merge/workdir/simple.c	/^void test_merge_workdir_simple__unrelated_with_conflicts(void)$/;"	f
test_merge_workdir_submodules__automerge	tests/merge/workdir/submodules.c	/^void test_merge_workdir_submodules__automerge(void)$/;"	f
test_merge_workdir_submodules__cleanup	tests/merge/workdir/submodules.c	/^void test_merge_workdir_submodules__cleanup(void)$/;"	f
test_merge_workdir_submodules__initialize	tests/merge/workdir/submodules.c	/^void test_merge_workdir_submodules__initialize(void)$/;"	f
test_merge_workdir_submodules__take_changed	tests/merge/workdir/submodules.c	/^void test_merge_workdir_submodules__take_changed(void)$/;"	f
test_merge_workdir_trivial__10	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__10(void)$/;"	f
test_merge_workdir_trivial__11	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__11(void)$/;"	f
test_merge_workdir_trivial__13	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__13(void)$/;"	f
test_merge_workdir_trivial__14	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__14(void)$/;"	f
test_merge_workdir_trivial__2alt	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__2alt(void)$/;"	f
test_merge_workdir_trivial__3alt	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__3alt(void)$/;"	f
test_merge_workdir_trivial__4	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__4(void)$/;"	f
test_merge_workdir_trivial__5alt_1	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__5alt_1(void)$/;"	f
test_merge_workdir_trivial__5alt_2	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__5alt_2(void)$/;"	f
test_merge_workdir_trivial__6	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__6(void)$/;"	f
test_merge_workdir_trivial__7	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__7(void)$/;"	f
test_merge_workdir_trivial__8	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__8(void)$/;"	f
test_merge_workdir_trivial__9	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__9(void)$/;"	f
test_merge_workdir_trivial__cleanup	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__cleanup(void)$/;"	f
test_merge_workdir_trivial__initialize	tests/merge/workdir/trivial.c	/^void test_merge_workdir_trivial__initialize(void)$/;"	f
test_names_expected	tests/diff/rename.c	/^int test_names_expected(const git_diff_delta *delta, float progress, void *p)$/;"	f
test_network_cred__stock_userpass_properly_handles_username_in_url	tests/network/cred.c	/^void test_network_cred__stock_userpass_properly_handles_username_in_url(void)$/;"	f
test_network_cred__stock_userpass_validates_args	tests/network/cred.c	/^void test_network_cred__stock_userpass_validates_args(void)$/;"	f
test_network_cred__stock_userpass_validates_that_method_is_allowed	tests/network/cred.c	/^void test_network_cred__stock_userpass_validates_that_method_is_allowed(void)$/;"	f
test_network_fetchlocal__complete	tests/network/fetchlocal.c	/^void test_network_fetchlocal__complete(void)$/;"	f
test_network_fetchlocal__partial	tests/network/fetchlocal.c	/^void test_network_fetchlocal__partial(void)$/;"	f
test_network_refspecs__parsing	tests/network/refspecs.c	/^void test_network_refspecs__parsing(void)$/;"	f
test_network_remote_createthenload__cleanup	tests/network/remote/createthenload.c	/^void test_network_remote_createthenload__cleanup(void)$/;"	f
test_network_remote_createthenload__initialize	tests/network/remote/createthenload.c	/^void test_network_remote_createthenload__initialize(void)$/;"	f
test_network_remote_createthenload__parsing	tests/network/remote/createthenload.c	/^void test_network_remote_createthenload__parsing(void)$/;"	f
test_network_remote_isvalidname__can_detect_invalid_formats	tests/network/remote/isvalidname.c	/^void test_network_remote_isvalidname__can_detect_invalid_formats(void)$/;"	f
test_network_remote_isvalidname__wont_hopefully_choke_on_valid_formats	tests/network/remote/isvalidname.c	/^void test_network_remote_isvalidname__wont_hopefully_choke_on_valid_formats(void)$/;"	f
test_network_remote_local__cleanup	tests/network/remote/local.c	/^void test_network_remote_local__cleanup(void)$/;"	f
test_network_remote_local__connected	tests/network/remote/local.c	/^void test_network_remote_local__connected(void)$/;"	f
test_network_remote_local__fetch	tests/network/remote/local.c	/^void test_network_remote_local__fetch(void)$/;"	f
test_network_remote_local__fetch_default_reflog_message	tests/network/remote/local.c	/^void test_network_remote_local__fetch_default_reflog_message(void)$/;"	f
test_network_remote_local__initialize	tests/network/remote/local.c	/^void test_network_remote_local__initialize(void)$/;"	f
test_network_remote_local__nested_tags_are_completely_peeled	tests/network/remote/local.c	/^void test_network_remote_local__nested_tags_are_completely_peeled(void)$/;"	f
test_network_remote_local__push_to_bare_remote	tests/network/remote/local.c	/^void test_network_remote_local__push_to_bare_remote(void)$/;"	f
test_network_remote_local__push_to_bare_remote_with_file_url	tests/network/remote/local.c	/^void test_network_remote_local__push_to_bare_remote_with_file_url(void)$/;"	f
test_network_remote_local__push_to_non_bare_remote	tests/network/remote/local.c	/^void test_network_remote_local__push_to_non_bare_remote(void)$/;"	f
test_network_remote_local__reflog	tests/network/remote/local.c	/^void test_network_remote_local__reflog(void)$/;"	f
test_network_remote_local__retrieve_advertised_references	tests/network/remote/local.c	/^void test_network_remote_local__retrieve_advertised_references(void)$/;"	f
test_network_remote_local__retrieve_advertised_references_after_disconnect	tests/network/remote/local.c	/^void test_network_remote_local__retrieve_advertised_references_after_disconnect(void)$/;"	f
test_network_remote_local__retrieve_advertised_references_from_spaced_repository	tests/network/remote/local.c	/^void test_network_remote_local__retrieve_advertised_references_from_spaced_repository(void)$/;"	f
test_network_remote_local__shorthand_fetch_refspec0	tests/network/remote/local.c	/^void test_network_remote_local__shorthand_fetch_refspec0(void)$/;"	f
test_network_remote_local__shorthand_fetch_refspec1	tests/network/remote/local.c	/^void test_network_remote_local__shorthand_fetch_refspec1(void)$/;"	f
test_network_remote_local__tagopt	tests/network/remote/local.c	/^void test_network_remote_local__tagopt(void)$/;"	f
test_network_remote_remote__git_remote_create_with_fetchspec	tests/network/remote/remotes.c	/^void test_network_remote_remote__git_remote_create_with_fetchspec(void)$/;"	f
test_network_remote_remotes__add	tests/network/remote/remotes.c	/^void test_network_remote_remotes__add(void)$/;"	f
test_network_remote_remotes__add_fetchspec	tests/network/remote/remotes.c	/^void test_network_remote_remotes__add_fetchspec(void)$/;"	f
test_network_remote_remotes__add_pushspec	tests/network/remote/remotes.c	/^void test_network_remote_remotes__add_pushspec(void)$/;"	f
test_network_remote_remotes__can_load_with_an_empty_url	tests/network/remote/remotes.c	/^void test_network_remote_remotes__can_load_with_an_empty_url(void)$/;"	f
test_network_remote_remotes__can_load_with_only_an_empty_pushurl	tests/network/remote/remotes.c	/^void test_network_remote_remotes__can_load_with_only_an_empty_pushurl(void)$/;"	f
test_network_remote_remotes__cannot_add_a_nameless_remote	tests/network/remote/remotes.c	/^void test_network_remote_remotes__cannot_add_a_nameless_remote(void)$/;"	f
test_network_remote_remotes__cannot_add_a_remote_with_an_invalid_name	tests/network/remote/remotes.c	/^void test_network_remote_remotes__cannot_add_a_remote_with_an_invalid_name(void)$/;"	f
test_network_remote_remotes__cannot_create_a_remote_which_name_conflicts_with_an_existing_remote	tests/network/remote/remotes.c	/^void test_network_remote_remotes__cannot_create_a_remote_which_name_conflicts_with_an_existing_remote(void)$/;"	f
test_network_remote_remotes__cannot_create_a_remote_which_name_is_invalid	tests/network/remote/remotes.c	/^void test_network_remote_remotes__cannot_create_a_remote_which_name_is_invalid(void)$/;"	f
test_network_remote_remotes__cannot_save_an_inmemory_remote	tests/network/remote/remotes.c	/^void test_network_remote_remotes__cannot_save_an_inmemory_remote(void)$/;"	f
test_network_remote_remotes__check_structure_version	tests/network/remote/remotes.c	/^void test_network_remote_remotes__check_structure_version(void)$/;"	f
test_network_remote_remotes__cleanup	tests/network/remote/remotes.c	/^void test_network_remote_remotes__cleanup(void)$/;"	f
test_network_remote_remotes__dup	tests/network/remote/remotes.c	/^void test_network_remote_remotes__dup(void)$/;"	f
test_network_remote_remotes__error_when_no_push_available	tests/network/remote/remotes.c	/^void test_network_remote_remotes__error_when_no_push_available(void)$/;"	f
test_network_remote_remotes__fnmatch	tests/network/remote/remotes.c	/^void test_network_remote_remotes__fnmatch(void)$/;"	f
test_network_remote_remotes__initialize	tests/network/remote/remotes.c	/^void test_network_remote_remotes__initialize(void)$/;"	f
test_network_remote_remotes__list	tests/network/remote/remotes.c	/^void test_network_remote_remotes__list(void)$/;"	f
test_network_remote_remotes__loading_a_missing_remote_returns_ENOTFOUND	tests/network/remote/remotes.c	/^void test_network_remote_remotes__loading_a_missing_remote_returns_ENOTFOUND(void)$/;"	f
test_network_remote_remotes__loading_with_an_invalid_name_returns_EINVALIDSPEC	tests/network/remote/remotes.c	/^void test_network_remote_remotes__loading_with_an_invalid_name_returns_EINVALIDSPEC(void)$/;"	f
test_network_remote_remotes__missing_refspecs	tests/network/remote/remotes.c	/^void test_network_remote_remotes__missing_refspecs(void)$/;"	f
test_network_remote_remotes__parsing	tests/network/remote/remotes.c	/^void test_network_remote_remotes__parsing(void)$/;"	f
test_network_remote_remotes__parsing_local_path_fails_if_path_not_found	tests/network/remote/remotes.c	/^void test_network_remote_remotes__parsing_local_path_fails_if_path_not_found(void)$/;"	f
test_network_remote_remotes__parsing_ssh_remote	tests/network/remote/remotes.c	/^void test_network_remote_remotes__parsing_ssh_remote(void)$/;"	f
test_network_remote_remotes__pushurl	tests/network/remote/remotes.c	/^void test_network_remote_remotes__pushurl(void)$/;"	f
test_network_remote_remotes__query_refspecs	tests/network/remote/remotes.c	/^void test_network_remote_remotes__query_refspecs(void)$/;"	f
test_network_remote_remotes__refspec_parsing	tests/network/remote/remotes.c	/^void test_network_remote_remotes__refspec_parsing(void)$/;"	f
test_network_remote_remotes__returns_ENOTFOUND_when_neither_url_nor_pushurl	tests/network/remote/remotes.c	/^void test_network_remote_remotes__returns_ENOTFOUND_when_neither_url_nor_pushurl(void)$/;"	f
test_network_remote_remotes__save	tests/network/remote/remotes.c	/^void test_network_remote_remotes__save(void)$/;"	f
test_network_remote_remotes__supported_transport_methods_are_supported	tests/network/remote/remotes.c	/^void test_network_remote_remotes__supported_transport_methods_are_supported(void)$/;"	f
test_network_remote_remotes__tagopt	tests/network/remote/remotes.c	/^void test_network_remote_remotes__tagopt(void)$/;"	f
test_network_remote_remotes__transform	tests/network/remote/remotes.c	/^void test_network_remote_remotes__transform(void)$/;"	f
test_network_remote_remotes__transform_destination_to_source	tests/network/remote/remotes.c	/^void test_network_remote_remotes__transform_destination_to_source(void)$/;"	f
test_network_remote_remotes__unsupported_transport_methods_are_unsupported	tests/network/remote/remotes.c	/^void test_network_remote_remotes__unsupported_transport_methods_are_unsupported(void)$/;"	f
test_network_remote_rename__cannot_overwrite_an_existing_remote	tests/network/remote/rename.c	/^void test_network_remote_rename__cannot_overwrite_an_existing_remote(void)$/;"	f
test_network_remote_rename__cannot_rename_an_inmemory_remote	tests/network/remote/rename.c	/^void test_network_remote_rename__cannot_rename_an_inmemory_remote(void)$/;"	f
test_network_remote_rename__cleanup	tests/network/remote/rename.c	/^void test_network_remote_rename__cleanup(void)$/;"	f
test_network_remote_rename__initialize	tests/network/remote/rename.c	/^void test_network_remote_rename__initialize(void)$/;"	f
test_network_remote_rename__new_name_can_contain_dots	tests/network/remote/rename.c	/^void test_network_remote_rename__new_name_can_contain_dots(void)$/;"	f
test_network_remote_rename__new_name_must_conform_to_reference_naming_conventions	tests/network/remote/rename.c	/^void test_network_remote_rename__new_name_must_conform_to_reference_naming_conventions(void)$/;"	f
test_network_remote_rename__renamed_name_is_persisted	tests/network/remote/rename.c	/^void test_network_remote_rename__renamed_name_is_persisted(void)$/;"	f
test_network_remote_rename__renaming_a_remote_moves_related_configuration_section	tests/network/remote/rename.c	/^void test_network_remote_rename__renaming_a_remote_moves_related_configuration_section(void)$/;"	f
test_network_remote_rename__renaming_a_remote_moves_the_underlying_reference	tests/network/remote/rename.c	/^void test_network_remote_rename__renaming_a_remote_moves_the_underlying_reference(void)$/;"	f
test_network_remote_rename__renaming_a_remote_notifies_of_non_default_fetchrefspec	tests/network/remote/rename.c	/^void test_network_remote_rename__renaming_a_remote_notifies_of_non_default_fetchrefspec(void)$/;"	f
test_network_remote_rename__renaming_a_remote_updates_branch_related_configuration_entries	tests/network/remote/rename.c	/^void test_network_remote_rename__renaming_a_remote_updates_branch_related_configuration_entries(void)$/;"	f
test_network_remote_rename__renaming_a_remote_updates_default_fetchrefspec	tests/network/remote/rename.c	/^void test_network_remote_rename__renaming_a_remote_updates_default_fetchrefspec(void)$/;"	f
test_network_remote_rename__renaming_a_remote_without_a_fetchrefspec_doesnt_create_one	tests/network/remote/rename.c	/^void test_network_remote_rename__renaming_a_remote_without_a_fetchrefspec_doesnt_create_one(void)$/;"	f
test_network_urlparse__cleanup	tests/network/urlparse.c	/^void test_network_urlparse__cleanup(void)$/;"	f
test_network_urlparse__connection_data_cleanup	tests/network/urlparse.c	/^void test_network_urlparse__connection_data_cleanup(void)$/;"	f
test_network_urlparse__connection_data_cross_host_redirect	tests/network/urlparse.c	/^void test_network_urlparse__connection_data_cross_host_redirect(void)$/;"	f
test_network_urlparse__connection_data_http	tests/network/urlparse.c	/^void test_network_urlparse__connection_data_http(void)$/;"	f
test_network_urlparse__connection_data_http_downgrade	tests/network/urlparse.c	/^void test_network_urlparse__connection_data_http_downgrade(void)$/;"	f
test_network_urlparse__connection_data_relative_redirect	tests/network/urlparse.c	/^void test_network_urlparse__connection_data_relative_redirect(void)$/;"	f
test_network_urlparse__connection_data_relative_redirect_ssl	tests/network/urlparse.c	/^void test_network_urlparse__connection_data_relative_redirect_ssl(void)$/;"	f
test_network_urlparse__connection_data_ssl	tests/network/urlparse.c	/^void test_network_urlparse__connection_data_ssl(void)$/;"	f
test_network_urlparse__encoded_password	tests/network/urlparse.c	/^void test_network_urlparse__encoded_password(void)$/;"	f
test_network_urlparse__encoded_username_password	tests/network/urlparse.c	/^void test_network_urlparse__encoded_username_password(void)$/;"	f
test_network_urlparse__initialize	tests/network/urlparse.c	/^void test_network_urlparse__initialize(void)$/;"	f
test_network_urlparse__port	tests/network/urlparse.c	/^void test_network_urlparse__port(void)$/;"	f
test_network_urlparse__trivial	tests/network/urlparse.c	/^void test_network_urlparse__trivial(void)$/;"	f
test_network_urlparse__user	tests/network/urlparse.c	/^void test_network_urlparse__user(void)$/;"	f
test_network_urlparse__user_pass	tests/network/urlparse.c	/^void test_network_urlparse__user_pass(void)$/;"	f
test_network_urlparse__user_pass_port	tests/network/urlparse.c	/^void test_network_urlparse__user_pass_port(void)$/;"	f
test_network_urlparse__user_port	tests/network/urlparse.c	/^void test_network_urlparse__user_port(void)$/;"	f
test_notes_notes__can_cancel_foreach	tests/notes/notes.c	/^void test_notes_notes__can_cancel_foreach(void)$/;"	f
test_notes_notes__can_insert_a_note_in_an_existing_fanout	tests/notes/notes.c	/^void test_notes_notes__can_insert_a_note_in_an_existing_fanout(void)$/;"	f
test_notes_notes__can_insert_a_note_with_a_custom_namespace	tests/notes/notes.c	/^void test_notes_notes__can_insert_a_note_with_a_custom_namespace(void)$/;"	f
test_notes_notes__can_iterate_custom_namespace	tests/notes/notes.c	/^void test_notes_notes__can_iterate_custom_namespace(void)$/;"	f
test_notes_notes__can_iterate_default_namespace	tests/notes/notes.c	/^void test_notes_notes__can_iterate_default_namespace(void)$/;"	f
test_notes_notes__can_read_a_note_in_an_existing_fanout	tests/notes/notes.c	/^void test_notes_notes__can_read_a_note_in_an_existing_fanout(void)$/;"	f
test_notes_notes__can_remove_a_note_in_an_existing_fanout	tests/notes/notes.c	/^void test_notes_notes__can_remove_a_note_in_an_existing_fanout(void)$/;"	f
test_notes_notes__can_retrieve_a_list_of_notes_for_a_given_namespace	tests/notes/notes.c	/^void test_notes_notes__can_retrieve_a_list_of_notes_for_a_given_namespace(void)$/;"	f
test_notes_notes__cleanup	tests/notes/notes.c	/^void test_notes_notes__cleanup(void)$/;"	f
test_notes_notes__creating_a_note_on_a_target_can_overwrite_existing_note	tests/notes/notes.c	/^void test_notes_notes__creating_a_note_on_a_target_can_overwrite_existing_note(void)$/;"	f
test_notes_notes__creating_a_note_on_a_target_which_already_has_one_returns_EEXISTS	tests/notes/notes.c	/^void test_notes_notes__creating_a_note_on_a_target_which_already_has_one_returns_EEXISTS(void)$/;"	f
test_notes_notes__empty_iterate	tests/notes/notes.c	/^void test_notes_notes__empty_iterate(void)$/;"	f
test_notes_notes__initialize	tests/notes/notes.c	/^void test_notes_notes__initialize(void)$/;"	f
test_notes_notes__inserting_a_note_without_passing_a_namespace_uses_the_default_namespace	tests/notes/notes.c	/^void test_notes_notes__inserting_a_note_without_passing_a_namespace_uses_the_default_namespace(void)$/;"	f
test_notes_notes__removing_a_note_which_doesnt_exists_returns_ENOTFOUND	tests/notes/notes.c	/^void test_notes_notes__removing_a_note_which_doesnt_exists_returns_ENOTFOUND(void)$/;"	f
test_notes_notes__retrieving_a_list_of_notes_for_an_unknown_namespace_returns_ENOTFOUND	tests/notes/notes.c	/^void test_notes_notes__retrieving_a_list_of_notes_for_an_unknown_namespace_returns_ENOTFOUND(void)$/;"	f
test_notes_notesref__cleanup	tests/notes/notesref.c	/^void test_notes_notesref__cleanup(void)$/;"	f
test_notes_notesref__config_corenotesref	tests/notes/notesref.c	/^void test_notes_notesref__config_corenotesref(void)$/;"	f
test_notes_notesref__initialize	tests/notes/notesref.c	/^void test_notes_notesref__initialize(void)$/;"	f
test_notify	tests/diff/notify.c	/^static void test_notify($/;"	f	file:
test_number	tests/clar.c	/^	int test_number;$/;"	m	struct:clar_error	file:
test_object	tests/refs/revparse.c	/^static void test_object(const char *spec, const char *expected_oid)$/;"	f	file:
test_object_and_ref	tests/refs/revparse.c	/^static void test_object_and_ref(const char *spec, const char *expected_oid, const char *expected_refname)$/;"	f	file:
test_object_and_ref_inrepo	tests/refs/revparse.c	/^static void test_object_and_ref_inrepo($/;"	f	file:
test_object_blob_filter__cleanup	tests/object/blob/filter.c	/^void test_object_blob_filter__cleanup(void)$/;"	f
test_object_blob_filter__initialize	tests/object/blob/filter.c	/^void test_object_blob_filter__initialize(void)$/;"	f
test_object_blob_filter__stats	tests/object/blob/filter.c	/^void test_object_blob_filter__stats(void)$/;"	f
test_object_blob_filter__to_odb	tests/object/blob/filter.c	/^void test_object_blob_filter__to_odb(void)$/;"	f
test_object_blob_filter__unfiltered	tests/object/blob/filter.c	/^void test_object_blob_filter__unfiltered(void)$/;"	f
test_object_blob_fromchunks__can_create_a_blob_from_a_in_memory_chunk_provider	tests/object/blob/fromchunks.c	/^void test_object_blob_fromchunks__can_create_a_blob_from_a_in_memory_chunk_provider(void)$/;"	f
test_object_blob_fromchunks__can_stop_with_error	tests/object/blob/fromchunks.c	/^void test_object_blob_fromchunks__can_stop_with_error(void)$/;"	f
test_object_blob_fromchunks__cleanup	tests/object/blob/fromchunks.c	/^void test_object_blob_fromchunks__cleanup(void)$/;"	f
test_object_blob_fromchunks__creating_a_blob_from_chunks_honors_the_attributes_directives	tests/object/blob/fromchunks.c	/^void test_object_blob_fromchunks__creating_a_blob_from_chunks_honors_the_attributes_directives(void)$/;"	f
test_object_blob_fromchunks__doesnot_overwrite_an_already_existing_object	tests/object/blob/fromchunks.c	/^void test_object_blob_fromchunks__doesnot_overwrite_an_already_existing_object(void)$/;"	f
test_object_blob_fromchunks__initialize	tests/object/blob/fromchunks.c	/^void test_object_blob_fromchunks__initialize(void)$/;"	f
test_object_blob_write__can_create_a_blob_in_a_bare_repo_from_a_absolute_filepath	tests/object/blob/write.c	/^void test_object_blob_write__can_create_a_blob_in_a_bare_repo_from_a_absolute_filepath(void)$/;"	f
test_object_blob_write__can_create_a_blob_in_a_standard_repo_from_a_absolute_filepath_pointing_outside_of_the_working_directory	tests/object/blob/write.c	/^void test_object_blob_write__can_create_a_blob_in_a_standard_repo_from_a_absolute_filepath_pointing_outside_of_the_working_directory(void)$/;"	f
test_object_blob_write__can_create_a_blob_in_a_standard_repo_from_a_file_located_in_the_working_directory	tests/object/blob/write.c	/^void test_object_blob_write__can_create_a_blob_in_a_standard_repo_from_a_file_located_in_the_working_directory(void)$/;"	f
test_object_blob_write__cleanup	tests/object/blob/write.c	/^void test_object_blob_write__cleanup(void)$/;"	f
test_object_cache__cache_everything	tests/object/cache.c	/^void test_object_cache__cache_everything(void)$/;"	f
test_object_cache__cache_no_blobs	tests/object/cache.c	/^void test_object_cache__cache_no_blobs(void)$/;"	f
test_object_cache__cleanup	tests/object/cache.c	/^void test_object_cache__cleanup(void)$/;"	f
test_object_cache__fast_thread_rush	tests/object/cache.c	/^void test_object_cache__fast_thread_rush(void)$/;"	f
test_object_cache__initialize	tests/object/cache.c	/^void test_object_cache__initialize(void)$/;"	f
test_object_cache__threadmania	tests/object/cache.c	/^void test_object_cache__threadmania(void)$/;"	f
test_object_commit_commitstagedfile__amend_commit	tests/object/commit/commitstagedfile.c	/^void test_object_commit_commitstagedfile__amend_commit(void)$/;"	f
test_object_commit_commitstagedfile__cleanup	tests/object/commit/commitstagedfile.c	/^void test_object_commit_commitstagedfile__cleanup(void)$/;"	f
test_object_commit_commitstagedfile__generate_predictable_object_ids	tests/object/commit/commitstagedfile.c	/^void test_object_commit_commitstagedfile__generate_predictable_object_ids(void)$/;"	f
test_object_commit_commitstagedfile__initialize	tests/object/commit/commitstagedfile.c	/^void test_object_commit_commitstagedfile__initialize(void)$/;"	f
test_object_inrepo	tests/refs/revparse.c	/^static void test_object_inrepo(const char *spec, const char *expected_oid, git_repository *repo)$/;"	f	file:
test_object_lookup__cleanup	tests/object/lookup.c	/^void test_object_lookup__cleanup(void)$/;"	f
test_object_lookup__initialize	tests/object/lookup.c	/^void test_object_lookup__initialize(void)$/;"	f
test_object_lookup__lookup_nonexisting_returns_enotfound	tests/object/lookup.c	/^void test_object_lookup__lookup_nonexisting_returns_enotfound(void)$/;"	f
test_object_lookup__lookup_wrong_type_by_abbreviated_id_returns_enotfound	tests/object/lookup.c	/^void test_object_lookup__lookup_wrong_type_by_abbreviated_id_returns_enotfound(void)$/;"	f
test_object_lookup__lookup_wrong_type_eventually_returns_enotfound	tests/object/lookup.c	/^void test_object_lookup__lookup_wrong_type_eventually_returns_enotfound(void)$/;"	f
test_object_lookup__lookup_wrong_type_returns_enotfound	tests/object/lookup.c	/^void test_object_lookup__lookup_wrong_type_returns_enotfound(void)$/;"	f
test_object_lookupbypath__cleanup	tests/object/lookupbypath.c	/^void test_object_lookupbypath__cleanup(void)$/;"	f
test_object_lookupbypath__errors	tests/object/lookupbypath.c	/^void test_object_lookupbypath__errors(void)$/;"	f
test_object_lookupbypath__from_head_commit	tests/object/lookupbypath.c	/^void test_object_lookupbypath__from_head_commit(void)$/;"	f
test_object_lookupbypath__from_root_tree	tests/object/lookupbypath.c	/^void test_object_lookupbypath__from_root_tree(void)$/;"	f
test_object_lookupbypath__from_subdir_tree	tests/object/lookupbypath.c	/^void test_object_lookupbypath__from_subdir_tree(void)$/;"	f
test_object_lookupbypath__initialize	tests/object/lookupbypath.c	/^void test_object_lookupbypath__initialize(void)$/;"	f
test_object_message__consecutive_blank_lines_at_the_beginning_should_be_removed	tests/object/message.c	/^void test_object_message__consecutive_blank_lines_at_the_beginning_should_be_removed(void)$/;"	f
test_object_message__consecutive_blank_lines_at_the_end_should_be_removed	tests/object/message.c	/^void test_object_message__consecutive_blank_lines_at_the_end_should_be_removed(void)$/;"	f
test_object_message__consecutive_blank_lines_should_be_unified	tests/object/message.c	/^void test_object_message__consecutive_blank_lines_should_be_unified(void)$/;"	f
test_object_message__consecutive_text_lines_should_be_unchanged	tests/object/message.c	/^void test_object_message__consecutive_text_lines_should_be_unchanged(void)$/;"	f
test_object_message__keep_comments	tests/object/message.c	/^void test_object_message__keep_comments(void)$/;"	f
test_object_message__lines_with_intermediate_spaces_should_be_unchanged	tests/object/message.c	/^void test_object_message__lines_with_intermediate_spaces_should_be_unchanged(void)$/;"	f
test_object_message__lines_with_spaces_at_the_beginning_should_be_unchanged	tests/object/message.c	/^void test_object_message__lines_with_spaces_at_the_beginning_should_be_unchanged(void)$/;"	f
test_object_message__long_lines_without_spaces_should_be_unchanged	tests/object/message.c	/^void test_object_message__long_lines_without_spaces_should_be_unchanged(void)$/;"	f
test_object_message__message_prettify	tests/object/message.c	/^void test_object_message__message_prettify(void)$/;"	f
test_object_message__only_consecutive_blank_lines_should_be_completely_removed	tests/object/message.c	/^void test_object_message__only_consecutive_blank_lines_should_be_completely_removed(void)$/;"	f
test_object_message__spaces_with_newline_at_end_should_be_replaced_with_empty_string	tests/object/message.c	/^void test_object_message__spaces_with_newline_at_end_should_be_replaced_with_empty_string(void)$/;"	f
test_object_message__spaces_without_newline_at_end_should_be_replaced_with_empty_string	tests/object/message.c	/^void test_object_message__spaces_without_newline_at_end_should_be_replaced_with_empty_string(void)$/;"	f
test_object_message__strip_comments	tests/object/message.c	/^void test_object_message__strip_comments(void)$/;"	f
test_object_message__text_plus_spaces_ending_with_newline_should_be_cleaned_and_newline_must_remain	tests/object/message.c	/^void test_object_message__text_plus_spaces_ending_with_newline_should_be_cleaned_and_newline_must_remain(void){$/;"	f
test_object_message__text_plus_spaces_without_newline_should_not_show_spaces_and_end_with_newline	tests/object/message.c	/^void test_object_message__text_plus_spaces_without_newline_should_not_show_spaces_and_end_with_newline(void)$/;"	f
test_object_message__text_without_newline_at_end_should_end_with_newline	tests/object/message.c	/^void test_object_message__text_without_newline_at_end_should_end_with_newline(void)$/;"	f
test_object_peel__can_peel_a_commit	tests/object/peel.c	/^void test_object_peel__can_peel_a_commit(void)$/;"	f
test_object_peel__can_peel_a_tag	tests/object/peel.c	/^void test_object_peel__can_peel_a_tag(void)$/;"	f
test_object_peel__cannot_peel_a_blob	tests/object/peel.c	/^void test_object_peel__cannot_peel_a_blob(void)$/;"	f
test_object_peel__cannot_peel_a_tree	tests/object/peel.c	/^void test_object_peel__cannot_peel_a_tree(void)$/;"	f
test_object_peel__cleanup	tests/object/peel.c	/^void test_object_peel__cleanup(void)$/;"	f
test_object_peel__initialize	tests/object/peel.c	/^void test_object_peel__initialize(void)$/;"	f
test_object_peel__peeling_an_object_into_its_own_type_returns_another_instance_of_it	tests/object/peel.c	/^void test_object_peel__peeling_an_object_into_its_own_type_returns_another_instance_of_it(void)$/;"	f
test_object_peel__target_any_object_for_type_change	tests/object/peel.c	/^void test_object_peel__target_any_object_for_type_change(void)$/;"	f
test_object_raw_chars__build_valid_oid_from_raw_bytes	tests/object/raw/chars.c	/^void test_object_raw_chars__build_valid_oid_from_raw_bytes(void)$/;"	f
test_object_raw_chars__find_invalid_chars_in_oid	tests/object/raw/chars.c	/^void test_object_raw_chars__find_invalid_chars_in_oid(void)$/;"	f
test_object_raw_compare__compare_allocfmt_oids	tests/object/raw/compare.c	/^void test_object_raw_compare__compare_allocfmt_oids(void)$/;"	f
test_object_raw_compare__compare_fmt_oids	tests/object/raw/compare.c	/^void test_object_raw_compare__compare_fmt_oids(void)$/;"	f
test_object_raw_compare__compare_pathfmt_oids	tests/object/raw/compare.c	/^void test_object_raw_compare__compare_pathfmt_oids(void)$/;"	f
test_object_raw_compare__succeed_on_copy_oid	tests/object/raw/compare.c	/^void test_object_raw_compare__succeed_on_copy_oid(void)$/;"	f
test_object_raw_compare__succeed_on_oid_comparison_equal	tests/object/raw/compare.c	/^void test_object_raw_compare__succeed_on_oid_comparison_equal(void)$/;"	f
test_object_raw_compare__succeed_on_oid_comparison_greater	tests/object/raw/compare.c	/^void test_object_raw_compare__succeed_on_oid_comparison_greater(void)$/;"	f
test_object_raw_compare__succeed_on_oid_comparison_lesser	tests/object/raw/compare.c	/^void test_object_raw_compare__succeed_on_oid_comparison_lesser(void)$/;"	f
test_object_raw_convert__convert_oid_partially	tests/object/raw/convert.c	/^void test_object_raw_convert__convert_oid_partially(void)$/;"	f
test_object_raw_convert__succeed_on_oid_to_string_conversion	tests/object/raw/convert.c	/^void test_object_raw_convert__succeed_on_oid_to_string_conversion(void)$/;"	f
test_object_raw_convert__succeed_on_oid_to_string_conversion_big	tests/object/raw/convert.c	/^void test_object_raw_convert__succeed_on_oid_to_string_conversion_big(void)$/;"	f
test_object_raw_fromstr__fail_on_invalid_oid_string	tests/object/raw/fromstr.c	/^void test_object_raw_fromstr__fail_on_invalid_oid_string(void)$/;"	f
test_object_raw_fromstr__succeed_on_valid_oid_string	tests/object/raw/fromstr.c	/^void test_object_raw_fromstr__succeed_on_valid_oid_string(void)$/;"	f
test_object_raw_hash__hash_buffer_in_single_call	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_buffer_in_single_call(void)$/;"	f
test_object_raw_hash__hash_by_blocks	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_by_blocks(void)$/;"	f
test_object_raw_hash__hash_commit_object	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_commit_object(void)$/;"	f
test_object_raw_hash__hash_junk_data	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_junk_data(void)$/;"	f
test_object_raw_hash__hash_multi_byte_object	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_multi_byte_object(void)$/;"	f
test_object_raw_hash__hash_one_byte_object	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_one_byte_object(void)$/;"	f
test_object_raw_hash__hash_tag_object	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_tag_object(void)$/;"	f
test_object_raw_hash__hash_tree_object	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_tree_object(void)$/;"	f
test_object_raw_hash__hash_two_byte_object	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_two_byte_object(void)$/;"	f
test_object_raw_hash__hash_vector	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_vector(void)$/;"	f
test_object_raw_hash__hash_zero_length_object	tests/object/raw/hash.c	/^void test_object_raw_hash__hash_zero_length_object(void)$/;"	f
test_object_raw_short__oid_shortener_no_duplicates	tests/object/raw/short.c	/^void test_object_raw_short__oid_shortener_no_duplicates(void)$/;"	f
test_object_raw_short__oid_shortener_stresstest_git_oid_shorten	tests/object/raw/short.c	/^void test_object_raw_short__oid_shortener_stresstest_git_oid_shorten(void)$/;"	f
test_object_raw_short__oid_shortener_too_much_oids	tests/object/raw/short.c	/^void test_object_raw_short__oid_shortener_too_much_oids(void)$/;"	f
test_object_raw_size__validate_oid_size	tests/object/raw/size.c	/^void test_object_raw_size__validate_oid_size(void)$/;"	f
test_object_raw_type2string__check_type_is_loose	tests/object/raw/type2string.c	/^void test_object_raw_type2string__check_type_is_loose(void)$/;"	f
test_object_raw_type2string__convert_string_to_type	tests/object/raw/type2string.c	/^void test_object_raw_type2string__convert_string_to_type(void)$/;"	f
test_object_raw_type2string__convert_type_to_string	tests/object/raw/type2string.c	/^void test_object_raw_type2string__convert_type_to_string(void)$/;"	f
test_object_raw_write__loose_object	tests/object/raw/write.c	/^void test_object_raw_write__loose_object(void)$/;"	f
test_object_raw_write__loose_tag	tests/object/raw/write.c	/^void test_object_raw_write__loose_tag(void)$/;"	f
test_object_raw_write__loose_tree	tests/object/raw/write.c	/^void test_object_raw_write__loose_tree(void)$/;"	f
test_object_raw_write__one_byte	tests/object/raw/write.c	/^void test_object_raw_write__one_byte(void)$/;"	f
test_object_raw_write__several_bytes	tests/object/raw/write.c	/^void test_object_raw_write__several_bytes(void)$/;"	f
test_object_raw_write__two_byte	tests/object/raw/write.c	/^void test_object_raw_write__two_byte(void)$/;"	f
test_object_raw_write__zero_length	tests/object/raw/write.c	/^void test_object_raw_write__zero_length(void)$/;"	f
test_object_tag_list__cleanup	tests/object/tag/list.c	/^void test_object_tag_list__cleanup(void)$/;"	f
test_object_tag_list__initialize	tests/object/tag/list.c	/^void test_object_tag_list__initialize(void)$/;"	f
test_object_tag_list__list_all	tests/object/tag/list.c	/^void test_object_tag_list__list_all(void)$/;"	f
test_object_tag_list__list_by_pattern	tests/object/tag/list.c	/^void test_object_tag_list__list_by_pattern(void)$/;"	f
test_object_tag_peel__can_peel_several_nested_tags_to_a_commit	tests/object/tag/peel.c	/^void test_object_tag_peel__can_peel_several_nested_tags_to_a_commit(void)$/;"	f
test_object_tag_peel__can_peel_to_a_commit	tests/object/tag/peel.c	/^void test_object_tag_peel__can_peel_to_a_commit(void)$/;"	f
test_object_tag_peel__can_peel_to_a_non_commit	tests/object/tag/peel.c	/^void test_object_tag_peel__can_peel_to_a_non_commit(void)$/;"	f
test_object_tag_peel__cleanup	tests/object/tag/peel.c	/^void test_object_tag_peel__cleanup(void)$/;"	f
test_object_tag_peel__initialize	tests/object/tag/peel.c	/^void test_object_tag_peel__initialize(void)$/;"	f
test_object_tag_read__cleanup	tests/object/tag/read.c	/^void test_object_tag_read__cleanup(void)$/;"	f
test_object_tag_read__initialize	tests/object/tag/read.c	/^void test_object_tag_read__initialize(void)$/;"	f
test_object_tag_read__parse	tests/object/tag/read.c	/^void test_object_tag_read__parse(void)$/;"	f
test_object_tag_read__parse_without_message	tests/object/tag/read.c	/^void test_object_tag_read__parse_without_message(void)$/;"	f
test_object_tag_read__parse_without_tagger	tests/object/tag/read.c	/^void test_object_tag_read__parse_without_tagger(void)$/;"	f
test_object_tag_read__without_tagger_nor_message	tests/object/tag/read.c	/^void test_object_tag_read__without_tagger_nor_message(void)$/;"	f
test_object_tag_write__basic	tests/object/tag/write.c	/^void test_object_tag_write__basic(void)$/;"	f
test_object_tag_write__cleanup	tests/object/tag/write.c	/^void test_object_tag_write__cleanup(void)$/;"	f
test_object_tag_write__creating_an_annotation_does_not_create_a_reference	tests/object/tag/write.c	/^void test_object_tag_write__creating_an_annotation_does_not_create_a_reference(void)$/;"	f
test_object_tag_write__creating_an_annotation_stores_the_new_object_in_the_odb	tests/object/tag/write.c	/^void test_object_tag_write__creating_an_annotation_stores_the_new_object_in_the_odb(void)$/;"	f
test_object_tag_write__creating_with_an_invalid_name_returns_EINVALIDSPEC	tests/object/tag/write.c	/^void test_object_tag_write__creating_with_an_invalid_name_returns_EINVALIDSPEC(void)$/;"	f
test_object_tag_write__delete	tests/object/tag/write.c	/^void test_object_tag_write__delete(void)$/;"	f
test_object_tag_write__deleting_with_an_invalid_name_returns_EINVALIDSPEC	tests/object/tag/write.c	/^void test_object_tag_write__deleting_with_an_invalid_name_returns_EINVALIDSPEC(void)$/;"	f
test_object_tag_write__initialize	tests/object/tag/write.c	/^void test_object_tag_write__initialize(void)$/;"	f
test_object_tag_write__lightweight	tests/object/tag/write.c	/^void test_object_tag_write__lightweight(void)$/;"	f
test_object_tag_write__lightweight_over_existing	tests/object/tag/write.c	/^void test_object_tag_write__lightweight_over_existing(void)$/;"	f
test_object_tag_write__overwrite	tests/object/tag/write.c	/^void test_object_tag_write__overwrite(void)$/;"	f
test_object_tag_write__replace	tests/object/tag/write.c	/^void test_object_tag_write__replace(void)$/;"	f
test_object_tree_attributes__ensure_correctness_of_attributes_on_insertion	tests/object/tree/attributes.c	/^void test_object_tree_attributes__ensure_correctness_of_attributes_on_insertion(void)$/;"	f
test_object_tree_attributes__group_writable_tree_entries_created_with_an_antique_git_version_can_still_be_accessed	tests/object/tree/attributes.c	/^void test_object_tree_attributes__group_writable_tree_entries_created_with_an_antique_git_version_can_still_be_accessed(void)$/;"	f
test_object_tree_attributes__normalize_600	tests/object/tree/attributes.c	/^void test_object_tree_attributes__normalize_600(void)$/;"	f
test_object_tree_attributes__normalize_attributes_when_creating_a_tree_from_an_existing_one	tests/object/tree/attributes.c	/^void test_object_tree_attributes__normalize_attributes_when_creating_a_tree_from_an_existing_one(void)$/;"	f
test_object_tree_attributes__treebuilder_reject_invalid_filemode	tests/object/tree/attributes.c	/^void test_object_tree_attributes__treebuilder_reject_invalid_filemode(void)$/;"	f
test_object_tree_duplicateentries__cannot_create_a_duplicate_entry_building_a_tree_from_a_index_with_conflicts	tests/object/tree/duplicateentries.c	/^void test_object_tree_duplicateentries__cannot_create_a_duplicate_entry_building_a_tree_from_a_index_with_conflicts(void)$/;"	f
test_object_tree_duplicateentries__cannot_create_a_duplicate_entry_through_the_treebuilder	tests/object/tree/duplicateentries.c	/^void test_object_tree_duplicateentries__cannot_create_a_duplicate_entry_through_the_treebuilder(void)$/;"	f
test_object_tree_duplicateentries__cleanup	tests/object/tree/duplicateentries.c	/^void test_object_tree_duplicateentries__cleanup(void) {$/;"	f
test_object_tree_duplicateentries__initialize	tests/object/tree/duplicateentries.c	/^void test_object_tree_duplicateentries__initialize(void) {$/;"	f
test_object_tree_frompath__cleanup	tests/object/tree/frompath.c	/^void test_object_tree_frompath__cleanup(void)$/;"	f
test_object_tree_frompath__fail_when_processing_an_invalid_path	tests/object/tree/frompath.c	/^void test_object_tree_frompath__fail_when_processing_an_invalid_path(void)$/;"	f
test_object_tree_frompath__initialize	tests/object/tree/frompath.c	/^void test_object_tree_frompath__initialize(void)$/;"	f
test_object_tree_frompath__retrieve_tree_from_path_to_treeentry	tests/object/tree/frompath.c	/^void test_object_tree_frompath__retrieve_tree_from_path_to_treeentry(void)$/;"	f
test_object_tree_read__cleanup	tests/object/tree/read.c	/^void test_object_tree_read__cleanup(void)$/;"	f
test_object_tree_read__initialize	tests/object/tree/read.c	/^void test_object_tree_read__initialize(void)$/;"	f
test_object_tree_read__loaded	tests/object/tree/read.c	/^void test_object_tree_read__loaded(void)$/;"	f
test_object_tree_read__two	tests/object/tree/read.c	/^void test_object_tree_read__two(void)$/;"	f
test_object_tree_walk__0	tests/object/tree/walk.c	/^void test_object_tree_walk__0(void)$/;"	f
test_object_tree_walk__1	tests/object/tree/walk.c	/^void test_object_tree_walk__1(void)$/;"	f
test_object_tree_walk__2	tests/object/tree/walk.c	/^void test_object_tree_walk__2(void)$/;"	f
test_object_tree_walk__cleanup	tests/object/tree/walk.c	/^void test_object_tree_walk__cleanup(void)$/;"	f
test_object_tree_walk__initialize	tests/object/tree/walk.c	/^void test_object_tree_walk__initialize(void)$/;"	f
test_object_tree_write__cleanup	tests/object/tree/write.c	/^void test_object_tree_write__cleanup(void)$/;"	f
test_object_tree_write__cruel_paths	tests/object/tree/write.c	/^void test_object_tree_write__cruel_paths(void)$/;"	f
test_object_tree_write__filtering	tests/object/tree/write.c	/^void test_object_tree_write__filtering(void)$/;"	f
test_object_tree_write__from_memory	tests/object/tree/write.c	/^void test_object_tree_write__from_memory(void)$/;"	f
test_object_tree_write__initialize	tests/object/tree/write.c	/^void test_object_tree_write__initialize(void)$/;"	f
test_object_tree_write__removing_and_re_adding_in_treebuilder	tests/object/tree/write.c	/^void test_object_tree_write__removing_and_re_adding_in_treebuilder(void)$/;"	f
test_object_tree_write__sorted_subtrees	tests/object/tree/write.c	/^void test_object_tree_write__sorted_subtrees(void)$/;"	f
test_object_tree_write__subtree	tests/object/tree/write.c	/^void test_object_tree_write__subtree(void)$/;"	f
test_odb_alternates__chained	tests/odb/alternates.c	/^void test_odb_alternates__chained(void)$/;"	f
test_odb_alternates__cleanup	tests/odb/alternates.c	/^void test_odb_alternates__cleanup(void)$/;"	f
test_odb_alternates__long_chain	tests/odb/alternates.c	/^void test_odb_alternates__long_chain(void)$/;"	f
test_odb_backend_nonrefreshing__cleanup	tests/odb/backend/nonrefreshing.c	/^void test_odb_backend_nonrefreshing__cleanup(void)$/;"	f
test_odb_backend_nonrefreshing__exists_is_invoked_once_on_failure	tests/odb/backend/nonrefreshing.c	/^void test_odb_backend_nonrefreshing__exists_is_invoked_once_on_failure(void)$/;"	f
test_odb_backend_nonrefreshing__exists_is_invoked_once_on_success	tests/odb/backend/nonrefreshing.c	/^void test_odb_backend_nonrefreshing__exists_is_invoked_once_on_success(void)$/;"	f
test_odb_backend_nonrefreshing__read_is_invoked_once_on_failure	tests/odb/backend/nonrefreshing.c	/^void test_odb_backend_nonrefreshing__read_is_invoked_once_on_failure(void)$/;"	f
test_odb_backend_nonrefreshing__read_is_invoked_once_on_success	tests/odb/backend/nonrefreshing.c	/^void test_odb_backend_nonrefreshing__read_is_invoked_once_on_success(void)$/;"	f
test_odb_backend_nonrefreshing__read_is_invoked_once_when_revparsing_a_full_oid	tests/odb/backend/nonrefreshing.c	/^void test_odb_backend_nonrefreshing__read_is_invoked_once_when_revparsing_a_full_oid(void)$/;"	f
test_odb_backend_nonrefreshing__readheader_is_invoked_once_on_failure	tests/odb/backend/nonrefreshing.c	/^void test_odb_backend_nonrefreshing__readheader_is_invoked_once_on_failure(void)$/;"	f
test_odb_backend_nonrefreshing__readheader_is_invoked_once_on_success	tests/odb/backend/nonrefreshing.c	/^void test_odb_backend_nonrefreshing__readheader_is_invoked_once_on_success(void)$/;"	f
test_odb_backend_nonrefreshing__readprefix_is_invoked_once_on_failure	tests/odb/backend/nonrefreshing.c	/^void test_odb_backend_nonrefreshing__readprefix_is_invoked_once_on_failure(void)$/;"	f
test_odb_backend_nonrefreshing__readprefix_is_invoked_once_on_success	tests/odb/backend/nonrefreshing.c	/^void test_odb_backend_nonrefreshing__readprefix_is_invoked_once_on_success(void)$/;"	f
test_odb_foreach__cleanup	tests/odb/foreach.c	/^void test_odb_foreach__cleanup(void)$/;"	f
test_odb_foreach__foreach	tests/odb/foreach.c	/^void test_odb_foreach__foreach(void)$/;"	f
test_odb_foreach__interrupt_foreach	tests/odb/foreach.c	/^void test_odb_foreach__interrupt_foreach(void)$/;"	f
test_odb_foreach__one_pack	tests/odb/foreach.c	/^void test_odb_foreach__one_pack(void)$/;"	f
test_odb_loose__cleanup	tests/odb/loose.c	/^void test_odb_loose__cleanup(void)$/;"	f
test_odb_loose__exists	tests/odb/loose.c	/^void test_odb_loose__exists(void)$/;"	f
test_odb_loose__initialize	tests/odb/loose.c	/^void test_odb_loose__initialize(void)$/;"	f
test_odb_loose__permissions_readwrite	tests/odb/loose.c	/^void test_odb_loose__permissions_readwrite(void)$/;"	f
test_odb_loose__permissions_standard	tests/odb/loose.c	/^void test_odb_loose__permissions_standard(void)$/;"	f
test_odb_loose__simple_reads	tests/odb/loose.c	/^void test_odb_loose__simple_reads(void)$/;"	f
test_odb_loose_permissions_readonly	tests/odb/loose.c	/^void test_odb_loose_permissions_readonly(void)$/;"	f
test_odb_mixed__cleanup	tests/odb/mixed.c	/^void test_odb_mixed__cleanup(void)$/;"	f
test_odb_mixed__dup_oid	tests/odb/mixed.c	/^void test_odb_mixed__dup_oid(void) {$/;"	f
test_odb_mixed__dup_oid_prefix_0	tests/odb/mixed.c	/^void test_odb_mixed__dup_oid_prefix_0(void) {$/;"	f
test_odb_mixed__initialize	tests/odb/mixed.c	/^void test_odb_mixed__initialize(void)$/;"	f
test_odb_packed__cleanup	tests/odb/packed.c	/^void test_odb_packed__cleanup(void)$/;"	f
test_odb_packed__initialize	tests/odb/packed.c	/^void test_odb_packed__initialize(void)$/;"	f
test_odb_packed__mass_read	tests/odb/packed.c	/^void test_odb_packed__mass_read(void)$/;"	f
test_odb_packed__read_header_0	tests/odb/packed.c	/^void test_odb_packed__read_header_0(void)$/;"	f
test_odb_packed__read_header_1	tests/odb/packed.c	/^void test_odb_packed__read_header_1(void)$/;"	f
test_odb_packed_one__cleanup	tests/odb/packed_one.c	/^void test_odb_packed_one__cleanup(void)$/;"	f
test_odb_packed_one__initialize	tests/odb/packed_one.c	/^void test_odb_packed_one__initialize(void)$/;"	f
test_odb_packed_one__mass_read	tests/odb/packed_one.c	/^void test_odb_packed_one__mass_read(void)$/;"	f
test_odb_packed_one__read_header_0	tests/odb/packed_one.c	/^void test_odb_packed_one__read_header_0(void)$/;"	f
test_odb_sorting__alternate_backends_sorting	tests/odb/sorting.c	/^void test_odb_sorting__alternate_backends_sorting(void)$/;"	f
test_odb_sorting__basic_backends_sorting	tests/odb/sorting.c	/^void test_odb_sorting__basic_backends_sorting(void)$/;"	f
test_odb_sorting__cleanup	tests/odb/sorting.c	/^void test_odb_sorting__cleanup(void)$/;"	f
test_odb_sorting__initialize	tests/odb/sorting.c	/^void test_odb_sorting__initialize(void)$/;"	f
test_odb_streamwrite__can_accept_chunks	tests/odb/streamwrite.c	/^void test_odb_streamwrite__can_accept_chunks(void)$/;"	f
test_odb_streamwrite__can_detect_additional_bytes	tests/odb/streamwrite.c	/^void test_odb_streamwrite__can_detect_additional_bytes(void)$/;"	f
test_odb_streamwrite__can_detect_missing_bytes	tests/odb/streamwrite.c	/^void test_odb_streamwrite__can_detect_missing_bytes(void)$/;"	f
test_odb_streamwrite__cleanup	tests/odb/streamwrite.c	/^void test_odb_streamwrite__cleanup(void)$/;"	f
test_odb_streamwrite__initialize	tests/odb/streamwrite.c	/^void test_odb_streamwrite__initialize(void)$/;"	f
test_online_clone__assembla_style	tests/online/clone.c	/^void test_online_clone__assembla_style(void)$/;"	f
test_online_clone__bitbucket_style	tests/online/clone.c	/^void test_online_clone__bitbucket_style(void)$/;"	f
test_online_clone__can_cancel	tests/online/clone.c	/^void test_online_clone__can_cancel(void)$/;"	f
test_online_clone__can_checkout_a_cloned_repo	tests/online/clone.c	/^void test_online_clone__can_checkout_a_cloned_repo(void)$/;"	f
test_online_clone__cleanup	tests/online/clone.c	/^void test_online_clone__cleanup(void)$/;"	f
test_online_clone__clone_into	tests/online/clone.c	/^void test_online_clone__clone_into(void)$/;"	f
test_online_clone__cred_callback_failure_return_code_is_tunnelled	tests/online/clone.c	/^void test_online_clone__cred_callback_failure_return_code_is_tunnelled(void)$/;"	f
test_online_clone__credentials	tests/online/clone.c	/^void test_online_clone__credentials(void)$/;"	f
test_online_clone__custom_remote_callbacks	tests/online/clone.c	/^void test_online_clone__custom_remote_callbacks(void)$/;"	f
test_online_clone__empty_repository	tests/online/clone.c	/^void test_online_clone__empty_repository(void)$/;"	f
test_online_clone__initialize	tests/online/clone.c	/^void test_online_clone__initialize(void)$/;"	f
test_online_clone__network_bare	tests/online/clone.c	/^void test_online_clone__network_bare(void)$/;"	f
test_online_clone__network_full	tests/online/clone.c	/^void test_online_clone__network_full(void)$/;"	f
test_online_fetch__can_cancel	tests/online/fetch.c	/^void test_online_fetch__can_cancel(void)$/;"	f
test_online_fetch__cleanup	tests/online/fetch.c	/^void test_online_fetch__cleanup(void)$/;"	f
test_online_fetch__default_git	tests/online/fetch.c	/^void test_online_fetch__default_git(void)$/;"	f
test_online_fetch__default_http	tests/online/fetch.c	/^void test_online_fetch__default_http(void)$/;"	f
test_online_fetch__default_https	tests/online/fetch.c	/^void test_online_fetch__default_https(void)$/;"	f
test_online_fetch__doesnt_retrieve_a_pack_when_the_repository_is_up_to_date	tests/online/fetch.c	/^void test_online_fetch__doesnt_retrieve_a_pack_when_the_repository_is_up_to_date(void)$/;"	f
test_online_fetch__fetch_twice	tests/online/fetch.c	/^void test_online_fetch__fetch_twice(void)$/;"	f
test_online_fetch__initialize	tests/online/fetch.c	/^void test_online_fetch__initialize(void)$/;"	f
test_online_fetch__ls_disconnected	tests/online/fetch.c	/^void test_online_fetch__ls_disconnected(void)$/;"	f
test_online_fetch__no_tags_git	tests/online/fetch.c	/^void test_online_fetch__no_tags_git(void)$/;"	f
test_online_fetch__no_tags_http	tests/online/fetch.c	/^void test_online_fetch__no_tags_http(void)$/;"	f
test_online_fetchhead__cleanup	tests/online/fetchhead.c	/^void test_online_fetchhead__cleanup(void)$/;"	f
test_online_fetchhead__explicit_spec	tests/online/fetchhead.c	/^void test_online_fetchhead__explicit_spec(void)$/;"	f
test_online_fetchhead__initialize	tests/online/fetchhead.c	/^void test_online_fetchhead__initialize(void)$/;"	f
test_online_fetchhead__no_merges	tests/online/fetchhead.c	/^void test_online_fetchhead__no_merges(void)$/;"	f
test_online_fetchhead__wildcard_spec	tests/online/fetchhead.c	/^void test_online_fetchhead__wildcard_spec(void)$/;"	f
test_online_push__b1	tests/online/push.c	/^void test_online_push__b1(void)$/;"	f
test_online_push__b2	tests/online/push.c	/^void test_online_push__b2(void)$/;"	f
test_online_push__b3	tests/online/push.c	/^void test_online_push__b3(void)$/;"	f
test_online_push__b4	tests/online/push.c	/^void test_online_push__b4(void)$/;"	f
test_online_push__b5	tests/online/push.c	/^void test_online_push__b5(void)$/;"	f
test_online_push__b5_cancel	tests/online/push.c	/^void test_online_push__b5_cancel(void)$/;"	f
test_online_push__bad_refspecs	tests/online/push.c	/^void test_online_push__bad_refspecs(void)$/;"	f
test_online_push__cleanup	tests/online/push.c	/^void test_online_push__cleanup(void)$/;"	f
test_online_push__delete	tests/online/push.c	/^void test_online_push__delete(void)$/;"	f
test_online_push__expressions	tests/online/push.c	/^void test_online_push__expressions(void)$/;"	f
test_online_push__fast_fwd	tests/online/push.c	/^void test_online_push__fast_fwd(void)$/;"	f
test_online_push__force	tests/online/push.c	/^void test_online_push__force(void)$/;"	f
test_online_push__implicit_tgt	tests/online/push.c	/^void test_online_push__implicit_tgt(void)$/;"	f
test_online_push__initialize	tests/online/push.c	/^void test_online_push__initialize(void)$/;"	f
test_online_push__multi	tests/online/push.c	/^void test_online_push__multi(void)$/;"	f
test_online_push__noop	tests/online/push.c	/^void test_online_push__noop(void)$/;"	f
test_online_push__notes	tests/online/push.c	/^void test_online_push__notes(void)$/;"	f
test_online_push__tag_blob	tests/online/push.c	/^void test_online_push__tag_blob(void)$/;"	f
test_online_push__tag_commit	tests/online/push.c	/^void test_online_push__tag_commit(void)$/;"	f
test_online_push__tag_lightweight	tests/online/push.c	/^void test_online_push__tag_lightweight(void)$/;"	f
test_online_push__tag_to_tag	tests/online/push.c	/^void test_online_push__tag_to_tag(void)$/;"	f
test_online_push__tag_tree	tests/online/push.c	/^void test_online_push__tag_tree(void)$/;"	f
test_pack_indexer__fix_thin	tests/pack/indexer.c	/^void test_pack_indexer__fix_thin(void)$/;"	f
test_pack_indexer__out_of_order	tests/pack/indexer.c	/^void test_pack_indexer__out_of_order(void)$/;"	f
test_pack_packbuilder__cleanup	tests/pack/packbuilder.c	/^void test_pack_packbuilder__cleanup(void)$/;"	f
test_pack_packbuilder__create_pack	tests/pack/packbuilder.c	/^void test_pack_packbuilder__create_pack(void)$/;"	f
test_pack_packbuilder__foreach	tests/pack/packbuilder.c	/^void test_pack_packbuilder__foreach(void)$/;"	f
test_pack_packbuilder__foreach_with_cancel	tests/pack/packbuilder.c	/^void test_pack_packbuilder__foreach_with_cancel(void)$/;"	f
test_pack_packbuilder__get_hash	tests/pack/packbuilder.c	/^void test_pack_packbuilder__get_hash(void)$/;"	f
test_pack_packbuilder__initialize	tests/pack/packbuilder.c	/^void test_pack_packbuilder__initialize(void)$/;"	f
test_pack_packbuilder__permissions_readonly	tests/pack/packbuilder.c	/^void test_pack_packbuilder__permissions_readonly(void)$/;"	f
test_pack_packbuilder__permissions_readwrite	tests/pack/packbuilder.c	/^void test_pack_packbuilder__permissions_readwrite(void)$/;"	f
test_pack_packbuilder__permissions_standard	tests/pack/packbuilder.c	/^void test_pack_packbuilder__permissions_standard(void)$/;"	f
test_rangelike	tests/refs/revparse.c	/^static void test_rangelike(const char *rangelike,$/;"	f	file:
test_read_object	tests/odb/loose.c	/^static void test_read_object(object_data *data)$/;"	f	file:
test_reflog	tests/repo/head.c	/^static void test_reflog(git_repository *repo, size_t idx,$/;"	f	file:
test_refs_branches_create__can_create_a_local_branch	tests/refs/branches/create.c	/^void test_refs_branches_create__can_create_a_local_branch(void)$/;"	f
test_refs_branches_create__can_force_create_over_an_existing_branch	tests/refs/branches/create.c	/^void test_refs_branches_create__can_force_create_over_an_existing_branch(void)$/;"	f
test_refs_branches_create__can_not_create_a_branch_if_its_name_collide_with_an_existing_one	tests/refs/branches/create.c	/^void test_refs_branches_create__can_not_create_a_branch_if_its_name_collide_with_an_existing_one(void)$/;"	f
test_refs_branches_create__cannot_force_create_over_current_branch	tests/refs/branches/create.c	/^void test_refs_branches_create__cannot_force_create_over_current_branch(void)$/;"	f
test_refs_branches_create__cleanup	tests/refs/branches/create.c	/^void test_refs_branches_create__cleanup(void)$/;"	f
test_refs_branches_create__creating_a_branch_with_an_invalid_name_returns_EINVALIDSPEC	tests/refs/branches/create.c	/^void test_refs_branches_create__creating_a_branch_with_an_invalid_name_returns_EINVALIDSPEC(void)$/;"	f
test_refs_branches_create__creation_creates_new_reflog	tests/refs/branches/create.c	/^void test_refs_branches_create__creation_creates_new_reflog(void)$/;"	f
test_refs_branches_create__default_reflog_message	tests/refs/branches/create.c	/^void test_refs_branches_create__default_reflog_message(void)$/;"	f
test_refs_branches_create__initialize	tests/refs/branches/create.c	/^void test_refs_branches_create__initialize(void)$/;"	f
test_refs_branches_delete__can_delete_a_branch_even_if_HEAD_is_missing	tests/refs/branches/delete.c	/^void test_refs_branches_delete__can_delete_a_branch_even_if_HEAD_is_missing(void)$/;"	f
test_refs_branches_delete__can_delete_a_branch_pointed_at_by_detached_HEAD	tests/refs/branches/delete.c	/^void test_refs_branches_delete__can_delete_a_branch_pointed_at_by_detached_HEAD(void)$/;"	f
test_refs_branches_delete__can_delete_a_branch_when_HEAD_is_unborn	tests/refs/branches/delete.c	/^void test_refs_branches_delete__can_delete_a_branch_when_HEAD_is_unborn(void)$/;"	f
test_refs_branches_delete__can_delete_a_local_branch	tests/refs/branches/delete.c	/^void test_refs_branches_delete__can_delete_a_local_branch(void)$/;"	f
test_refs_branches_delete__can_delete_a_remote_branch	tests/refs/branches/delete.c	/^void test_refs_branches_delete__can_delete_a_remote_branch(void)$/;"	f
test_refs_branches_delete__can_not_delete_a_branch_pointed_at_by_HEAD	tests/refs/branches/delete.c	/^void test_refs_branches_delete__can_not_delete_a_branch_pointed_at_by_HEAD(void)$/;"	f
test_refs_branches_delete__cleanup	tests/refs/branches/delete.c	/^void test_refs_branches_delete__cleanup(void)$/;"	f
test_refs_branches_delete__deleting_a_branch_removes_related_configuration_data	tests/refs/branches/delete.c	/^void test_refs_branches_delete__deleting_a_branch_removes_related_configuration_data(void)$/;"	f
test_refs_branches_delete__initialize	tests/refs/branches/delete.c	/^void test_refs_branches_delete__initialize(void)$/;"	f
test_refs_branches_delete__removes_reflog	tests/refs/branches/delete.c	/^void test_refs_branches_delete__removes_reflog(void)$/;"	f
test_refs_branches_ishead__can_properly_handle_missing_HEAD	tests/refs/branches/ishead.c	/^void test_refs_branches_ishead__can_properly_handle_missing_HEAD(void)$/;"	f
test_refs_branches_ishead__can_properly_handle_unborn_HEAD	tests/refs/branches/ishead.c	/^void test_refs_branches_ishead__can_properly_handle_unborn_HEAD(void)$/;"	f
test_refs_branches_ishead__can_tell_if_a_branch_is_not_pointed_at_by_HEAD	tests/refs/branches/ishead.c	/^void test_refs_branches_ishead__can_tell_if_a_branch_is_not_pointed_at_by_HEAD(void)$/;"	f
test_refs_branches_ishead__can_tell_if_a_branch_is_pointed_at_by_HEAD	tests/refs/branches/ishead.c	/^void test_refs_branches_ishead__can_tell_if_a_branch_is_pointed_at_by_HEAD(void)$/;"	f
test_refs_branches_ishead__cleanup	tests/refs/branches/ishead.c	/^void test_refs_branches_ishead__cleanup(void)$/;"	f
test_refs_branches_ishead__initialize	tests/refs/branches/ishead.c	/^void test_refs_branches_ishead__initialize(void)$/;"	f
test_refs_branches_ishead__only_direct_references_are_considered	tests/refs/branches/ishead.c	/^void test_refs_branches_ishead__only_direct_references_are_considered(void)$/;"	f
test_refs_branches_ishead__wont_be_fooled_by_a_non_branch	tests/refs/branches/ishead.c	/^void test_refs_branches_ishead__wont_be_fooled_by_a_non_branch(void)$/;"	f
test_refs_branches_iterator__cleanup	tests/refs/branches/iterator.c	/^void test_refs_branches_iterator__cleanup(void)$/;"	f
test_refs_branches_iterator__initialize	tests/refs/branches/iterator.c	/^void test_refs_branches_iterator__initialize(void)$/;"	f
test_refs_branches_iterator__mix_of_packed_and_loose	tests/refs/branches/iterator.c	/^void test_refs_branches_iterator__mix_of_packed_and_loose(void)$/;"	f
test_refs_branches_iterator__retrieve_all_branches	tests/refs/branches/iterator.c	/^void test_refs_branches_iterator__retrieve_all_branches(void)$/;"	f
test_refs_branches_iterator__retrieve_local_branches	tests/refs/branches/iterator.c	/^void test_refs_branches_iterator__retrieve_local_branches(void)$/;"	f
test_refs_branches_iterator__retrieve_remote_branches	tests/refs/branches/iterator.c	/^void test_refs_branches_iterator__retrieve_remote_branches(void)$/;"	f
test_refs_branches_iterator__retrieve_remote_symbolic_HEAD_when_present	tests/refs/branches/iterator.c	/^void test_refs_branches_iterator__retrieve_remote_symbolic_HEAD_when_present(void)$/;"	f
test_refs_branches_lookup__can_retrieve_a_local_branch	tests/refs/branches/lookup.c	/^void test_refs_branches_lookup__can_retrieve_a_local_branch(void)$/;"	f
test_refs_branches_lookup__can_retrieve_a_remote_tracking_branch	tests/refs/branches/lookup.c	/^void test_refs_branches_lookup__can_retrieve_a_remote_tracking_branch(void)$/;"	f
test_refs_branches_lookup__cleanup	tests/refs/branches/lookup.c	/^void test_refs_branches_lookup__cleanup(void)$/;"	f
test_refs_branches_lookup__initialize	tests/refs/branches/lookup.c	/^void test_refs_branches_lookup__initialize(void)$/;"	f
test_refs_branches_lookup__trying_to_retrieve_a_branch_with_an_invalid_name_returns_EINVALIDSPEC	tests/refs/branches/lookup.c	/^void test_refs_branches_lookup__trying_to_retrieve_a_branch_with_an_invalid_name_returns_EINVALIDSPEC(void)$/;"	f
test_refs_branches_lookup__trying_to_retrieve_an_unknown_branch_returns_ENOTFOUND	tests/refs/branches/lookup.c	/^void test_refs_branches_lookup__trying_to_retrieve_an_unknown_branch_returns_ENOTFOUND(void)$/;"	f
test_refs_branches_move__can_force_move_over_an_existing_branch	tests/refs/branches/move.c	/^void test_refs_branches_move__can_force_move_over_an_existing_branch(void)$/;"	f
test_refs_branches_move__can_move_a_local_branch	tests/refs/branches/move.c	/^void test_refs_branches_move__can_move_a_local_branch(void)$/;"	f
test_refs_branches_move__can_move_a_local_branch_to_a_different_namespace	tests/refs/branches/move.c	/^void test_refs_branches_move__can_move_a_local_branch_to_a_different_namespace(void)$/;"	f
test_refs_branches_move__can_move_a_local_branch_to_a_partially_colliding_namespace	tests/refs/branches/move.c	/^void test_refs_branches_move__can_move_a_local_branch_to_a_partially_colliding_namespace(void)$/;"	f
test_refs_branches_move__can_not_move_a_branch_if_its_destination_name_collide_with_an_existing_one	tests/refs/branches/move.c	/^void test_refs_branches_move__can_not_move_a_branch_if_its_destination_name_collide_with_an_existing_one(void)$/;"	f
test_refs_branches_move__can_not_move_a_non_branch	tests/refs/branches/move.c	/^void test_refs_branches_move__can_not_move_a_non_branch(void)$/;"	f
test_refs_branches_move__cleanup	tests/refs/branches/move.c	/^void test_refs_branches_move__cleanup(void)$/;"	f
test_refs_branches_move__default_reflog_message	tests/refs/branches/move.c	/^void test_refs_branches_move__default_reflog_message(void)$/;"	f
test_refs_branches_move__initialize	tests/refs/branches/move.c	/^void test_refs_branches_move__initialize(void)$/;"	f
test_refs_branches_move__moving_a_branch_moves_related_configuration_data	tests/refs/branches/move.c	/^void test_refs_branches_move__moving_a_branch_moves_related_configuration_data(void)$/;"	f
test_refs_branches_move__moving_a_branch_with_an_invalid_name_returns_EINVALIDSPEC	tests/refs/branches/move.c	/^void test_refs_branches_move__moving_a_branch_with_an_invalid_name_returns_EINVALIDSPEC(void)$/;"	f
test_refs_branches_move__moving_the_branch_pointed_at_by_HEAD_updates_HEAD	tests/refs/branches/move.c	/^void test_refs_branches_move__moving_the_branch_pointed_at_by_HEAD_updates_HEAD(void)$/;"	f
test_refs_branches_move__updates_the_reflog	tests/refs/branches/move.c	/^void test_refs_branches_move__updates_the_reflog(void)$/;"	f
test_refs_branches_name__can_get_local_branch_name	tests/refs/branches/name.c	/^void test_refs_branches_name__can_get_local_branch_name(void)$/;"	f
test_refs_branches_name__can_get_remote_branch_name	tests/refs/branches/name.c	/^void test_refs_branches_name__can_get_remote_branch_name(void)$/;"	f
test_refs_branches_name__cleanup	tests/refs/branches/name.c	/^void test_refs_branches_name__cleanup(void)$/;"	f
test_refs_branches_name__error_when_ref_is_no_branch	tests/refs/branches/name.c	/^void test_refs_branches_name__error_when_ref_is_no_branch(void)$/;"	f
test_refs_branches_name__initialize	tests/refs/branches/name.c	/^void test_refs_branches_name__initialize(void)$/;"	f
test_refs_branches_remote__ambiguous_remote_returns_error	tests/refs/branches/remote.c	/^void test_refs_branches_remote__ambiguous_remote_returns_error(void)$/;"	f
test_refs_branches_remote__can_get_remote_for_branch	tests/refs/branches/remote.c	/^void test_refs_branches_remote__can_get_remote_for_branch(void)$/;"	f
test_refs_branches_remote__cleanup	tests/refs/branches/remote.c	/^void test_refs_branches_remote__cleanup(void)$/;"	f
test_refs_branches_remote__initialize	tests/refs/branches/remote.c	/^void test_refs_branches_remote__initialize(void)$/;"	f
test_refs_branches_remote__local_remote_returns_error	tests/refs/branches/remote.c	/^void test_refs_branches_remote__local_remote_returns_error(void)$/;"	f
test_refs_branches_remote__no_matching_remote_returns_error	tests/refs/branches/remote.c	/^void test_refs_branches_remote__no_matching_remote_returns_error(void)$/;"	f
test_refs_branches_upstream__can_retrieve_the_local_upstream_reference_of_a_local_branch	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__can_retrieve_the_local_upstream_reference_of_a_local_branch(void)$/;"	f
test_refs_branches_upstream__can_retrieve_the_remote_tracking_reference_of_a_local_branch	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__can_retrieve_the_remote_tracking_reference_of_a_local_branch(void)$/;"	f
test_refs_branches_upstream__cannot_retrieve_a_remote_upstream_reference_from_a_non_branch	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__cannot_retrieve_a_remote_upstream_reference_from_a_non_branch(void)$/;"	f
test_refs_branches_upstream__cleanup	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__cleanup(void)$/;"	f
test_refs_branches_upstream__initialize	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__initialize(void)$/;"	f
test_refs_branches_upstream__retrieve_a_remote_tracking_reference_from_a_branch_with_no_remote_returns_GIT_ENOTFOUND	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__retrieve_a_remote_tracking_reference_from_a_branch_with_no_remote_returns_GIT_ENOTFOUND(void)$/;"	f
test_refs_branches_upstream__set_unset_upstream	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__set_unset_upstream(void)$/;"	f
test_refs_branches_upstream__trying_to_retrieve_a_remote_tracking_reference_from_a_branch_with_no_fetchspec_returns_GIT_ENOTFOUND	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__trying_to_retrieve_a_remote_tracking_reference_from_a_branch_with_no_fetchspec_returns_GIT_ENOTFOUND(void)$/;"	f
test_refs_branches_upstream__trying_to_retrieve_a_remote_tracking_reference_from_a_plain_local_branch_returns_GIT_ENOTFOUND	tests/refs/branches/upstream.c	/^void test_refs_branches_upstream__trying_to_retrieve_a_remote_tracking_reference_from_a_plain_local_branch_returns_GIT_ENOTFOUND(void)$/;"	f
test_refs_branches_upstreamname__can_retrieve_the_local_upstream_reference_name_of_a_local_branch	tests/refs/branches/upstreamname.c	/^void test_refs_branches_upstreamname__can_retrieve_the_local_upstream_reference_name_of_a_local_branch(void)$/;"	f
test_refs_branches_upstreamname__can_retrieve_the_remote_tracking_reference_name_of_a_local_branch	tests/refs/branches/upstreamname.c	/^void test_refs_branches_upstreamname__can_retrieve_the_remote_tracking_reference_name_of_a_local_branch(void)$/;"	f
test_refs_branches_upstreamname__cleanup	tests/refs/branches/upstreamname.c	/^void test_refs_branches_upstreamname__cleanup(void)$/;"	f
test_refs_branches_upstreamname__initialize	tests/refs/branches/upstreamname.c	/^void test_refs_branches_upstreamname__initialize(void)$/;"	f
test_refs_crashes__double_free	tests/refs/crashes.c	/^void test_refs_crashes__double_free(void)$/;"	f
test_refs_create__cleanup	tests/refs/create.c	/^void test_refs_create__cleanup(void)$/;"	f
test_refs_create__creating_a_reference_with_an_invalid_name_returns_EINVALIDSPEC	tests/refs/create.c	/^void test_refs_create__creating_a_reference_with_an_invalid_name_returns_EINVALIDSPEC(void)$/;"	f
test_refs_create__deep_symbolic	tests/refs/create.c	/^void test_refs_create__deep_symbolic(void)$/;"	f
test_refs_create__initialize	tests/refs/create.c	/^void test_refs_create__initialize(void)$/;"	f
test_refs_create__oid	tests/refs/create.c	/^void test_refs_create__oid(void)$/;"	f
test_refs_create__oid_unknown	tests/refs/create.c	/^void test_refs_create__oid_unknown(void)$/;"	f
test_refs_create__propagate_eexists	tests/refs/create.c	/^void test_refs_create__propagate_eexists(void)$/;"	f
test_refs_create__symbolic	tests/refs/create.c	/^void test_refs_create__symbolic(void)$/;"	f
test_refs_createwithlog__cleanup	tests/refs/createwithlog.c	/^void test_refs_createwithlog__cleanup(void)$/;"	f
test_refs_createwithlog__creating_a_direct_reference_adds_a_reflog_entry	tests/refs/createwithlog.c	/^void test_refs_createwithlog__creating_a_direct_reference_adds_a_reflog_entry(void)$/;"	f
test_refs_createwithlog__initialize	tests/refs/createwithlog.c	/^void test_refs_createwithlog__initialize(void)$/;"	f
test_refs_delete__cleanup	tests/refs/delete.c	/^void test_refs_delete__cleanup(void)$/;"	f
test_refs_delete__initialize	tests/refs/delete.c	/^void test_refs_delete__initialize(void)$/;"	f
test_refs_delete__packed_loose	tests/refs/delete.c	/^void test_refs_delete__packed_loose(void)$/;"	f
test_refs_delete__packed_only	tests/refs/delete.c	/^void test_refs_delete__packed_only(void)$/;"	f
test_refs_delete__remove	tests/refs/delete.c	/^void test_refs_delete__remove(void)$/;"	f
test_refs_foreachglob__can_cancel	tests/refs/foreachglob.c	/^void test_refs_foreachglob__can_cancel(void)$/;"	f
test_refs_foreachglob__cleanup	tests/refs/foreachglob.c	/^void test_refs_foreachglob__cleanup(void)$/;"	f
test_refs_foreachglob__initialize	tests/refs/foreachglob.c	/^void test_refs_foreachglob__initialize(void)$/;"	f
test_refs_foreachglob__retrieve_all_refs	tests/refs/foreachglob.c	/^void test_refs_foreachglob__retrieve_all_refs(void)$/;"	f
test_refs_foreachglob__retrieve_local_branches	tests/refs/foreachglob.c	/^void test_refs_foreachglob__retrieve_local_branches(void)$/;"	f
test_refs_foreachglob__retrieve_partially_named_references	tests/refs/foreachglob.c	/^void test_refs_foreachglob__retrieve_partially_named_references(void)$/;"	f
test_refs_foreachglob__retrieve_remote_branches	tests/refs/foreachglob.c	/^void test_refs_foreachglob__retrieve_remote_branches(void)$/;"	f
test_refs_isvalidname__can_detect_invalid_formats	tests/refs/isvalidname.c	/^void test_refs_isvalidname__can_detect_invalid_formats(void)$/;"	f
test_refs_isvalidname__wont_hopefully_choke_on_valid_formats	tests/refs/isvalidname.c	/^void test_refs_isvalidname__wont_hopefully_choke_on_valid_formats(void)$/;"	f
test_refs_iterator__cleanup	tests/refs/iterator.c	/^void test_refs_iterator__cleanup(void)$/;"	f
test_refs_iterator__empty	tests/refs/iterator.c	/^void test_refs_iterator__empty(void)$/;"	f
test_refs_iterator__foreach	tests/refs/iterator.c	/^void test_refs_iterator__foreach(void)$/;"	f
test_refs_iterator__foreach_can_cancel	tests/refs/iterator.c	/^void test_refs_iterator__foreach_can_cancel(void)$/;"	f
test_refs_iterator__foreach_name	tests/refs/iterator.c	/^void test_refs_iterator__foreach_name(void)$/;"	f
test_refs_iterator__foreach_name_can_cancel	tests/refs/iterator.c	/^void test_refs_iterator__foreach_name_can_cancel(void)$/;"	f
test_refs_iterator__initialize	tests/refs/iterator.c	/^void test_refs_iterator__initialize(void)$/;"	f
test_refs_iterator__list	tests/refs/iterator.c	/^void test_refs_iterator__list(void)$/;"	f
test_refs_list__all	tests/refs/list.c	/^void test_refs_list__all(void)$/;"	f
test_refs_list__cleanup	tests/refs/list.c	/^void test_refs_list__cleanup(void)$/;"	f
test_refs_list__do_not_retrieve_references_which_name_end_with_a_lock_extension	tests/refs/list.c	/^void test_refs_list__do_not_retrieve_references_which_name_end_with_a_lock_extension(void)$/;"	f
test_refs_list__initialize	tests/refs/list.c	/^void test_refs_list__initialize(void)$/;"	f
test_refs_listall__from_repository_opened_through_gitdir_path	tests/refs/listall.c	/^void test_refs_listall__from_repository_opened_through_gitdir_path(void)$/;"	f
test_refs_listall__from_repository_opened_through_workdir_path	tests/refs/listall.c	/^void test_refs_listall__from_repository_opened_through_workdir_path(void)$/;"	f
test_refs_listall__from_repository_with_no_trailing_newline	tests/refs/listall.c	/^void test_refs_listall__from_repository_with_no_trailing_newline(void)$/;"	f
test_refs_lookup__cleanup	tests/refs/lookup.c	/^void test_refs_lookup__cleanup(void)$/;"	f
test_refs_lookup__initialize	tests/refs/lookup.c	/^void test_refs_lookup__initialize(void)$/;"	f
test_refs_lookup__invalid_name	tests/refs/lookup.c	/^void test_refs_lookup__invalid_name(void)$/;"	f
test_refs_lookup__namespace	tests/refs/lookup.c	/^void test_refs_lookup__namespace(void)$/;"	f
test_refs_lookup__oid	tests/refs/lookup.c	/^void test_refs_lookup__oid(void)$/;"	f
test_refs_lookup__with_resolve	tests/refs/lookup.c	/^void test_refs_lookup__with_resolve(void)$/;"	f
test_refs_normalize__buffer_has_to_be_big_enough_to_hold_the_normalized_version	tests/refs/normalize.c	/^void test_refs_normalize__buffer_has_to_be_big_enough_to_hold_the_normalized_version(void)$/;"	f
test_refs_normalize__can_normalize_a_direct_reference_name	tests/refs/normalize.c	/^void test_refs_normalize__can_normalize_a_direct_reference_name(void)$/;"	f
test_refs_normalize__cannot_normalize_any_direct_reference_name	tests/refs/normalize.c	/^void test_refs_normalize__cannot_normalize_any_direct_reference_name(void)$/;"	f
test_refs_normalize__jgit_suite	tests/refs/normalize.c	/^void test_refs_normalize__jgit_suite(void)$/;"	f
test_refs_normalize__refspec_pattern	tests/refs/normalize.c	/^void test_refs_normalize__refspec_pattern(void)$/;"	f
test_refs_normalize__symbolic	tests/refs/normalize.c	/^void test_refs_normalize__symbolic(void)$/;"	f
test_refs_overwrite__cleanup	tests/refs/overwrite.c	/^void test_refs_overwrite__cleanup(void)$/;"	f
test_refs_overwrite__initialize	tests/refs/overwrite.c	/^void test_refs_overwrite__initialize(void)$/;"	f
test_refs_overwrite__object_id	tests/refs/overwrite.c	/^void test_refs_overwrite__object_id(void)$/;"	f
test_refs_overwrite__object_id_with_symbolic	tests/refs/overwrite.c	/^void test_refs_overwrite__object_id_with_symbolic(void)$/;"	f
test_refs_overwrite__symbolic	tests/refs/overwrite.c	/^void test_refs_overwrite__symbolic(void)$/;"	f
test_refs_overwrite__symbolic_with_object_id	tests/refs/overwrite.c	/^void test_refs_overwrite__symbolic_with_object_id(void)$/;"	f
test_refs_pack__cleanup	tests/refs/pack.c	/^void test_refs_pack__cleanup(void)$/;"	f
test_refs_pack__empty	tests/refs/pack.c	/^void test_refs_pack__empty(void)$/;"	f
test_refs_pack__initialize	tests/refs/pack.c	/^void test_refs_pack__initialize(void)$/;"	f
test_refs_pack__loose	tests/refs/pack.c	/^void test_refs_pack__loose(void)$/;"	f
test_refs_pack__symbolic	tests/refs/pack.c	/^void test_refs_pack__symbolic(void)$/;"	f
test_refs_peel__can_peel_a_branch	tests/refs/peel.c	/^void test_refs_peel__can_peel_a_branch(void)$/;"	f
test_refs_peel__can_peel_a_symbolic_reference	tests/refs/peel.c	/^void test_refs_peel__can_peel_a_symbolic_reference(void)$/;"	f
test_refs_peel__can_peel_a_tag	tests/refs/peel.c	/^void test_refs_peel__can_peel_a_tag(void)$/;"	f
test_refs_peel__can_peel_fully_peeled_packed_refs	tests/refs/peel.c	/^void test_refs_peel__can_peel_fully_peeled_packed_refs(void)$/;"	f
test_refs_peel__can_peel_into_any_non_tag_object	tests/refs/peel.c	/^void test_refs_peel__can_peel_into_any_non_tag_object(void)$/;"	f
test_refs_peel__cannot_peel_into_a_non_existing_target	tests/refs/peel.c	/^void test_refs_peel__cannot_peel_into_a_non_existing_target(void)$/;"	f
test_refs_peel__cleanup	tests/refs/peel.c	/^void test_refs_peel__cleanup(void)$/;"	f
test_refs_peel__initialize	tests/refs/peel.c	/^void test_refs_peel__initialize(void)$/;"	f
test_refs_races__cleanup	tests/refs/races.c	/^void test_refs_races__cleanup(void)$/;"	f
test_refs_races__create_matching	tests/refs/races.c	/^void test_refs_races__create_matching(void)$/;"	f
test_refs_races__delete	tests/refs/races.c	/^void test_refs_races__delete(void)$/;"	f
test_refs_races__initialize	tests/refs/races.c	/^void test_refs_races__initialize(void)$/;"	f
test_refs_races__switch_oid_to_symbolic	tests/refs/races.c	/^void test_refs_races__switch_oid_to_symbolic(void)$/;"	f
test_refs_races__switch_symbolic_to_oid	tests/refs/races.c	/^void test_refs_races__switch_symbolic_to_oid(void)$/;"	f
test_refs_races__symbolic_create_matching	tests/refs/races.c	/^void test_refs_races__symbolic_create_matching(void)$/;"	f
test_refs_read__can_determine_if_a_reference_is_a_local_branch	tests/refs/read.c	/^void test_refs_read__can_determine_if_a_reference_is_a_local_branch(void)$/;"	f
test_refs_read__can_determine_if_a_reference_is_a_note	tests/refs/read.c	/^void test_refs_read__can_determine_if_a_reference_is_a_note(void)$/;"	f
test_refs_read__can_determine_if_a_reference_is_a_tag	tests/refs/read.c	/^void test_refs_read__can_determine_if_a_reference_is_a_tag(void)$/;"	f
test_refs_read__chomped	tests/refs/read.c	/^void test_refs_read__chomped(void)$/;"	f
test_refs_read__cleanup	tests/refs/read.c	/^void test_refs_read__cleanup(void)$/;"	f
test_refs_read__head_then_master	tests/refs/read.c	/^void test_refs_read__head_then_master(void)$/;"	f
test_refs_read__initialize	tests/refs/read.c	/^void test_refs_read__initialize(void)$/;"	f
test_refs_read__invalid_name_returns_EINVALIDSPEC	tests/refs/read.c	/^void test_refs_read__invalid_name_returns_EINVALIDSPEC(void)$/;"	f
test_refs_read__loose_first	tests/refs/read.c	/^void test_refs_read__loose_first(void)$/;"	f
test_refs_read__loose_tag	tests/refs/read.c	/^void test_refs_read__loose_tag(void)$/;"	f
test_refs_read__master_then_head	tests/refs/read.c	/^void test_refs_read__master_then_head(void)$/;"	f
test_refs_read__nested_symbolic	tests/refs/read.c	/^void test_refs_read__nested_symbolic(void)$/;"	f
test_refs_read__nonexisting_tag	tests/refs/read.c	/^void test_refs_read__nonexisting_tag(void)$/;"	f
test_refs_read__packed	tests/refs/read.c	/^void test_refs_read__packed(void)$/;"	f
test_refs_read__symbolic	tests/refs/read.c	/^void test_refs_read__symbolic(void)$/;"	f
test_refs_read__trailing	tests/refs/read.c	/^void test_refs_read__trailing(void)$/;"	f
test_refs_read__unfound_return_ENOTFOUND	tests/refs/read.c	/^void test_refs_read__unfound_return_ENOTFOUND(void)$/;"	f
test_refs_reflog_drop__can_drop_all_the_entries	tests/refs/reflog/drop.c	/^void test_refs_reflog_drop__can_drop_all_the_entries(void)$/;"	f
test_refs_reflog_drop__can_drop_an_entry	tests/refs/reflog/drop.c	/^void test_refs_reflog_drop__can_drop_an_entry(void)$/;"	f
test_refs_reflog_drop__can_drop_an_entry_and_rewrite_the_log_history	tests/refs/reflog/drop.c	/^void test_refs_reflog_drop__can_drop_an_entry_and_rewrite_the_log_history(void)$/;"	f
test_refs_reflog_drop__can_drop_the_oldest_entry	tests/refs/reflog/drop.c	/^void test_refs_reflog_drop__can_drop_the_oldest_entry(void)$/;"	f
test_refs_reflog_drop__can_drop_the_oldest_entry_and_rewrite_the_log_history	tests/refs/reflog/drop.c	/^void test_refs_reflog_drop__can_drop_the_oldest_entry_and_rewrite_the_log_history(void)$/;"	f
test_refs_reflog_drop__can_persist_deletion_on_disk	tests/refs/reflog/drop.c	/^void test_refs_reflog_drop__can_persist_deletion_on_disk(void)$/;"	f
test_refs_reflog_drop__cleanup	tests/refs/reflog/drop.c	/^void test_refs_reflog_drop__cleanup(void)$/;"	f
test_refs_reflog_drop__dropping_a_non_exisiting_entry_from_the_log_returns_ENOTFOUND	tests/refs/reflog/drop.c	/^void test_refs_reflog_drop__dropping_a_non_exisiting_entry_from_the_log_returns_ENOTFOUND(void)$/;"	f
test_refs_reflog_drop__initialize	tests/refs/reflog/drop.c	/^void test_refs_reflog_drop__initialize(void)$/;"	f
test_refs_reflog_reflog__append_then_read	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__append_then_read(void)$/;"	f
test_refs_reflog_reflog__cannot_write_a_moved_reflog	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__cannot_write_a_moved_reflog(void)$/;"	f
test_refs_reflog_reflog__cleanup	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__cleanup(void)$/;"	f
test_refs_reflog_reflog__initialize	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__initialize(void)$/;"	f
test_refs_reflog_reflog__reading_the_reflog_from_a_reference_with_no_log_returns_an_empty_one	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__reading_the_reflog_from_a_reference_with_no_log_returns_an_empty_one(void)$/;"	f
test_refs_reflog_reflog__reference_has_reflog	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__reference_has_reflog(void)$/;"	f
test_refs_reflog_reflog__renaming_the_reference_moves_the_reflog	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__renaming_the_reference_moves_the_reflog(void)$/;"	f
test_refs_reflog_reflog__renaming_with_an_invalid_name_returns_EINVALIDSPEC	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__renaming_with_an_invalid_name_returns_EINVALIDSPEC(void)$/;"	f
test_refs_reflog_reflog__write_only_std_locations	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__write_only_std_locations(void)$/;"	f
test_refs_reflog_reflog__write_when_explicitly_active	tests/refs/reflog/reflog.c	/^void test_refs_reflog_reflog__write_when_explicitly_active(void)$/;"	f
test_refs_rename__cleanup	tests/refs/rename.c	/^void test_refs_rename__cleanup(void)$/;"	f
test_refs_rename__force_loose	tests/refs/rename.c	/^void test_refs_rename__force_loose(void)$/;"	f
test_refs_rename__force_loose_packed	tests/refs/rename.c	/^void test_refs_rename__force_loose_packed(void)$/;"	f
test_refs_rename__initialize	tests/refs/rename.c	/^void test_refs_rename__initialize(void)$/;"	f
test_refs_rename__invalid_name	tests/refs/rename.c	/^void test_refs_rename__invalid_name(void)$/;"	f
test_refs_rename__loose	tests/refs/rename.c	/^void test_refs_rename__loose(void)$/;"	f
test_refs_rename__move_up	tests/refs/rename.c	/^void test_refs_rename__move_up(void)$/;"	f
test_refs_rename__name_collision	tests/refs/rename.c	/^void test_refs_rename__name_collision(void)$/;"	f
test_refs_rename__overwrite	tests/refs/rename.c	/^void test_refs_rename__overwrite(void)$/;"	f
test_refs_rename__packed	tests/refs/rename.c	/^void test_refs_rename__packed(void)$/;"	f
test_refs_rename__packed_doesnt_pack_others	tests/refs/rename.c	/^void test_refs_rename__packed_doesnt_pack_others(void)$/;"	f
test_refs_rename__prefix	tests/refs/rename.c	/^void test_refs_rename__prefix(void)$/;"	f
test_refs_rename__propagate_eexists	tests/refs/rename.c	/^void test_refs_rename__propagate_eexists(void)$/;"	f
test_refs_rename__writes_to_reflog	tests/refs/rename.c	/^void test_refs_rename__writes_to_reflog(void)$/;"	f
test_refs_revparse__a_not_precise_enough_objectid_returns_EAMBIGUOUS	tests/refs/revparse.c	/^void test_refs_revparse__a_not_precise_enough_objectid_returns_EAMBIGUOUS(void)$/;"	f
test_refs_revparse__a_too_short_objectid_returns_EAMBIGUOUS	tests/refs/revparse.c	/^void test_refs_revparse__a_too_short_objectid_returns_EAMBIGUOUS(void)$/;"	f
test_refs_revparse__chaining	tests/refs/revparse.c	/^void test_refs_revparse__chaining(void)$/;"	f
test_refs_revparse__cleanup	tests/refs/revparse.c	/^void test_refs_revparse__cleanup(void)$/;"	f
test_refs_revparse__colon	tests/refs/revparse.c	/^void test_refs_revparse__colon(void)$/;"	f
test_refs_revparse__date	tests/refs/revparse.c	/^void test_refs_revparse__date(void)$/;"	f
test_refs_revparse__describe_output	tests/refs/revparse.c	/^void test_refs_revparse__describe_output(void)$/;"	f
test_refs_revparse__disambiguation	tests/refs/revparse.c	/^void test_refs_revparse__disambiguation(void)$/;"	f
test_refs_revparse__ext_can_expand_short_reference_names	tests/refs/revparse.c	/^void test_refs_revparse__ext_can_expand_short_reference_names(void)$/;"	f
test_refs_revparse__ext_retrieves_both_the_reference_and_its_target	tests/refs/revparse.c	/^void test_refs_revparse__ext_retrieves_both_the_reference_and_its_target(void)$/;"	f
test_refs_revparse__ext_returns_NULL_reference_when_expression_points_at_a_revision	tests/refs/revparse.c	/^void test_refs_revparse__ext_returns_NULL_reference_when_expression_points_at_a_revision(void)$/;"	f
test_refs_revparse__ext_returns_NULL_reference_when_expression_points_at_a_tree_content	tests/refs/revparse.c	/^void test_refs_revparse__ext_returns_NULL_reference_when_expression_points_at_a_tree_content(void)$/;"	f
test_refs_revparse__full_refs	tests/refs/revparse.c	/^void test_refs_revparse__full_refs(void)$/;"	f
test_refs_revparse__head	tests/refs/revparse.c	/^void test_refs_revparse__head(void)$/;"	f
test_refs_revparse__initialize	tests/refs/revparse.c	/^void test_refs_revparse__initialize(void)$/;"	f
test_refs_revparse__invalid_reference_name	tests/refs/revparse.c	/^void test_refs_revparse__invalid_reference_name(void)$/;"	f
test_refs_revparse__issue_994	tests/refs/revparse.c	/^void test_refs_revparse__issue_994(void)$/;"	f
test_refs_revparse__linear_history	tests/refs/revparse.c	/^void test_refs_revparse__linear_history(void)$/;"	f
test_refs_revparse__nonexistant_object	tests/refs/revparse.c	/^void test_refs_revparse__nonexistant_object(void)$/;"	f
test_refs_revparse__not_tag	tests/refs/revparse.c	/^void test_refs_revparse__not_tag(void)$/;"	f
test_refs_revparse__nth_parent	tests/refs/revparse.c	/^void test_refs_revparse__nth_parent(void)$/;"	f
test_refs_revparse__ordinal	tests/refs/revparse.c	/^void test_refs_revparse__ordinal(void)$/;"	f
test_refs_revparse__parses_range_operator	tests/refs/revparse.c	/^void test_refs_revparse__parses_range_operator(void)$/;"	f
test_refs_revparse__partial_refs	tests/refs/revparse.c	/^void test_refs_revparse__partial_refs(void)$/;"	f
test_refs_revparse__previous_head	tests/refs/revparse.c	/^void test_refs_revparse__previous_head(void)$/;"	f
test_refs_revparse__range	tests/refs/revparse.c	/^void test_refs_revparse__range(void)$/;"	f
test_refs_revparse__reflog_of_a_ref_under_refs	tests/refs/revparse.c	/^void test_refs_revparse__reflog_of_a_ref_under_refs(void)$/;"	f
test_refs_revparse__revwalk	tests/refs/revparse.c	/^void test_refs_revparse__revwalk(void)$/;"	f
test_refs_revparse__shas	tests/refs/revparse.c	/^void test_refs_revparse__shas(void)$/;"	f
test_refs_revparse__to_type	tests/refs/revparse.c	/^void test_refs_revparse__to_type(void)$/;"	f
test_refs_revparse__try_to_retrieve_branch_before_abbrev_sha	tests/refs/revparse.c	/^void test_refs_revparse__try_to_retrieve_branch_before_abbrev_sha(void)$/;"	f
test_refs_revparse__try_to_retrieve_branch_before_described_tag	tests/refs/revparse.c	/^void test_refs_revparse__try_to_retrieve_branch_before_described_tag(void)$/;"	f
test_refs_revparse__try_to_retrieve_sha_before_branch	tests/refs/revparse.c	/^void test_refs_revparse__try_to_retrieve_sha_before_branch(void)$/;"	f
test_refs_revparse__upstream	tests/refs/revparse.c	/^void test_refs_revparse__upstream(void)$/;"	f
test_refs_settargetwithlog__cleanup	tests/refs/settargetwithlog.c	/^void test_refs_settargetwithlog__cleanup(void)$/;"	f
test_refs_settargetwithlog__initialize	tests/refs/settargetwithlog.c	/^void test_refs_settargetwithlog__initialize(void)$/;"	f
test_refs_settargetwithlog__updating_a_direct_reference_adds_a_reflog_entry	tests/refs/settargetwithlog.c	/^void test_refs_settargetwithlog__updating_a_direct_reference_adds_a_reflog_entry(void)$/;"	f
test_refs_setter__cant_update_direct_with_symbolic	tests/refs/setter.c	/^void test_refs_setter__cant_update_direct_with_symbolic(void)$/;"	f
test_refs_setter__cant_update_symbolic_with_direct	tests/refs/setter.c	/^void test_refs_setter__cant_update_symbolic_with_direct(void)$/;"	f
test_refs_setter__cleanup	tests/refs/setter.c	/^void test_refs_setter__cleanup(void)$/;"	f
test_refs_setter__initialize	tests/refs/setter.c	/^void test_refs_setter__initialize(void)$/;"	f
test_refs_setter__update_direct	tests/refs/setter.c	/^void test_refs_setter__update_direct(void)$/;"	f
test_refs_setter__update_symbolic	tests/refs/setter.c	/^void test_refs_setter__update_symbolic(void)$/;"	f
test_refs_shorthand__0	tests/refs/shorthand.c	/^void test_refs_shorthand__0(void)$/;"	f
test_refs_unicode__cleanup	tests/refs/unicode.c	/^void test_refs_unicode__cleanup(void)$/;"	f
test_refs_unicode__create_and_lookup	tests/refs/unicode.c	/^void test_refs_unicode__create_and_lookup(void)$/;"	f
test_refs_unicode__initialize	tests/refs/unicode.c	/^void test_refs_unicode__initialize(void)$/;"	f
test_refs_update__cleanup	tests/refs/update.c	/^void test_refs_update__cleanup(void)$/;"	f
test_refs_update__initialize	tests/refs/update.c	/^void test_refs_update__initialize(void)$/;"	f
test_refs_update__updating_the_target_of_a_symref_with_an_invalid_name_returns_EINVALIDSPEC	tests/refs/update.c	/^void test_refs_update__updating_the_target_of_a_symref_with_an_invalid_name_returns_EINVALIDSPEC(void)$/;"	f
test_repo_config__cleanup	tests/repo/config.c	/^void test_repo_config__cleanup(void)$/;"	f
test_repo_config__initialize	tests/repo/config.c	/^void test_repo_config__initialize(void)$/;"	f
test_repo_config__open_missing_global	tests/repo/config.c	/^void test_repo_config__open_missing_global(void)$/;"	f
test_repo_config__open_missing_global_with_separators	tests/repo/config.c	/^void test_repo_config__open_missing_global_with_separators(void)$/;"	f
test_repo_config__read_no_configs	tests/repo/config.c	/^void test_repo_config__read_no_configs(void)$/;"	f
test_repo_discover__0	tests/repo/discover.c	/^void test_repo_discover__0(void)$/;"	f
test_repo_getters__is_empty_can_detect_used_repositories	tests/repo/getters.c	/^void test_repo_getters__is_empty_can_detect_used_repositories(void)$/;"	f
test_repo_getters__is_empty_correctly_deals_with_pristine_looking_repos	tests/repo/getters.c	/^void test_repo_getters__is_empty_correctly_deals_with_pristine_looking_repos(void)$/;"	f
test_repo_getters__retrieving_the_odb_honors_the_refcount	tests/repo/getters.c	/^void test_repo_getters__retrieving_the_odb_honors_the_refcount(void)$/;"	f
test_repo_hashfile__cleanup	tests/repo/hashfile.c	/^void test_repo_hashfile__cleanup(void)$/;"	f
test_repo_hashfile__filtered	tests/repo/hashfile.c	/^void test_repo_hashfile__filtered(void)$/;"	f
test_repo_hashfile__initialize	tests/repo/hashfile.c	/^void test_repo_hashfile__initialize(void)$/;"	f
test_repo_hashfile__simple	tests/repo/hashfile.c	/^void test_repo_hashfile__simple(void)$/;"	f
test_repo_head__can_tell_if_an_unborn_head_is_detached	tests/repo/head.c	/^void test_repo_head__can_tell_if_an_unborn_head_is_detached(void)$/;"	f
test_repo_head__cleanup	tests/repo/head.c	/^void test_repo_head__cleanup(void)$/;"	f
test_repo_head__detach_head_Detaches_HEAD_and_make_it_point_to_the_peeled_commit	tests/repo/head.c	/^void test_repo_head__detach_head_Detaches_HEAD_and_make_it_point_to_the_peeled_commit(void)$/;"	f
test_repo_head__detach_head_Fails_if_HEAD_and_point_to_a_non_commitish	tests/repo/head.c	/^void test_repo_head__detach_head_Fails_if_HEAD_and_point_to_a_non_commitish(void)$/;"	f
test_repo_head__detaching_an_unborn_branch_returns_GIT_EUNBORNBRANCH	tests/repo/head.c	/^void test_repo_head__detaching_an_unborn_branch_returns_GIT_EUNBORNBRANCH(void)$/;"	f
test_repo_head__head_detached	tests/repo/head.c	/^void test_repo_head__head_detached(void)$/;"	f
test_repo_head__initialize	tests/repo/head.c	/^void test_repo_head__initialize(void)$/;"	f
test_repo_head__retrieving_a_missing_head_returns_GIT_ENOTFOUND	tests/repo/head.c	/^void test_repo_head__retrieving_a_missing_head_returns_GIT_ENOTFOUND(void)$/;"	f
test_repo_head__retrieving_an_unborn_branch_returns_GIT_EUNBORNBRANCH	tests/repo/head.c	/^void test_repo_head__retrieving_an_unborn_branch_returns_GIT_EUNBORNBRANCH(void)$/;"	f
test_repo_head__set_head_Attaches_HEAD_to_un_unborn_branch_when_the_branch_doesnt_exist	tests/repo/head.c	/^void test_repo_head__set_head_Attaches_HEAD_to_un_unborn_branch_when_the_branch_doesnt_exist(void)$/;"	f
test_repo_head__set_head_Attaches_HEAD_when_the_reference_points_to_a_branch	tests/repo/head.c	/^void test_repo_head__set_head_Attaches_HEAD_when_the_reference_points_to_a_branch(void)$/;"	f
test_repo_head__set_head_Detaches_HEAD_when_the_reference_doesnt_point_to_a_branch	tests/repo/head.c	/^void test_repo_head__set_head_Detaches_HEAD_when_the_reference_doesnt_point_to_a_branch(void)$/;"	f
test_repo_head__set_head_Fails_when_the_reference_points_to_a_non_commitish	tests/repo/head.c	/^void test_repo_head__set_head_Fails_when_the_reference_points_to_a_non_commitish(void)$/;"	f
test_repo_head__set_head_Returns_ENOTFOUND_when_the_reference_doesnt_exist	tests/repo/head.c	/^void test_repo_head__set_head_Returns_ENOTFOUND_when_the_reference_doesnt_exist(void)$/;"	f
test_repo_head__set_head_detached_Detaches_HEAD_and_make_it_point_to_the_peeled_commit	tests/repo/head.c	/^void test_repo_head__set_head_detached_Detaches_HEAD_and_make_it_point_to_the_peeled_commit(void)$/;"	f
test_repo_head__set_head_detached_Fails_when_the_object_isnt_a_commitish	tests/repo/head.c	/^void test_repo_head__set_head_detached_Fails_when_the_object_isnt_a_commitish(void)$/;"	f
test_repo_head__set_head_detached_Return_ENOTFOUND_when_the_object_doesnt_exist	tests/repo/head.c	/^void test_repo_head__set_head_detached_Return_ENOTFOUND_when_the_object_doesnt_exist(void)$/;"	f
test_repo_head__setting_creates_head_ref	tests/repo/head.c	/^void test_repo_head__setting_creates_head_ref(void)$/;"	f
test_repo_head__setting_head_updates_reflog	tests/repo/head.c	/^void test_repo_head__setting_head_updates_reflog(void)$/;"	f
test_repo_head__unborn_head	tests/repo/head.c	/^void test_repo_head__unborn_head(void)$/;"	f
test_repo_headtree__can_retrieve_the_root_tree_from_a_detached_head	tests/repo/headtree.c	/^void test_repo_headtree__can_retrieve_the_root_tree_from_a_detached_head(void)$/;"	f
test_repo_headtree__can_retrieve_the_root_tree_from_a_non_detached_head	tests/repo/headtree.c	/^void test_repo_headtree__can_retrieve_the_root_tree_from_a_non_detached_head(void)$/;"	f
test_repo_headtree__cleanup	tests/repo/headtree.c	/^void test_repo_headtree__cleanup(void)$/;"	f
test_repo_headtree__initialize	tests/repo/headtree.c	/^void test_repo_headtree__initialize(void)$/;"	f
test_repo_headtree__when_head_is_missing_returns_ENOTFOUND	tests/repo/headtree.c	/^void test_repo_headtree__when_head_is_missing_returns_ENOTFOUND(void)$/;"	f
test_repo_headtree__when_head_is_unborn_returns_EUNBORNBRANCH	tests/repo/headtree.c	/^void test_repo_headtree__when_head_is_unborn_returns_EUNBORNBRANCH(void)$/;"	f
test_repo_init__additional_templates	tests/repo/init.c	/^void test_repo_init__additional_templates(void)$/;"	f
test_repo_init__bare_repo	tests/repo/init.c	/^void test_repo_init__bare_repo(void)$/;"	f
test_repo_init__bare_repo_escaping_current_workdir	tests/repo/init.c	/^void test_repo_init__bare_repo_escaping_current_workdir(void)$/;"	f
test_repo_init__bare_repo_noslash	tests/repo/init.c	/^void test_repo_init__bare_repo_noslash(void)$/;"	f
test_repo_init__can_reinit_an_initialized_repository	tests/repo/init.c	/^void test_repo_init__can_reinit_an_initialized_repository(void)$/;"	f
test_repo_init__detect_filemode	tests/repo/init.c	/^void test_repo_init__detect_filemode(void)$/;"	f
test_repo_init__detect_ignorecase	tests/repo/init.c	/^void test_repo_init__detect_ignorecase(void)$/;"	f
test_repo_init__detect_precompose_unicode_required	tests/repo/init.c	/^void test_repo_init__detect_precompose_unicode_required(void)$/;"	f
test_repo_init__extended_0	tests/repo/init.c	/^void test_repo_init__extended_0(void)$/;"	f
test_repo_init__extended_1	tests/repo/init.c	/^void test_repo_init__extended_1(void)$/;"	f
test_repo_init__extended_with_template	tests/repo/init.c	/^void test_repo_init__extended_with_template(void)$/;"	f
test_repo_init__extended_with_template_and_shared_mode	tests/repo/init.c	/^void test_repo_init__extended_with_template_and_shared_mode(void)$/;"	f
test_repo_init__init_with_initial_commit	tests/repo/init.c	/^void test_repo_init__init_with_initial_commit(void)$/;"	f
test_repo_init__initialize	tests/repo/init.c	/^void test_repo_init__initialize(void)$/;"	f
test_repo_init__reinit_bare_repo	tests/repo/init.c	/^void test_repo_init__reinit_bare_repo(void)$/;"	f
test_repo_init__reinit_doesnot_overwrite_ignorecase	tests/repo/init.c	/^void test_repo_init__reinit_doesnot_overwrite_ignorecase(void)$/;"	f
test_repo_init__reinit_overwrites_filemode	tests/repo/init.c	/^void test_repo_init__reinit_overwrites_filemode(void)$/;"	f
test_repo_init__reinit_too_recent_bare_repo	tests/repo/init.c	/^void test_repo_init__reinit_too_recent_bare_repo(void)$/;"	f
test_repo_init__sets_logAllRefUpdates_according_to_type_of_repository	tests/repo/init.c	/^void test_repo_init__sets_logAllRefUpdates_according_to_type_of_repository(void)$/;"	f
test_repo_init__standard_repo	tests/repo/init.c	/^void test_repo_init__standard_repo(void)$/;"	f
test_repo_init__standard_repo_noslash	tests/repo/init.c	/^void test_repo_init__standard_repo_noslash(void)$/;"	f
test_repo_iterator__cleanup	tests/repo/iterator.c	/^void test_repo_iterator__cleanup(void)$/;"	f
test_repo_iterator__fs	tests/repo/iterator.c	/^void test_repo_iterator__fs(void)$/;"	f
test_repo_iterator__fs2	tests/repo/iterator.c	/^void test_repo_iterator__fs2(void)$/;"	f
test_repo_iterator__fs_preserves_error	tests/repo/iterator.c	/^void test_repo_iterator__fs_preserves_error(void)$/;"	f
test_repo_iterator__index	tests/repo/iterator.c	/^void test_repo_iterator__index(void)$/;"	f
test_repo_iterator__index_icase	tests/repo/iterator.c	/^void test_repo_iterator__index_icase(void)$/;"	f
test_repo_iterator__initialize	tests/repo/iterator.c	/^void test_repo_iterator__initialize(void)$/;"	f
test_repo_iterator__tree	tests/repo/iterator.c	/^void test_repo_iterator__tree(void)$/;"	f
test_repo_iterator__tree_case_conflicts_0	tests/repo/iterator.c	/^void test_repo_iterator__tree_case_conflicts_0(void)$/;"	f
test_repo_iterator__tree_case_conflicts_1	tests/repo/iterator.c	/^void test_repo_iterator__tree_case_conflicts_1(void)$/;"	f
test_repo_iterator__tree_case_conflicts_2	tests/repo/iterator.c	/^void test_repo_iterator__tree_case_conflicts_2(void)$/;"	f
test_repo_iterator__tree_icase	tests/repo/iterator.c	/^void test_repo_iterator__tree_icase(void)$/;"	f
test_repo_iterator__tree_more	tests/repo/iterator.c	/^void test_repo_iterator__tree_more(void)$/;"	f
test_repo_iterator__workdir	tests/repo/iterator.c	/^void test_repo_iterator__workdir(void)$/;"	f
test_repo_iterator__workdir_depth	tests/repo/iterator.c	/^void test_repo_iterator__workdir_depth(void)$/;"	f
test_repo_iterator__workdir_icase	tests/repo/iterator.c	/^void test_repo_iterator__workdir_icase(void)$/;"	f
test_repo_message__cleanup	tests/repo/message.c	/^void test_repo_message__cleanup(void)$/;"	f
test_repo_message__initialize	tests/repo/message.c	/^void test_repo_message__initialize(void)$/;"	f
test_repo_message__message	tests/repo/message.c	/^void test_repo_message__message(void)$/;"	f
test_repo_message__none	tests/repo/message.c	/^void test_repo_message__none(void)$/;"	f
test_repo_open__bad_gitlinks	tests/repo/open.c	/^void test_repo_open__bad_gitlinks(void)$/;"	f
test_repo_open__bare_empty_repo	tests/repo/open.c	/^void test_repo_open__bare_empty_repo(void)$/;"	f
test_repo_open__cleanup	tests/repo/open.c	/^void test_repo_open__cleanup(void)$/;"	f
test_repo_open__failures	tests/repo/open.c	/^void test_repo_open__failures(void)$/;"	f
test_repo_open__force_bare	tests/repo/open.c	/^void test_repo_open__force_bare(void)$/;"	f
test_repo_open__from_git_new_workdir	tests/repo/open.c	/^void test_repo_open__from_git_new_workdir(void)$/;"	f
test_repo_open__gitlinked	tests/repo/open.c	/^void test_repo_open__gitlinked(void)$/;"	f
test_repo_open__no_config	tests/repo/open.c	/^void test_repo_open__no_config(void)$/;"	f
test_repo_open__open_with_discover	tests/repo/open.c	/^void test_repo_open__open_with_discover(void)$/;"	f
test_repo_open__opening_a_non_existing_repository_returns_ENOTFOUND	tests/repo/open.c	/^void test_repo_open__opening_a_non_existing_repository_returns_ENOTFOUND(void)$/;"	f
test_repo_open__standard_empty_repo_through_gitdir	tests/repo/open.c	/^void test_repo_open__standard_empty_repo_through_gitdir(void)$/;"	f
test_repo_open__standard_empty_repo_through_workdir	tests/repo/open.c	/^void test_repo_open__standard_empty_repo_through_workdir(void)$/;"	f
test_repo_open__win32_path	tests/repo/open.c	/^void test_repo_open__win32_path(void)$/;"	f
test_repo_pathspec__cleanup	tests/repo/pathspec.c	/^void test_repo_pathspec__cleanup(void)$/;"	f
test_repo_pathspec__in_memory	tests/repo/pathspec.c	/^void test_repo_pathspec__in_memory(void)$/;"	f
test_repo_pathspec__index0	tests/repo/pathspec.c	/^void test_repo_pathspec__index0(void)$/;"	f
test_repo_pathspec__index1	tests/repo/pathspec.c	/^void test_repo_pathspec__index1(void)$/;"	f
test_repo_pathspec__initialize	tests/repo/pathspec.c	/^void test_repo_pathspec__initialize(void)$/;"	f
test_repo_pathspec__tree0	tests/repo/pathspec.c	/^void test_repo_pathspec__tree0(void)$/;"	f
test_repo_pathspec__tree5	tests/repo/pathspec.c	/^void test_repo_pathspec__tree5(void)$/;"	f
test_repo_pathspec__workdir0	tests/repo/pathspec.c	/^void test_repo_pathspec__workdir0(void)$/;"	f
test_repo_pathspec__workdir1	tests/repo/pathspec.c	/^void test_repo_pathspec__workdir1(void)$/;"	f
test_repo_pathspec__workdir2	tests/repo/pathspec.c	/^void test_repo_pathspec__workdir2(void)$/;"	f
test_repo_pathspec__workdir3	tests/repo/pathspec.c	/^void test_repo_pathspec__workdir3(void)$/;"	f
test_repo_pathspec__workdir4	tests/repo/pathspec.c	/^void test_repo_pathspec__workdir4(void)$/;"	f
test_repo_setters__cleanup	tests/repo/setters.c	/^void test_repo_setters__cleanup(void)$/;"	f
test_repo_setters__initialize	tests/repo/setters.c	/^void test_repo_setters__initialize(void)$/;"	f
test_repo_setters__setting_a_new_index_on_a_repo_which_has_already_loaded_one_properly_honors_the_refcount	tests/repo/setters.c	/^void test_repo_setters__setting_a_new_index_on_a_repo_which_has_already_loaded_one_properly_honors_the_refcount(void)$/;"	f
test_repo_setters__setting_a_new_odb_on_a_repo_which_already_loaded_one_properly_honors_the_refcount	tests/repo/setters.c	/^void test_repo_setters__setting_a_new_odb_on_a_repo_which_already_loaded_one_properly_honors_the_refcount(void)$/;"	f
test_repo_setters__setting_a_workdir_creates_a_gitlink	tests/repo/setters.c	/^void test_repo_setters__setting_a_workdir_creates_a_gitlink(void)$/;"	f
test_repo_setters__setting_a_workdir_prettifies_its_path	tests/repo/setters.c	/^void test_repo_setters__setting_a_workdir_prettifies_its_path(void)$/;"	f
test_repo_setters__setting_a_workdir_turns_a_bare_repository_into_a_standard_one	tests/repo/setters.c	/^void test_repo_setters__setting_a_workdir_turns_a_bare_repository_into_a_standard_one(void)$/;"	f
test_repo_shallow__cleanup	tests/repo/shallow.c	/^void test_repo_shallow__cleanup(void)$/;"	f
test_repo_shallow__clears_errors	tests/repo/shallow.c	/^void test_repo_shallow__clears_errors(void)$/;"	f
test_repo_shallow__empty_shallow_file	tests/repo/shallow.c	/^void test_repo_shallow__empty_shallow_file(void)$/;"	f
test_repo_shallow__initialize	tests/repo/shallow.c	/^void test_repo_shallow__initialize(void)$/;"	f
test_repo_shallow__no_shallow_file	tests/repo/shallow.c	/^void test_repo_shallow__no_shallow_file(void)$/;"	f
test_repo_shallow__shallow_repo	tests/repo/shallow.c	/^void test_repo_shallow__shallow_repo(void)$/;"	f
test_repo_state__apply_mailbox	tests/repo/state.c	/^void test_repo_state__apply_mailbox(void)$/;"	f
test_repo_state__apply_mailbox_or_rebase	tests/repo/state.c	/^void test_repo_state__apply_mailbox_or_rebase(void)$/;"	f
test_repo_state__bisect	tests/repo/state.c	/^void test_repo_state__bisect(void)$/;"	f
test_repo_state__cherry_pick	tests/repo/state.c	/^void test_repo_state__cherry_pick(void)$/;"	f
test_repo_state__cleanup	tests/repo/state.c	/^void test_repo_state__cleanup(void)$/;"	f
test_repo_state__initialize	tests/repo/state.c	/^void test_repo_state__initialize(void)$/;"	f
test_repo_state__merge	tests/repo/state.c	/^void test_repo_state__merge(void)$/;"	f
test_repo_state__none_with_HEAD_attached	tests/repo/state.c	/^void test_repo_state__none_with_HEAD_attached(void)$/;"	f
test_repo_state__none_with_HEAD_detached	tests/repo/state.c	/^void test_repo_state__none_with_HEAD_detached(void)$/;"	f
test_repo_state__rebase	tests/repo/state.c	/^void test_repo_state__rebase(void)$/;"	f
test_repo_state__rebase_interactive	tests/repo/state.c	/^void test_repo_state__rebase_interactive(void)$/;"	f
test_repo_state__rebase_merge	tests/repo/state.c	/^void test_repo_state__rebase_merge(void)$/;"	f
test_repo_state__revert	tests/repo/state.c	/^void test_repo_state__revert(void)$/;"	f
test_reset_default__cleanup	tests/reset/default.c	/^void test_reset_default__cleanup(void)$/;"	f
test_reset_default__initialize	tests/reset/default.c	/^void test_reset_default__initialize(void)$/;"	f
test_reset_default__resetting_filepaths_against_a_null_target_removes_them_from_the_index	tests/reset/default.c	/^void test_reset_default__resetting_filepaths_against_a_null_target_removes_them_from_the_index(void)$/;"	f
test_reset_default__resetting_filepaths_clears_previous_conflicts	tests/reset/default.c	/^void test_reset_default__resetting_filepaths_clears_previous_conflicts(void)$/;"	f
test_reset_default__resetting_filepaths_replaces_their_corresponding_index_entries	tests/reset/default.c	/^void test_reset_default__resetting_filepaths_replaces_their_corresponding_index_entries(void)$/;"	f
test_reset_default__resetting_unknown_filepaths_does_not_fail	tests/reset/default.c	/^void test_reset_default__resetting_unknown_filepaths_does_not_fail(void)$/;"	f
test_reset_hard__cannot_reset_in_a_bare_repository	tests/reset/hard.c	/^void test_reset_hard__cannot_reset_in_a_bare_repository(void)$/;"	f
test_reset_hard__cleans_up_merge	tests/reset/hard.c	/^void test_reset_hard__cleans_up_merge(void)$/;"	f
test_reset_hard__cleanup	tests/reset/hard.c	/^void test_reset_hard__cleanup(void)$/;"	f
test_reset_hard__initialize	tests/reset/hard.c	/^void test_reset_hard__initialize(void)$/;"	f
test_reset_hard__reflog_is_correct	tests/reset/hard.c	/^void test_reset_hard__reflog_is_correct(void)$/;"	f
test_reset_hard__resetting_reverts_modified_files	tests/reset/hard.c	/^void test_reset_hard__resetting_reverts_modified_files(void)$/;"	f
test_reset_hard__resetting_reverts_unmerged	tests/reset/hard.c	/^void test_reset_hard__resetting_reverts_unmerged(void)$/;"	f
test_reset_mixed__cannot_reset_in_a_bare_repository	tests/reset/mixed.c	/^void test_reset_mixed__cannot_reset_in_a_bare_repository(void)$/;"	f
test_reset_mixed__cleanup	tests/reset/mixed.c	/^void test_reset_mixed__cleanup(void)$/;"	f
test_reset_mixed__initialize	tests/reset/mixed.c	/^void test_reset_mixed__initialize(void)$/;"	f
test_reset_mixed__reflog_is_correct	tests/reset/mixed.c	/^void test_reset_mixed__reflog_is_correct(void)$/;"	f
test_reset_mixed__resetting_refreshes_the_index_to_the_commit_tree	tests/reset/mixed.c	/^void test_reset_mixed__resetting_refreshes_the_index_to_the_commit_tree(void)$/;"	f
test_reset_soft__can_reset_the_detached_Head_to_the_specified_commit	tests/reset/soft.c	/^void test_reset_soft__can_reset_the_detached_Head_to_the_specified_commit(void)$/;"	f
test_reset_soft__can_reset_the_non_detached_Head_to_the_specified_commit	tests/reset/soft.c	/^void test_reset_soft__can_reset_the_non_detached_Head_to_the_specified_commit(void)$/;"	f
test_reset_soft__cannot_reset_to_a_tag_not_pointing_at_a_commit	tests/reset/soft.c	/^void test_reset_soft__cannot_reset_to_a_tag_not_pointing_at_a_commit(void)$/;"	f
test_reset_soft__cleanup	tests/reset/soft.c	/^void test_reset_soft__cleanup(void)$/;"	f
test_reset_soft__fails_when_index_contains_conflicts_independently_of_MERGE_HEAD_file_existence	tests/reset/soft.c	/^void test_reset_soft__fails_when_index_contains_conflicts_independently_of_MERGE_HEAD_file_existence(void)$/;"	f
test_reset_soft__fails_when_merging	tests/reset/soft.c	/^void test_reset_soft__fails_when_merging(void)$/;"	f
test_reset_soft__initialize	tests/reset/soft.c	/^void test_reset_soft__initialize(void)$/;"	f
test_reset_soft__resetting_against_an_unborn_head_repo_makes_the_head_no_longer_unborn	tests/reset/soft.c	/^void test_reset_soft__resetting_against_an_unborn_head_repo_makes_the_head_no_longer_unborn(void)$/;"	f
test_reset_soft__resetting_to_a_tag_sets_the_Head_to_the_peeled_commit	tests/reset/soft.c	/^void test_reset_soft__resetting_to_a_tag_sets_the_Head_to_the_peeled_commit(void)$/;"	f
test_reset_soft__resetting_to_the_commit_pointed_at_by_the_Head_does_not_change_the_target_of_the_Head	tests/reset/soft.c	/^void test_reset_soft__resetting_to_the_commit_pointed_at_by_the_Head_does_not_change_the_target_of_the_Head(void)$/;"	f
test_reset_soft_reflog_is_correct	tests/reset/soft.c	/^void test_reset_soft_reflog_is_correct(void)$/;"	f
test_revert_bare__automerge	tests/revert/bare.c	/^void test_revert_bare__automerge(void)$/;"	f
test_revert_bare__cleanup	tests/revert/bare.c	/^void test_revert_bare__cleanup(void)$/;"	f
test_revert_bare__conflicts	tests/revert/bare.c	/^void test_revert_bare__conflicts(void)$/;"	f
test_revert_bare__initialize	tests/revert/bare.c	/^void test_revert_bare__initialize(void)$/;"	f
test_revert_bare__orphan	tests/revert/bare.c	/^void test_revert_bare__orphan(void)$/;"	f
test_revert_workdir__again	tests/revert/workdir.c	/^void test_revert_workdir__again(void)$/;"	f
test_revert_workdir__again_after_automerge	tests/revert/workdir.c	/^void test_revert_workdir__again_after_automerge(void)$/;"	f
test_revert_workdir__again_after_edit	tests/revert/workdir.c	/^void test_revert_workdir__again_after_edit(void)$/;"	f
test_revert_workdir__again_after_edit_two	tests/revert/workdir.c	/^void test_revert_workdir__again_after_edit_two(void)$/;"	f
test_revert_workdir__automerge	tests/revert/workdir.c	/^void test_revert_workdir__automerge(void)$/;"	f
test_revert_workdir__cleanup	tests/revert/workdir.c	/^void test_revert_workdir__cleanup(void)$/;"	f
test_revert_workdir__conflict_use_ours	tests/revert/workdir.c	/^void test_revert_workdir__conflict_use_ours(void)$/;"	f
test_revert_workdir__conflicts	tests/revert/workdir.c	/^void test_revert_workdir__conflicts(void)$/;"	f
test_revert_workdir__head	tests/revert/workdir.c	/^void test_revert_workdir__head(void)$/;"	f
test_revert_workdir__initialize	tests/revert/workdir.c	/^void test_revert_workdir__initialize(void)$/;"	f
test_revert_workdir__merge_fails_without_mainline_specified	tests/revert/workdir.c	/^void test_revert_workdir__merge_fails_without_mainline_specified(void)$/;"	f
test_revert_workdir__merge_first_parent	tests/revert/workdir.c	/^void test_revert_workdir__merge_first_parent(void)$/;"	f
test_revert_workdir__merge_second_parent	tests/revert/workdir.c	/^void test_revert_workdir__merge_second_parent(void)$/;"	f
test_revert_workdir__nonmerge_fails_mainline_specified	tests/revert/workdir.c	/^void test_revert_workdir__nonmerge_fails_mainline_specified(void)$/;"	f
test_revert_workdir__orphan	tests/revert/workdir.c	/^void test_revert_workdir__orphan(void)$/;"	f
test_revert_workdir__rename	tests/revert/workdir.c	/^void test_revert_workdir__rename(void)$/;"	f
test_revert_workdir__rename_1_of_2	tests/revert/workdir.c	/^void test_revert_workdir__rename_1_of_2(void)$/;"	f
test_revwalk_basic__cleanup	tests/revwalk/basic.c	/^void test_revwalk_basic__cleanup(void)$/;"	f
test_revwalk_basic__disallow_non_commit	tests/revwalk/basic.c	/^void test_revwalk_basic__disallow_non_commit(void)$/;"	f
test_revwalk_basic__glob_heads	tests/revwalk/basic.c	/^void test_revwalk_basic__glob_heads(void)$/;"	f
test_revwalk_basic__glob_heads_with_invalid	tests/revwalk/basic.c	/^void test_revwalk_basic__glob_heads_with_invalid(void)$/;"	f
test_revwalk_basic__initialize	tests/revwalk/basic.c	/^void test_revwalk_basic__initialize(void)$/;"	f
test_revwalk_basic__push_all	tests/revwalk/basic.c	/^void test_revwalk_basic__push_all(void)$/;"	f
test_revwalk_basic__push_head	tests/revwalk/basic.c	/^void test_revwalk_basic__push_head(void)$/;"	f
test_revwalk_basic__push_head_hide_ref	tests/revwalk/basic.c	/^void test_revwalk_basic__push_head_hide_ref(void)$/;"	f
test_revwalk_basic__push_head_hide_ref_nobase	tests/revwalk/basic.c	/^void test_revwalk_basic__push_head_hide_ref_nobase(void)$/;"	f
test_revwalk_basic__push_mixed	tests/revwalk/basic.c	/^void test_revwalk_basic__push_mixed(void)$/;"	f
test_revwalk_basic__push_range	tests/revwalk/basic.c	/^void test_revwalk_basic__push_range(void)$/;"	f
test_revwalk_basic__sorting_modes	tests/revwalk/basic.c	/^void test_revwalk_basic__sorting_modes(void)$/;"	f
test_revwalk_mergebase__cleanup	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__cleanup(void)$/;"	f
test_revwalk_mergebase__initialize	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__initialize(void)$/;"	f
test_revwalk_mergebase__many_merge_branch	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__many_merge_branch(void)$/;"	f
test_revwalk_mergebase__many_no_common_ancestor_returns_ENOTFOUND	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__many_no_common_ancestor_returns_ENOTFOUND(void)$/;"	f
test_revwalk_mergebase__merged_branch	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__merged_branch(void)$/;"	f
test_revwalk_mergebase__no_common_ancestor_returns_ENOTFOUND	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__no_common_ancestor_returns_ENOTFOUND(void)$/;"	f
test_revwalk_mergebase__no_off_by_one_missing	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__no_off_by_one_missing(void)$/;"	f
test_revwalk_mergebase__prefer_youngest_merge_base	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__prefer_youngest_merge_base(void)$/;"	f
test_revwalk_mergebase__single1	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__single1(void)$/;"	f
test_revwalk_mergebase__single2	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__single2(void)$/;"	f
test_revwalk_mergebase__two_way_merge	tests/revwalk/mergebase.c	/^void test_revwalk_mergebase__two_way_merge(void)$/;"	f
test_revwalk_signatureparsing__cleanup	tests/revwalk/signatureparsing.c	/^void test_revwalk_signatureparsing__cleanup(void)$/;"	f
test_revwalk_signatureparsing__do_not_choke_when_name_contains_angle_brackets	tests/revwalk/signatureparsing.c	/^void test_revwalk_signatureparsing__do_not_choke_when_name_contains_angle_brackets(void)$/;"	f
test_revwalk_signatureparsing__initialize	tests/revwalk/signatureparsing.c	/^void test_revwalk_signatureparsing__initialize(void)$/;"	f
test_revwalk_simplify__cleanup	tests/revwalk/simplify.c	/^void test_revwalk_simplify__cleanup(void)$/;"	f
test_revwalk_simplify__first_parent	tests/revwalk/simplify.c	/^void test_revwalk_simplify__first_parent(void)$/;"	f
test_stash_drop__can_purge_the_stash_from_the_bottom	tests/stash/drop.c	/^void test_stash_drop__can_purge_the_stash_from_the_bottom(void)$/;"	f
test_stash_drop__can_purge_the_stash_from_the_top	tests/stash/drop.c	/^void test_stash_drop__can_purge_the_stash_from_the_top(void)$/;"	f
test_stash_drop__cannot_drop_a_non_existing_stashed_state	tests/stash/drop.c	/^void test_stash_drop__cannot_drop_a_non_existing_stashed_state(void)$/;"	f
test_stash_drop__cannot_drop_from_an_empty_stash	tests/stash/drop.c	/^void test_stash_drop__cannot_drop_from_an_empty_stash(void)$/;"	f
test_stash_drop__cleanup	tests/stash/drop.c	/^void test_stash_drop__cleanup(void)$/;"	f
test_stash_drop__dropping_an_entry_rewrites_reflog_history	tests/stash/drop.c	/^void test_stash_drop__dropping_an_entry_rewrites_reflog_history(void)$/;"	f
test_stash_drop__dropping_the_last_entry_removes_the_stash	tests/stash/drop.c	/^void test_stash_drop__dropping_the_last_entry_removes_the_stash(void)$/;"	f
test_stash_drop__dropping_the_top_stash_updates_the_stash_reference	tests/stash/drop.c	/^void test_stash_drop__dropping_the_top_stash_updates_the_stash_reference(void)$/;"	f
test_stash_drop__initialize	tests/stash/drop.c	/^void test_stash_drop__initialize(void)$/;"	f
test_stash_foreach__can_enumerate_a_repository	tests/stash/foreach.c	/^void test_stash_foreach__can_enumerate_a_repository(void)$/;"	f
test_stash_foreach__cleanup	tests/stash/foreach.c	/^void test_stash_foreach__cleanup(void)$/;"	f
test_stash_foreach__enumerating_a_empty_repository_doesnt_fail	tests/stash/foreach.c	/^void test_stash_foreach__enumerating_a_empty_repository_doesnt_fail(void)$/;"	f
test_stash_foreach__initialize	tests/stash/foreach.c	/^void test_stash_foreach__initialize(void)$/;"	f
test_stash_save__can_accept_a_message	tests/stash/save.c	/^void test_stash_save__can_accept_a_message(void)$/;"	f
test_stash_save__can_include_untracked_and_ignored_files	tests/stash/save.c	/^void test_stash_save__can_include_untracked_and_ignored_files(void)$/;"	f
test_stash_save__can_include_untracked_files	tests/stash/save.c	/^void test_stash_save__can_include_untracked_files(void)$/;"	f
test_stash_save__can_keep_index	tests/stash/save.c	/^void test_stash_save__can_keep_index(void)$/;"	f
test_stash_save__can_stage_normal_then_stage_untracked	tests/stash/save.c	/^void test_stash_save__can_stage_normal_then_stage_untracked(void)$/;"	f
test_stash_save__can_stash_against_a_detached_head	tests/stash/save.c	/^void test_stash_save__can_stash_against_a_detached_head(void)$/;"	f
test_stash_save__cannot_stash_against_a_bare_repository	tests/stash/save.c	/^void test_stash_save__cannot_stash_against_a_bare_repository(void)$/;"	f
test_stash_save__cannot_stash_against_an_unborn_branch	tests/stash/save.c	/^void test_stash_save__cannot_stash_against_an_unborn_branch(void)$/;"	f
test_stash_save__cannot_stash_when_there_are_no_local_change	tests/stash/save.c	/^void test_stash_save__cannot_stash_when_there_are_no_local_change(void)$/;"	f
test_stash_save__cleanup	tests/stash/save.c	/^void test_stash_save__cleanup(void)$/;"	f
test_stash_save__does_not_keep_index_by_default	tests/stash/save.c	/^void test_stash_save__does_not_keep_index_by_default(void)$/;"	f
test_stash_save__including_untracked_without_any_untracked_file_creates_an_empty_tree	tests/stash/save.c	/^void test_stash_save__including_untracked_without_any_untracked_file_creates_an_empty_tree(void)$/;"	f
test_stash_save__initialize	tests/stash/save.c	/^void test_stash_save__initialize(void)$/;"	f
test_stash_save__stashing_updates_the_reflog	tests/stash/save.c	/^void test_stash_save__stashing_updates_the_reflog(void)$/;"	f
test_stash_submodules__cleanup	tests/stash/submodules.c	/^void test_stash_submodules__cleanup(void)$/;"	f
test_stash_submodules__does_not_stash_modified_submodules	tests/stash/submodules.c	/^void test_stash_submodules__does_not_stash_modified_submodules(void)$/;"	f
test_stash_submodules__initialize	tests/stash/submodules.c	/^void test_stash_submodules__initialize(void)$/;"	f
test_stash_submodules__stash_is_empty_with_modified_submodules	tests/stash/submodules.c	/^void test_stash_submodules__stash_is_empty_with_modified_submodules(void)$/;"	f
test_status	tests/status/renames.c	/^static void test_status($/;"	f	file:
test_status_ignore__0	tests/status/ignore.c	/^void test_status_ignore__0(void)$/;"	f
test_status_ignore__1	tests/status/ignore.c	/^void test_status_ignore__1(void)$/;"	f
test_status_ignore__add_internal_as_first_thing	tests/status/ignore.c	/^void test_status_ignore__add_internal_as_first_thing(void)$/;"	f
test_status_ignore__adding_internal_ignores	tests/status/ignore.c	/^void test_status_ignore__adding_internal_ignores(void)$/;"	f
test_status_ignore__automatically_ignore_bad_files	tests/status/ignore.c	/^void test_status_ignore__automatically_ignore_bad_files(void)$/;"	f
test_status_ignore__cleanup	tests/status/ignore.c	/^void test_status_ignore__cleanup(void)$/;"	f
test_status_ignore__empty_repo_with_gitignore_rewrite	tests/status/ignore.c	/^void test_status_ignore__empty_repo_with_gitignore_rewrite(void)$/;"	f
test_status_ignore__filenames_with_special_prefixes_do_not_interfere_with_status_retrieval	tests/status/ignore.c	/^void test_status_ignore__filenames_with_special_prefixes_do_not_interfere_with_status_retrieval(void)$/;"	f
test_status_ignore__ignore_pattern_contains_space	tests/status/ignore.c	/^void test_status_ignore__ignore_pattern_contains_space(void)$/;"	f
test_status_ignore__ignore_pattern_ignorecase	tests/status/ignore.c	/^void test_status_ignore__ignore_pattern_ignorecase(void)$/;"	f
test_status_ignore__initialize	tests/status/ignore.c	/^void test_status_ignore__initialize(void)$/;"	f
test_status_ignore__internal_ignores_inside_deep_paths	tests/status/ignore.c	/^void test_status_ignore__internal_ignores_inside_deep_paths(void)$/;"	f
test_status_ignore__issue_1766_negated_ignores	tests/status/ignore.c	/^void test_status_ignore__issue_1766_negated_ignores(void)$/;"	f
test_status_ignore__subdirectories	tests/status/ignore.c	/^void test_status_ignore__subdirectories(void)$/;"	f
test_status_ignore__subdirectories_recursion	tests/status/ignore.c	/^void test_status_ignore__subdirectories_recursion(void)$/;"	f
test_status_renames__both_casechange_one	tests/status/renames.c	/^void test_status_renames__both_casechange_one(void)$/;"	f
test_status_renames__both_casechange_two	tests/status/renames.c	/^void test_status_renames__both_casechange_two(void)$/;"	f
test_status_renames__both_one	tests/status/renames.c	/^void test_status_renames__both_one(void)$/;"	f
test_status_renames__both_rename_from_rewrite	tests/status/renames.c	/^void test_status_renames__both_rename_from_rewrite(void)$/;"	f
test_status_renames__both_two	tests/status/renames.c	/^void test_status_renames__both_two(void)$/;"	f
test_status_renames__cleanup	tests/status/renames.c	/^void test_status_renames__cleanup(void)$/;"	f
test_status_renames__head2index_no_rename_from_rewrite	tests/status/renames.c	/^void test_status_renames__head2index_no_rename_from_rewrite(void)$/;"	f
test_status_renames__head2index_one	tests/status/renames.c	/^void test_status_renames__head2index_one(void)$/;"	f
test_status_renames__head2index_rename_from_rewrite	tests/status/renames.c	/^void test_status_renames__head2index_rename_from_rewrite(void)$/;"	f
test_status_renames__head2index_two	tests/status/renames.c	/^void test_status_renames__head2index_two(void)$/;"	f
test_status_renames__index2workdir_one	tests/status/renames.c	/^void test_status_renames__index2workdir_one(void)$/;"	f
test_status_renames__index2workdir_rename_from_rewrite	tests/status/renames.c	/^void test_status_renames__index2workdir_rename_from_rewrite(void)$/;"	f
test_status_renames__index2workdir_two	tests/status/renames.c	/^void test_status_renames__index2workdir_two(void)$/;"	f
test_status_renames__initialize	tests/status/renames.c	/^void test_status_renames__initialize(void)$/;"	f
test_status_renames__rewrites_only_for_renames	tests/status/renames.c	/^void test_status_renames__rewrites_only_for_renames(void)$/;"	f
test_status_renames__zero_byte_file_does_not_fail	tests/status/renames.c	/^void test_status_renames__zero_byte_file_does_not_fail(void)$/;"	f
test_status_single__hash_single_empty_file	tests/status/single.c	/^void test_status_single__hash_single_empty_file(void)$/;"	f
test_status_single__hash_single_file	tests/status/single.c	/^void test_status_single__hash_single_file(void)$/;"	f
test_status_submodules__0	tests/status/submodules.c	/^void test_status_submodules__0(void)$/;"	f
test_status_submodules__1	tests/status/submodules.c	/^void test_status_submodules__1(void)$/;"	f
test_status_submodules__api	tests/status/submodules.c	/^void test_status_submodules__api(void)$/;"	f
test_status_submodules__cleanup	tests/status/submodules.c	/^void test_status_submodules__cleanup(void)$/;"	f
test_status_submodules__dirty_workdir_only	tests/status/submodules.c	/^void test_status_submodules__dirty_workdir_only(void)$/;"	f
test_status_submodules__initialize	tests/status/submodules.c	/^void test_status_submodules__initialize(void)$/;"	f
test_status_submodules__moved_head	tests/status/submodules.c	/^void test_status_submodules__moved_head(void)$/;"	f
test_status_submodules__single_file	tests/status/submodules.c	/^void test_status_submodules__single_file(void)$/;"	f
test_status_submodules__uninitialized	tests/status/submodules.c	/^void test_status_submodules__uninitialized(void)$/;"	f
test_status_worktree__cleanup	tests/status/worktree.c	/^void test_status_worktree__cleanup(void)$/;"	f
test_status_worktree__conflict_with_diff3	tests/status/worktree.c	/^void test_status_worktree__conflict_with_diff3(void)$/;"	f
test_status_worktree__conflicted_item	tests/status/worktree.c	/^void test_status_worktree__conflicted_item(void)$/;"	f
test_status_worktree__empty_repository	tests/status/worktree.c	/^void test_status_worktree__empty_repository(void)$/;"	f
test_status_worktree__file_status_honors_case_ignorecase_regarding_untracked_files	tests/status/worktree.c	/^void test_status_worktree__file_status_honors_case_ignorecase_regarding_untracked_files(void)$/;"	f
test_status_worktree__file_status_honors_core_ignorecase_false	tests/status/worktree.c	/^void test_status_worktree__file_status_honors_core_ignorecase_false(void)$/;"	f
test_status_worktree__file_status_honors_core_ignorecase_true	tests/status/worktree.c	/^void test_status_worktree__file_status_honors_core_ignorecase_true(void)$/;"	f
test_status_worktree__filemode_changes	tests/status/worktree.c	/^void test_status_worktree__filemode_changes(void)$/;"	f
test_status_worktree__ignores	tests/status/worktree.c	/^void test_status_worktree__ignores(void)$/;"	f
test_status_worktree__interruptable_foreach	tests/status/worktree.c	/^void test_status_worktree__interruptable_foreach(void)$/;"	f
test_status_worktree__issue_592	tests/status/worktree.c	/^void test_status_worktree__issue_592(void)$/;"	f
test_status_worktree__issue_592_2	tests/status/worktree.c	/^void test_status_worktree__issue_592_2(void)$/;"	f
test_status_worktree__issue_592_3	tests/status/worktree.c	/^void test_status_worktree__issue_592_3(void)$/;"	f
test_status_worktree__issue_592_4	tests/status/worktree.c	/^void test_status_worktree__issue_592_4(void)$/;"	f
test_status_worktree__issue_592_5	tests/status/worktree.c	/^void test_status_worktree__issue_592_5(void)$/;"	f
test_status_worktree__issue_592_ignored_dirs_with_tracked_content	tests/status/worktree.c	/^void test_status_worktree__issue_592_ignored_dirs_with_tracked_content(void)$/;"	f
test_status_worktree__issue_592_ignores_0	tests/status/worktree.c	/^void test_status_worktree__issue_592_ignores_0(void)$/;"	f
test_status_worktree__line_endings_dont_count_as_changes_with_autocrlf	tests/status/worktree.c	/^void test_status_worktree__line_endings_dont_count_as_changes_with_autocrlf(void)$/;"	f
test_status_worktree__line_endings_dont_count_as_changes_with_autocrlf_issue_1397	tests/status/worktree.c	/^void test_status_worktree__line_endings_dont_count_as_changes_with_autocrlf_issue_1397(void)$/;"	f
test_status_worktree__long_filenames	tests/status/worktree.c	/^void test_status_worktree__long_filenames(void)$/;"	f
test_status_worktree__purged_worktree	tests/status/worktree.c	/^void test_status_worktree__purged_worktree(void)$/;"	f
test_status_worktree__show_index_and_workdir	tests/status/worktree.c	/^void test_status_worktree__show_index_and_workdir(void)$/;"	f
test_status_worktree__show_index_only	tests/status/worktree.c	/^void test_status_worktree__show_index_only(void)$/;"	f
test_status_worktree__show_workdir_only	tests/status/worktree.c	/^void test_status_worktree__show_workdir_only(void)$/;"	f
test_status_worktree__simple_delete	tests/status/worktree.c	/^void test_status_worktree__simple_delete(void)$/;"	f
test_status_worktree__simple_delete_indexed	tests/status/worktree.c	/^void test_status_worktree__simple_delete_indexed(void)$/;"	f
test_status_worktree__single_file	tests/status/worktree.c	/^void test_status_worktree__single_file(void)$/;"	f
test_status_worktree__single_file_empty_repo	tests/status/worktree.c	/^void test_status_worktree__single_file_empty_repo(void)$/;"	f
test_status_worktree__single_folder	tests/status/worktree.c	/^void test_status_worktree__single_folder(void)$/;"	f
test_status_worktree__single_nonexistent_file	tests/status/worktree.c	/^void test_status_worktree__single_nonexistent_file(void)$/;"	f
test_status_worktree__single_nonexistent_file_empty_repo	tests/status/worktree.c	/^void test_status_worktree__single_nonexistent_file_empty_repo(void)$/;"	f
test_status_worktree__sorting_by_case	tests/status/worktree.c	/^void test_status_worktree__sorting_by_case(void)$/;"	f
test_status_worktree__swap_subdir_and_file	tests/status/worktree.c	/^void test_status_worktree__swap_subdir_and_file(void)$/;"	f
test_status_worktree__swap_subdir_with_recurse_and_pathspec	tests/status/worktree.c	/^void test_status_worktree__swap_subdir_with_recurse_and_pathspec(void)$/;"	f
test_status_worktree__whole_repository	tests/status/worktree.c	/^void test_status_worktree__whole_repository(void)$/;"	f
test_status_worktree_init__bracket_in_filename	tests/status/worktree_init.c	/^void test_status_worktree_init__bracket_in_filename(void)$/;"	f
test_status_worktree_init__cannot_retrieve_the_status_of_a_bare_repository	tests/status/worktree_init.c	/^void test_status_worktree_init__cannot_retrieve_the_status_of_a_bare_repository(void)$/;"	f
test_status_worktree_init__disable_pathspec_match	tests/status/worktree_init.c	/^void test_status_worktree_init__disable_pathspec_match(void)$/;"	f
test_status_worktree_init__first_commit_in_progress	tests/status/worktree_init.c	/^void test_status_worktree_init__first_commit_in_progress(void)$/;"	f
test_status_worktree_init__new_staged_file_must_handle_crlf	tests/status/worktree_init.c	/^void test_status_worktree_init__new_staged_file_must_handle_crlf(void)$/;"	f
test_status_worktree_init__space_in_filename	tests/status/worktree_init.c	/^void test_status_worktree_init__space_in_filename(void)$/;"	f
test_status_worktree_init__status_file_with_clean_index_and_empty_workdir	tests/status/worktree_init.c	/^void test_status_worktree_init__status_file_with_clean_index_and_empty_workdir(void)$/;"	f
test_status_worktree_init__status_file_without_index_or_workdir	tests/status/worktree_init.c	/^void test_status_worktree_init__status_file_without_index_or_workdir(void)$/;"	f
test_stress_diff__cleanup	tests/stress/diff.c	/^void test_stress_diff__cleanup(void)$/;"	f
test_stress_diff__initialize	tests/stress/diff.c	/^void test_stress_diff__initialize(void)$/;"	f
test_stress_diff__rename_big_files	tests/stress/diff.c	/^void test_stress_diff__rename_big_files(void)$/;"	f
test_stress_diff__rename_many_files	tests/stress/diff.c	/^void test_stress_diff__rename_many_files(void)$/;"	f
test_string	tests/buf/basic.c	/^static const char *test_string = "Have you seen that? Have you seeeen that??";$/;"	v	file:
test_string	tests/core/buffer.c	/^const char *test_string = TESTSTR;$/;"	v
test_string_x2	tests/core/buffer.c	/^const char *test_string_x2 = TESTSTR TESTSTR;$/;"	v
test_submodule_lookup__accessors	tests/submodule/lookup.c	/^void test_submodule_lookup__accessors(void)$/;"	f
test_submodule_lookup__foreach	tests/submodule/lookup.c	/^void test_submodule_lookup__foreach(void)$/;"	f
test_submodule_lookup__initialize	tests/submodule/lookup.c	/^void test_submodule_lookup__initialize(void)$/;"	f
test_submodule_lookup__lookup_even_with_missing_index	tests/submodule/lookup.c	/^void test_submodule_lookup__lookup_even_with_missing_index(void)$/;"	f
test_submodule_lookup__lookup_even_with_unborn_head	tests/submodule/lookup.c	/^void test_submodule_lookup__lookup_even_with_unborn_head(void)$/;"	f
test_submodule_lookup__simple_lookup	tests/submodule/lookup.c	/^void test_submodule_lookup__simple_lookup(void)$/;"	f
test_submodule_modify__add	tests/submodule/modify.c	/^void test_submodule_modify__add(void)$/;"	f
test_submodule_modify__edit_and_save	tests/submodule/modify.c	/^void test_submodule_modify__edit_and_save(void)$/;"	f
test_submodule_modify__init	tests/submodule/modify.c	/^void test_submodule_modify__init(void)$/;"	f
test_submodule_modify__initialize	tests/submodule/modify.c	/^void test_submodule_modify__initialize(void)$/;"	f
test_submodule_modify__sync	tests/submodule/modify.c	/^void test_submodule_modify__sync(void)$/;"	f
test_submodule_status__cleanup	tests/submodule/status.c	/^void test_submodule_status__cleanup(void)$/;"	f
test_submodule_status__ignore_all	tests/submodule/status.c	/^void test_submodule_status__ignore_all(void)$/;"	f
test_submodule_status__ignore_dirty	tests/submodule/status.c	/^void test_submodule_status__ignore_dirty(void)$/;"	f
test_submodule_status__ignore_none	tests/submodule/status.c	/^void test_submodule_status__ignore_none(void)$/;"	f
test_submodule_status__ignore_untracked	tests/submodule/status.c	/^void test_submodule_status__ignore_untracked(void)$/;"	f
test_submodule_status__initialize	tests/submodule/status.c	/^void test_submodule_status__initialize(void)$/;"	f
test_submodule_status__iterator	tests/submodule/status.c	/^void test_submodule_status__iterator(void)$/;"	f
test_submodule_status__unchanged	tests/submodule/status.c	/^void test_submodule_status__unchanged(void)$/;"	f
test_submodule_status__untracked_dirs_containing_ignored_files	tests/submodule/status.c	/^void test_submodule_status__untracked_dirs_containing_ignored_files(void)$/;"	f
test_threads_basic__cache	tests/threads/basic.c	/^void test_threads_basic__cache(void)$/;"	f
test_threads_basic__cleanup	tests/threads/basic.c	/^void test_threads_basic__cleanup(void)$/;"	f
test_threads_basic__initialize	tests/threads/basic.c	/^void test_threads_basic__initialize(void)$/;"	f
test_threads_basic__multiple_init	tests/threads/basic.c	/^void test_threads_basic__multiple_init(void)$/;"	f
test_threads_refdb__cleanup	tests/threads/refdb.c	/^void test_threads_refdb__cleanup(void)$/;"	f
test_threads_refdb__edit_while_iterate	tests/threads/refdb.c	/^void test_threads_refdb__edit_while_iterate(void)$/;"	f
test_threads_refdb__initialize	tests/threads/refdb.c	/^void test_threads_refdb__initialize(void)$/;"	f
test_threads_refdb__iterator	tests/threads/refdb.c	/^void test_threads_refdb__iterator(void)$/;"	f
test_trace_trace__can_reset	tests/trace/trace.c	/^void test_trace_trace__can_reset(void)$/;"	f
test_trace_trace__can_unset	tests/trace/trace.c	/^void test_trace_trace__can_unset(void)$/;"	f
test_trace_trace__cleanup	tests/trace/trace.c	/^void test_trace_trace__cleanup(void)$/;"	f
test_trace_trace__initialize	tests/trace/trace.c	/^void test_trace_trace__initialize(void)$/;"	f
test_trace_trace__sets	tests/trace/trace.c	/^void test_trace_trace__sets(void)$/;"	f
test_trace_trace__skips_higher_level	tests/trace/trace.c	/^void test_trace_trace__skips_higher_level(void)$/;"	f
test_trace_trace__writes	tests/trace/trace.c	/^void test_trace_trace__writes(void)$/;"	f
test_trace_trace__writes_lower_level	tests/trace/trace.c	/^void test_trace_trace__writes_lower_level(void)$/;"	f
test_walk	tests/revwalk/basic.c	/^static int test_walk(git_revwalk *walk, const git_oid *root,$/;"	f	file:
test_walk_only	tests/revwalk/basic.c	/^static int test_walk_only(git_revwalk *walk,$/;"	f	file:
test_with_many	tests/stress/diff.c	/^static void test_with_many(int expected_new)$/;"	f	file:
test_write_object_permission	tests/odb/loose.c	/^void test_write_object_permission($/;"	f
test_write_pack_permission	tests/pack/packbuilder.c	/^static void test_write_pack_permission(mode_t given, mode_t expected)$/;"	f	file:
tests	tests/clar.c	/^	const struct clar_func *tests;$/;"	m	struct:clar_suite	typeref:struct:clar_suite::clar_func	file:
tests_ran	tests/clar.c	/^	int tests_ran;$/;"	m	struct:__anon23	file:
text	deps/zlib/zlib.h	/^    int     text;       \/* true if compressed data believed to be text *\/$/;"	m	struct:gz_header_s
text_chunked_source_cb	tests/object/blob/fromchunks.c	/^static int text_chunked_source_cb(char *content, size_t max_length, void *payload)$/;"	f	file:
textual_content	tests/object/blob/fromchunks.c	/^static char textual_content[] = "libgit2\\n\\r\\n\\0";$/;"	v	file:
their_entry	src/merge.h	/^	git_index_entry their_entry;$/;"	m	struct:__anon144
their_label	include/git2/checkout.h	/^	const char *their_label; \/** the name of the "their" side of conflicts *\/$/;"	m	struct:git_checkout_opts
their_mode	tests/merge/merge_helpers.h	/^	unsigned int their_mode;$/;"	m	struct:merge_reuc_entry
their_oid_str	tests/merge/merge_helpers.h	/^	char their_oid_str[41];$/;"	m	struct:merge_reuc_entry
their_path	tests/merge/merge_helpers.h	/^	char their_path[128];$/;"	m	struct:merge_name_entry
their_status	src/merge.h	/^	git_delta_t their_status;$/;"	m	struct:__anon144
theirs	include/git2/sys/index.h	/^	char *theirs;$/;"	m	struct:git_index_name_entry
theirs	src/checkout.c	/^	const git_index_entry *theirs;$/;"	m	struct:__anon122	file:
theirs	tests/checkout/conflict.c	/^	char theirs[64];$/;"	m	struct:checkout_name_entry	file:
theirs	tests/merge/merge_helpers.h	/^	struct merge_index_with_status theirs;$/;"	m	struct:merge_index_conflict_data	typeref:struct:merge_index_conflict_data::merge_index_with_status
thin_pack	src/transports/smart.h	/^		thin_pack:1;$/;"	m	struct:transport_smart_caps
thin_pack	tests/pack/indexer.c	/^static const unsigned char thin_pack[] = {$/;"	v	file:
thin_pack_len	tests/pack/indexer.c	/^static const unsigned int thin_pack_len = 78;$/;"	v	file:
third_tree	tests/object/tree/write.c	/^static const char *third_tree = "eb86d8b81d6adbd5290a935d6c9976882de98488";$/;"	v	file:
thread	src/pack-objects.c	/^	git_thread thread;$/;"	m	struct:thread_params	file:
thread_params	src/pack-objects.c	/^struct thread_params {$/;"	s	file:
threaded_find_deltas	src/pack-objects.c	/^static void *threaded_find_deltas(void *arg)$/;"	f	file:
time	deps/zlib/zlib.h	/^    uLong   time;       \/* modification time *\/$/;"	m	struct:gz_header_s
time	include/git2/types.h	/^	git_time_t time; \/** time in seconds from epoch *\/$/;"	m	struct:git_time
time	src/commit_list.h	/^	uint32_t time;$/;"	m	struct:git_commit_list_node
time	tests/commit/parse.c	/^	git_time_t time;$/;"	m	struct:__anon15	file:
timezone_names	src/date.c	/^} timezone_names[] = {$/;"	v	typeref:struct:__anon105	file:
tip_context	deps/regex/regex_internal.h	/^  unsigned int tip_context;$/;"	m	struct:re_string_t
tlno	src/blame_git.c	/^	long tlno;$/;"	m	struct:blame_chunk_cb_data	file:
tm_to_time_t	src/date.c	/^static git_time_t tm_to_time_t(const struct tm *tm)$/;"	f	file:
to	include/git2/revparse.h	/^	git_object *to;$/;"	m	struct:__anon206
to	src/fileops.c	/^	git_buf to;$/;"	m	struct:__anon37	file:
to_hex	src/oid.c	/^static char to_hex[] = "0123456789abcdef";$/;"	v	file:
to_hex	tests/core/pool.c	/^static char to_hex[] = "0123456789abcdef";$/;"	v	file:
to_root	src/fileops.c	/^	const char *to_root;$/;"	m	struct:__anon37	file:
token	deps/regex/regex_internal.h	/^  re_token_t token;$/;"	m	struct:bin_tree_t
tokens	deps/http-parser/http_parser.c	/^static const char tokens[256] = {$/;"	v	file:
top_dir	tests/core/dirent.c	/^static char *top_dir = "dir-walk";$/;"	v	file:
topo_delay	src/commit_list.h	/^			 topo_delay:1,$/;"	m	struct:git_commit_list_node
total	deps/zlib/inflate.h	/^    unsigned long total;        \/* protected copy of output count *\/$/;"	m	struct:inflate_state
total	src/commit.c	/^	size_t total;$/;"	m	struct:__anon97	file:
total	src/commit.c	/^	size_t total;$/;"	m	struct:__anon98	file:
total	src/commit.c	/^	size_t total;$/;"	m	struct:__anon99	file:
total_deltas	include/git2/types.h	/^	unsigned int total_deltas;$/;"	m	struct:git_transfer_progress
total_errors	tests/clar.c	/^	int total_errors;$/;"	m	struct:__anon23	file:
total_in	deps/zlib/zlib.h	/^    uLong    total_in;  \/* total nb of input bytes read so far *\/$/;"	m	struct:z_stream_s
total_objects	include/git2/types.h	/^	unsigned int total_objects;$/;"	m	struct:git_transfer_progress
total_out	deps/zlib/zlib.h	/^    uLong    total_out; \/* total nb of bytes output so far *\/$/;"	m	struct:z_stream_s
total_steps	examples/network/clone.c	/^	size_t total_steps;$/;"	m	struct:progress_data	file:
total_steps	src/checkout.c	/^	size_t total_steps;$/;"	m	struct:__anon121	file:
tr_static_init	deps/zlib/trees.c	/^local void tr_static_init()$/;"	f
trace_callback	tests/trace/trace.c	/^static void trace_callback(git_trace_level_t level, const char *message)$/;"	f	file:
trailer	src/indexer.c	/^	git_hash_ctx trailer;$/;"	m	struct:git_indexer	file:
trampoline	tests/clar.c	/^	jmp_buf trampoline;$/;"	m	struct:__anon23	file:
trampoline_enabled	tests/clar.c	/^	int trampoline_enabled;$/;"	m	struct:__anon23	file:
trans	deps/regex/regex_internal.h	/^  RE_TRANSLATE_TYPE trans;$/;"	m	struct:re_string_t
transferProgressCallback	tests/online/fetch.c	/^static int transferProgressCallback(const git_transfer_progress *stats, void *payload)$/;"	f	file:
transfer_cb	tests/network/fetchlocal.c	/^static int transfer_cb(const git_transfer_progress *stats, void *payload)$/;"	f	file:
transfer_encoding	src/transports/winhttp.c	/^static const wchar_t *transfer_encoding = L"Transfer-Encoding: chunked";$/;"	v	file:
transfer_progress	include/git2/remote.h	/^	int (*transfer_progress)(const git_transfer_progress *stats, void *data);$/;"	m	struct:git_remote_callbacks
transfer_progress_cb	src/push.h	/^	git_push_transfer_progress transfer_progress_cb;$/;"	m	struct:git_push
transfer_progress_cb_payload	src/push.h	/^	void *transfer_progress_cb_payload;$/;"	m	struct:git_push
transit_state	deps/regex/regexec.c	/^transit_state (reg_errcode_t *err, re_match_context_t *mctx,$/;"	f	file:
transit_state_bkref	deps/regex/regexec.c	/^transit_state_bkref (re_match_context_t *mctx, const re_node_set *nodes)$/;"	f	file:
transit_state_mb	deps/regex/regexec.c	/^transit_state_mb (re_match_context_t *mctx, re_dfastate_t *pstate)$/;"	f	file:
transport	src/remote.h	/^	git_transport *transport;$/;"	m	struct:git_remote
transport_definition	src/transport.c	/^typedef struct transport_definition {$/;"	s	file:
transport_definition	src/transport.c	/^} transport_definition;$/;"	t	typeref:struct:transport_definition	file:
transport_find_fn	src/transport.c	/^static int transport_find_fn(const char *url, git_transport_cb *callback, void **param)$/;"	f	file:
transport_local	src/transports/local.c	/^} transport_local;$/;"	t	typeref:struct:__anon78	file:
transport_smart	src/transports/smart.h	/^} transport_smart;$/;"	t	typeref:struct:__anon73
transport_smart_caps	src/transports/smart.h	/^typedef struct transport_smart_caps {$/;"	s
transport_smart_caps	src/transports/smart.h	/^} transport_smart_caps;$/;"	t	typeref:struct:transport_smart_caps
transports	src/transport.c	/^static transport_definition transports[] = {$/;"	v	file:
tree	include/git2/tree.h	/^GIT_EXTERN(const git_oid *) git_tree_id(const git_tree *tree);$/;"	v
tree	include/git2/tree.h	/^GIT_EXTERN(git_repository *) git_tree_owner(const git_tree *tree);$/;"	v
tree	include/git2/tree.h	/^GIT_EXTERN(size_t) git_tree_entrycount(const git_tree *tree);$/;"	v
tree	include/git2/tree.h	/^GIT_EXTERN(void) git_tree_free(git_tree *tree);$/;"	v
tree	src/index.h	/^	git_tree_cache *tree;$/;"	m	struct:git_index
tree	src/iterator.c	/^	git_tree *tree;$/;"	m	struct:tree_iterator_entry	file:
tree	tests/object/tree/frompath.c	/^static	git_tree *tree;$/;"	v	file:
tree	tests/odb/loose_data.h	/^static object_data tree = {$/;"	v
tree	tests/repo/headtree.c	/^static git_tree *tree;$/;"	v	file:
tree_bytes	tests/odb/loose_data.h	/^static unsigned char tree_bytes[] = {$/;"	v
tree_checker	tests/object/tree/duplicateentries.c	/^static void tree_checker($/;"	f	file:
tree_creator	tests/object/tree/duplicateentries.c	/^static void tree_creator(git_oid *out, void (*fn)(git_treebuilder *))$/;"	f	file:
tree_data	tests/object/raw/data.h	/^static unsigned char tree_data[] = {$/;"	v
tree_data	tests/odb/loose_data.h	/^static unsigned char tree_data[] = {$/;"	v
tree_desc	deps/zlib/deflate.h	/^} FAR tree_desc;$/;"	t	typeref:struct:tree_desc_s
tree_desc_s	deps/zlib/deflate.h	/^typedef struct tree_desc_s {$/;"	s
tree_entry	src/iterator.c	/^	git_index_entry tree_entry;$/;"	m	struct:__anon85	file:
tree_error	src/tree.c	/^static int tree_error(const char *str, const char *path)$/;"	f	file:
tree_id	src/commit.h	/^	git_oid tree_id;$/;"	m	struct:git_commit
tree_id	tests/object/raw/data.h	/^static char *tree_id = "dff2da90b254e1beb889d1f1f1288be1803782df";$/;"	v
tree_iterator	src/iterator.c	/^} tree_iterator;$/;"	t	typeref:struct:__anon84	file:
tree_iterator__advance	src/iterator.c	/^static int tree_iterator__advance($/;"	f	file:
tree_iterator__advance_into	src/iterator.c	/^static int tree_iterator__advance_into($/;"	f	file:
tree_iterator__at_end	src/iterator.c	/^static int tree_iterator__at_end(git_iterator *self)$/;"	f	file:
tree_iterator__ci_cmp	src/iterator.c	/^static int tree_iterator__ci_cmp(const void *a, const void *b, void *p)$/;"	f	file:
tree_iterator__create_root_frame	src/iterator.c	/^static int tree_iterator__create_root_frame(tree_iterator *ti, git_tree *tree)$/;"	f	file:
tree_iterator__current	src/iterator.c	/^static int tree_iterator__current($/;"	f	file:
tree_iterator__current_filename	src/iterator.c	/^static char *tree_iterator__current_filename($/;"	f	file:
tree_iterator__free	src/iterator.c	/^static void tree_iterator__free(git_iterator *self)$/;"	f	file:
tree_iterator__move_to_next	src/iterator.c	/^static bool tree_iterator__move_to_next($/;"	f	file:
tree_iterator__pop_all	src/iterator.c	/^static void tree_iterator__pop_all(tree_iterator *ti, bool to_end, bool final)$/;"	f	file:
tree_iterator__pop_frame	src/iterator.c	/^static bool tree_iterator__pop_frame(tree_iterator *ti, bool final)$/;"	f	file:
tree_iterator__push_frame	src/iterator.c	/^static int tree_iterator__push_frame(tree_iterator *ti)$/;"	f	file:
tree_iterator__reset	src/iterator.c	/^static int tree_iterator__reset($/;"	f	file:
tree_iterator__rewrite_filename	src/iterator.c	/^static void tree_iterator__rewrite_filename(tree_iterator *ti)$/;"	f	file:
tree_iterator__search_cmp	src/iterator.c	/^static int tree_iterator__search_cmp(const void *key, const void *val, void *p)$/;"	f	file:
tree_iterator__seek	src/iterator.c	/^static int tree_iterator__seek(git_iterator *self, const char *prefix)$/;"	f	file:
tree_iterator__set_next	src/iterator.c	/^static int tree_iterator__set_next(tree_iterator *ti, tree_iterator_frame *tf)$/;"	f	file:
tree_iterator__te_cmp	src/iterator.c	/^static int tree_iterator__te_cmp($/;"	f	file:
tree_iterator__update_entry	src/iterator.c	/^static int tree_iterator__update_entry(tree_iterator *ti)$/;"	f	file:
tree_iterator_entry	src/iterator.c	/^struct tree_iterator_entry {$/;"	s	file:
tree_iterator_entry	src/iterator.c	/^typedef struct tree_iterator_entry tree_iterator_entry;$/;"	t	typeref:struct:tree_iterator_entry	file:
tree_iterator_frame	src/iterator.c	/^struct tree_iterator_frame {$/;"	s	file:
tree_iterator_frame	src/iterator.c	/^typedef struct tree_iterator_frame tree_iterator_frame;$/;"	t	typeref:struct:tree_iterator_frame	file:
tree_iterator_test	tests/diff/iterator.c	/^static void tree_iterator_test($/;"	f	file:
tree_key_search	src/tree.c	/^static int tree_key_search($/;"	f	file:
tree_key_search	src/tree.c	/^struct tree_key_search {$/;"	s	file:
tree_obj	tests/object/raw/data.h	/^static git_rawobj tree_obj = {$/;"	v
tree_oid	tests/commit/write.c	/^static const char *tree_oid = "1810dff58d8a660512d4832e740f692884338ccd";$/;"	v	file:
tree_oid	tests/object/tree/attributes.c	/^static const char *tree_oid  = "1b05fdaa881ee45b48cbaa5e9b037d667a47745e";$/;"	v	file:
tree_oid	tests/object/tree/read.c	/^static const char *tree_oid = "1810dff58d8a660512d4832e740f692884338ccd";$/;"	v	file:
tree_oid	tests/object/tree/walk.c	/^static const char *tree_oid = "1810dff58d8a660512d4832e740f692884338ccd";$/;"	v	file:
tree_walk	src/tree.c	/^static int tree_walk($/;"	f	file:
tree_walk_context	src/pack-objects.c	/^struct tree_walk_context {$/;"	s	file:
tree_write	src/notes.c	/^static int tree_write($/;"	f	file:
treebuilder_filter_prefixed	tests/object/tree/write.c	/^static int treebuilder_filter_prefixed($/;"	f	file:
treebuilder_get	src/tree.c	/^static git_tree_entry *treebuilder_get(git_treebuilder *bld, const char *filename)$/;"	f	file:
treeish1	examples/diff.c	/^	const char *treeish1;$/;"	m	struct:opts	file:
treeish2	examples/diff.c	/^	const char *treeish2;$/;"	m	struct:opts	file:
treeish_to_tree	examples/common.c	/^void treeish_to_tree($/;"	f
treewalk_count_cb	tests/object/tree/walk.c	/^static int treewalk_count_cb($/;"	f	file:
treewalk_skip_data	tests/object/tree/walk.c	/^struct treewalk_skip_data {$/;"	s	file:
treewalk_skip_de_cb	tests/object/tree/walk.c	/^static int treewalk_skip_de_cb($/;"	f	file:
treewalk_stop_cb	tests/object/tree/walk.c	/^static int treewalk_stop_cb($/;"	f	file:
treewalk_stop_immediately_cb	tests/object/tree/walk.c	/^static int treewalk_stop_immediately_cb($/;"	f	file:
trie_node	src/oid.c	/^} trie_node;$/;"	t	typeref:union:__anon124	file:
trim_common_tail	src/blame_git.c	/^static void trim_common_tail(mmfile_t *a, mmfile_t *b, long ctx)$/;"	f	file:
trtable	deps/regex/regex_internal.h	/^  struct re_dfastate_t **trtable, **word_trtable;$/;"	m	struct:re_dfastate_t	typeref:struct:re_dfastate_t::re_dfastate_t
true	deps/regex/regex.c	75;"	d	file:
true	src/cc-compat.h	60;"	d
try_build_signature	tests/commit/signature.c	/^static int try_build_signature(const char *name, const char *email, git_time_t time, int offset)$/;"	f	file:
try_delta	src/pack-objects.c	/^static int try_delta(git_packbuilder *pb, struct unpacked *trg,$/;"	f	file:
try_lcs	src/xdiff/xhistogram.c	/^static int try_lcs($/;"	f	file:
try_parse_numeric	src/revparse.c	/^static int try_parse_numeric(int *n, const char *curly_braces_content)$/;"	f	file:
try_remove_existing_file_internal	src/config.c	/^static void try_remove_existing_file_internal($/;"	f	file:
tsort_r_cmp	src/tsort.c	/^static int tsort_r_cmp(const void *a, const void *b, void *payload)$/;"	f	file:
tsort_run	src/tsort.c	/^struct tsort_run {$/;"	s	file:
tsort_store	src/tsort.c	/^struct tsort_store {$/;"	s	file:
ttt	tests/object/message.c	18;"	d	file:
two	tests/odb/loose_data.h	/^static object_data two = {$/;"	v
two_blobs	tests/object/tree/duplicateentries.c	/^static void two_blobs(git_treebuilder *bld)$/;"	f	file:
two_bytes	tests/odb/loose_data.h	/^static unsigned char two_bytes[] = {$/;"	v
two_data	tests/object/raw/data.h	/^static unsigned char two_data[] = {$/;"	v
two_data	tests/odb/loose_data.h	/^static unsigned char two_data[] = {$/;"	v
two_id	tests/object/raw/data.h	/^static char *two_id = "78981922613b2afb6025042ff6bd878ac1994e85";$/;"	v
two_obj	tests/object/raw/data.h	/^static git_rawobj two_obj = {$/;"	v
twos	src/revwalk.h	/^	git_vector twos;$/;"	m	struct:git_revwalk
type	deps/http-parser/http_parser.h	/^  unsigned char type : 2;     \/* enum http_parser_type *\/$/;"	m	struct:http_parser
type	deps/regex/regex_internal.h	/^  bracket_elem_type type;$/;"	m	struct:__anon192
type	deps/regex/regex_internal.h	/^  re_token_type_t type : 8;$/;"	m	struct:__anon184
type	deps/regex/regex_internal.h	/^  re_token_type_t type;$/;"	m	struct:__anon184
type	include/git2/object.h	/^GIT_EXTERN(const char *) git_object_type2string(git_otype type);$/;"	v
type	include/git2/object.h	/^GIT_EXTERN(int) git_object_typeisloose(git_otype type);$/;"	v
type	include/git2/object.h	/^GIT_EXTERN(size_t) git_object__size(git_otype type);$/;"	v
type	src/cache.h	/^	int16_t    type;  \/* git_otype value *\/$/;"	m	struct:__anon90
type	src/date.c	/^	const char *type;$/;"	m	struct:typelen	file:
type	src/diff_driver.c	/^	git_diff_driver_t type;$/;"	m	struct:git_diff_driver	file:
type	src/hash/hash_win32.h	/^	enum hash_win32_prov_type type;$/;"	m	struct:git_hash_ctx	typeref:enum:git_hash_ctx::hash_win32_prov_type
type	src/hash/hash_win32.h	/^	enum hash_win32_prov_type type;$/;"	m	struct:git_hash_prov	typeref:enum:git_hash_prov::hash_win32_prov_type
type	src/iterator.h	/^	git_iterator_type_t type;$/;"	m	struct:git_iterator
type	src/merge.h	/^	git_merge_diff_type_t type;$/;"	m	struct:__anon144
type	src/odb.c	/^	git_otype type;$/;"	m	struct:__anon118	file:
type	src/odb.h	/^	git_otype type;		\/**< Type of this object. *\/$/;"	m	struct:__anon38
type	src/odb_loose.c	/^	git_otype type; \/* object type *\/$/;"	m	struct:__anon151	file:
type	src/pack-objects.h	/^	git_otype type;$/;"	m	struct:git_pobject
type	src/refs.h	/^	git_ref_t type;$/;"	m	struct:git_reference
type	src/tag.h	/^	git_otype type;$/;"	m	struct:git_tag
type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon64	typeref:enum:__anon64::git_pkt_type
type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon65	typeref:enum:__anon65::git_pkt_type
type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon66	typeref:enum:__anon66::git_pkt_type
type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon67	typeref:enum:__anon67::git_pkt_type
type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon68	typeref:enum:__anon68::git_pkt_type
type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon69	typeref:enum:__anon69::git_pkt_type
type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon70	typeref:enum:__anon70::git_pkt_type
type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon71	typeref:enum:__anon71::git_pkt_type
type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:__anon72	typeref:enum:__anon72::git_pkt_type
type	src/transports/smart.h	/^	enum git_pkt_type type;$/;"	m	struct:git_pkt_cmd	typeref:enum:git_pkt_cmd::git_pkt_type
type	tests/object/cache.c	/^	git_otype type;$/;"	m	struct:__anon21	file:
type	tests/odb/loose_data.h	/^    char          *type;   \/* object type                               *\/$/;"	m	struct:object_data
type_size_sort	src/pack-objects.c	/^static int type_size_sort(const void *_a, const void *_b)$/;"	f	file:
typelen	src/date.c	/^static const struct typelen {$/;"	s	file:
typelen	src/date.c	/^} typelen[] = {$/;"	v	typeref:struct:typelen	file:
u	src/bitvec.h	/^	} u;$/;"	m	struct:__anon162	typeref:union:__anon162::__anon163
u4	deps/zlib/crc32.c	/^           typedef unsigned short u4;$/;"	t	file:
u4	deps/zlib/crc32.c	/^         typedef unsigned long u4;$/;"	t	file:
u4	deps/zlib/crc32.c	/^       typedef unsigned int u4;$/;"	t	file:
uInt	deps/zlib/zconf.h	/^typedef unsigned int   uInt;  \/* 16 bits or more *\/$/;"	t
uIntf	deps/zlib/zconf.h	/^typedef uInt  FAR uIntf;$/;"	t
uLong	deps/zlib/zconf.h	/^typedef unsigned long  uLong; \/* 32 bits or more *\/$/;"	t
uLongf	deps/zlib/zconf.h	/^typedef uLong FAR uLongf;$/;"	t
uch	deps/zlib/zutil.h	/^typedef unsigned char  uch;$/;"	t
uchf	deps/zlib/zutil.h	/^typedef uch FAR uchf;$/;"	t
uid	include/git2/index.h	/^	unsigned int uid;$/;"	m	struct:git_index_entry
uid	src/index.c	/^	uint32_t uid;$/;"	m	struct:entry_long	file:
uid	src/index.c	/^	uint32_t uid;$/;"	m	struct:entry_short	file:
uint16_t	deps/http-parser/http_parser.h	/^typedef unsigned __int16 uint16_t;$/;"	t
uint16_t	include/git2/stdint.h	/^   typedef unsigned __int16  uint16_t;$/;"	t
uint16_t	include/git2/stdint.h	/^   typedef unsigned short    uint16_t;$/;"	t
uint32_t	deps/http-parser/http_parser.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint32_t	include/git2/stdint.h	/^   typedef unsigned __int32  uint32_t;$/;"	t
uint32_t	include/git2/stdint.h	/^   typedef unsigned int      uint32_t;$/;"	t
uint64_t	deps/http-parser/http_parser.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	include/git2/stdint.h	/^typedef unsigned __int64     uint64_t;$/;"	t
uint8_t	deps/http-parser/http_parser.h	/^typedef unsigned __int8 uint8_t;$/;"	t
uint8_t	include/git2/stdint.h	/^   typedef unsigned __int8   uint8_t;$/;"	t
uint8_t	include/git2/stdint.h	/^   typedef unsigned char     uint8_t;$/;"	t
uint_fast16_t	include/git2/stdint.h	/^typedef uint16_t  uint_fast16_t;$/;"	t
uint_fast32_t	include/git2/stdint.h	/^typedef uint32_t  uint_fast32_t;$/;"	t
uint_fast64_t	include/git2/stdint.h	/^typedef uint64_t  uint_fast64_t;$/;"	t
uint_fast8_t	include/git2/stdint.h	/^typedef uint8_t   uint_fast8_t;$/;"	t
uint_least16_t	include/git2/stdint.h	/^typedef uint16_t  uint_least16_t;$/;"	t
uint_least32_t	include/git2/stdint.h	/^typedef uint32_t  uint_least32_t;$/;"	t
uint_least64_t	include/git2/stdint.h	/^typedef uint64_t  uint_least64_t;$/;"	t
uint_least8_t	include/git2/stdint.h	/^typedef uint8_t   uint_least8_t;$/;"	t
uintmax_t	include/git2/stdint.h	/^typedef uint64_t  uintmax_t;$/;"	t
uintptr_t	include/git2/stdint.h	/^   typedef _W64 unsigned int uintptr_t;$/;"	t
uintptr_t	include/git2/stdint.h	/^   typedef unsigned __int64  uintptr_t;$/;"	t
ulg	deps/zlib/zutil.h	/^typedef unsigned long  ulg;$/;"	t
unaffected	tests/merge/workdir/dirty.c	/^static char *unaffected[][4] = {$/;"	v	file:
unescape	src/netops.c	/^static char* unescape(char *str)$/;"	f	file:
unhex	deps/http-parser/http_parser.c	/^static const int8_t unhex[256] =$/;"	v	file:
uninteresting	src/commit_list.h	/^			 uninteresting:1,$/;"	m	struct:git_commit_list_node
uniques	tests/resources/userdiff/after/file.php	/^    protected $uniques = array();$/;"	v
uniques	tests/resources/userdiff/before/file.php	/^    protected $uniques = array();$/;"	v
uniques	tests/resources/userdiff/expected/driver/diff.php	/^     protected $uniques = array();$/;"	v
uniques	tests/resources/userdiff/expected/nodriver/diff.php	/^     protected $uniques = array();$/;"	v
uniques	tests/resources/userdiff/files/file.php	/^    protected $uniques = array();$/;"	v
unmerged_index_init	tests/reset/hard.c	/^static void unmerged_index_init(git_index *index, int entries)$/;"	f	file:
unpack_ok	src/push.h	/^	bool unpack_ok;$/;"	m	struct:git_push
unpack_ok	src/transports/smart.h	/^	int unpack_ok;$/;"	m	struct:__anon72
unpack_pkt	src/transports/smart_pkt.c	/^static int unpack_pkt(git_pkt **out, const char *line, size_t len)$/;"	f	file:
unpacked	src/pack-objects.c	/^struct unpacked {$/;"	s	file:
unposix_path	tests/repo/open.c	/^static void unposix_path(git_buf *path)$/;"	f	file:
unset_upstream	src/branch.c	/^static int unset_upstream(git_config *config, const char *shortname)$/;"	f	file:
untracked	tests/checkout/typechange.c	/^	int untracked;$/;"	m	struct:__anon5	file:
unused	deps/regex/regex_internal.h	/^  char unused;$/;"	m	struct:re_backref_cache_entry
unused	src/attr_file.h	/^	git_refcount unused;$/;"	m	struct:__anon131
up	src/iterator.c	/^	tree_iterator_frame *up, *down;$/;"	m	struct:tree_iterator_frame	file:
update	src/submodule.h	/^	git_submodule_update_t update;$/;"	m	struct:git_submodule
update_branch_remote_config_entry	src/remote.c	/^static int update_branch_remote_config_entry($/;"	f	file:
update_cb	examples/network/fetch.c	/^static int update_cb(const char *refname, const git_oid *a, const git_oid *b, void *data)$/;"	f	file:
update_config_entries_cb	src/remote.c	/^static int update_config_entries_cb($/;"	f	file:
update_config_refspec	src/remote.c	/^static int update_config_refspec(const git_remote *remote, git_config *config, int direction)$/;"	f	file:
update_cur_sifted_state	deps/regex/regexec.c	/^update_cur_sifted_state (const re_match_context_t *mctx,$/;"	f	file:
update_data	src/remote.c	/^struct update_data {$/;"	s	file:
update_default	src/submodule.h	/^	git_submodule_update_t update_default;$/;"	m	struct:git_submodule
update_entry_cb	src/iterator.c	/^	int (*update_entry_cb)(fs_iterator *self);$/;"	m	struct:fs_iterator	file:
update_fetchhead	src/remote.h	/^	int update_fetchhead;$/;"	m	struct:git_remote
update_head_to_branch	src/clone.c	/^static int update_head_to_branch($/;"	f	file:
update_head_to_new_branch	src/clone.c	/^static int update_head_to_new_branch($/;"	f	file:
update_head_to_remote	src/clone.c	/^static int update_head_to_remote($/;"	f	file:
update_header_and_rehash	src/indexer.c	/^static int update_header_and_rehash(git_indexer *idx, git_transfer_progress *stats)$/;"	f	file:
update_reflog	src/stash.c	/^static int update_reflog($/;"	f	file:
update_refs_from_report	src/transports/smart_protocol.c	/^static int update_refs_from_report($/;"	f	file:
update_regs	deps/regex/regexec.c	/^update_regs (const re_dfa_t *dfa, regmatch_t *pmatch,$/;"	f	file:
update_tips	include/git2/remote.h	/^	int (*update_tips)(const char *refname, const git_oid *a, const git_oid *b, void *data);$/;"	m	struct:git_remote_callbacks
update_tips	tests/online/clone.c	/^static int update_tips(const char *refname, const git_oid *a, const git_oid *b, void *payload)$/;"	f	file:
update_tips	tests/online/fetch.c	/^static int update_tips(const char *refname, const git_oid *a, const git_oid *b, void *data)$/;"	f	file:
update_tips_for_spec	src/remote.c	/^static int update_tips_for_spec($/;"	f	file:
update_tm	src/date.c	/^static git_time_t update_tm(struct tm *tm, struct tm *now, unsigned long sec)$/;"	f	file:
updated	src/hash/hash_win32.h	/^	bool updated;$/;"	m	struct:hash_cng_ctx
updated_tip	tests/online/push_util.h	/^} updated_tip;$/;"	t	typeref:struct:__anon18
updated_tip_free	tests/online/push_util.c	/^void updated_tip_free(updated_tip *t)$/;"	f
updated_tips	tests/online/push_util.h	/^	git_vector updated_tips;$/;"	m	struct:__anon19
updates	tests/checkout/typechange.c	/^	int updates;$/;"	m	struct:__anon5	file:
updatewindow	deps/zlib/inflate.c	/^local int updatewindow(strm, out)$/;"	f
upgrade	deps/http-parser/http_parser.h	/^  unsigned char upgrade : 1;$/;"	m	struct:http_parser
upload_pack_ls_service_url	src/transports/http.c	/^static const char *upload_pack_ls_service_url = "\/info\/refs?service=git-upload-pack";$/;"	v	file:
upload_pack_ls_service_url	src/transports/winhttp.c	/^static const char *upload_pack_ls_service_url = "\/info\/refs?service=git-upload-pack";$/;"	v	file:
upload_pack_service	src/transports/http.c	/^static const char *upload_pack_service = "upload-pack";$/;"	v	file:
upload_pack_service	src/transports/winhttp.c	/^static const char *upload_pack_service = "upload-pack";$/;"	v	file:
upload_pack_service_url	src/transports/http.c	/^static const char *upload_pack_service_url = "\/git-upload-pack";$/;"	v	file:
upload_pack_service_url	src/transports/winhttp.c	/^static const char *upload_pack_service_url = "\/git-upload-pack";$/;"	v	file:
upstream	tests/refs/branches/upstream.c	/^static git_reference *branch, *upstream;$/;"	v	file:
upstream_name	tests/refs/branches/upstreamname.c	/^static git_buf upstream_name;$/;"	v	file:
url	src/remote.h	/^	char *url;$/;"	m	struct:git_remote
url	src/submodule.h	/^	char *url;$/;"	m	struct:git_submodule
url	src/transports/git.c	/^	char *url;$/;"	m	struct:__anon74	file:
url	src/transports/local.c	/^	char *url;$/;"	m	struct:__anon78	file:
url	src/transports/smart.h	/^	char *url;$/;"	m	struct:__anon73
url	src/transports/ssh.c	/^	char *url;$/;"	m	struct:__anon76	file:
url	tests/network/remote/createthenload.c	/^static char url[] = "http:\/\/github.com\/libgit2\/libgit2.git";$/;"	v	file:
url_cred	src/transports/http.c	/^	git_cred *url_cred;$/;"	m	struct:__anon81	file:
url_cred	src/transports/winhttp.c	/^	git_cred *url_cred;$/;"	m	struct:__anon63	file:
usage	examples/blame.c	/^static void usage(const char *msg, const char *arg)$/;"	f	file:
usage	examples/cat-file.c	/^static void usage(const char *message, const char *arg)$/;"	f	file:
usage	examples/diff.c	/^static void usage(const char *message, const char *arg)$/;"	f	file:
usage	examples/init.c	/^static void usage(const char *error, const char *arg)$/;"	f	file:
usage	examples/log.c	/^static void usage(const char *message, const char *arg)$/;"	f	file:
usage	examples/rev-parse.c	/^static void usage(const char *message, const char *arg)$/;"	f	file:
use_ctr	src/pack.h	/^	size_t use_ctr;$/;"	m	struct:__anon32
use_git_alloc	src/pack.c	/^static void *use_git_alloc(void *opaq, unsigned int count, unsigned int size)$/;"	f	file:
use_git_free	src/pack.c	/^static void use_git_free(void *opaq, void *ptr)$/;"	f	file:
use_ignores	src/hashsig.c	/^	int use_ignores;$/;"	m	struct:__anon101	file:
use_remote	examples/network/ls-remote.c	/^static int use_remote(git_repository *repo, char *name)$/;"	f	file:
use_ssl	src/netops.h	/^	bool use_ssl;$/;"	m	struct:gitno_connection_data
used_bkref_map	deps/regex/regex_internal.h	/^  bitset_word_t used_bkref_map;$/;"	m	struct:re_dfa_t
used_ctr	src/mwindow.h	/^	size_t used_ctr;$/;"	m	struct:git_mwindow_ctl
used_memory	src/cache.h	/^	ssize_t     used_memory;$/;"	m	struct:__anon91
user	src/netops.h	/^	char *user;$/;"	m	struct:gitno_connection_data
user	tests/network/urlparse.c	/^static char *host, *port, *path, *user, *pass;$/;"	v	file:
username	include/git2/cred_helpers.h	/^	char *username;$/;"	m	struct:git_cred_userpass_payload
username	include/git2/transport.h	/^	char *username;$/;"	m	struct:__anon243
username	include/git2/transport.h	/^	char *username;$/;"	m	struct:git_cred_ssh_custom
username	include/git2/transport.h	/^	char *username;$/;"	m	struct:git_cred_ssh_key
ush	deps/zlib/zutil.h	/^typedef unsigned short ush;$/;"	t
ushf	deps/zlib/zutil.h	/^typedef ush FAR ushf;$/;"	t
utf8_sb_map	deps/regex/regcomp.c	/^static const bitset_t utf8_sb_map = {$/;"	v	file:
va_copy	src/cc-compat.h	71;"	d
va_copy	src/cc-compat.h	73;"	d
val	deps/zlib/inftrees.h	/^    unsigned short val;         \/* offset in table or code value *\/$/;"	m	struct:__anon200
val	src/delta.c	/^	unsigned int val;$/;"	m	struct:index_entry	file:
val	src/thread-utils.h	/^	__int64 val;$/;"	m	struct:__anon108
val	src/thread-utils.h	/^	volatile long val;$/;"	m	struct:__anon107
valid	src/hash/hash_win32.h	/^	bool valid;$/;"	m	struct:hash_cryptoapi_ctx
valid_entry_name	src/tree.c	/^static int valid_entry_name(const char *filename)$/;"	f	file:
valid_filemode	src/tree.c	/^static bool valid_filemode(const int filemode)$/;"	f	file:
valid_len	deps/regex/regex_internal.h	/^  int valid_len;$/;"	m	struct:re_string_t
valid_raw_len	deps/regex/regex_internal.h	/^  int valid_raw_len;$/;"	m	struct:re_string_t
valid_repository_path	src/repository.c	/^static bool valid_repository_path(git_buf *repository_path)$/;"	f	file:
value	include/git2/config.h	/^	const char *value;$/;"	m	struct:__anon218
value	src/attr_file.h	/^	const char *value;$/;"	m	struct:__anon132
value	tests/config/validkeyname.c	/^static const char *value;$/;"	v	file:
value	tests/core/sortedcache.c	/^	int value;$/;"	m	struct:__anon27	file:
values	src/config_file.c	/^	git_strmap *values;$/;"	m	struct:__anon35	file:
values	src/hashsig.c	/^	hashsig_t values[HASHSIG_HEAP_SIZE];$/;"	m	struct:__anon100	file:
verb	src/transports/http.c	/^	const char *verb;$/;"	m	struct:__anon80	file:
verb	src/transports/winhttp.c	/^	const wchar_t *verb;$/;"	m	struct:__anon62	file:
verbose	deps/zlib/zutil.c	118;"	d	file:
verbose	examples/cat-file.c	/^	int verbose;$/;"	m	struct:opts	file:
verify_last_error	src/filebuf.c	/^static int verify_last_error(git_filebuf *file)$/;"	f	file:
verify_refs	tests/online/push.c	/^static void verify_refs(git_remote *remote, expected_ref expected_refs[], size_t expected_refs_len)$/;"	f	file:
verify_remote_refs	tests/online/push_util.c	/^void verify_remote_refs(const git_remote_head *actual_refs[], size_t actual_refs_len, const expected_ref expected_refs[], size_t expected_refs_len)$/;"	f
verify_server_cert	src/netops.c	/^static int verify_server_cert(gitno_ssl *ssl, const char *host)$/;"	f	file:
verify_tracking_branches	tests/online/push.c	/^static void verify_tracking_branches(git_remote *remote, expected_ref expected_refs[], size_t expected_refs_len)$/;"	f	file:
version	include/git2/blame.h	/^	unsigned int version;$/;"	m	struct:git_blame_options
version	include/git2/checkout.h	/^	unsigned int version;$/;"	m	struct:git_checkout_opts
version	include/git2/clone.h	/^	unsigned int version;$/;"	m	struct:git_clone_options
version	include/git2/diff.h	/^	unsigned int version;      \/**< version for the struct *\/$/;"	m	struct:__anon268
version	include/git2/diff.h	/^	unsigned int version;$/;"	m	struct:__anon272
version	include/git2/merge.h	/^	unsigned int version;$/;"	m	struct:__anon251
version	include/git2/merge.h	/^	unsigned int version;$/;"	m	struct:__anon253
version	include/git2/push.h	/^	unsigned int version;$/;"	m	struct:__anon254
version	include/git2/remote.h	/^	unsigned int version;$/;"	m	struct:git_remote_callbacks
version	include/git2/repository.h	/^	unsigned int version;$/;"	m	struct:__anon212
version	include/git2/revert.h	/^	unsigned int version;$/;"	m	struct:__anon257
version	include/git2/status.h	/^	unsigned int      version;$/;"	m	struct:__anon261
version	include/git2/sys/config.h	/^	unsigned int version;$/;"	m	struct:git_config_backend
version	include/git2/sys/filter.h	/^	unsigned int           version;$/;"	m	struct:git_filter
version	include/git2/sys/odb_backend.h	/^	unsigned int version;$/;"	m	struct:git_odb_backend
version	include/git2/sys/refdb_backend.h	/^	unsigned int version;$/;"	m	struct:git_refdb_backend
version	include/git2/transport.h	/^	unsigned int version;$/;"	m	struct:git_transport
version	src/index.c	/^	uint32_t version;$/;"	m	struct:index_header	file:
voidp	deps/zlib/zconf.h	/^typedef void       *voidp;$/;"	t
voidpc	deps/zlib/zconf.h	/^typedef void const *voidpc;$/;"	t
voidpf	deps/zlib/zconf.h	/^typedef void FAR   *voidpf;$/;"	t
vsnprintf	deps/zlib/zutil.h	203;"	d
w_bits	deps/zlib/deflate.h	/^    uInt  w_bits;        \/* log2(w_size)  (8..16) *\/$/;"	m	struct:internal_state
w_mask	deps/zlib/deflate.h	/^    uInt  w_mask;        \/* w_size - 1 *\/$/;"	m	struct:internal_state
w_size	deps/zlib/deflate.h	/^    uInt  w_size;        \/* LZ77 window size (32K by default) *\/$/;"	m	struct:internal_state
wait_while_ack	src/transports/smart_protocol.c	/^static int wait_while_ack(gitno_buffer *buf)$/;"	f	file:
walk	include/git2/revwalk.h	/^GIT_EXTERN(git_repository *) git_revwalk_repository(git_revwalk *walk);$/;"	v
walk	include/git2/revwalk.h	/^GIT_EXTERN(int) git_revwalk_hide_head(git_revwalk *walk);$/;"	v
walk	include/git2/revwalk.h	/^GIT_EXTERN(int) git_revwalk_push_head(git_revwalk *walk);$/;"	v
walk	include/git2/revwalk.h	/^GIT_EXTERN(void) git_revwalk_free(git_revwalk *walk);$/;"	v
walk	include/git2/revwalk.h	/^GIT_EXTERN(void) git_revwalk_simplify_first_parent(git_revwalk *walk);$/;"	v
walk	src/revwalk.c	/^	git_revwalk *walk;$/;"	m	struct:push_cb_data	file:
walk_and_search	src/revparse.c	/^static int walk_and_search(git_object **out, git_revwalk *walk, regex_t *regex)$/;"	f	file:
walk_common_sequence	src/xdiff/xpatience.c	/^static int walk_common_sequence(struct hashmap *map, struct entry *first,$/;"	f	file:
walk_data	tests/core/dirent.c	/^typedef struct walk_data {$/;"	s	file:
walk_data	tests/core/dirent.c	/^} walk_data;$/;"	t	typeref:struct:walk_data	file:
walker	examples/log.c	/^	git_revwalk *walker;$/;"	m	struct:log_state	file:
walker	include/git2/revwalk.h	/^GIT_EXTERN(void) git_revwalk_reset(git_revwalk *walker);$/;"	v
walking	src/revwalk.h	/^	unsigned walking:1,$/;"	m	struct:git_revwalk
was	deps/zlib/inflate.h	/^    unsigned was;               \/* initial length of match *\/$/;"	m	struct:inflate_state
wbits	deps/zlib/inflate.h	/^    unsigned wbits;             \/* log base 2 of requested window size *\/$/;"	m	struct:inflate_state
wch	deps/regex/regex_internal.h	/^    wchar_t wch;$/;"	m	union:__anon192::__anon193
wcs	deps/regex/regex_internal.h	/^  wint_t *wcs;$/;"	m	struct:re_string_t
wcscat_s	tests/clar/fs.h	11;"	d
wcscpy_s	tests/clar/fs.h	10;"	d
wcstoimax	include/git2/inttypes.h	305;"	d
wcstoumax	include/git2/inttypes.h	306;"	d
wd_oid	src/submodule.h	/^	git_oid wd_oid;$/;"	m	struct:git_submodule
weak_alias	deps/regex/regcomp.c	/^weak_alias (__re_compile_pattern, re_compile_pattern)$/;"	f
weak_alias	deps/regex/regcomp.c	/^weak_alias (__re_set_syntax, re_set_syntax)$/;"	f
weak_alias	deps/regex/regcomp.c	/^weak_alias (__regcomp, regcomp)$/;"	f
weak_alias	deps/regex/regexec.c	/^weak_alias (__re_match, re_match)$/;"	f
weak_alias	deps/regex/regexec.c	/^weak_alias (__re_match_2, re_match_2)$/;"	f
weak_alias	deps/regex/regexec.c	/^weak_alias (__re_search, re_search)$/;"	f
weak_alias	deps/regex/regexec.c	/^weak_alias (__re_set_registers, re_set_registers)$/;"	f
weekday_names	src/date.c	/^static const char *weekday_names[] = {$/;"	v	file:
whave	deps/zlib/inflate.h	/^    unsigned whave;             \/* valid bytes in the window *\/$/;"	m	struct:inflate_state
when	include/git2/types.h	/^	git_time when; \/** time when the action happened *\/$/;"	m	struct:git_signature
win32_find_existing_dirs	src/win32/findfile.c	/^static int win32_find_existing_dirs($/;"	f	file:
win32_find_git_in_path	src/win32/findfile.c	/^static int win32_find_git_in_path(git_buf *buf, const wchar_t *gitexe, const wchar_t *subdir)$/;"	f	file:
win32_find_git_in_registry	src/win32/findfile.c	/^static int win32_find_git_in_registry($/;"	f	file:
win32_kernel32_dll	src/win32/pthread.c	/^static HINSTANCE win32_kernel32_dll;$/;"	v	file:
win32_path_to_8	src/win32/findfile.c	/^static int win32_path_to_8(git_buf *path_utf8, const wchar_t *path)$/;"	f	file:
win32_pthread_initialize	src/win32/pthread.c	/^int win32_pthread_initialize(void)$/;"	f
win32_pthread_shutdown	src/win32/pthread.c	/^static void win32_pthread_shutdown(void)$/;"	f	file:
win32_srwlock_acquire_exclusive	src/win32/pthread.c	/^static win32_srwlock_fn win32_srwlock_acquire_exclusive;$/;"	v	file:
win32_srwlock_acquire_shared	src/win32/pthread.c	/^static win32_srwlock_fn win32_srwlock_acquire_shared;$/;"	v	file:
win32_srwlock_fn	src/win32/pthread.c	/^typedef void (WINAPI *win32_srwlock_fn)(GIT_SRWLOCK *);$/;"	t	file:
win32_srwlock_initialize	src/win32/pthread.c	/^static win32_srwlock_fn win32_srwlock_initialize;$/;"	v	file:
win32_srwlock_release_exclusive	src/win32/pthread.c	/^static win32_srwlock_fn win32_srwlock_release_exclusive;$/;"	v	file:
win32_srwlock_release_shared	src/win32/pthread.c	/^static win32_srwlock_fn win32_srwlock_release_shared;$/;"	v	file:
win32_walkpath	src/win32/findfile.c	/^static wchar_t* win32_walkpath(wchar_t *path, wchar_t *buf, size_t buflen)$/;"	f	file:
window	deps/zlib/deflate.h	/^    Bytef *window;$/;"	m	struct:internal_state
window	deps/zlib/inflate.h	/^    unsigned char FAR *window;  \/* allocated sliding window, if needed *\/$/;"	m	struct:inflate_state
window	src/pack-objects.c	/^	int window;$/;"	m	struct:thread_params	file:
window_map	src/mwindow.h	/^	git_map window_map;$/;"	m	struct:git_mwindow
window_memory_limit	src/pack-objects.h	/^	uint64_t window_memory_limit;$/;"	m	struct:git_packbuilder
window_size	deps/zlib/deflate.h	/^    ulg window_size;$/;"	m	struct:internal_state
windowfiles	src/mwindow.h	/^	git_vector windowfiles;$/;"	m	struct:git_mwindow_ctl
windows	src/mwindow.h	/^	git_mwindow *windows;$/;"	m	struct:git_mwindow_file
winhttp_action	src/transports/winhttp.c	/^static int winhttp_action($/;"	f	file:
winhttp_authmechanism_t	src/transports/winhttp.c	/^} winhttp_authmechanism_t;$/;"	t	typeref:enum:__anon61	file:
winhttp_close	src/transports/winhttp.c	/^static int winhttp_close(git_smart_subtransport *subtransport)$/;"	f	file:
winhttp_connect	src/transports/winhttp.c	/^static int winhttp_connect($/;"	f	file:
winhttp_free	src/transports/winhttp.c	/^static void winhttp_free(git_smart_subtransport *subtransport)$/;"	f	file:
winhttp_receivepack	src/transports/winhttp.c	/^static int winhttp_receivepack($/;"	f	file:
winhttp_receivepack_ls	src/transports/winhttp.c	/^static int winhttp_receivepack_ls($/;"	f	file:
winhttp_stream	src/transports/winhttp.c	/^} winhttp_stream;$/;"	t	typeref:struct:__anon62	file:
winhttp_stream_alloc	src/transports/winhttp.c	/^static int winhttp_stream_alloc(winhttp_subtransport *t, winhttp_stream **stream)$/;"	f	file:
winhttp_stream_connect	src/transports/winhttp.c	/^static int winhttp_stream_connect(winhttp_stream *s)$/;"	f	file:
winhttp_stream_free	src/transports/winhttp.c	/^static void winhttp_stream_free(git_smart_subtransport_stream *stream)$/;"	f	file:
winhttp_stream_read	src/transports/winhttp.c	/^static int winhttp_stream_read($/;"	f	file:
winhttp_stream_write_buffered	src/transports/winhttp.c	/^static int winhttp_stream_write_buffered($/;"	f	file:
winhttp_stream_write_chunked	src/transports/winhttp.c	/^static int winhttp_stream_write_chunked($/;"	f	file:
winhttp_stream_write_single	src/transports/winhttp.c	/^static int winhttp_stream_write_single($/;"	f	file:
winhttp_subtransport	src/transports/winhttp.c	/^} winhttp_subtransport;$/;"	t	typeref:struct:__anon63	file:
winhttp_uploadpack	src/transports/winhttp.c	/^static int winhttp_uploadpack($/;"	f	file:
winhttp_uploadpack_ls	src/transports/winhttp.c	/^static int winhttp_uploadpack_ls($/;"	f	file:
wnext	deps/zlib/inflate.h	/^    unsigned wnext;             \/* window write index *\/$/;"	m	struct:inflate_state
word_char	deps/regex/regex_internal.h	/^  bitset_t word_char;$/;"	m	struct:re_dfa_t
word_char	deps/regex/regex_internal.h	/^  re_const_bitset_ptr_t word_char;$/;"	m	struct:re_string_t
word_char	deps/regex/regex_internal.h	/^  unsigned int word_char : 1;$/;"	m	struct:__anon184
word_ops_used	deps/regex/regex_internal.h	/^  unsigned char word_ops_used;$/;"	m	struct:re_string_t
word_ops_used	deps/regex/regex_internal.h	/^  unsigned int word_ops_used : 1;$/;"	m	struct:re_dfa_t
word_pattern	src/diff_driver.c	/^	regex_t  word_pattern;$/;"	m	struct:git_diff_driver	file:
word_trtable	deps/regex/regex_internal.h	/^  struct re_dfastate_t **trtable, **word_trtable;$/;"	m	struct:re_dfastate_t	typeref:struct:re_dfastate_t::
words	src/bitvec.h	/^		uint64_t *words;$/;"	m	union:__anon162::__anon163
words	src/userdiff.h	/^	const char *words;$/;"	m	struct:__anon179
work	deps/zlib/inflate.h	/^    unsigned short work[288];   \/* work area for code table building *\/$/;"	m	struct:inflate_state
workdir	src/attr.c	/^	const char *workdir;$/;"	m	struct:__anon176	file:
workdir	src/repository.h	/^	char *workdir;$/;"	m	struct:git_repository
workdir_data	tests/filter/custom.c	/^static char workdir_data[] =$/;"	v	file:
workdir_delta2status	src/status.c	/^static unsigned int workdir_delta2status($/;"	f	file:
workdir_iterator	src/iterator.c	/^} workdir_iterator;$/;"	t	typeref:struct:__anon86	file:
workdir_iterator__enter_dir	src/iterator.c	/^static int workdir_iterator__enter_dir(fs_iterator *fi)$/;"	f	file:
workdir_iterator__free	src/iterator.c	/^static void workdir_iterator__free(git_iterator *self)$/;"	f	file:
workdir_iterator__leave_dir	src/iterator.c	/^static int workdir_iterator__leave_dir(fs_iterator *fi)$/;"	f	file:
workdir_iterator__update_entry	src/iterator.c	/^static int workdir_iterator__update_entry(fs_iterator *fi)$/;"	f	file:
workdir_iterator_test	tests/diff/iterator.c	/^static void workdir_iterator_test($/;"	f	file:
workdir_len	src/checkout.c	/^	size_t workdir_len;$/;"	m	struct:__anon121	file:
workdir_path	include/git2/repository.h	/^	const char *workdir_path;$/;"	m	struct:__anon212
working	src/pack-objects.c	/^	int working;$/;"	m	struct:thread_params	file:
wrap	deps/zlib/deflate.h	/^    int   wrap;          \/* bit 0 true for zlib, bit 1 true for gzip *\/$/;"	m	struct:internal_state
wrap	deps/zlib/inflate.h	/^    int wrap;                   \/* bit 0 true for zlib, bit 1 true for gzip *\/$/;"	m	struct:inflate_state
wrapped	src/transports/smart.h	/^	git_smart_subtransport *wrapped;$/;"	m	struct:__anon73
write	include/git2/odb_backend.h	/^	int (*write)(git_odb_stream *stream, const char *buffer, size_t len);$/;"	m	struct:git_odb_stream
write	include/git2/sys/odb_backend.h	/^	int (* write)($/;"	m	struct:git_odb_backend
write	include/git2/sys/refdb_backend.h	/^	int (*write)(git_refdb_backend *backend,$/;"	m	struct:git_refdb_backend
write	include/git2/transport.h	/^	int (*write)($/;"	m	struct:git_smart_subtransport_stream
write	src/filebuf.h	/^	int (*write)(struct git_filebuf *file, void *source, size_t len);$/;"	m	struct:git_filebuf
write	tests/generate.py	/^    def write(self):$/;"	m	class:TestSuite
write_attributes	tests/object/blob/fromchunks.c	/^static void write_attributes(git_repository *repo)$/;"	f	file:
write_cb	src/pack-objects.c	/^static int write_cb(void *buf, size_t len, void *payload)$/;"	f	file:
write_chunk	src/transports/http.c	/^static int write_chunk(gitno_socket *socket, const char *buffer, size_t len)$/;"	f	file:
write_chunk	src/transports/winhttp.c	/^static int write_chunk(HINTERNET request, const char *buffer, size_t len)$/;"	f	file:
write_deflate	src/filebuf.c	/^static int write_deflate(git_filebuf *file, void *source, size_t len)$/;"	f	file:
write_disk_entry	src/index.c	/^static int write_disk_entry(git_filebuf *file, git_index_entry *entry)$/;"	f	file:
write_entries	src/index.c	/^static int write_entries(git_index *index, git_filebuf *file)$/;"	f	file:
write_extension	src/index.c	/^static int write_extension(git_filebuf *file, struct index_extension *header, git_buf *data)$/;"	f	file:
write_file	tests/repo/discover.c	/^static void write_file(const char *path, const char *content)$/;"	f	file:
write_file_contents	tests/merge/workdir/setup.c	/^static void write_file_contents(const char *filename, const char *output)$/;"	f	file:
write_file_filtered	src/blob.c	/^static int write_file_filtered($/;"	f	file:
write_file_stream	src/blob.c	/^static int write_file_stream($/;"	f	file:
write_files	tests/merge/workdir/dirty.c	/^static void write_files(char *files[])$/;"	f	file:
write_index	src/index.c	/^static int write_index(git_index *index, git_filebuf *file)$/;"	f	file:
write_merge_head	src/merge.c	/^static int write_merge_head($/;"	f	file:
write_merge_mode	src/merge.c	/^static int write_merge_mode(git_repository *repo, unsigned int flags)$/;"	f	file:
write_merge_msg	src/merge.c	/^static int write_merge_msg($/;"	f	file:
write_merge_msg	src/revert.c	/^static int write_merge_msg($/;"	f	file:
write_name_extension	src/index.c	/^static int write_name_extension(git_index *index, git_filebuf *file)$/;"	f	file:
write_normal	src/filebuf.c	/^static int write_normal(git_filebuf *file, void *source, size_t len)$/;"	f	file:
write_object	src/pack-objects.c	/^static int write_object($/;"	f	file:
write_object_files	tests/odb/loose.c	/^static void write_object_files(object_data *d)$/;"	f	file:
write_one	src/pack-objects.c	/^static int write_one($/;"	f	file:
write_one_status	src/pack-objects.c	/^enum write_one_status {$/;"	g	file:
write_orig_head	src/merge.c	/^static int write_orig_head($/;"	f	file:
write_pack	src/pack-objects.c	/^static int write_pack(git_packbuilder *pb,$/;"	f	file:
write_pack_buf	src/pack-objects.c	/^static int write_pack_buf(void *buf, size_t size, void *data)$/;"	f	file:
write_reuc_extension	src/index.c	/^static int write_reuc_extension(git_index *index, git_filebuf *file)$/;"	f	file:
write_revert_head	src/revert.c	/^static int write_revert_head($/;"	f	file:
write_section	src/config_file.c	/^static int write_section(git_filebuf *file, const char *key)$/;"	f	file:
write_similarity_file_two	tests/diff/rename.c	/^static void write_similarity_file_two(const char *filename, size_t b_lines)$/;"	f	file:
write_symlink	src/blob.c	/^static int write_symlink($/;"	f	file:
write_table	deps/zlib/crc32.c	/^local void write_table(out, table)$/;"	f
write_tag_annotation	src/tag.c	/^static int write_tag_annotation($/;"	f	file:
write_tree	src/tree.c	/^static int write_tree($/;"	f	file:
writepack	include/git2/sys/odb_backend.h	/^	int (* writepack)($/;"	m	struct:git_odb_backend
writepack	src/transports/local.c	/^	git_odb_writepack *writepack;$/;"	m	struct:foreach_data	file:
writestream	include/git2/sys/odb_backend.h	/^	int (* writestream)($/;"	m	struct:git_odb_backend
written	src/merge.c	/^	bool written;$/;"	m	struct:merge_msg_entry	file:
written	src/odb.c	/^	size_t size, written;$/;"	m	struct:__anon118	file:
written	src/pack-objects.h	/^	int written:1,$/;"	m	struct:git_pobject
written	tests/trace/trace.c	/^static int written = 0;$/;"	v	file:
wrong_sorted_path	tests/status/status_helpers.h	/^	int wrong_sorted_path;$/;"	m	struct:__anon29
wrong_status_flags_count	tests/status/status_helpers.h	/^	int wrong_status_flags_count;$/;"	m	struct:__anon29
wsize	deps/zlib/inflate.h	/^    unsigned wsize;             \/* window size or zero if not using window *\/$/;"	m	struct:inflate_state
wt_adds	tests/index/addall.c	/^	size_t wt_adds;$/;"	m	struct:__anon7	file:
wt_dels	tests/index/addall.c	/^	size_t wt_dels;$/;"	m	struct:__anon7	file:
wt_mods	tests/index/addall.c	/^	size_t wt_mods;$/;"	m	struct:__anon7	file:
www_authenticate	src/transports/http.c	/^	git_vector www_authenticate;$/;"	m	struct:__anon81	file:
xd_new_data	src/diff_xdiff.c	/^	mmfile_t xd_old_data, xd_new_data;$/;"	m	struct:__anon51	file:
xd_old_data	src/diff_xdiff.c	/^	mmfile_t xd_old_data, xd_new_data;$/;"	m	struct:__anon51	file:
xdalgoenv_t	src/xdiff/xdiffi.h	/^} xdalgoenv_t;$/;"	t	typeref:struct:s_xdalgoenv
xdchange_t	src/xdiff/xdiffi.h	/^} xdchange_t;$/;"	t	typeref:struct:s_xdchange
xdemitcb_t	src/xdiff/xdiff.h	/^} xdemitcb_t;$/;"	t	typeref:struct:s_xdemitcb
xdemitconf_t	src/xdiff/xdiff.h	/^} xdemitconf_t;$/;"	t	typeref:struct:s_xdemitconf
xdf1	src/xdiff/xtypes.h	/^	xdfile_t xdf1, xdf2;$/;"	m	struct:s_xdfenv
xdf2	src/xdiff/xtypes.h	/^	xdfile_t xdf1, xdf2;$/;"	m	struct:s_xdfenv
xdfenv_t	src/xdiff/xtypes.h	/^} xdfenv_t;$/;"	t	typeref:struct:s_xdfenv
xdfile_t	src/xdiff/xtypes.h	/^} xdfile_t;$/;"	t	typeref:struct:s_xdfile
xdl_add_change	src/xdiff/xdiffi.c	/^static xdchange_t *xdl_add_change(xdchange_t *xscr, long i1, long i2, long chg1, long chg2) {$/;"	f	file:
xdl_append_merge	src/xdiff/xmerge.c	/^static int xdl_append_merge(xdmerge_t **merge, int mode,$/;"	f	file:
xdl_atol	src/xdiff/xutils.c	/^long xdl_atol(char const *str, char const **next) {$/;"	f
xdl_bogosqrt	src/xdiff/xutils.c	/^long xdl_bogosqrt(long n) {$/;"	f
xdl_build_script	src/xdiff/xdiffi.c	/^int xdl_build_script(xdfenv_t *xe, xdchange_t **xscr) {$/;"	f
xdl_cha_alloc	src/xdiff/xutils.c	/^void *xdl_cha_alloc(chastore_t *cha) {$/;"	f
xdl_cha_first	src/xdiff/xutils.c	/^void *xdl_cha_first(chastore_t *cha) {$/;"	f
xdl_cha_free	src/xdiff/xutils.c	/^void xdl_cha_free(chastore_t *cha) {$/;"	f
xdl_cha_init	src/xdiff/xutils.c	/^int xdl_cha_init(chastore_t *cha, long isize, long icount) {$/;"	f
xdl_cha_next	src/xdiff/xutils.c	/^void *xdl_cha_next(chastore_t *cha) {$/;"	f
xdl_change_compact	src/xdiff/xdiffi.c	/^int xdl_change_compact(xdfile_t *xdf, xdfile_t *xdfo, long flags) {$/;"	f
xdl_classify_record	src/xdiff/xprepare.c	/^static int xdl_classify_record(unsigned int pass, xdlclassifier_t *cf, xrecord_t **rhash,$/;"	f	file:
xdl_clean_mmatch	src/xdiff/xprepare.c	/^static int xdl_clean_mmatch(char const *dis, long i, long s, long e) {$/;"	f	file:
xdl_cleanup_merge	src/xdiff/xmerge.c	/^static int xdl_cleanup_merge(xdmerge_t *c)$/;"	f	file:
xdl_cleanup_records	src/xdiff/xprepare.c	/^static int xdl_cleanup_records(xdlclassifier_t *cf, xdfile_t *xdf1, xdfile_t *xdf2) {$/;"	f	file:
xdl_diff	src/xdiff/xdiffi.c	/^int xdl_diff(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,$/;"	f
xdl_do_diff	src/xdiff/xdiffi.c	/^int xdl_do_diff(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,$/;"	f
xdl_do_histogram_diff	src/xdiff/xhistogram.c	/^int xdl_do_histogram_diff(mmfile_t *file1, mmfile_t *file2,$/;"	f
xdl_do_merge	src/xdiff/xmerge.c	/^static int xdl_do_merge(xdfenv_t *xe1, xdchange_t *xscr1,$/;"	f	file:
xdl_do_patience_diff	src/xdiff/xpatience.c	/^int xdl_do_patience_diff(mmfile_t *file1, mmfile_t *file2,$/;"	f
xdl_emit_common	src/xdiff/xemit.c	/^static int xdl_emit_common(xdfenv_t *xe, xdchange_t *xscr, xdemitcb_t *ecb,$/;"	f	file:
xdl_emit_diff	src/xdiff/xemit.c	/^int xdl_emit_diff(xdfenv_t *xe, xdchange_t *xscr, xdemitcb_t *ecb,$/;"	f
xdl_emit_diffrec	src/xdiff/xutils.c	/^int xdl_emit_diffrec(char const *rec, long size, char const *pre, long psize,$/;"	f
xdl_emit_hunk_hdr	src/xdiff/xutils.c	/^int xdl_emit_hunk_hdr(long s1, long c1, long s2, long c2,$/;"	f
xdl_emit_record	src/xdiff/xemit.c	/^static int xdl_emit_record(xdfile_t *xdf, long ri, char const *pre, xdemitcb_t *ecb) {$/;"	f	file:
xdl_fall_back_diff	src/xdiff/xutils.c	/^int xdl_fall_back_diff(xdfenv_t *diff_env, xpparam_t const *xpp,$/;"	f
xdl_fill_merge_buffer	src/xdiff/xmerge.c	/^static int xdl_fill_merge_buffer(xdfenv_t *xe1, const char *name1,$/;"	f	file:
xdl_free	src/xdiff/xdiff.h	106;"	d
xdl_free_classifier	src/xdiff/xprepare.c	/^static void xdl_free_classifier(xdlclassifier_t *cf) {$/;"	f	file:
xdl_free_ctx	src/xdiff/xprepare.c	/^static void xdl_free_ctx(xdfile_t *xdf) {$/;"	f	file:
xdl_free_env	src/xdiff/xprepare.c	/^void xdl_free_env(xdfenv_t *xe) {$/;"	f
xdl_free_script	src/xdiff/xdiffi.c	/^void xdl_free_script(xdchange_t *xscr) {$/;"	f
xdl_get_hunk	src/xdiff/xemit.c	/^xdchange_t *xdl_get_hunk(xdchange_t *xscr, xdemitconf_t const *xecfg) {$/;"	f
xdl_get_rec	src/xdiff/xemit.c	/^static long xdl_get_rec(xdfile_t *xdf, long ri, char const **rec) {$/;"	f	file:
xdl_guess_lines	src/xdiff/xutils.c	/^long xdl_guess_lines(mmfile_t *mf, long sample) {$/;"	f
xdl_hash_record	src/xdiff/xutils.c	/^unsigned long xdl_hash_record(char const **data, char const *top, long flags) {$/;"	f
xdl_hash_record_with_whitespace	src/xdiff/xutils.c	/^static unsigned long xdl_hash_record_with_whitespace(char const **data,$/;"	f	file:
xdl_hashbits	src/xdiff/xutils.c	/^unsigned int xdl_hashbits(unsigned int size) {$/;"	f
xdl_init_classifier	src/xdiff/xprepare.c	/^static int xdl_init_classifier(xdlclassifier_t *cf, long size, long flags) {$/;"	f	file:
xdl_malloc	src/xdiff/xdiff.h	105;"	d
xdl_merge	src/xdiff/xmerge.c	/^int xdl_merge(mmfile_t *orig, mmfile_t *mf1, mmfile_t *mf2,$/;"	f
xdl_merge_cmp_lines	src/xdiff/xmerge.c	/^static int xdl_merge_cmp_lines(xdfenv_t *xe1, int i1, xdfenv_t *xe2, int i2,$/;"	f	file:
xdl_merge_two_conflicts	src/xdiff/xmerge.c	/^static void xdl_merge_two_conflicts(xdmerge_t *m)$/;"	f	file:
xdl_mmfile_first	src/xdiff/xutils.c	/^void *xdl_mmfile_first(mmfile_t *mmf, long *size)$/;"	f
xdl_mmfile_size	src/xdiff/xutils.c	/^long xdl_mmfile_size(mmfile_t *mmf)$/;"	f
xdl_num_out	src/xdiff/xutils.c	/^int xdl_num_out(char *out, long val) {$/;"	f
xdl_optimize_ctxs	src/xdiff/xprepare.c	/^static int xdl_optimize_ctxs(xdlclassifier_t *cf, xdfile_t *xdf1, xdfile_t *xdf2) {$/;"	f	file:
xdl_orig_copy	src/xdiff/xmerge.c	/^static int xdl_orig_copy(xdfenv_t *xe, int i, int count, int add_nl, char *dest)$/;"	f	file:
xdl_prepare_ctx	src/xdiff/xprepare.c	/^static int xdl_prepare_ctx(unsigned int pass, mmfile_t *mf, long narec, xpparam_t const *xpp,$/;"	f	file:
xdl_prepare_env	src/xdiff/xprepare.c	/^int xdl_prepare_env(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,$/;"	f
xdl_realloc	src/xdiff/xdiff.h	107;"	d
xdl_recmatch	src/xdiff/xutils.c	/^int xdl_recmatch(const char *l1, long s1, const char *l2, long s2, long flags)$/;"	f
xdl_recs_cmp	src/xdiff/xdiffi.c	/^int xdl_recs_cmp(diffdata_t *dd1, long off1, long lim1,$/;"	f
xdl_recs_copy	src/xdiff/xmerge.c	/^static int xdl_recs_copy(xdfenv_t *xe, int i, int count, int add_nl, char *dest)$/;"	f	file:
xdl_recs_copy_0	src/xdiff/xmerge.c	/^static int xdl_recs_copy_0(int use_orig, xdfenv_t *xe, int i, int count, int add_nl, char *dest)$/;"	f	file:
xdl_refine_conflicts	src/xdiff/xmerge.c	/^static int xdl_refine_conflicts(xdfenv_t *xe1, xdfenv_t *xe2, xdmerge_t *m,$/;"	f	file:
xdl_simplify_non_conflicts	src/xdiff/xmerge.c	/^static int xdl_simplify_non_conflicts(xdfenv_t *xe1, xdmerge_t *m,$/;"	f	file:
xdl_split	src/xdiff/xdiffi.c	/^static long xdl_split(unsigned long const *ha1, long off1, long lim1,$/;"	f	file:
xdl_trim_ends	src/xdiff/xprepare.c	/^static int xdl_trim_ends(xdfile_t *xdf1, xdfile_t *xdf2) {$/;"	f	file:
xdlclass_t	src/xdiff/xprepare.c	/^} xdlclass_t;$/;"	t	typeref:struct:s_xdlclass	file:
xdlclassifier_t	src/xdiff/xprepare.c	/^} xdlclassifier_t;$/;"	t	typeref:struct:s_xdlclassifier	file:
xdmerge_t	src/xdiff/xmerge.c	/^} xdmerge_t;$/;"	t	typeref:struct:s_xdmerge	file:
xdpsplit_t	src/xdiff/xdiffi.c	/^} xdpsplit_t;$/;"	t	typeref:struct:s_xdpsplit	file:
xflags	deps/zlib/zlib.h	/^    int     xflags;     \/* extra flags (not used when writing a gzip file) *\/$/;"	m	struct:gz_header_s
xmparam_t	src/xdiff/xdiff.h	/^} xmparam_t;$/;"	t	typeref:struct:s_xmparam
xo	src/diff_xdiff.c	/^	git_xdiff_output *xo;$/;"	m	struct:__anon51	file:
xpp	src/xdiff/xdiff.h	/^	xpparam_t xpp;$/;"	m	struct:s_xmparam
xpp	src/xdiff/xhistogram.c	/^	xpparam_t const *xpp;$/;"	m	struct:histindex	file:
xpp	src/xdiff/xpatience.c	/^	xpparam_t const *xpp;$/;"	m	struct:hashmap	file:
xpparam_t	src/xdiff/xdiff.h	/^} xpparam_t;$/;"	t	typeref:struct:s_xpparam
xrecord_t	src/xdiff/xtypes.h	/^} xrecord_t;$/;"	t	typeref:struct:s_xrecord
z	src/zstream.h	/^	z_stream z;$/;"	m	struct:__anon173
zError	deps/zlib/zutil.c	/^const char * ZEXPORT zError(err)$/;"	f
z_buf	src/filebuf.h	/^	unsigned char *z_buf;$/;"	m	struct:git_filebuf
z_delta_size	src/pack-objects.h	/^	unsigned long z_delta_size;$/;"	m	struct:git_pobject
z_errmsg	deps/zlib/zutil.c	/^const char * const z_errmsg[10] = {$/;"	v
z_error	deps/zlib/zutil.c	/^void ZLIB_INTERNAL z_error (m)$/;"	f
z_off64_t	deps/zlib/zconf.h	52;"	d
z_off_t	deps/zlib/zconf.h	51;"	d
z_stream	deps/zlib/zlib.h	/^} z_stream;$/;"	t	typeref:struct:z_stream_s
z_stream_s	deps/zlib/zlib.h	/^typedef struct z_stream_s {$/;"	s
z_streamp	deps/zlib/zlib.h	/^typedef z_stream FAR *z_streamp;$/;"	t
z_verbose	deps/zlib/zutil.c	/^int ZLIB_INTERNAL z_verbose = verbose;$/;"	v
zalloc	deps/zlib/zlib.h	/^    alloc_func zalloc;  \/* used to allocate the internal state *\/$/;"	m	struct:z_stream_s
zcalloc	deps/zlib/zutil.c	/^voidpf ZLIB_INTERNAL zcalloc (opaque, items, size)$/;"	f
zcalloc	deps/zlib/zutil.c	/^voidpf ZLIB_INTERNAL zcalloc (voidpf opaque, uInt items, uInt size)$/;"	f
zcalloc	deps/zlib/zutil.c	/^voidpf ZLIB_INTERNAL zcalloc (voidpf opaque, unsigned items, unsigned size)$/;"	f
zcfree	deps/zlib/zutil.c	/^void ZLIB_INTERNAL zcfree (opaque, ptr)$/;"	f
zcfree	deps/zlib/zutil.c	/^void ZLIB_INTERNAL zcfree (voidpf opaque, voidpf ptr)$/;"	f
zero	tests/odb/loose_data.h	/^static object_data zero = {$/;"	v
zero_bytes	tests/odb/loose_data.h	/^static unsigned char zero_bytes[] = {$/;"	v
zero_data	tests/object/raw/data.h	/^static unsigned char zero_data[] = {$/;"	v
zero_data	tests/odb/loose_data.h	/^static unsigned char zero_data[] = {$/;"	v
zero_id	tests/object/raw/data.h	/^static char *zero_id = "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391";$/;"	v
zero_obj	tests/object/raw/data.h	/^static git_rawobj zero_obj = {$/;"	v
zerr	src/zstream.h	/^	int zerr;$/;"	m	struct:__anon173
zfree	deps/zlib/zlib.h	/^    free_func  zfree;   \/* used to free the internal state *\/$/;"	m	struct:z_stream_s
zlibCompileFlags	deps/zlib/zutil.c	/^uLong ZEXPORT zlibCompileFlags()$/;"	f
zlibVersion	deps/zlib/zutil.c	/^const char * ZEXPORT zlibVersion()$/;"	f
zlib_version	deps/zlib/zlib.h	210;"	d
zmemcmp	deps/zlib/zutil.c	/^int ZLIB_INTERNAL zmemcmp(s1, s2, len)$/;"	f
zmemcmp	deps/zlib/zutil.h	231;"	d
zmemcmp	deps/zlib/zutil.h	235;"	d
zmemcpy	deps/zlib/zutil.c	/^void ZLIB_INTERNAL zmemcpy(dest, source, len)$/;"	f
zmemcpy	deps/zlib/zutil.h	230;"	d
zmemcpy	deps/zlib/zutil.h	234;"	d
zmemzero	deps/zlib/zutil.c	/^void ZLIB_INTERNAL zmemzero(dest, len)$/;"	f
zmemzero	deps/zlib/zutil.h	232;"	d
zmemzero	deps/zlib/zutil.h	236;"	d
zs	src/filebuf.h	/^	z_stream zs;$/;"	m	struct:git_filebuf
zstream	src/pack-objects.h	/^	git_zstream zstream;$/;"	m	struct:git_packbuilder
zstream	src/pack.h	/^	z_stream zstream;$/;"	m	struct:git_packfile_stream
zstream_seterr	src/zstream.c	/^static int zstream_seterr(git_zstream *zs)$/;"	f	file:
zterm	examples/status.c	/^    int zterm;$/;"	m	struct:opts	file:
